using System;
using System.Runtime.CompilerServices;
using Microsoft.CodeAnalysis;

[CompilerGenerated]
[Embedded]
internal sealed class IsUnmanagedAttribute : Attribute
{
}


public enum UidType
{
	NetworkableId,
	ItemContainerId,
	ItemId,
	Clear
}


public delegate void UidInspector<T>(UidType type, ref T value);


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class InputMessage : IDisposable, IPooled, IProto<InputMessage>, IProto
{
	[NonSerialized]
	public int buttons;

	[NonSerialized]
	public Vector3 aimAngles;

	[NonSerialized]
	public Vector3 mouseDelta;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(InputMessage instance)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.buttons = 0;
			instance.aimAngles = default(Vector3);
			instance.mouseDelta = default(Vector3);
			Pool.Free<InputMessage>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose InputMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(InputMessage instance)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		instance.buttons = buttons;
		instance.aimAngles = aimAngles;
		instance.mouseDelta = mouseDelta;
	}

	public InputMessage Copy()
	{
		InputMessage inputMessage = Pool.Get<InputMessage>();
		CopyTo(inputMessage);
		return inputMessage;
	}

	public static InputMessage Deserialize(BufferStream stream)
	{
		InputMessage inputMessage = Pool.Get<InputMessage>();
		Deserialize(stream, inputMessage, isDelta: false);
		return inputMessage;
	}

	public static InputMessage DeserializeLengthDelimited(BufferStream stream)
	{
		InputMessage inputMessage = Pool.Get<InputMessage>();
		DeserializeLengthDelimited(stream, inputMessage, isDelta: false);
		return inputMessage;
	}

	public static InputMessage DeserializeLength(BufferStream stream, int length)
	{
		InputMessage inputMessage = Pool.Get<InputMessage>();
		DeserializeLength(stream, length, inputMessage, isDelta: false);
		return inputMessage;
	}

	public static InputMessage Deserialize(byte[] buffer)
	{
		InputMessage inputMessage = Pool.Get<InputMessage>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, inputMessage, isDelta: false);
		return inputMessage;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, InputMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static InputMessage Deserialize(BufferStream stream, InputMessage instance, bool isDelta)
	{
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.buttons = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.aimAngles, isDelta);
				continue;
			case 26:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.mouseDelta, isDelta);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static InputMessage DeserializeLengthDelimited(BufferStream stream, InputMessage instance, bool isDelta)
	{
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.buttons = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.aimAngles, isDelta);
				continue;
			case 26:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.mouseDelta, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static InputMessage DeserializeLength(BufferStream stream, int length, InputMessage instance, bool isDelta)
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.buttons = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.aimAngles, isDelta);
				continue;
			case 26:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.mouseDelta, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, InputMessage instance, InputMessage previous)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		if (instance.buttons != previous.buttons)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.buttons);
		}
		if (instance.aimAngles != previous.aimAngles)
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.aimAngles, previous.aimAngles);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field aimAngles (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.mouseDelta != previous.mouseDelta)
		{
			stream.WriteByte(26);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.mouseDelta, previous.mouseDelta);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mouseDelta (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
	}

	public static void Serialize(BufferStream stream, InputMessage instance)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		if (instance.buttons != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.buttons);
		}
		if (instance.aimAngles != default(Vector3))
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.Serialize(stream, instance.aimAngles);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field aimAngles (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.mouseDelta != default(Vector3))
		{
			stream.WriteByte(26);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.mouseDelta);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mouseDelta (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class PlayerTick : IDisposable, IPooled, IProto<PlayerTick>, IProto
{
	[NonSerialized]
	public InputMessage inputState;

	[NonSerialized]
	public Vector3 position;

	[NonSerialized]
	public ModelState modelState;

	[NonSerialized]
	public ItemId activeItem;

	[NonSerialized]
	public Vector3 eyePos;

	[NonSerialized]
	public NetworkableId parentID;

	[NonSerialized]
	public uint deltaMs;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerTick instance)
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			if (instance.inputState != null)
			{
				instance.inputState.ResetToPool();
				instance.inputState = null;
			}
			instance.position = default(Vector3);
			if (instance.modelState != null)
			{
				instance.modelState.ResetToPool();
				instance.modelState = null;
			}
			instance.activeItem = default(ItemId);
			instance.eyePos = default(Vector3);
			instance.parentID = default(NetworkableId);
			instance.deltaMs = 0u;
			Pool.Free<PlayerTick>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerTick with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerTick instance)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		if (inputState != null)
		{
			if (instance.inputState == null)
			{
				instance.inputState = inputState.Copy();
			}
			else
			{
				inputState.CopyTo(instance.inputState);
			}
		}
		else
		{
			instance.inputState = null;
		}
		instance.position = position;
		if (modelState != null)
		{
			if (instance.modelState == null)
			{
				instance.modelState = modelState.Copy();
			}
			else
			{
				modelState.CopyTo(instance.modelState);
			}
		}
		else
		{
			instance.modelState = null;
		}
		instance.activeItem = activeItem;
		instance.eyePos = eyePos;
		instance.parentID = parentID;
		instance.deltaMs = deltaMs;
	}

	public PlayerTick Copy()
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		CopyTo(playerTick);
		return playerTick;
	}

	public static PlayerTick Deserialize(BufferStream stream)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		Deserialize(stream, playerTick, isDelta: false);
		return playerTick;
	}

	public static PlayerTick DeserializeLengthDelimited(BufferStream stream)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		DeserializeLengthDelimited(stream, playerTick, isDelta: false);
		return playerTick;
	}

	public static PlayerTick DeserializeLength(BufferStream stream, int length)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		DeserializeLength(stream, length, playerTick, isDelta: false);
		return playerTick;
	}

	public static PlayerTick Deserialize(byte[] buffer)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, playerTick, isDelta: false);
		return playerTick;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, PlayerTick previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerTick Deserialize(BufferStream stream, PlayerTick instance, bool isDelta)
	{
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.inputState == null)
				{
					instance.inputState = InputMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					InputMessage.DeserializeLengthDelimited(stream, instance.inputState, isDelta);
				}
				break;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				break;
			case 34:
				if (instance.modelState == null)
				{
					instance.modelState = ModelState.DeserializeLengthDelimited(stream);
				}
				else
				{
					ModelState.DeserializeLengthDelimited(stream, instance.modelState, isDelta);
				}
				break;
			case 40:
				instance.activeItem = new ItemId(ProtocolParser.ReadUInt64(stream));
				break;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.eyePos, isDelta);
				break;
			case 56:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				break;
			case 64:
				instance.deltaMs = ProtocolParser.ReadUInt32(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static PlayerTick DeserializeLengthDelimited(BufferStream stream, PlayerTick instance, bool isDelta)
	{
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.inputState == null)
				{
					instance.inputState = InputMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					InputMessage.DeserializeLengthDelimited(stream, instance.inputState, isDelta);
				}
				break;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				break;
			case 34:
				if (instance.modelState == null)
				{
					instance.modelState = ModelState.DeserializeLengthDelimited(stream);
				}
				else
				{
					ModelState.DeserializeLengthDelimited(stream, instance.modelState, isDelta);
				}
				break;
			case 40:
				instance.activeItem = new ItemId(ProtocolParser.ReadUInt64(stream));
				break;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.eyePos, isDelta);
				break;
			case 56:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				break;
			case 64:
				instance.deltaMs = ProtocolParser.ReadUInt32(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerTick DeserializeLength(BufferStream stream, int length, PlayerTick instance, bool isDelta)
	{
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.inputState == null)
				{
					instance.inputState = InputMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					InputMessage.DeserializeLengthDelimited(stream, instance.inputState, isDelta);
				}
				break;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				break;
			case 34:
				if (instance.modelState == null)
				{
					instance.modelState = ModelState.DeserializeLengthDelimited(stream);
				}
				else
				{
					ModelState.DeserializeLengthDelimited(stream, instance.modelState, isDelta);
				}
				break;
			case 40:
				instance.activeItem = new ItemId(ProtocolParser.ReadUInt64(stream));
				break;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.eyePos, isDelta);
				break;
			case 56:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				break;
			case 64:
				instance.deltaMs = ProtocolParser.ReadUInt32(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, PlayerTick instance, PlayerTick previous)
	{
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		if (instance.inputState == null)
		{
			throw new ArgumentNullException("inputState", "Required by proto specification.");
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(1);
		int num = stream.Position;
		InputMessage.SerializeDelta(stream, instance.inputState, previous.inputState);
		int num2 = stream.Position - num;
		if (num2 > 127)
		{
			throw new InvalidOperationException("Not enough space was reserved for the length prefix of field inputState (global::InputMessage)");
		}
		Span<byte> span = range.GetSpan();
		ProtocolParser.WriteUInt32((uint)num2, span, 0);
		if (instance.position != previous.position)
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int num3 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.position, previous.position);
			int num4 = stream.Position - num3;
			if (num4 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field position (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num4, span2, 0);
		}
		if (instance.modelState == null)
		{
			throw new ArgumentNullException("modelState", "Required by proto specification.");
		}
		stream.WriteByte(34);
		BufferStream.RangeHandle range3 = stream.GetRange(2);
		int num5 = stream.Position;
		ModelState.SerializeDelta(stream, instance.modelState, previous.modelState);
		int num6 = stream.Position - num5;
		if (num6 > 16383)
		{
			throw new InvalidOperationException("Not enough space was reserved for the length prefix of field modelState (global::ModelState)");
		}
		Span<byte> span3 = range3.GetSpan();
		if (ProtocolParser.WriteUInt32((uint)num6, span3, 0) < 2)
		{
			span3[0] |= 128;
			span3[1] = 0;
		}
		stream.WriteByte(40);
		ProtocolParser.WriteUInt64(stream, instance.activeItem.Value);
		if (instance.eyePos != previous.eyePos)
		{
			stream.WriteByte(50);
			BufferStream.RangeHandle range4 = stream.GetRange(1);
			int num7 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.eyePos, previous.eyePos);
			int num8 = stream.Position - num7;
			if (num8 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field eyePos (UnityEngine.Vector3)");
			}
			Span<byte> span4 = range4.GetSpan();
			ProtocolParser.WriteUInt32((uint)num8, span4, 0);
		}
		stream.WriteByte(56);
		ProtocolParser.WriteUInt64(stream, instance.parentID.Value);
		if (instance.deltaMs != previous.deltaMs)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt32(stream, instance.deltaMs);
		}
	}

	public static void Serialize(BufferStream stream, PlayerTick instance)
	{
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		if (instance.inputState == null)
		{
			throw new ArgumentNullException("inputState", "Required by proto specification.");
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(1);
		int num = stream.Position;
		InputMessage.Serialize(stream, instance.inputState);
		int num2 = stream.Position - num;
		if (num2 > 127)
		{
			throw new InvalidOperationException("Not enough space was reserved for the length prefix of field inputState (global::InputMessage)");
		}
		Span<byte> span = range.GetSpan();
		ProtocolParser.WriteUInt32((uint)num2, span, 0);
		if (instance.position != default(Vector3))
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int num3 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.position);
			int num4 = stream.Position - num3;
			if (num4 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field position (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num4, span2, 0);
		}
		if (instance.modelState == null)
		{
			throw new ArgumentNullException("modelState", "Required by proto specification.");
		}
		stream.WriteByte(34);
		BufferStream.RangeHandle range3 = stream.GetRange(2);
		int num5 = stream.Position;
		ModelState.Serialize(stream, instance.modelState);
		int num6 = stream.Position - num5;
		if (num6 > 16383)
		{
			throw new InvalidOperationException("Not enough space was reserved for the length prefix of field modelState (global::ModelState)");
		}
		Span<byte> span3 = range3.GetSpan();
		if (ProtocolParser.WriteUInt32((uint)num6, span3, 0) < 2)
		{
			span3[0] |= 128;
			span3[1] = 0;
		}
		if (instance.activeItem != default(ItemId))
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.activeItem.Value);
		}
		if (instance.eyePos != default(Vector3))
		{
			stream.WriteByte(50);
			BufferStream.RangeHandle range4 = stream.GetRange(1);
			int num7 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.eyePos);
			int num8 = stream.Position - num7;
			if (num8 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field eyePos (UnityEngine.Vector3)");
			}
			Span<byte> span4 = range4.GetSpan();
			ProtocolParser.WriteUInt32((uint)num8, span4, 0);
		}
		if (instance.parentID != default(NetworkableId))
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, instance.parentID.Value);
		}
		if (instance.deltaMs != 0)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt32(stream, instance.deltaMs);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		inputState?.InspectUids(action);
		modelState?.InspectUids(action);
		action(UidType.ItemId, ref activeItem.Value);
		action(UidType.NetworkableId, ref parentID.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class ModelState : IDisposable, IPooled, IProto<ModelState>, IProto
{
	public enum Flag
	{
		Ducked = 1,
		Jumped = 2,
		OnGround = 4,
		Sleeping = 8,
		Sprinting = 0x10,
		OnLadder = 0x20,
		Flying = 0x40,
		Aiming = 0x80,
		Prone = 0x100,
		Mounted = 0x200,
		Relaxed = 0x400,
		OnPhone = 0x800,
		Crawling = 0x1000,
		Loading = 0x2000,
		HeadLook = 0x4000,
		HasParachute = 0x8000,
		Blocking = 0x10000,
		Ragdolling = 0x20000,
		Catching = 0x40000
	}

	[NonSerialized]
	public float waterLevel;

	[NonSerialized]
	public Vector3 lookDir;

	[NonSerialized]
	public int flags;

	[NonSerialized]
	public int poseType;

	[NonSerialized]
	public Vector3 inheritedVelocity;

	[NonSerialized]
	public int ladderType;

	[NonSerialized]
	public Vector3 guidePosition;

	[NonSerialized]
	public Vector3 guideRotation;

	[NonSerialized]
	public uint guidePrefab;

	[NonSerialized]
	public bool guideValid;

	[NonSerialized]
	public int guideVersion;

	[NonSerialized]
	public float ducking;

	[NonSerialized]
	public Vector3 localShieldPos;

	[NonSerialized]
	public Vector3 localShieldRot;

	public bool ShouldPool = true;

	private bool _disposed;

	public bool ducked
	{
		get
		{
			return HasFlag(Flag.Ducked);
		}
		set
		{
			SetFlag(Flag.Ducked, value);
		}
	}

	public bool jumped
	{
		get
		{
			return HasFlag(Flag.Jumped);
		}
		set
		{
			SetFlag(Flag.Jumped, value);
		}
	}

	public bool onground
	{
		get
		{
			return HasFlag(Flag.OnGround);
		}
		set
		{
			SetFlag(Flag.OnGround, value);
		}
	}

	public bool sleeping
	{
		get
		{
			return HasFlag(Flag.Sleeping);
		}
		set
		{
			SetFlag(Flag.Sleeping, value);
		}
	}

	public bool sprinting
	{
		get
		{
			return HasFlag(Flag.Sprinting);
		}
		set
		{
			SetFlag(Flag.Sprinting, value);
		}
	}

	public bool onLadder
	{
		get
		{
			return HasFlag(Flag.OnLadder);
		}
		set
		{
			SetFlag(Flag.OnLadder, value);
		}
	}

	public bool flying
	{
		get
		{
			return HasFlag(Flag.Flying);
		}
		set
		{
			SetFlag(Flag.Flying, value);
		}
	}

	public bool aiming
	{
		get
		{
			return HasFlag(Flag.Aiming);
		}
		set
		{
			SetFlag(Flag.Aiming, value);
		}
	}

	public bool prone
	{
		get
		{
			return HasFlag(Flag.Prone);
		}
		set
		{
			SetFlag(Flag.Prone, value);
		}
	}

	public bool mounted
	{
		get
		{
			return HasFlag(Flag.Mounted);
		}
		set
		{
			SetFlag(Flag.Mounted, value);
		}
	}

	public bool relaxed
	{
		get
		{
			return HasFlag(Flag.Relaxed);
		}
		set
		{
			SetFlag(Flag.Relaxed, value);
		}
	}

	public bool onPhone
	{
		get
		{
			return HasFlag(Flag.OnPhone);
		}
		set
		{
			SetFlag(Flag.OnPhone, value);
		}
	}

	public bool crawling
	{
		get
		{
			return HasFlag(Flag.Crawling);
		}
		set
		{
			SetFlag(Flag.Crawling, value);
		}
	}

	public bool catching
	{
		get
		{
			return HasFlag(Flag.Catching);
		}
		set
		{
			SetFlag(Flag.Catching, value);
		}
	}

	public bool hasParachute
	{
		get
		{
			return HasFlag(Flag.HasParachute);
		}
		set
		{
			SetFlag(Flag.HasParachute, value);
		}
	}

	public bool ragdolling
	{
		get
		{
			return HasFlag(Flag.Ragdolling);
		}
		set
		{
			SetFlag(Flag.Ragdolling, value);
		}
	}

	public bool blocking
	{
		get
		{
			return HasFlag(Flag.Blocking);
		}
		set
		{
			SetFlag(Flag.Blocking, value);
		}
	}

	public bool headLook
	{
		get
		{
			return HasFlag(Flag.HeadLook);
		}
		set
		{
			SetFlag(Flag.HeadLook, value);
		}
	}

	public bool loading
	{
		get
		{
			return HasFlag(Flag.Loading);
		}
		set
		{
			SetFlag(Flag.Loading, value);
		}
	}

	public static void ResetToPool(ModelState instance)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.waterLevel = 0f;
			instance.lookDir = default(Vector3);
			instance.flags = 0;
			instance.poseType = 0;
			instance.inheritedVelocity = default(Vector3);
			instance.ladderType = 0;
			instance.guidePosition = default(Vector3);
			instance.guideRotation = default(Vector3);
			instance.guidePrefab = 0u;
			instance.guideValid = false;
			instance.guideVersion = 0;
			instance.ducking = 0f;
			instance.localShieldPos = default(Vector3);
			instance.localShieldRot = default(Vector3);
			Pool.Free<ModelState>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ModelState with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ModelState instance)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		instance.waterLevel = waterLevel;
		instance.lookDir = lookDir;
		instance.flags = flags;
		instance.poseType = poseType;
		instance.inheritedVelocity = inheritedVelocity;
		instance.ladderType = ladderType;
		instance.guidePosition = guidePosition;
		instance.guideRotation = guideRotation;
		instance.guidePrefab = guidePrefab;
		instance.guideValid = guideValid;
		instance.guideVersion = guideVersion;
		instance.ducking = ducking;
		instance.localShieldPos = localShieldPos;
		instance.localShieldRot = localShieldRot;
	}

	public ModelState Copy()
	{
		ModelState modelState = Pool.Get<ModelState>();
		CopyTo(modelState);
		return modelState;
	}

	public static ModelState Deserialize(BufferStream stream)
	{
		ModelState modelState = Pool.Get<ModelState>();
		Deserialize(stream, modelState, isDelta: false);
		return modelState;
	}

	public static ModelState DeserializeLengthDelimited(BufferStream stream)
	{
		ModelState modelState = Pool.Get<ModelState>();
		DeserializeLengthDelimited(stream, modelState, isDelta: false);
		return modelState;
	}

	public static ModelState DeserializeLength(BufferStream stream, int length)
	{
		ModelState modelState = Pool.Get<ModelState>();
		DeserializeLength(stream, length, modelState, isDelta: false);
		return modelState;
	}

	public static ModelState Deserialize(byte[] buffer)
	{
		ModelState modelState = Pool.Get<ModelState>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, modelState, isDelta: false);
		return modelState;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, ModelState previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ModelState Deserialize(BufferStream stream, ModelState instance, bool isDelta)
	{
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 37:
				instance.waterLevel = ProtocolParser.ReadSingle(stream);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.lookDir, isDelta);
				continue;
			case 88:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 96:
				instance.poseType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 106:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.inheritedVelocity, isDelta);
				continue;
			case 112:
				instance.ladderType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 122:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.guidePosition, isDelta);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			switch (key.Field)
			{
			case 16u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.guideRotation, isDelta);
				}
				break;
			case 17u:
				if (key.WireType == Wire.Varint)
				{
					instance.guidePrefab = ProtocolParser.ReadUInt32(stream);
				}
				break;
			case 18u:
				if (key.WireType == Wire.Varint)
				{
					instance.guideValid = ProtocolParser.ReadBool(stream);
				}
				break;
			case 19u:
				if (key.WireType == Wire.Varint)
				{
					instance.guideVersion = (int)ProtocolParser.ReadUInt64(stream);
				}
				break;
			case 20u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.ducking = ProtocolParser.ReadSingle(stream);
				}
				break;
			case 21u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.localShieldPos, isDelta);
				}
				break;
			case 22u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.localShieldRot, isDelta);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
	}

	public static ModelState DeserializeLengthDelimited(BufferStream stream, ModelState instance, bool isDelta)
	{
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 37:
				instance.waterLevel = ProtocolParser.ReadSingle(stream);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.lookDir, isDelta);
				continue;
			case 88:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 96:
				instance.poseType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 106:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.inheritedVelocity, isDelta);
				continue;
			case 112:
				instance.ladderType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 122:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.guidePosition, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 16u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.guideRotation, isDelta);
				}
				break;
			case 17u:
				if (key.WireType == Wire.Varint)
				{
					instance.guidePrefab = ProtocolParser.ReadUInt32(stream);
				}
				break;
			case 18u:
				if (key.WireType == Wire.Varint)
				{
					instance.guideValid = ProtocolParser.ReadBool(stream);
				}
				break;
			case 19u:
				if (key.WireType == Wire.Varint)
				{
					instance.guideVersion = (int)ProtocolParser.ReadUInt64(stream);
				}
				break;
			case 20u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.ducking = ProtocolParser.ReadSingle(stream);
				}
				break;
			case 21u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.localShieldPos, isDelta);
				}
				break;
			case 22u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.localShieldRot, isDelta);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ModelState DeserializeLength(BufferStream stream, int length, ModelState instance, bool isDelta)
	{
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 37:
				instance.waterLevel = ProtocolParser.ReadSingle(stream);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.lookDir, isDelta);
				continue;
			case 88:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 96:
				instance.poseType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 106:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.inheritedVelocity, isDelta);
				continue;
			case 112:
				instance.ladderType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 122:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.guidePosition, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 16u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.guideRotation, isDelta);
				}
				break;
			case 17u:
				if (key.WireType == Wire.Varint)
				{
					instance.guidePrefab = ProtocolParser.ReadUInt32(stream);
				}
				break;
			case 18u:
				if (key.WireType == Wire.Varint)
				{
					instance.guideValid = ProtocolParser.ReadBool(stream);
				}
				break;
			case 19u:
				if (key.WireType == Wire.Varint)
				{
					instance.guideVersion = (int)ProtocolParser.ReadUInt64(stream);
				}
				break;
			case 20u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.ducking = ProtocolParser.ReadSingle(stream);
				}
				break;
			case 21u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.localShieldPos, isDelta);
				}
				break;
			case 22u:
				if (key.WireType == Wire.LengthDelimited)
				{
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.localShieldRot, isDelta);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, ModelState instance, ModelState previous)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0350: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0314: Unknown result type (might be due to invalid IL or missing references)
		//IL_0381: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		if (instance.waterLevel != previous.waterLevel)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.waterLevel);
		}
		if (instance.lookDir != previous.lookDir)
		{
			stream.WriteByte(82);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.lookDir, previous.lookDir);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lookDir (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.flags != previous.flags)
		{
			stream.WriteByte(88);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
		if (instance.poseType != previous.poseType)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.poseType);
		}
		if (instance.inheritedVelocity != previous.inheritedVelocity)
		{
			stream.WriteByte(106);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.inheritedVelocity, previous.inheritedVelocity);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field inheritedVelocity (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
		if (instance.ladderType != previous.ladderType)
		{
			stream.WriteByte(112);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ladderType);
		}
		if (instance.guidePosition != previous.guidePosition)
		{
			stream.WriteByte(122);
			BufferStream.RangeHandle range3 = stream.GetRange(1);
			int position3 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.guidePosition, previous.guidePosition);
			int num3 = stream.Position - position3;
			if (num3 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field guidePosition (UnityEngine.Vector3)");
			}
			Span<byte> span3 = range3.GetSpan();
			ProtocolParser.WriteUInt32((uint)num3, span3, 0);
		}
		if (instance.guideRotation != previous.guideRotation)
		{
			stream.WriteByte(130);
			stream.WriteByte(1);
			BufferStream.RangeHandle range4 = stream.GetRange(1);
			int position4 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.guideRotation, previous.guideRotation);
			int num4 = stream.Position - position4;
			if (num4 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field guideRotation (UnityEngine.Vector3)");
			}
			Span<byte> span4 = range4.GetSpan();
			ProtocolParser.WriteUInt32((uint)num4, span4, 0);
		}
		if (instance.guidePrefab != previous.guidePrefab)
		{
			stream.WriteByte(136);
			stream.WriteByte(1);
			ProtocolParser.WriteUInt32(stream, instance.guidePrefab);
		}
		stream.WriteByte(144);
		stream.WriteByte(1);
		ProtocolParser.WriteBool(stream, instance.guideValid);
		if (instance.guideVersion != previous.guideVersion)
		{
			stream.WriteByte(152);
			stream.WriteByte(1);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.guideVersion);
		}
		if (instance.ducking != previous.ducking)
		{
			stream.WriteByte(165);
			stream.WriteByte(1);
			ProtocolParser.WriteSingle(stream, instance.ducking);
		}
		if (instance.localShieldPos != previous.localShieldPos)
		{
			stream.WriteByte(170);
			stream.WriteByte(1);
			BufferStream.RangeHandle range5 = stream.GetRange(1);
			int position5 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.localShieldPos, previous.localShieldPos);
			int num5 = stream.Position - position5;
			if (num5 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field localShieldPos (UnityEngine.Vector3)");
			}
			Span<byte> span5 = range5.GetSpan();
			ProtocolParser.WriteUInt32((uint)num5, span5, 0);
		}
		if (instance.localShieldRot != previous.localShieldRot)
		{
			stream.WriteByte(178);
			stream.WriteByte(1);
			BufferStream.RangeHandle range6 = stream.GetRange(1);
			int position6 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.localShieldRot, previous.localShieldRot);
			int num6 = stream.Position - position6;
			if (num6 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field localShieldRot (UnityEngine.Vector3)");
			}
			Span<byte> span6 = range6.GetSpan();
			ProtocolParser.WriteUInt32((uint)num6, span6, 0);
		}
	}

	public static void Serialize(BufferStream stream, ModelState instance)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0324: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		if (instance.waterLevel != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.waterLevel);
		}
		if (instance.lookDir != default(Vector3))
		{
			stream.WriteByte(82);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.Serialize(stream, instance.lookDir);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lookDir (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.flags != 0)
		{
			stream.WriteByte(88);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
		if (instance.poseType != 0)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.poseType);
		}
		if (instance.inheritedVelocity != default(Vector3))
		{
			stream.WriteByte(106);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.inheritedVelocity);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field inheritedVelocity (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
		if (instance.ladderType != 0)
		{
			stream.WriteByte(112);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ladderType);
		}
		if (instance.guidePosition != default(Vector3))
		{
			stream.WriteByte(122);
			BufferStream.RangeHandle range3 = stream.GetRange(1);
			int position3 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.guidePosition);
			int num3 = stream.Position - position3;
			if (num3 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field guidePosition (UnityEngine.Vector3)");
			}
			Span<byte> span3 = range3.GetSpan();
			ProtocolParser.WriteUInt32((uint)num3, span3, 0);
		}
		if (instance.guideRotation != default(Vector3))
		{
			stream.WriteByte(130);
			stream.WriteByte(1);
			BufferStream.RangeHandle range4 = stream.GetRange(1);
			int position4 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.guideRotation);
			int num4 = stream.Position - position4;
			if (num4 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field guideRotation (UnityEngine.Vector3)");
			}
			Span<byte> span4 = range4.GetSpan();
			ProtocolParser.WriteUInt32((uint)num4, span4, 0);
		}
		if (instance.guidePrefab != 0)
		{
			stream.WriteByte(136);
			stream.WriteByte(1);
			ProtocolParser.WriteUInt32(stream, instance.guidePrefab);
		}
		if (instance.guideValid)
		{
			stream.WriteByte(144);
			stream.WriteByte(1);
			ProtocolParser.WriteBool(stream, instance.guideValid);
		}
		if (instance.guideVersion != 0)
		{
			stream.WriteByte(152);
			stream.WriteByte(1);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.guideVersion);
		}
		if (instance.ducking != 0f)
		{
			stream.WriteByte(165);
			stream.WriteByte(1);
			ProtocolParser.WriteSingle(stream, instance.ducking);
		}
		if (instance.localShieldPos != default(Vector3))
		{
			stream.WriteByte(170);
			stream.WriteByte(1);
			BufferStream.RangeHandle range5 = stream.GetRange(1);
			int position5 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.localShieldPos);
			int num5 = stream.Position - position5;
			if (num5 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field localShieldPos (UnityEngine.Vector3)");
			}
			Span<byte> span5 = range5.GetSpan();
			ProtocolParser.WriteUInt32((uint)num5, span5, 0);
		}
		if (instance.localShieldRot != default(Vector3))
		{
			stream.WriteByte(178);
			stream.WriteByte(1);
			BufferStream.RangeHandle range6 = stream.GetRange(1);
			int position6 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.localShieldRot);
			int num6 = stream.Position - position6;
			if (num6 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field localShieldRot (UnityEngine.Vector3)");
			}
			Span<byte> span6 = range6.GetSpan();
			ProtocolParser.WriteUInt32((uint)num6, span6, 0);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}

	public ModelState()
	{
		onground = true;
		waterLevel = 0f;
		flying = false;
		sprinting = false;
		ducked = false;
		onLadder = false;
		sleeping = false;
		mounted = false;
		relaxed = false;
		crawling = false;
		loading = false;
		ragdolling = false;
		poseType = 0;
		ducking = 0f;
	}

	public bool HasFlag(Flag f)
	{
		return ((uint)flags & (uint)f) == (uint)f;
	}

	public void SetFlag(Flag f, bool b)
	{
		if (b)
		{
			flags |= (int)f;
		}
		else
		{
			flags &= (int)(~f);
		}
	}

	public static bool Equal(ModelState a, ModelState b)
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		if (a == b)
		{
			return true;
		}
		if (a == null || b == null)
		{
			return false;
		}
		if (a.flags != b.flags)
		{
			return false;
		}
		if (a.waterLevel != b.waterLevel)
		{
			return false;
		}
		if (a.lookDir != b.lookDir)
		{
			return false;
		}
		if (a.poseType != b.poseType)
		{
			return false;
		}
		if (a.guidePrefab != b.guidePrefab)
		{
			return false;
		}
		if (a.guidePosition != b.guidePosition)
		{
			return false;
		}
		if (a.guideRotation != b.guideRotation)
		{
			return false;
		}
		if (a.guideValid != b.guideValid)
		{
			return false;
		}
		if (a.ducking != b.ducking)
		{
			return false;
		}
		return true;
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class EffectData : IDisposable, IPooled, IProto<EffectData>, IProto
{
	[NonSerialized]
	public uint type;

	[NonSerialized]
	public uint pooledstringid;

	[NonSerialized]
	public int number;

	[NonSerialized]
	public Vector3 origin;

	[NonSerialized]
	public Vector3 normal;

	[NonSerialized]
	public float scale;

	[NonSerialized]
	public NetworkableId entity;

	[NonSerialized]
	public uint bone;

	[NonSerialized]
	public ulong source;

	[NonSerialized]
	public float distanceOverride;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(EffectData instance)
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.type = 0u;
			instance.pooledstringid = 0u;
			instance.number = 0;
			instance.origin = default(Vector3);
			instance.normal = default(Vector3);
			instance.scale = 0f;
			instance.entity = default(NetworkableId);
			instance.bone = 0u;
			instance.source = 0uL;
			instance.distanceOverride = 0f;
			Pool.Free<EffectData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose EffectData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(EffectData instance)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		instance.type = type;
		instance.pooledstringid = pooledstringid;
		instance.number = number;
		instance.origin = origin;
		instance.normal = normal;
		instance.scale = scale;
		instance.entity = entity;
		instance.bone = bone;
		instance.source = source;
		instance.distanceOverride = distanceOverride;
	}

	public EffectData Copy()
	{
		EffectData effectData = Pool.Get<EffectData>();
		CopyTo(effectData);
		return effectData;
	}

	public static EffectData Deserialize(BufferStream stream)
	{
		EffectData effectData = Pool.Get<EffectData>();
		Deserialize(stream, effectData, isDelta: false);
		return effectData;
	}

	public static EffectData DeserializeLengthDelimited(BufferStream stream)
	{
		EffectData effectData = Pool.Get<EffectData>();
		DeserializeLengthDelimited(stream, effectData, isDelta: false);
		return effectData;
	}

	public static EffectData DeserializeLength(BufferStream stream, int length)
	{
		EffectData effectData = Pool.Get<EffectData>();
		DeserializeLength(stream, length, effectData, isDelta: false);
		return effectData;
	}

	public static EffectData Deserialize(byte[] buffer)
	{
		EffectData effectData = Pool.Get<EffectData>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, effectData, isDelta: false);
		return effectData;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, EffectData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static EffectData Deserialize(BufferStream stream, EffectData instance, bool isDelta)
	{
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.type = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.pooledstringid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.number = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.origin, isDelta);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.normal, isDelta);
				continue;
			case 53:
				instance.scale = ProtocolParser.ReadSingle(stream);
				continue;
			case 56:
				instance.entity = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 64:
				instance.bone = ProtocolParser.ReadUInt32(stream);
				continue;
			case 72:
				instance.source = ProtocolParser.ReadUInt64(stream);
				continue;
			case 85:
				instance.distanceOverride = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static EffectData DeserializeLengthDelimited(BufferStream stream, EffectData instance, bool isDelta)
	{
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.type = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.pooledstringid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.number = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.origin, isDelta);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.normal, isDelta);
				continue;
			case 53:
				instance.scale = ProtocolParser.ReadSingle(stream);
				continue;
			case 56:
				instance.entity = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 64:
				instance.bone = ProtocolParser.ReadUInt32(stream);
				continue;
			case 72:
				instance.source = ProtocolParser.ReadUInt64(stream);
				continue;
			case 85:
				instance.distanceOverride = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static EffectData DeserializeLength(BufferStream stream, int length, EffectData instance, bool isDelta)
	{
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.type = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.pooledstringid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.number = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.origin, isDelta);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.normal, isDelta);
				continue;
			case 53:
				instance.scale = ProtocolParser.ReadSingle(stream);
				continue;
			case 56:
				instance.entity = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 64:
				instance.bone = ProtocolParser.ReadUInt32(stream);
				continue;
			case 72:
				instance.source = ProtocolParser.ReadUInt64(stream);
				continue;
			case 85:
				instance.distanceOverride = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, EffectData instance, EffectData previous)
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		if (instance.type != previous.type)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.type);
		}
		if (instance.pooledstringid != previous.pooledstringid)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.pooledstringid);
		}
		if (instance.number != previous.number)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.number);
		}
		if (instance.origin != previous.origin)
		{
			stream.WriteByte(34);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.origin, previous.origin);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field origin (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.normal != previous.normal)
		{
			stream.WriteByte(42);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.normal, previous.normal);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field normal (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
		if (instance.scale != previous.scale)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.scale);
		}
		stream.WriteByte(56);
		ProtocolParser.WriteUInt64(stream, instance.entity.Value);
		if (instance.bone != previous.bone)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt32(stream, instance.bone);
		}
		if (instance.source != previous.source)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, instance.source);
		}
		if (instance.distanceOverride != previous.distanceOverride)
		{
			stream.WriteByte(85);
			ProtocolParser.WriteSingle(stream, instance.distanceOverride);
		}
	}

	public static void Serialize(BufferStream stream, EffectData instance)
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		if (instance.type != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.type);
		}
		if (instance.pooledstringid != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.pooledstringid);
		}
		if (instance.number != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.number);
		}
		if (instance.origin != default(Vector3))
		{
			stream.WriteByte(34);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.Serialize(stream, instance.origin);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field origin (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.normal != default(Vector3))
		{
			stream.WriteByte(42);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.normal);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field normal (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
		if (instance.scale != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.scale);
		}
		if (instance.entity != default(NetworkableId))
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, instance.entity.Value);
		}
		if (instance.bone != 0)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt32(stream, instance.bone);
		}
		if (instance.source != 0L)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, instance.source);
		}
		if (instance.distanceOverride != 0f)
		{
			stream.WriteByte(85);
			ProtocolParser.WriteSingle(stream, instance.distanceOverride);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref entity.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public static class ProtoStreamExtensions
{
	public static void WriteToStream(this IProto proto, Stream stream, bool lengthDelimited = false, int maxSizeHint = 2097152)
	{
		if (proto == null)
		{
			throw new ArgumentNullException("proto");
		}
		if (stream == null)
		{
			throw new ArgumentNullException("stream");
		}
		using BufferStream bufferStream = Pool.Get<BufferStream>().Initialize();
		(int MaxLength, int LengthPrefixSize) lengthPrefixSize = GetLengthPrefixSize(maxSizeHint);
		int item = lengthPrefixSize.MaxLength;
		int item2 = lengthPrefixSize.LengthPrefixSize;
		BufferStream.RangeHandle rangeHandle = default(BufferStream.RangeHandle);
		if (lengthDelimited)
		{
			rangeHandle = bufferStream.GetRange(item2);
		}
		int position = bufferStream.Position;
		proto.WriteToStream(bufferStream);
		if (lengthDelimited)
		{
			int num = bufferStream.Position - position;
			if (num > item)
			{
				throw new InvalidOperationException($"Written proto exceeds maximum size hint (maxSizeHint={maxSizeHint}, actualLength={num})");
			}
			Span<byte> span = rangeHandle.GetSpan();
			int num2 = ProtocolParser.WriteUInt32((uint)num, span, 0);
			if (num2 != item2)
			{
				span[num2 - 1] |= 128;
				while (num2 < item2 - 1)
				{
					span[num2++] = 128;
				}
				span[num2] = 0;
			}
		}
		if (bufferStream.Length > 0)
		{
			ArraySegment<byte> buffer = bufferStream.GetBuffer();
			stream.Write(buffer.Array, buffer.Offset, buffer.Count);
		}
	}

	private static (int MaxLength, int LengthPrefixSize) GetLengthPrefixSize(int maxSizeHint)
	{
		if (maxSizeHint < 0)
		{
			throw new ArgumentOutOfRangeException("maxSizeHint");
		}
		if (maxSizeHint <= 127)
		{
			return (MaxLength: 127, LengthPrefixSize: 1);
		}
		if (maxSizeHint <= 16383)
		{
			return (MaxLength: 16383, LengthPrefixSize: 2);
		}
		if (maxSizeHint <= 2097151)
		{
			return (MaxLength: 2097151, LengthPrefixSize: 3);
		}
		if (maxSizeHint <= 268435455)
		{
			return (MaxLength: 16777215, LengthPrefixSize: 4);
		}
		throw new ArgumentOutOfRangeException("maxSizeHint");
	}

	public static void ReadFromStream(this IProto proto, Stream stream, bool isDelta = false, int maxSize = 1048576)
	{
		if (proto == null)
		{
			throw new ArgumentNullException("proto");
		}
		if (stream == null)
		{
			throw new ArgumentNullException("stream");
		}
		long position = stream.Position;
		byte[] array = BufferStream.Shared.ArrayPool.Rent(maxSize);
		int num = 0;
		int num2 = maxSize;
		while (num2 > 0)
		{
			int num3 = stream.Read(array, num, num2);
			if (num3 <= 0)
			{
				break;
			}
			num += num3;
			num2 -= num3;
		}
		using BufferStream bufferStream = Pool.Get<BufferStream>().Initialize(array, num);
		proto.ReadFromStream(bufferStream, isDelta);
		BufferStream.Shared.ArrayPool.Return(array);
		int position2 = bufferStream.Position;
		stream.Position = position + position2;
	}

	public static void ReadFromStream(this IProto proto, Stream stream, int length, bool isDelta = false)
	{
		if (proto == null)
		{
			throw new ArgumentNullException("proto");
		}
		if (stream == null)
		{
			throw new ArgumentNullException("stream");
		}
		if (length <= 0)
		{
			throw new ArgumentOutOfRangeException("length");
		}
		byte[] array = BufferStream.Shared.ArrayPool.Rent(length);
		int num = 0;
		int num2 = length;
		while (num2 > 0)
		{
			int num3 = stream.Read(array, num, num2);
			if (num3 <= 0)
			{
				throw new InvalidOperationException("Unexpected end of stream");
			}
			num += num3;
			num2 -= num3;
		}
		using BufferStream stream2 = Pool.Get<BufferStream>().Initialize(array, length);
		proto.ReadFromStream(stream2, isDelta);
		BufferStream.Shared.ArrayPool.Return(array);
	}

	public static void ReadFromStreamLengthDelimited(this IProto proto, Stream stream, bool isDelta = false)
	{
		if (proto == null)
		{
			throw new ArgumentNullException("proto");
		}
		if (stream == null)
		{
			throw new ArgumentNullException("stream");
		}
		int length = (int)ProtocolParser.ReadUInt32(stream);
		proto.ReadFromStream(stream, length, isDelta);
	}

	public static byte[] ToProtoBytes(this IProto proto)
	{
		if (proto == null)
		{
			throw new ArgumentNullException("proto");
		}
		using BufferStream bufferStream = Pool.Get<BufferStream>().Initialize();
		proto.WriteToStream(bufferStream);
		ArraySegment<byte> buffer = bufferStream.GetBuffer();
		byte[] array = new byte[bufferStream.Position];
		new Span<byte>(buffer.Array, buffer.Offset, buffer.Count).CopyTo(array);
		return array;
	}
}


using System;
using System.Runtime.CompilerServices;
using Facepunch;
using UnityEngine;

public sealed class BufferStream : IDisposable, IPooled
{
	public static class Shared
	{
		public static int StartingCapacity = 64;

		public static int MaximumCapacity = 536870912;

		public static int MaximumPooledSize = 67108864;

		public static readonly ArrayPool<byte> ArrayPool = new ArrayPool<byte>(MaximumPooledSize);
	}

	public readonly ref struct RangeHandle
	{
		private readonly BufferStream _stream;

		private readonly int _offset;

		private readonly int _length;

		public RangeHandle(BufferStream stream, int offset, int length)
		{
			if (offset < 0)
			{
				throw new ArgumentOutOfRangeException("offset");
			}
			if (length < 0)
			{
				throw new ArgumentOutOfRangeException("length");
			}
			_stream = stream ?? throw new ArgumentNullException("stream");
			_offset = offset;
			_length = length;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<byte> GetSpan()
		{
			return new Span<byte>(_stream._buffer, _offset, _length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public ArraySegment<byte> GetSegment()
		{
			return new ArraySegment<byte>(_stream._buffer, _offset, _length);
		}
	}

	private bool _isBufferOwned;

	private byte[] _buffer;

	private int _length;

	private int _position;

	public int Length
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			return _length;
		}
		set
		{
			if (value < 0)
			{
				throw new ArgumentOutOfRangeException("value");
			}
			if (_position > value)
			{
				throw new InvalidOperationException("Cannot shrink buffer below current position!");
			}
			int num = value - _length;
			if (num > 0)
			{
				EnsureCapacity(num);
			}
			_length = value;
		}
	}

	public int Position
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			return _position;
		}
		set
		{
			if (value < 0 || value > _length)
			{
				throw new ArgumentOutOfRangeException("value");
			}
			_position = value;
		}
	}

	public BufferStream Initialize()
	{
		_isBufferOwned = true;
		_buffer = null;
		_length = 0;
		_position = 0;
		return this;
	}

	public BufferStream Initialize(Span<byte> buffer)
	{
		_isBufferOwned = true;
		_buffer = null;
		_length = buffer.Length;
		_position = 0;
		EnsureCapacity(buffer.Length);
		buffer.CopyTo(_buffer);
		return this;
	}

	public BufferStream Initialize(byte[] buffer, int length = -1)
	{
		if (buffer == null)
		{
			throw new ArgumentNullException("buffer");
		}
		if (length > buffer.Length)
		{
			throw new ArgumentOutOfRangeException("length");
		}
		_isBufferOwned = false;
		_buffer = buffer;
		_length = ((length < 0) ? buffer.Length : length);
		_position = 0;
		return this;
	}

	public void Dispose()
	{
		if (_isBufferOwned && _buffer != null)
		{
			ReturnBuffer(_buffer);
		}
		_buffer = null;
		BufferStream bufferStream = this;
		Pool.Free<BufferStream>(ref bufferStream);
	}

	void IPooled.EnterPool()
	{
		if (_isBufferOwned && _buffer != null)
		{
			ReturnBuffer(_buffer);
		}
		_buffer = null;
	}

	void IPooled.LeavePool()
	{
	}

	public void Clear()
	{
		_length = 0;
		_position = 0;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public int ReadByte()
	{
		if (_position >= _length)
		{
			return -1;
		}
		return _buffer[_position++];
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void WriteByte(byte b)
	{
		EnsureCapacity(1);
		_buffer[_position++] = b;
		_length = Math.Max(_length, _position);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T Read<T>() where T : unmanaged
	{
		int num = Unsafe.SizeOf<T>();
		if (_length - _position < num)
		{
			ThrowReadOutOfBounds();
		}
		ref T reference = ref Unsafe.As<byte, T>(ref _buffer[_position]);
		_position += num;
		return reference;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T Peek<T>() where T : unmanaged
	{
		int num = Unsafe.SizeOf<T>();
		if (_length - _position < num)
		{
			ThrowReadOutOfBounds();
		}
		return Unsafe.As<byte, T>(ref _buffer[_position]);
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	private void ThrowReadOutOfBounds()
	{
		throw new InvalidOperationException("Attempted to read past the end of the BufferStream");
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void Write<T>(T value) where T : unmanaged
	{
		int num = Unsafe.SizeOf<T>();
		EnsureCapacity(num);
		Unsafe.As<byte, T>(ref _buffer[_position]) = value;
		_position += num;
		_length = Math.Max(_length, _position);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public RangeHandle GetRange(int count)
	{
		EnsureCapacity(count);
		RangeHandle result = new RangeHandle(this, _position, count);
		_position += count;
		_length = Math.Max(_length, _position);
		return result;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void Skip(int count)
	{
		_position += count;
	}

	public ArraySegment<byte> GetBuffer()
	{
		if (_length == 0)
		{
			return new ArraySegment<byte>(Array.Empty<byte>(), 0, 0);
		}
		return new ArraySegment<byte>(_buffer, 0, _length);
	}

	private void EnsureCapacity(int spaceRequired)
	{
		if (spaceRequired < 0)
		{
			throw new ArgumentOutOfRangeException("spaceRequired");
		}
		if (_buffer == null)
		{
			if (!_isBufferOwned)
			{
				throw new InvalidOperationException("Cannot allocate for BufferStream that doesn't own the buffer (did you forget to call Initialize?)");
			}
			int num = ((spaceRequired <= Shared.StartingCapacity) ? Shared.StartingCapacity : spaceRequired);
			int num2 = Mathf.NextPowerOfTwo(num);
			if (num2 > Shared.MaximumCapacity)
			{
				throw new Exception($"Preventing BufferStream buffer from growing too large (requiredLength={num})");
			}
			_buffer = RentBuffer(num2);
		}
		else if (_buffer.Length - _position < spaceRequired)
		{
			int num3 = _position + spaceRequired;
			int num4 = Mathf.NextPowerOfTwo(Math.Max(num3, _buffer.Length));
			if (!_isBufferOwned)
			{
				throw new InvalidOperationException($"Cannot grow buffer for BufferStream that doesn't own the buffer (requiredLength={num3})");
			}
			if (num4 > Shared.MaximumCapacity)
			{
				throw new Exception($"Preventing BufferStream buffer from growing too large (requiredLength={num3})");
			}
			byte[] array = RentBuffer(num4);
			Buffer.BlockCopy(_buffer, 0, array, 0, _length);
			ReturnBuffer(_buffer);
			_buffer = array;
		}
	}

	private static byte[] RentBuffer(int minSize)
	{
		if (minSize > Shared.MaximumPooledSize)
		{
			return new byte[minSize];
		}
		return Shared.ArrayPool.Rent(minSize);
	}

	private static void ReturnBuffer(byte[] buffer)
	{
		if (buffer != null && buffer.Length <= Shared.MaximumPooledSize)
		{
			Shared.ArrayPool.Return(buffer);
		}
	}
}


public interface IStreamReader
{
	byte UInt8();

	ushort UInt16();

	uint UInt32();

	ulong UInt64();

	sbyte Int8();

	short Int16();

	int Int32();

	long Int64();

	bool Bool();

	float Float();

	double Double();

	uint VarUInt32();

	string StringRaw(int maxLength, bool variableLength = false);

	byte[] BytesWithSize(uint maxLength, bool variableLength = false);
}


public interface IStreamWriter
{
	void UInt8(byte val);

	void UInt16(ushort val);

	void UInt32(uint val);

	void UInt64(ulong val);

	void Int8(sbyte val);

	void Int16(short val);

	void Int32(int val);

	void Int64(long val);

	void Bool(bool val);

	void Float(float val);

	void Double(double val);

	void Bytes(byte[] val);

	void BytesWithSize(byte[] val, bool variableLength = false);

	void String(string val, bool variableLength = false);
}


using System;

public struct ItemContainerId : IEquatable<ItemContainerId>
{
	public ulong Value;

	public static readonly ItemContainerId Invalid = new ItemContainerId(ulong.MaxValue);

	public bool IsValid => Value != 0;

	public ItemContainerId(ulong value)
	{
		Value = value;
	}

	public override string ToString()
	{
		return Value.ToString("G");
	}

	public bool Equals(ItemContainerId other)
	{
		return Value == other.Value;
	}

	public override bool Equals(object obj)
	{
		if (obj is ItemContainerId other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return Value.GetHashCode();
	}

	public static bool operator ==(ItemContainerId left, ItemContainerId right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(ItemContainerId left, ItemContainerId right)
	{
		return !left.Equals(right);
	}
}


using System;

public struct ItemId : IEquatable<ItemId>
{
	public ulong Value;

	public bool IsValid => Value != 0;

	public ItemId(ulong value)
	{
		Value = value;
	}

	public override string ToString()
	{
		return Value.ToString("G");
	}

	public bool Equals(ItemId other)
	{
		return Value == other.Value;
	}

	public override bool Equals(object obj)
	{
		if (obj is ItemId other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return Value.GetHashCode();
	}

	public static bool operator ==(ItemId left, ItemId right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(ItemId left, ItemId right)
	{
		return !left.Equals(right);
	}
}


using System;

[Flags]
public enum ItemMoveModifier
{
	None = 0,
	Alt = 2,
	Shift = 4,
	Ctrl = 8,
	BackpackOpen = 0x10
}


using System;

public struct NetworkableId : IEquatable<NetworkableId>
{
	public ulong Value;

	public bool IsValid => Value != 0;

	public NetworkableId(ulong value)
	{
		Value = value;
	}

	public override string ToString()
	{
		return Value.ToString("G");
	}

	public bool Equals(NetworkableId other)
	{
		return Value == other.Value;
	}

	public override bool Equals(object obj)
	{
		if (obj is NetworkableId other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return Value.GetHashCode();
	}

	public static bool operator ==(NetworkableId left, NetworkableId right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(NetworkableId left, NetworkableId right)
	{
		return !left.Equals(right);
	}
}


public class NetworkDefines
{
	public const int MinNetWriteBufferSize = 2048;

	public const int MaxNetWriteBufferSize = 4194304;

	public const int MaxNetReadPacketSize = 6291456;

	public const int MinNetReadBufferSize = 2048;

	public const int MaxNetReadBufferSize = 8388608;

	public const int MaxServerPacketSize = 10000000;
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[628]
		{
			0, 0, 1, 168, 0, 0, 0, 54, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 68,
			97, 116, 97, 92, 103, 101, 110, 101, 114, 97,
			116, 101, 100, 92, 80, 114, 111, 116, 111, 99,
			111, 108, 66, 117, 102, 102, 101, 114, 115, 46,
			99, 115, 0, 0, 1, 174, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 82, 117, 115, 116,
			46, 68, 97, 116, 97, 92, 103, 101, 110, 101,
			114, 97, 116, 101, 100, 92, 80, 114, 111, 116,
			111, 99, 111, 108, 66, 117, 102, 102, 101, 114,
			115, 46, 83, 101, 114, 105, 97, 108, 105, 122,
			101, 114, 46, 99, 115, 0, 0, 0, 11, 0,
			0, 0, 53, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 82,
			117, 115, 116, 46, 68, 97, 116, 97, 92, 103,
			101, 110, 101, 114, 97, 116, 101, 100, 92, 80,
			114, 111, 116, 111, 99, 111, 108, 80, 97, 114,
			115, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 34, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			82, 117, 115, 116, 46, 68, 97, 116, 97, 92,
			72, 97, 108, 102, 51, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 68, 97, 116,
			97, 92, 73, 83, 116, 114, 101, 97, 109, 82,
			101, 97, 100, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 42, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 68, 97, 116,
			97, 92, 73, 83, 116, 114, 101, 97, 109, 87,
			114, 105, 116, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 44, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 68, 97, 116,
			97, 92, 73, 116, 101, 109, 67, 111, 110, 116,
			97, 105, 110, 101, 114, 73, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 35, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 68,
			97, 116, 97, 92, 73, 116, 101, 109, 73, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			39, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 68, 97, 116, 97, 92, 77, 111, 100,
			101, 108, 83, 116, 97, 116, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 42, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 68,
			97, 116, 97, 92, 78, 101, 116, 119, 111, 114,
			107, 97, 98, 108, 101, 73, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 43, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 68,
			97, 116, 97, 92, 78, 101, 116, 119, 111, 114,
			107, 68, 101, 102, 105, 110, 101, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 39, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			68, 97, 116, 97, 92, 86, 101, 99, 116, 111,
			114, 68, 97, 116, 97, 46, 99, 115
		};
		result.TypesData = new byte[25543]
		{
			1, 0, 0, 0, 15, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 69, 110, 116, 105, 116, 121,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 66, 117, 114, 105, 101, 100,
			73, 116, 101, 109, 115, 1, 0, 0, 0, 37,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 66,
			117, 114, 105, 101, 100, 73, 116, 101, 109, 115,
			124, 83, 116, 111, 114, 101, 100, 66, 117, 114,
			105, 101, 100, 73, 116, 101, 109, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 66, 97, 115, 101, 78, 101, 116, 119, 111,
			114, 107, 97, 98, 108, 101, 1, 0, 0, 0,
			19, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			66, 97, 115, 101, 69, 110, 116, 105, 116, 121,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 66, 97, 115, 101, 67, 111,
			109, 98, 97, 116, 1, 0, 0, 0, 16, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 97,
			115, 101, 78, 80, 67, 1, 0, 0, 0, 20,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 69,
			110, 116, 105, 116, 121, 83, 108, 111, 116, 115,
			1, 0, 0, 0, 21, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 66, 97, 115, 101, 82, 101,
			115, 111, 117, 114, 99, 101, 1, 0, 0, 0,
			20, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			69, 110, 118, 105, 114, 111, 110, 109, 101, 110,
			116, 1, 0, 0, 0, 15, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 111, 114, 112, 115,
			101, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 76, 111, 111, 116, 97,
			98, 108, 101, 67, 111, 114, 112, 115, 101, 1,
			0, 0, 0, 31, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 76, 111, 111, 116, 97, 98, 108,
			101, 67, 111, 114, 112, 115, 101, 124, 80, 114,
			105, 118, 97, 116, 101, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 80,
			97, 114, 101, 110, 116, 73, 110, 102, 111, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 117, 105, 108, 100, 105, 110,
			103, 66, 108, 111, 99, 107, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			87, 97, 108, 108, 112, 97, 112, 101, 114, 84,
			111, 111, 108, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 87, 111, 114,
			108, 100, 73, 116, 101, 109, 1, 0, 0, 0,
			16, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			75, 101, 121, 76, 111, 99, 107, 1, 0, 0,
			0, 17, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 67, 111, 100, 101, 76, 111, 99, 107, 1,
			0, 0, 0, 25, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 67, 111, 100, 101, 76, 111, 99,
			107, 124, 80, 114, 105, 118, 97, 116, 101, 1,
			0, 0, 0, 18, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 87, 104, 105, 116, 101, 108, 105,
			115, 116, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 87, 101, 97, 112,
			111, 110, 82, 97, 99, 107, 73, 116, 101, 109,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 87, 101, 97, 112, 111, 110,
			82, 97, 99, 107, 1, 0, 0, 0, 26, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 70, 114,
			97, 110, 107, 101, 110, 115, 116, 101, 105, 110,
			84, 97, 98, 108, 101, 1, 0, 0, 0, 26,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 66,
			117, 105, 108, 100, 105, 110, 103, 80, 114, 105,
			118, 105, 108, 101, 103, 101, 1, 0, 0, 0,
			31, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			66, 117, 105, 108, 100, 105, 110, 103, 80, 114,
			105, 118, 105, 108, 101, 103, 101, 82, 101, 116,
			114, 111, 1, 0, 0, 0, 35, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 66, 117, 105, 108,
			100, 105, 110, 103, 80, 114, 105, 118, 105, 108,
			101, 103, 101, 82, 101, 116, 114, 111, 84, 111,
			111, 108, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 83, 116, 111, 114,
			97, 103, 101, 66, 111, 120, 1, 0, 0, 0,
			19, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			72, 101, 108, 100, 69, 110, 116, 105, 116, 121,
			1, 0, 0, 0, 13, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 76, 111, 111, 116, 1, 0,
			0, 0, 23, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 71, 101, 110, 101, 114, 105, 99, 83,
			112, 97, 119, 110, 101, 114, 1, 0, 0, 0,
			34, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			71, 101, 110, 101, 114, 105, 99, 83, 112, 97,
			119, 110, 101, 114, 124, 83, 112, 97, 119, 110,
			101, 100, 69, 110, 116, 1, 0, 0, 0, 20,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			108, 101, 101, 112, 105, 110, 103, 66, 97, 103,
			1, 0, 0, 0, 17, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 77, 97, 103, 97, 122, 105,
			110, 101, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 66, 97, 115, 101,
			80, 114, 111, 106, 101, 99, 116, 105, 108, 101,
			1, 0, 0, 0, 13, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 105, 103, 110, 1, 0,
			0, 0, 18, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 97, 112, 69, 110, 116, 105, 116,
			121, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 82, 101, 115, 101, 97,
			114, 99, 104, 84, 97, 98, 108, 101, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 117, 100, 69, 120, 112, 108, 111,
			115, 105, 118, 101, 1, 0, 0, 0, 26, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 82, 101,
			115, 111, 117, 114, 99, 101, 69, 120, 116, 114,
			97, 99, 116, 111, 114, 1, 0, 0, 0, 21,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 77,
			105, 110, 105, 110, 103, 81, 117, 97, 114, 114,
			121, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 71, 114, 111, 119, 97,
			98, 108, 101, 69, 110, 116, 105, 116, 121, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 76, 97, 110, 100, 109, 105, 110,
			101, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 66, 97, 115, 101, 86,
			101, 104, 105, 99, 108, 101, 1, 0, 0, 0,
			31, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			66, 97, 115, 101, 86, 101, 104, 105, 99, 108,
			101, 124, 77, 111, 117, 110, 116, 80, 111, 105,
			110, 116, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 72, 101, 108, 105,
			99, 111, 112, 116, 101, 114, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 101, 114, 118, 101, 114, 71, 105, 98, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 117, 116, 111, 84, 117, 114,
			114, 101, 116, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 112, 104,
			101, 114, 101, 69, 110, 116, 105, 116, 121, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 83, 116, 97, 98, 105, 108, 105,
			116, 121, 69, 110, 116, 105, 116, 121, 1, 0,
			0, 0, 18, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 79, 119, 110, 101, 114, 73, 110, 102,
			111, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 101, 99, 97, 121,
			69, 110, 116, 105, 116, 121, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 112, 97, 119, 110, 97, 98, 108, 101, 1,
			0, 0, 0, 21, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 83, 112, 105, 110, 110, 101, 114,
			87, 104, 101, 101, 108, 1, 0, 0, 0, 13,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 76,
			105, 102, 116, 1, 0, 0, 0, 23, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 86, 101, 110,
			100, 105, 110, 103, 77, 97, 99, 104, 105, 110,
			101, 1, 0, 0, 0, 33, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 86, 101, 110, 100, 105,
			110, 103, 77, 97, 99, 104, 105, 110, 101, 124,
			83, 101, 108, 108, 79, 114, 100, 101, 114, 1,
			0, 0, 0, 42, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 86, 101, 110, 100, 105, 110, 103,
			77, 97, 99, 104, 105, 110, 101, 124, 83, 101,
			108, 108, 79, 114, 100, 101, 114, 67, 111, 110,
			116, 97, 105, 110, 101, 114, 1, 0, 0, 0,
			28, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			86, 101, 110, 100, 105, 110, 103, 77, 97, 99,
			104, 105, 110, 101, 83, 116, 97, 116, 115, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 114, 97, 100, 108, 101, 121,
			65, 80, 67, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 87, 97, 116,
			101, 114, 87, 101, 108, 108, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			72, 111, 116, 65, 105, 114, 66, 97, 108, 108,
			111, 111, 110, 1, 0, 0, 0, 16, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 65, 77,
			83, 105, 116, 101, 1, 0, 0, 0, 18, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 77, 111,
			116, 111, 114, 98, 111, 97, 116, 1, 0, 0,
			0, 19, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 77, 105, 110, 105, 99, 111, 112, 116, 101,
			114, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 77, 111, 100, 117, 108,
			97, 114, 86, 101, 104, 105, 99, 108, 101, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 77, 111, 100, 117, 108, 97, 114,
			67, 97, 114, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 105, 109,
			112, 108, 101, 85, 73, 68, 1, 0, 0, 0,
			19, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 105, 109, 112, 108, 101, 85, 73, 110, 116,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 105, 109, 112, 108, 101,
			73, 110, 116, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 86, 101, 104,
			105, 99, 108, 101, 76, 105, 102, 116, 1, 0,
			0, 0, 22, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 69, 110, 103, 105, 110, 101, 83, 116,
			111, 114, 97, 103, 101, 1, 0, 0, 0, 17,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 73,
			79, 69, 110, 116, 105, 116, 121, 1, 0, 0,
			0, 30, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 73, 79, 69, 110, 116, 105, 116, 121, 124,
			73, 79, 67, 111, 110, 110, 101, 99, 116, 105,
			111, 110, 1, 0, 0, 0, 38, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 73, 79, 69, 110,
			116, 105, 116, 121, 43, 73, 79, 67, 111, 110,
			110, 101, 99, 116, 105, 111, 110, 124, 76, 105,
			110, 101, 86, 101, 99, 1, 0, 0, 0, 44,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 73,
			79, 69, 110, 116, 105, 116, 121, 43, 73, 79,
			67, 111, 110, 110, 101, 99, 116, 105, 111, 110,
			124, 76, 105, 110, 101, 80, 111, 105, 110, 116,
			76, 105, 115, 116, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 80, 117,
			122, 122, 108, 101, 82, 101, 115, 101, 116, 1,
			0, 0, 0, 28, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 82, 101, 108, 97, 116, 105, 111,
			110, 115, 104, 105, 112, 77, 97, 110, 97, 103,
			101, 114, 1, 0, 0, 0, 51, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 82, 101, 108, 97,
			116, 105, 111, 110, 115, 104, 105, 112, 77, 97,
			110, 97, 103, 101, 114, 124, 80, 108, 97, 121,
			101, 114, 82, 101, 108, 97, 116, 105, 111, 110,
			115, 104, 105, 112, 73, 110, 102, 111, 1, 0,
			0, 0, 48, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 82, 101, 108, 97, 116, 105, 111, 110,
			115, 104, 105, 112, 77, 97, 110, 97, 103, 101,
			114, 124, 80, 108, 97, 121, 101, 114, 82, 101,
			108, 97, 116, 105, 111, 110, 115, 104, 105, 112,
			115, 1, 0, 0, 0, 16, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 69, 103, 103, 72, 117,
			110, 116, 1, 0, 0, 0, 26, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 69, 103, 103, 72,
			117, 110, 116, 124, 69, 103, 103, 72, 117, 110,
			116, 101, 114, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 114, 99,
			97, 100, 101, 77, 97, 99, 104, 105, 110, 101,
			1, 0, 0, 0, 33, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 65, 114, 99, 97, 100, 101,
			77, 97, 99, 104, 105, 110, 101, 124, 83, 99,
			111, 114, 101, 69, 110, 116, 114, 121, 1, 0,
			0, 0, 14, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 72, 111, 114, 115, 101, 1, 0, 0,
			0, 23, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 72, 111, 114, 115, 101, 77, 111, 100, 105,
			102, 105, 101, 114, 115, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			109, 97, 114, 116, 65, 108, 97, 114, 109, 1,
			0, 0, 0, 28, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 73, 110, 115, 116, 114, 117, 109,
			101, 110, 116, 82, 101, 99, 111, 114, 100, 105,
			110, 103, 1, 0, 0, 0, 32, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 73, 110, 115, 116,
			114, 117, 109, 101, 110, 116, 82, 101, 99, 111,
			114, 100, 105, 110, 103, 78, 111, 116, 101, 1,
			0, 0, 0, 31, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 73, 110, 115, 116, 114, 117, 109,
			101, 110, 116, 77, 105, 100, 105, 66, 105, 110,
			100, 105, 110, 103, 115, 1, 0, 0, 0, 30,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 73,
			110, 115, 116, 114, 117, 109, 101, 110, 116, 77,
			105, 100, 105, 66, 105, 110, 100, 105, 110, 103,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 76, 105, 103, 104, 116, 83,
			116, 114, 105, 110, 103, 1, 0, 0, 0, 32,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 76,
			105, 103, 104, 116, 83, 116, 114, 105, 110, 103,
			124, 83, 116, 114, 105, 110, 103, 80, 111, 105,
			110, 116, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 76, 105, 103, 104,
			116, 68, 101, 112, 108, 111, 121, 101, 114, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 82, 67, 69, 110, 116, 105, 116,
			121, 1, 0, 0, 0, 24, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 111, 109, 112, 117,
			116, 101, 114, 83, 116, 97, 116, 105, 111, 110,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 111, 109, 112, 111, 115,
			116, 101, 114, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 86, 101, 104,
			105, 99, 108, 101, 86, 101, 110, 100, 111, 114,
			1, 0, 0, 0, 36, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 86, 101, 104, 105, 99, 108,
			101, 86, 101, 110, 100, 111, 114, 124, 80, 108,
			97, 121, 101, 114, 83, 116, 111, 114, 97, 103,
			101, 1, 0, 0, 0, 56, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 86, 101, 104, 105, 99,
			108, 101, 86, 101, 110, 100, 111, 114, 43, 80,
			108, 97, 121, 101, 114, 83, 116, 111, 114, 97,
			103, 101, 124, 80, 108, 97, 121, 101, 114, 83,
			116, 111, 114, 101, 100, 86, 101, 104, 105, 99,
			108, 101, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 83, 104, 111, 112,
			75, 101, 101, 112, 101, 114, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			87, 97, 116, 101, 114, 80, 111, 111, 108, 1,
			0, 0, 0, 14, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 80, 104, 111, 116, 111, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 104, 111, 116, 111, 70, 114, 97,
			109, 101, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 86, 101, 104, 105,
			99, 108, 101, 77, 111, 100, 117, 108, 101, 1,
			0, 0, 0, 20, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 77, 105, 120, 105, 110, 103, 84,
			97, 98, 108, 101, 1, 0, 0, 0, 17, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 69, 108,
			101, 118, 97, 116, 111, 114, 1, 0, 0, 0,
			20, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 107, 117, 108, 108, 84, 114, 111, 112, 104,
			121, 1, 0, 0, 0, 17, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 97, 115, 115, 101,
			116, 116, 101, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 84, 101, 108,
			101, 112, 104, 111, 110, 101, 1, 0, 0, 0,
			16, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			66, 111, 111, 109, 66, 111, 120, 1, 0, 0,
			0, 17, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 78, 101, 111, 110, 83, 105, 103, 110, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 78, 101, 111, 110, 83, 105, 103,
			110, 124, 76, 105, 103, 104, 116, 115, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 84, 114, 97, 105, 110, 69, 110, 103,
			105, 110, 101, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 117, 98,
			69, 110, 116, 105, 116, 121, 76, 105, 115, 116,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 77, 97, 114, 107, 101, 116,
			84, 101, 114, 109, 105, 110, 97, 108, 1, 0,
			0, 0, 36, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 77, 97, 114, 107, 101, 116, 84, 101,
			114, 109, 105, 110, 97, 108, 124, 80, 101, 110,
			100, 105, 110, 103, 79, 114, 100, 101, 114, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 68, 101, 108, 105, 118, 101, 114,
			121, 68, 114, 111, 110, 101, 1, 0, 0, 0,
			17, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			71, 97, 109, 101, 77, 111, 100, 101, 1, 0,
			0, 0, 26, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 71, 97, 109, 101, 77, 111, 100, 101,
			124, 84, 101, 97, 109, 73, 110, 102, 111, 1,
			0, 0, 0, 29, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 71, 97, 109, 101, 77, 111, 100,
			101, 124, 83, 99, 111, 114, 101, 67, 111, 108,
			117, 109, 110, 1, 0, 0, 0, 29, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 71, 97, 109,
			101, 77, 111, 100, 101, 124, 80, 108, 97, 121,
			101, 114, 83, 99, 111, 114, 101, 1, 0, 0,
			0, 23, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 82, 101, 99, 108, 97, 105, 109, 77, 97,
			110, 97, 103, 101, 114, 1, 0, 0, 0, 35,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 82,
			101, 99, 108, 97, 105, 109, 77, 97, 110, 97,
			103, 101, 114, 124, 82, 101, 99, 108, 97, 105,
			109, 73, 110, 102, 111, 1, 0, 0, 0, 24,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 82,
			101, 99, 108, 97, 105, 109, 84, 101, 114, 109,
			105, 110, 97, 108, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 83, 108,
			111, 116, 77, 97, 99, 104, 105, 110, 101, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 97, 114, 100, 71, 97, 109,
			101, 1, 0, 0, 0, 28, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 67, 97, 114, 100, 71,
			97, 109, 101, 124, 67, 97, 114, 100, 80, 108,
			97, 121, 101, 114, 1, 0, 0, 0, 29, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 67, 97,
			114, 100, 71, 97, 109, 101, 124, 84, 101, 120,
			97, 115, 72, 111, 108, 100, 69, 109, 1, 0,
			0, 0, 30, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 67, 97, 114, 100, 71, 97, 109, 101,
			124, 82, 111, 117, 110, 100, 82, 101, 115, 117,
			108, 116, 115, 1, 0, 0, 0, 37, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 67, 97, 114,
			100, 71, 97, 109, 101, 43, 82, 111, 117, 110,
			100, 82, 101, 115, 117, 108, 116, 115, 124, 82,
			101, 115, 117, 108, 116, 1, 0, 0, 0, 27,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 67,
			97, 114, 100, 71, 97, 109, 101, 124, 66, 108,
			97, 99, 107, 106, 97, 99, 107, 1, 0, 0,
			0, 37, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 67, 97, 114, 100, 71, 97, 109, 101, 124,
			66, 108, 97, 99, 107, 106, 97, 99, 107, 67,
			97, 114, 100, 80, 108, 97, 121, 101, 114, 1,
			0, 0, 0, 26, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 67, 97, 114, 100, 71, 97, 109,
			101, 124, 67, 97, 114, 100, 76, 105, 115, 116,
			1, 0, 0, 0, 14, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 114, 97, 110, 101, 1,
			0, 0, 0, 25, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 111, 110, 110, 101, 99, 116,
			101, 100, 83, 112, 101, 97, 107, 101, 114, 1,
			0, 0, 0, 23, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 86, 111, 105, 99, 101, 109, 97,
			105, 108, 69, 110, 116, 114, 121, 1, 0, 0,
			0, 20, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 117, 100, 105, 111, 69, 110, 116, 105,
			116, 121, 1, 0, 0, 0, 24, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 77, 105, 99, 114,
			111, 112, 104, 111, 110, 101, 83, 116, 97, 110,
			100, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 111, 109, 109, 97,
			110, 100, 66, 108, 111, 99, 107, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 83, 117, 98, 109, 97, 114, 105, 110, 101,
			1, 0, 0, 0, 26, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 108, 101, 101, 112, 105,
			110, 103, 66, 97, 103, 67, 97, 109, 112, 101,
			114, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 97, 109, 112, 101,
			114, 77, 111, 100, 117, 108, 101, 1, 0, 0,
			0, 22, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 97, 105, 110, 116, 97, 98, 108, 101,
			83, 105, 103, 110, 1, 0, 0, 0, 13, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 77, 76,
			82, 83, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 83, 110, 111, 119,
			109, 111, 98, 105, 108, 101, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			80, 97, 116, 116, 101, 114, 110, 70, 105, 114,
			101, 119, 111, 114, 107, 1, 0, 0, 0, 31,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 80,
			97, 116, 116, 101, 114, 110, 70, 105, 114, 101,
			119, 111, 114, 107, 124, 68, 101, 115, 105, 103,
			110, 1, 0, 0, 0, 29, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 80, 97, 116, 116, 101,
			114, 110, 70, 105, 114, 101, 119, 111, 114, 107,
			124, 83, 116, 97, 114, 1, 0, 0, 0, 36,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 80,
			97, 116, 116, 101, 114, 110, 70, 105, 114, 101,
			119, 111, 114, 107, 124, 83, 97, 118, 101, 100,
			68, 101, 115, 105, 103, 110, 1, 0, 0, 0,
			19, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			67, 97, 114, 103, 111, 80, 108, 97, 110, 101,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 97, 105, 110, 116, 101,
			100, 73, 116, 101, 109, 1, 0, 0, 0, 14,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			112, 114, 97, 121, 1, 0, 0, 0, 18, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 83, 112,
			114, 97, 121, 76, 105, 110, 101, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 83, 112, 114, 97, 121, 76, 105, 115, 116,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 76, 105, 110, 101, 80, 111,
			105, 110, 116, 1, 0, 0, 0, 16, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 90, 105, 112,
			108, 105, 110, 101, 1, 0, 0, 0, 25, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 90, 105,
			112, 108, 105, 110, 101, 77, 111, 117, 110, 116,
			97, 98, 108, 101, 1, 0, 0, 0, 28, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 90, 105,
			112, 108, 105, 110, 101, 65, 114, 114, 105, 118,
			97, 108, 80, 111, 105, 110, 116, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 66, 97, 115, 101, 84, 114, 97, 105, 110,
			1, 0, 0, 0, 21, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 111, 97, 108, 105, 110,
			103, 84, 111, 119, 101, 114, 1, 0, 0, 0,
			17, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			66, 97, 115, 101, 79, 118, 101, 110, 1, 0,
			0, 0, 29, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 66, 97, 115, 101, 79, 118, 101, 110,
			124, 67, 111, 111, 107, 105, 110, 103, 73, 116,
			101, 109, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 66, 114, 97, 105,
			110, 67, 111, 109, 112, 111, 110, 101, 110, 116,
			1, 0, 0, 0, 26, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 114, 111, 99, 101, 100,
			117, 114, 97, 108, 68, 117, 110, 103, 101, 111,
			110, 1, 0, 0, 0, 27, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 73, 110, 100, 117, 115,
			116, 114, 105, 97, 108, 67, 111, 110, 118, 101,
			121, 111, 114, 1, 0, 0, 0, 38, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 73, 110, 100,
			117, 115, 116, 114, 105, 97, 108, 67, 111, 110,
			118, 101, 121, 111, 114, 124, 73, 116, 101, 109,
			70, 105, 108, 116, 101, 114, 1, 0, 0, 0,
			42, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			73, 110, 100, 117, 115, 116, 114, 105, 97, 108,
			67, 111, 110, 118, 101, 121, 111, 114, 124, 73,
			116, 101, 109, 70, 105, 108, 116, 101, 114, 76,
			105, 115, 116, 1, 0, 0, 0, 26, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 73, 110, 100,
			117, 115, 116, 114, 105, 97, 108, 67, 114, 97,
			102, 116, 101, 114, 1, 0, 0, 0, 35, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 73, 110,
			100, 117, 115, 116, 114, 105, 97, 108, 67, 111,
			110, 118, 101, 121, 111, 114, 84, 114, 97, 110,
			115, 102, 101, 114, 1, 0, 0, 0, 48, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 73, 110,
			100, 117, 115, 116, 114, 105, 97, 108, 67, 111,
			110, 118, 101, 121, 111, 114, 84, 114, 97, 110,
			115, 102, 101, 114, 124, 73, 116, 101, 109, 84,
			114, 97, 110, 115, 102, 101, 114, 1, 0, 0,
			0, 14, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 68, 114, 111, 110, 101, 1, 0, 0, 0,
			23, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			84, 105, 109, 101, 100, 69, 120, 112, 108, 111,
			115, 105, 118, 101, 1, 0, 0, 0, 19, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 116,
			116, 97, 99, 107, 72, 101, 108, 105, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 116, 116, 97, 99, 107, 72, 101,
			108, 105, 84, 117, 114, 114, 101, 116, 1, 0,
			0, 0, 26, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 116, 116, 97, 99, 107, 72, 101,
			108, 105, 82, 111, 99, 107, 101, 116, 115, 1,
			0, 0, 0, 20, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 108, 97, 110, 77, 97, 110,
			97, 103, 101, 114, 1, 0, 0, 0, 24, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 115,
			115, 111, 99, 105, 97, 116, 101, 100, 70, 105,
			108, 101, 115, 1, 0, 0, 0, 39, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 65, 115, 115,
			111, 99, 105, 97, 116, 101, 100, 70, 105, 108,
			101, 115, 124, 65, 115, 115, 111, 99, 105, 97,
			116, 101, 100, 70, 105, 108, 101, 1, 0, 0,
			0, 19, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 78, 101, 120, 117, 115, 70, 101, 114, 114,
			121, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 78, 101, 120, 117, 115,
			73, 115, 108, 97, 110, 100, 1, 0, 0, 0,
			26, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			78, 101, 120, 117, 115, 68, 111, 99, 107, 84,
			101, 114, 109, 105, 110, 97, 108, 1, 0, 0,
			0, 40, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 78, 101, 120, 117, 115, 68, 111, 99, 107,
			84, 101, 114, 109, 105, 110, 97, 108, 124, 83,
			99, 104, 101, 100, 117, 108, 101, 69, 110, 116,
			114, 121, 1, 0, 0, 0, 17, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 66, 97, 115, 101,
			66, 111, 97, 116, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 68, 105,
			101, 115, 101, 108, 69, 110, 103, 105, 110, 101,
			1, 0, 0, 0, 21, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 82, 111, 99, 107, 105, 110,
			103, 67, 104, 97, 105, 114, 1, 0, 0, 0,
			17, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			72, 101, 97, 100, 68, 97, 116, 97, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 87, 97, 110, 116, 101, 100, 80, 111,
			115, 116, 101, 114, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 87, 97,
			121, 112, 111, 105, 110, 116, 82, 97, 99, 101,
			1, 0, 0, 0, 16, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 82, 97, 103, 100, 111, 108,
			108, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 76, 101, 103, 97, 99,
			121, 83, 104, 101, 108, 116, 101, 114, 1, 0,
			0, 0, 28, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 101, 116, 97, 108, 68, 101, 116,
			101, 99, 116, 111, 114, 83, 111, 117, 114, 99,
			101, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 84, 117, 116, 111, 114,
			105, 97, 108, 73, 115, 108, 97, 110, 100, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 105, 110, 101, 109, 97, 116,
			105, 99, 69, 110, 116, 105, 116, 121, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 72, 97, 114, 98, 111, 114, 67, 114,
			97, 110, 101, 1, 0, 0, 0, 31, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 72, 97, 114,
			98, 111, 114, 67, 114, 97, 110, 101, 124, 81,
			117, 101, 117, 101, 100, 77, 111, 118, 101, 1,
			0, 0, 0, 18, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 97, 114, 103, 111, 83, 104,
			105, 112, 1, 0, 0, 0, 27, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 97, 114, 103,
			111, 83, 104, 105, 112, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 1, 0, 0, 0, 25, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 77, 105,
			115, 115, 105, 111, 110, 77, 97, 112, 77, 97,
			114, 107, 101, 114, 1, 0, 0, 0, 13, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 105,
			107, 101, 1, 0, 0, 0, 25, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 84, 114, 97, 118,
			101, 108, 108, 105, 110, 103, 86, 101, 110, 100,
			111, 114, 1, 0, 0, 0, 30, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 86, 101, 110, 100,
			105, 110, 103, 68, 121, 110, 97, 109, 105, 99,
			80, 114, 105, 99, 105, 110, 103, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 83, 97, 108, 101, 115, 68, 97, 116, 97,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 84, 105, 110, 67, 97, 110,
			65, 108, 97, 114, 109, 1, 0, 0, 0, 21,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 68,
			105, 103, 105, 116, 97, 108, 67, 108, 111, 99,
			107, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 69, 108, 101, 118, 97,
			116, 111, 114, 76, 105, 102, 116, 1, 0, 0,
			0, 31, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 68, 105, 118, 101, 114, 80, 114, 111, 112,
			117, 108, 115, 105, 111, 110, 86, 101, 104, 105,
			99, 108, 101, 1, 0, 0, 0, 26, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 78, 80, 67,
			86, 101, 110, 100, 105, 110, 103, 77, 97, 99,
			104, 105, 110, 101, 1, 0, 0, 0, 16, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 77, 97,
			105, 108, 98, 111, 120, 1, 0, 0, 0, 21,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 71,
			117, 110, 87, 101, 97, 112, 111, 110, 77, 111,
			100, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 66, 97, 115, 101, 83,
			99, 117, 108, 112, 116, 117, 114, 101, 1, 0,
			0, 0, 17, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 67, 97, 116, 97, 112, 117, 108, 116,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 105, 101, 103, 101, 84,
			111, 119, 101, 114, 1, 0, 0, 0, 17, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 97,
			108, 108, 105, 115, 116, 97, 1, 0, 0, 0,
			20, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			66, 97, 108, 108, 105, 115, 116, 97, 71, 117,
			110, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 66, 97, 116, 116, 101,
			114, 105, 110, 103, 82, 97, 109, 1, 0, 0,
			0, 25, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 84, 101, 109, 112, 111, 114, 97, 114, 121,
			82, 97, 103, 100, 111, 108, 108, 1, 0, 0,
			0, 28, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 67, 111, 110, 115, 116, 114, 117, 99, 116,
			97, 98, 108, 101, 69, 110, 116, 105, 116, 121,
			1, 0, 0, 0, 22, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 104, 105, 99, 107, 101,
			110, 83, 116, 97, 116, 117, 115, 1, 0, 0,
			0, 20, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 67, 104, 105, 99, 107, 101, 110, 67, 111,
			111, 112, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 70, 97, 114, 109,
			97, 98, 108, 101, 65, 110, 105, 109, 97, 108,
			1, 0, 0, 0, 16, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 66, 101, 101, 104, 105, 118,
			101, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 66, 101, 101, 77, 97,
			115, 116, 101, 114, 83, 119, 97, 114, 109, 1,
			0, 0, 0, 28, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 111, 110, 116, 97, 105, 110,
			101, 114, 67, 111, 114, 112, 115, 101, 68, 97,
			116, 97, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 86, 105, 110, 101,
			77, 111, 117, 110, 116, 97, 98, 108, 101, 1,
			0, 0, 0, 20, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 84, 114, 101, 101, 82, 101, 115,
			112, 97, 119, 110, 1, 0, 0, 0, 17, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 86, 105,
			110, 101, 84, 114, 101, 101, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			86, 105, 110, 101, 68, 101, 115, 116, 105, 110,
			97, 116, 105, 111, 110, 1, 0, 0, 0, 30,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			116, 97, 116, 105, 99, 82, 101, 115, 112, 97,
			119, 110, 65, 114, 101, 97, 68, 97, 116, 97,
			1, 0, 0, 0, 22, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 73, 116, 101, 109, 67, 111,
			110, 116, 97, 105, 110, 101, 114, 1, 0, 0,
			0, 13, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 73, 116, 101, 109, 1, 0, 0, 0, 26,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 73,
			116, 101, 109, 124, 73, 110, 115, 116, 97, 110,
			99, 101, 68, 97, 116, 97, 1, 0, 0, 0,
			27, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			73, 116, 101, 109, 124, 67, 111, 110, 100, 105,
			116, 105, 111, 110, 68, 97, 116, 97, 1, 0,
			0, 0, 28, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 73, 116, 101, 109, 79, 119, 110, 101,
			114, 115, 104, 105, 112, 65, 109, 111, 117, 110,
			116, 1, 0, 0, 0, 19, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 66, 97, 115, 101, 80,
			108, 97, 121, 101, 114, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 80,
			108, 97, 121, 101, 114, 84, 101, 97, 109, 1,
			0, 0, 0, 30, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 80, 108, 97, 121, 101, 114, 84,
			101, 97, 109, 124, 84, 101, 97, 109, 77, 101,
			109, 98, 101, 114, 1, 0, 0, 0, 25, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 80, 108,
			97, 121, 101, 114, 77, 101, 116, 97, 98, 111,
			108, 105, 115, 109, 1, 0, 0, 0, 24, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 80, 108,
			97, 121, 101, 114, 77, 111, 100, 105, 102, 105,
			101, 114, 115, 1, 0, 0, 0, 17, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 77, 111, 100,
			105, 102, 105, 101, 114, 1, 0, 0, 0, 17,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 77,
			105, 115, 115, 105, 111, 110, 115, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 79, 98, 106, 101, 99, 116, 105, 118, 101,
			83, 116, 97, 116, 117, 115, 1, 0, 0, 0,
			21, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			77, 105, 115, 115, 105, 111, 110, 80, 111, 105,
			110, 116, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 77, 105, 115, 115,
			105, 111, 110, 69, 110, 116, 105, 116, 121, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 77, 105, 115, 115, 105, 111, 110,
			82, 101, 119, 97, 114, 100, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			77, 105, 115, 115, 105, 111, 110, 73, 110, 115,
			116, 97, 110, 99, 101, 1, 0, 0, 0, 28,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 77,
			105, 115, 115, 105, 111, 110, 73, 110, 115, 116,
			97, 110, 99, 101, 68, 97, 116, 97, 1, 0,
			0, 0, 24, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 108, 97, 121, 101, 114, 73, 110,
			118, 101, 110, 116, 111, 114, 121, 1, 0, 0,
			0, 25, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 101, 114, 115, 105, 115, 116, 97, 110,
			116, 80, 108, 97, 121, 101, 114, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 108, 97, 121, 101, 114, 76, 105, 102,
			101, 83, 116, 111, 114, 121, 1, 0, 0, 0,
			34, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			80, 108, 97, 121, 101, 114, 76, 105, 102, 101,
			83, 116, 111, 114, 121, 124, 68, 101, 97, 116,
			104, 73, 110, 102, 111, 1, 0, 0, 0, 36,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 80,
			108, 97, 121, 101, 114, 76, 105, 102, 101, 83,
			116, 111, 114, 121, 124, 87, 101, 97, 112, 111,
			110, 83, 116, 97, 116, 115, 1, 0, 0, 0,
			36, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			80, 108, 97, 121, 101, 114, 76, 105, 102, 101,
			83, 116, 111, 114, 121, 124, 71, 101, 110, 101,
			114, 105, 99, 83, 116, 97, 116, 1, 0, 0,
			0, 16, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 77, 97, 112, 78, 111, 116, 101, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 97, 112, 78, 111, 116, 101, 76,
			105, 115, 116, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 73, 116, 101,
			109, 67, 114, 97, 102, 116, 101, 114, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 73, 116, 101, 109, 67, 114, 97, 102,
			116, 101, 114, 124, 84, 97, 115, 107, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 83, 112, 101, 99, 116, 97, 116, 101,
			84, 101, 97, 109, 73, 110, 102, 111, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 83, 112, 101, 99, 116, 97, 116, 101,
			84, 101, 97, 109, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 80, 108,
			97, 121, 101, 114, 83, 116, 97, 116, 101, 1,
			0, 0, 0, 21, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 80, 108, 97, 121, 101, 114, 78,
			97, 109, 101, 73, 68, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 68,
			101, 109, 111, 72, 101, 97, 100, 101, 114, 1,
			0, 0, 0, 29, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 70, 105, 108, 101, 83, 116, 111,
			114, 97, 103, 101, 67, 97, 99, 104, 101, 68,
			97, 116, 97, 1, 0, 0, 0, 17, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 68, 101, 109,
			111, 83, 104, 111, 116, 1, 0, 0, 0, 28,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 68,
			101, 109, 111, 83, 104, 111, 116, 86, 101, 99,
			116, 111, 114, 84, 114, 97, 99, 107, 1, 0,
			0, 0, 31, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 101, 109, 111, 83, 104, 111, 116,
			86, 101, 99, 116, 111, 114, 75, 101, 121, 102,
			114, 97, 109, 101, 1, 0, 0, 0, 27, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 68, 101,
			109, 111, 83, 104, 111, 116, 70, 108, 111, 97,
			116, 84, 114, 97, 99, 107, 1, 0, 0, 0,
			30, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			68, 101, 109, 111, 83, 104, 111, 116, 70, 108,
			111, 97, 116, 75, 101, 121, 102, 114, 97, 109,
			101, 1, 0, 0, 0, 32, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 101, 109, 111, 83,
			104, 111, 116, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 84, 114, 97, 99, 107, 1, 0,
			0, 0, 35, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 101, 109, 111, 83, 104, 111, 116,
			81, 117, 97, 116, 101, 114, 110, 105, 111, 110,
			75, 101, 121, 102, 114, 97, 109, 101, 1, 0,
			0, 0, 28, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 101, 109, 111, 83, 104, 111, 116,
			80, 97, 114, 101, 110, 116, 84, 114, 97, 99,
			107, 1, 0, 0, 0, 31, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 101, 109, 111, 83,
			104, 111, 116, 80, 97, 114, 101, 110, 116, 75,
			101, 121, 102, 114, 97, 109, 101, 1, 0, 0,
			0, 28, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 67, 111, 112, 121, 80, 97, 115, 116, 101,
			69, 110, 116, 105, 116, 121, 73, 110, 102, 111,
			1, 0, 0, 0, 21, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 97, 115, 116, 101, 82,
			101, 113, 117, 101, 115, 116, 1, 0, 0, 0,
			14, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			72, 97, 108, 102, 51, 1, 0, 0, 0, 13,
			124, 73, 110, 112, 117, 116, 77, 101, 115, 115,
			97, 103, 101, 1, 0, 0, 0, 17, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			114, 111, 118, 97, 108, 1, 0, 0, 0, 28,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 85,
			112, 100, 97, 116, 101, 73, 116, 101, 109, 67,
			111, 110, 116, 97, 105, 110, 101, 114, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 108, 97, 121, 101, 114, 85, 112,
			100, 97, 116, 101, 76, 111, 111, 116, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 85, 112, 100, 97, 116, 101, 73, 116,
			101, 109, 1, 0, 0, 0, 11, 124, 80, 108,
			97, 121, 101, 114, 84, 105, 99, 107, 1, 0,
			0, 0, 11, 124, 77, 111, 100, 101, 108, 83,
			116, 97, 116, 101, 1, 0, 0, 0, 19, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 84, 97,
			107, 101, 68, 97, 109, 97, 103, 101, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 69, 110, 116, 105, 116, 121, 76, 105,
			115, 116, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 114, 101, 97,
			116, 101, 66, 117, 105, 108, 100, 105, 110, 103,
			1, 0, 0, 0, 15, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 116, 116, 97, 99, 107,
			1, 0, 0, 0, 21, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 108, 97, 121, 101, 114,
			65, 116, 116, 97, 99, 107, 1, 0, 0, 0,
			31, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			80, 108, 97, 121, 101, 114, 80, 114, 111, 106,
			101, 99, 116, 105, 108, 101, 65, 116, 116, 97,
			99, 107, 1, 0, 0, 0, 33, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 80, 108, 97, 121,
			101, 114, 80, 114, 111, 106, 101, 99, 116, 105,
			108, 101, 82, 105, 99, 111, 99, 104, 101, 116,
			1, 0, 0, 0, 31, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 108, 97, 121, 101, 114,
			80, 114, 111, 106, 101, 99, 116, 105, 108, 101,
			85, 112, 100, 97, 116, 101, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			80, 114, 111, 106, 101, 99, 116, 105, 108, 101,
			83, 104, 111, 111, 116, 1, 0, 0, 0, 35,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 80,
			114, 111, 106, 101, 99, 116, 105, 108, 101, 83,
			104, 111, 111, 116, 124, 80, 114, 111, 106, 101,
			99, 116, 105, 108, 101, 1, 0, 0, 0, 11,
			124, 69, 102, 102, 101, 99, 116, 68, 97, 116,
			97, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 77, 111, 100, 117, 108,
			101, 77, 101, 115, 115, 97, 103, 101, 1, 0,
			0, 0, 27, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 82, 101, 115, 112, 97, 119, 110, 73,
			110, 102, 111, 114, 109, 97, 116, 105, 111, 110,
			1, 0, 0, 0, 40, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 82, 101, 115, 112, 97, 119,
			110, 73, 110, 102, 111, 114, 109, 97, 116, 105,
			111, 110, 124, 83, 112, 97, 119, 110, 79, 112,
			116, 105, 111, 110, 115, 1, 0, 0, 0, 20,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 67,
			108, 105, 101, 110, 116, 82, 101, 97, 100, 121,
			1, 0, 0, 0, 31, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 67, 108, 105, 101, 110, 116,
			82, 101, 97, 100, 121, 124, 67, 108, 105, 101,
			110, 116, 73, 110, 102, 111, 1, 0, 0, 0,
			13, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			84, 114, 101, 101, 1, 0, 0, 0, 17, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 84, 114,
			101, 101, 76, 105, 115, 116, 1, 0, 0, 0,
			21, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			87, 111, 114, 108, 100, 77, 101, 115, 115, 97,
			103, 101, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 114, 99, 97,
			100, 101, 71, 97, 109, 101, 1, 0, 0, 0,
			29, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			65, 114, 99, 97, 100, 101, 71, 97, 109, 101,
			124, 97, 114, 99, 97, 100, 101, 69, 110, 116,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 104, 111, 110, 101, 68,
			105, 114, 101, 99, 116, 111, 114, 121, 1, 0,
			0, 0, 38, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 80, 104, 111, 110, 101, 68, 105, 114,
			101, 99, 116, 111, 114, 121, 124, 68, 105, 114,
			101, 99, 116, 111, 114, 121, 69, 110, 116, 114,
			121, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 69, 110, 116, 105, 116,
			121, 73, 100, 76, 105, 115, 116, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 82, 97, 100, 105, 111, 76, 105, 115, 116,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 73, 116, 101, 109, 65, 109,
			111, 117, 110, 116, 76, 105, 115, 116, 1, 0,
			0, 0, 29, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 87, 105, 114, 101, 82, 101, 99, 111,
			110, 110, 101, 99, 116, 77, 101, 115, 115, 97,
			103, 101, 1, 0, 0, 0, 27, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 87, 105, 114, 101,
			76, 105, 110, 101, 65, 110, 99, 104, 111, 114,
			73, 110, 102, 111, 1, 0, 0, 0, 30, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 87, 105,
			114, 101, 67, 111, 110, 110, 101, 99, 116, 105,
			111, 110, 77, 101, 115, 115, 97, 103, 101, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 79, 99, 101, 97, 110, 80, 97,
			116, 104, 115, 1, 0, 0, 0, 19, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 86, 101, 99,
			116, 111, 114, 76, 105, 115, 116, 1, 0, 0,
			0, 28, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 68, 105, 103, 105, 116, 97, 108, 67, 108,
			111, 99, 107, 77, 101, 115, 115, 97, 103, 101,
			1, 0, 0, 0, 26, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 68, 105, 103, 105, 116, 97,
			108, 67, 108, 111, 99, 107, 65, 108, 97, 114,
			109, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 86, 68, 68, 114, 97,
			119, 69, 110, 116, 114, 121, 1, 0, 0, 0,
			50, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			86, 101, 110, 100, 105, 110, 103, 77, 97, 99,
			104, 105, 110, 101, 80, 117, 114, 99, 104, 97,
			115, 101, 72, 105, 115, 116, 111, 114, 121, 69,
			110, 116, 114, 121, 77, 101, 115, 115, 97, 103,
			101, 1, 0, 0, 0, 55, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 86, 101, 110, 100, 105,
			110, 103, 77, 97, 99, 104, 105, 110, 101, 80,
			117, 114, 99, 104, 97, 115, 101, 72, 105, 115,
			116, 111, 114, 121, 69, 110, 116, 114, 121, 83,
			109, 97, 108, 108, 77, 101, 115, 115, 97, 103,
			101, 1, 0, 0, 0, 45, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 86, 101, 110, 100, 105,
			110, 103, 77, 97, 99, 104, 105, 110, 101, 80,
			117, 114, 99, 104, 97, 115, 101, 72, 105, 115,
			116, 111, 114, 121, 77, 101, 115, 115, 97, 103,
			101, 1, 0, 0, 0, 36, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 86, 101, 110, 100, 105,
			110, 103, 77, 97, 99, 104, 105, 110, 101, 76,
			111, 110, 103, 84, 101, 114, 109, 83, 116, 97,
			116, 115, 1, 0, 0, 0, 32, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 104, 105, 99,
			107, 101, 110, 67, 111, 111, 112, 83, 116, 97,
			116, 117, 115, 85, 112, 100, 97, 116, 101, 1,
			0, 0, 0, 29, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 70, 97, 114, 109, 97, 98, 108,
			101, 65, 110, 105, 109, 97, 108, 83, 116, 97,
			116, 117, 115, 1, 0, 0, 0, 23, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 78, 80, 67,
			83, 101, 110, 115, 101, 115, 83, 116, 97, 116,
			101, 1, 0, 0, 0, 18, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 80, 97, 114, 116, 121,
			68, 97, 116, 97, 1, 0, 0, 0, 24, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 80, 97,
			114, 116, 121, 77, 101, 109, 98, 101, 114, 68,
			97, 116, 97, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 87, 111, 114,
			108, 100, 68, 97, 116, 97, 1, 0, 0, 0,
			16, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			77, 97, 112, 68, 97, 116, 97, 1, 0, 0,
			0, 19, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 114, 101, 102, 97, 98, 68, 97, 116,
			97, 1, 0, 0, 0, 17, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 80, 97, 116, 104, 68,
			97, 116, 97, 1, 0, 0, 0, 19, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 86, 101, 99,
			116, 111, 114, 68, 97, 116, 97, 1, 0, 0,
			0, 19, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 82, 101, 113, 117, 101, 115,
			116, 1, 0, 0, 0, 19, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 77, 101,
			115, 115, 97, 103, 101, 1, 0, 0, 0, 20,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 82, 101, 115, 112, 111, 110, 115, 101,
			1, 0, 0, 0, 21, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 66, 114, 111,
			97, 100, 99, 97, 115, 116, 1, 0, 0, 0,
			17, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 69, 109, 112, 116, 121, 1, 0,
			0, 0, 23, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 83, 101, 110, 100, 77,
			101, 115, 115, 97, 103, 101, 1, 0, 0, 0,
			26, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 83, 101, 116, 69, 110, 116, 105,
			116, 121, 86, 97, 108, 117, 101, 1, 0, 0,
			0, 27, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 80, 114, 111, 109, 111, 116,
			101, 84, 111, 76, 101, 97, 100, 101, 114, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 112, 112, 71, 101, 116, 78,
			101, 120, 117, 115, 65, 117, 116, 104, 1, 0,
			0, 0, 27, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 67, 97, 109, 101, 114,
			97, 83, 117, 98, 115, 99, 114, 105, 98, 101,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 67, 97, 109,
			101, 114, 97, 73, 110, 112, 117, 116, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 83, 117, 99, 99, 101,
			115, 115, 1, 0, 0, 0, 17, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 112, 112, 69,
			114, 114, 111, 114, 1, 0, 0, 0, 16, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 112,
			112, 70, 108, 97, 103, 1, 0, 0, 0, 16,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 73, 110, 102, 111, 1, 0, 0, 0,
			16, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 84, 105, 109, 101, 1, 0, 0,
			0, 15, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 77, 97, 112, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 65, 112, 112, 77, 97, 112, 124, 77, 111,
			110, 117, 109, 101, 110, 116, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 69, 110, 116, 105, 116, 121, 73,
			110, 102, 111, 1, 0, 0, 0, 25, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			69, 110, 116, 105, 116, 121, 80, 97, 121, 108,
			111, 97, 100, 1, 0, 0, 0, 30, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 65, 112, 112,
			69, 110, 116, 105, 116, 121, 80, 97, 121, 108,
			111, 97, 100, 124, 73, 116, 101, 109, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 84, 101, 97, 109, 73,
			110, 102, 111, 1, 0, 0, 0, 27, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 65, 112, 112,
			84, 101, 97, 109, 73, 110, 102, 111, 124, 77,
			101, 109, 98, 101, 114, 1, 0, 0, 0, 25,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 65,
			112, 112, 84, 101, 97, 109, 73, 110, 102, 111,
			124, 78, 111, 116, 101, 1, 0, 0, 0, 23,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 84, 101, 97, 109, 77, 101, 115, 115,
			97, 103, 101, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			84, 101, 97, 109, 67, 104, 97, 116, 1, 0,
			0, 0, 18, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 77, 97, 114, 107, 101,
			114, 1, 0, 0, 0, 28, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 65, 112, 112, 77, 97,
			114, 107, 101, 114, 124, 83, 101, 108, 108, 79,
			114, 100, 101, 114, 1, 0, 0, 0, 22, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 112,
			112, 77, 97, 112, 77, 97, 114, 107, 101, 114,
			115, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 67, 108,
			97, 110, 73, 110, 102, 111, 1, 0, 0, 0,
			23, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 67, 108, 97, 110, 77, 101, 115,
			115, 97, 103, 101, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 112,
			112, 67, 108, 97, 110, 67, 104, 97, 116, 1,
			0, 0, 0, 21, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 112, 112, 78, 101, 120, 117,
			115, 65, 117, 116, 104, 1, 0, 0, 0, 22,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 67, 97, 109, 101, 114, 97, 73, 110,
			102, 111, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 112, 112, 84,
			101, 97, 109, 67, 104, 97, 110, 103, 101, 100,
			1, 0, 0, 0, 26, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 78, 101, 119,
			84, 101, 97, 109, 77, 101, 115, 115, 97, 103,
			101, 1, 0, 0, 0, 25, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 69, 110,
			116, 105, 116, 121, 67, 104, 97, 110, 103, 101,
			100, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 67, 108,
			97, 110, 67, 104, 97, 110, 103, 101, 100, 1,
			0, 0, 0, 26, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 112, 112, 78, 101, 119, 67,
			108, 97, 110, 77, 101, 115, 115, 97, 103, 101,
			1, 0, 0, 0, 22, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 67, 97, 109,
			101, 114, 97, 82, 97, 121, 115, 1, 0, 0,
			0, 29, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 65, 112, 112, 67, 97, 109, 101, 114, 97,
			82, 97, 121, 115, 124, 69, 110, 116, 105, 116,
			121, 1, 0, 0, 0, 17, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 73, 68, 101, 115,
			105, 103, 110, 1, 0, 0, 0, 25, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 73, 83,
			116, 97, 116, 101, 67, 111, 110, 116, 97, 105,
			110, 101, 114, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 73, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 84, 105, 109, 101, 114, 65, 73, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 1, 0,
			0, 0, 34, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 108, 97, 121, 101, 114, 68, 101,
			116, 101, 99, 116, 101, 100, 65, 73, 69, 118,
			101, 110, 116, 68, 97, 116, 97, 1, 0, 0,
			0, 31, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 72, 101, 97, 108, 116, 104, 66, 101, 108,
			111, 119, 65, 73, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 1, 0, 0, 0, 27, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 73, 110, 82,
			97, 110, 103, 101, 65, 73, 69, 118, 101, 110,
			116, 68, 97, 116, 97, 1, 0, 0, 0, 31,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 72,
			117, 110, 103, 101, 114, 65, 98, 111, 118, 101,
			65, 73, 69, 118, 101, 110, 116, 68, 97, 116,
			97, 1, 0, 0, 0, 34, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 84, 105, 114, 101, 100,
			110, 101, 115, 115, 65, 98, 111, 118, 101, 65,
			73, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			1, 0, 0, 0, 29, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 109, 109, 111, 66, 101,
			108, 111, 119, 65, 73, 69, 118, 101, 110, 116,
			68, 97, 116, 97, 1, 0, 0, 0, 34, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 84, 104,
			114, 101, 97, 116, 68, 101, 116, 101, 99, 116,
			101, 100, 65, 73, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 1, 0, 0, 0, 34, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 84, 97, 114,
			103, 101, 116, 68, 101, 116, 101, 99, 116, 101,
			100, 65, 73, 69, 118, 101, 110, 116, 68, 97,
			116, 97, 1, 0, 0, 0, 26, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 104, 97, 110,
			99, 101, 65, 73, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 1, 0, 0, 0, 35, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 84, 105, 109,
			101, 83, 105, 110, 99, 101, 84, 104, 114, 101,
			97, 116, 65, 73, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 1, 0, 0, 0, 35, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 103, 103,
			114, 101, 115, 115, 105, 111, 110, 84, 105, 109,
			101, 114, 65, 73, 69, 118, 101, 110, 116, 68,
			97, 116, 97, 1, 0, 0, 0, 19, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 77, 101, 109,
			111, 114, 121, 66, 97, 110, 107, 1, 0, 0,
			0, 33, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 73, 110, 82, 97, 110, 103, 101, 79, 102,
			72, 111, 109, 101, 65, 73, 69, 118, 101, 110,
			116, 68, 97, 116, 97, 1, 0, 0, 0, 25,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 71,
			108, 111, 98, 97, 108, 69, 110, 116, 105, 116,
			121, 68, 97, 116, 97, 1, 0, 0, 0, 31,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 71,
			108, 111, 98, 97, 108, 69, 110, 116, 105, 116,
			121, 67, 111, 108, 108, 101, 99, 116, 105, 111,
			110, 1, 0, 0, 0, 25, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 108, 97, 110, 65,
			99, 116, 105, 111, 110, 82, 101, 115, 117, 108,
			116, 1, 0, 0, 0, 17, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 108, 97, 110, 73,
			110, 102, 111, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 67, 108, 97,
			110, 73, 110, 102, 111, 124, 82, 111, 108, 101,
			1, 0, 0, 0, 24, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 67, 108, 97, 110, 73, 110,
			102, 111, 124, 77, 101, 109, 98, 101, 114, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 67, 108, 97, 110, 73, 110, 102,
			111, 124, 73, 110, 118, 105, 116, 101, 1, 0,
			0, 0, 16, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 67, 108, 97, 110, 76, 111, 103, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 67, 108, 97, 110, 76, 111, 103,
			124, 69, 110, 116, 114, 121, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			67, 108, 97, 110, 83, 99, 111, 114, 101, 69,
			118, 101, 110, 116, 115, 1, 0, 0, 0, 30,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 67,
			108, 97, 110, 83, 99, 111, 114, 101, 69, 118,
			101, 110, 116, 115, 124, 69, 110, 116, 114, 121,
			1, 0, 0, 0, 24, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 108, 97, 110, 73, 110,
			118, 105, 116, 97, 116, 105, 111, 110, 115, 1,
			0, 0, 0, 35, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 67, 108, 97, 110, 73, 110, 118,
			105, 116, 97, 116, 105, 111, 110, 115, 124, 73,
			110, 118, 105, 116, 97, 116, 105, 111, 110, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 108, 97, 110, 76, 101, 97,
			100, 101, 114, 98, 111, 97, 114, 100, 1, 0,
			0, 0, 30, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 67, 108, 97, 110, 76, 101, 97, 100,
			101, 114, 98, 111, 97, 114, 100, 124, 69, 110,
			116, 114, 121, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 78, 101, 120,
			117, 115, 124, 80, 97, 99, 107, 101, 116, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 78, 101, 120, 117, 115, 124, 82,
			101, 113, 117, 101, 115, 116, 1, 0, 0, 0,
			23, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			78, 101, 120, 117, 115, 124, 82, 101, 115, 112,
			111, 110, 115, 101, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 124, 83, 116, 97, 116, 117, 115,
			1, 0, 0, 0, 26, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 78, 101, 120, 117, 115, 124,
			80, 105, 110, 103, 82, 101, 113, 117, 101, 115,
			116, 1, 0, 0, 0, 27, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 78, 101, 120, 117, 115,
			124, 80, 105, 110, 103, 82, 101, 115, 112, 111,
			110, 115, 101, 1, 0, 0, 0, 30, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 78, 101, 120,
			117, 115, 124, 84, 114, 97, 110, 115, 102, 101,
			114, 82, 101, 113, 117, 101, 115, 116, 1, 0,
			0, 0, 34, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 78, 101, 120, 117, 115, 124, 80, 108,
			97, 121, 101, 114, 83, 101, 99, 111, 110, 100,
			97, 114, 121, 68, 97, 116, 97, 1, 0, 0,
			0, 51, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 78, 101, 120, 117, 115, 46, 80, 108, 97,
			121, 101, 114, 83, 101, 99, 111, 110, 100, 97,
			114, 121, 68, 97, 116, 97, 124, 82, 101, 108,
			97, 116, 105, 111, 110, 115, 104, 105, 112, 68,
			97, 116, 97, 1, 0, 0, 0, 34, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 78, 101, 120,
			117, 115, 124, 83, 112, 97, 119, 110, 79, 112,
			116, 105, 111, 110, 115, 82, 101, 113, 117, 101,
			115, 116, 1, 0, 0, 0, 35, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 83, 112, 97, 119, 110, 79, 112, 116,
			105, 111, 110, 115, 82, 101, 115, 112, 111, 110,
			115, 101, 1, 0, 0, 0, 40, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 83, 108, 101, 101, 112, 105, 110, 103,
			66, 97, 103, 82, 101, 115, 112, 97, 119, 110,
			82, 101, 113, 117, 101, 115, 116, 1, 0, 0,
			0, 40, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 78, 101, 120, 117, 115, 124, 83, 108, 101,
			101, 112, 105, 110, 103, 66, 97, 103, 68, 101,
			115, 116, 114, 111, 121, 82, 101, 113, 117, 101,
			115, 116, 1, 0, 0, 0, 33, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 70, 101, 114, 114, 121, 83, 116, 97,
			116, 117, 115, 82, 101, 113, 117, 101, 115, 116,
			1, 0, 0, 0, 34, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 78, 101, 120, 117, 115, 124,
			70, 101, 114, 114, 121, 83, 116, 97, 116, 117,
			115, 82, 101, 115, 112, 111, 110, 115, 101, 1,
			0, 0, 0, 26, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 78, 101, 120, 117, 115, 124, 70,
			101, 114, 114, 121, 83, 116, 97, 116, 117, 115,
			1, 0, 0, 0, 33, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 78, 101, 120, 117, 115, 124,
			70, 101, 114, 114, 121, 82, 101, 116, 105, 114,
			101, 82, 101, 113, 117, 101, 115, 116, 1, 0,
			0, 0, 41, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 78, 101, 120, 117, 115, 124, 70, 101,
			114, 114, 121, 85, 112, 100, 97, 116, 101, 83,
			99, 104, 101, 100, 117, 108, 101, 82, 101, 113,
			117, 101, 115, 116, 1, 0, 0, 0, 35, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 124, 67, 108, 97, 110, 67, 104,
			97, 116, 66, 97, 116, 99, 104, 82, 101, 113,
			117, 101, 115, 116, 1, 0, 0, 0, 43, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 46, 67, 108, 97, 110, 67, 104,
			97, 116, 66, 97, 116, 99, 104, 82, 101, 113,
			117, 101, 115, 116, 124, 77, 101, 115, 115, 97,
			103, 101, 1, 0, 0, 0, 36, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 80, 108, 97, 121, 101, 114, 77, 97,
			110, 105, 102, 101, 115, 116, 82, 101, 113, 117,
			101, 115, 116, 1, 0, 0, 0, 15, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 69, 110, 116,
			105, 116, 121, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 66, 117, 114,
			105, 101, 100, 73, 116, 101, 109, 115, 1, 0,
			0, 0, 37, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 66, 117, 114, 105, 101, 100, 73, 116,
			101, 109, 115, 124, 83, 116, 111, 114, 101, 100,
			66, 117, 114, 105, 101, 100, 73, 116, 101, 109,
			1, 0, 0, 0, 24, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 66, 97, 115, 101, 78, 101,
			116, 119, 111, 114, 107, 97, 98, 108, 101, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 97, 115, 101, 69, 110, 116,
			105, 116, 121, 1, 0, 0, 0, 19, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 66, 97, 115,
			101, 67, 111, 109, 98, 97, 116, 1, 0, 0,
			0, 16, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 66, 97, 115, 101, 78, 80, 67, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 69, 110, 116, 105, 116, 121, 83, 108,
			111, 116, 115, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 66, 97, 115,
			101, 82, 101, 115, 111, 117, 114, 99, 101, 1,
			0, 0, 0, 20, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 69, 110, 118, 105, 114, 111, 110,
			109, 101, 110, 116, 1, 0, 0, 0, 15, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 67, 111,
			114, 112, 115, 101, 1, 0, 0, 0, 23, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 76, 111,
			111, 116, 97, 98, 108, 101, 67, 111, 114, 112,
			115, 101, 1, 0, 0, 0, 31, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 76, 111, 111, 116,
			97, 98, 108, 101, 67, 111, 114, 112, 115, 101,
			124, 80, 114, 105, 118, 97, 116, 101, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 97, 114, 101, 110, 116, 73, 110,
			102, 111, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 66, 117, 105, 108,
			100, 105, 110, 103, 66, 108, 111, 99, 107, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 87, 97, 108, 108, 112, 97, 112,
			101, 114, 84, 111, 111, 108, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			87, 111, 114, 108, 100, 73, 116, 101, 109, 1,
			0, 0, 0, 16, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 75, 101, 121, 76, 111, 99, 107,
			1, 0, 0, 0, 17, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 111, 100, 101, 76, 111,
			99, 107, 1, 0, 0, 0, 25, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 67, 111, 100, 101,
			76, 111, 99, 107, 124, 80, 114, 105, 118, 97,
			116, 101, 1, 0, 0, 0, 18, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 87, 104, 105, 116,
			101, 108, 105, 115, 116, 1, 0, 0, 0, 23,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 87,
			101, 97, 112, 111, 110, 82, 97, 99, 107, 73,
			116, 101, 109, 1, 0, 0, 0, 19, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 87, 101, 97,
			112, 111, 110, 82, 97, 99, 107, 1, 0, 0,
			0, 26, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 70, 114, 97, 110, 107, 101, 110, 115, 116,
			101, 105, 110, 84, 97, 98, 108, 101, 1, 0,
			0, 0, 26, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 66, 117, 105, 108, 100, 105, 110, 103,
			80, 114, 105, 118, 105, 108, 101, 103, 101, 1,
			0, 0, 0, 31, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 117, 105, 108, 100, 105, 110,
			103, 80, 114, 105, 118, 105, 108, 101, 103, 101,
			82, 101, 116, 114, 111, 1, 0, 0, 0, 35,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 66,
			117, 105, 108, 100, 105, 110, 103, 80, 114, 105,
			118, 105, 108, 101, 103, 101, 82, 101, 116, 114,
			111, 84, 111, 111, 108, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			116, 111, 114, 97, 103, 101, 66, 111, 120, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 72, 101, 108, 100, 69, 110, 116,
			105, 116, 121, 1, 0, 0, 0, 13, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 76, 111, 111,
			116, 1, 0, 0, 0, 23, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 71, 101, 110, 101, 114,
			105, 99, 83, 112, 97, 119, 110, 101, 114, 1,
			0, 0, 0, 34, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 71, 101, 110, 101, 114, 105, 99,
			83, 112, 97, 119, 110, 101, 114, 124, 83, 112,
			97, 119, 110, 101, 100, 69, 110, 116, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 83, 108, 101, 101, 112, 105, 110, 103,
			66, 97, 103, 1, 0, 0, 0, 17, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 77, 97, 103,
			97, 122, 105, 110, 101, 1, 0, 0, 0, 23,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 66,
			97, 115, 101, 80, 114, 111, 106, 101, 99, 116,
			105, 108, 101, 1, 0, 0, 0, 13, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 105, 103,
			110, 1, 0, 0, 0, 18, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 77, 97, 112, 69, 110,
			116, 105, 116, 121, 1, 0, 0, 0, 22, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 82, 101,
			115, 101, 97, 114, 99, 104, 84, 97, 98, 108,
			101, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 117, 100, 69, 120,
			112, 108, 111, 115, 105, 118, 101, 1, 0, 0,
			0, 26, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 82, 101, 115, 111, 117, 114, 99, 101, 69,
			120, 116, 114, 97, 99, 116, 111, 114, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 105, 110, 105, 110, 103, 81, 117,
			97, 114, 114, 121, 1, 0, 0, 0, 23, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 71, 114,
			111, 119, 97, 98, 108, 101, 69, 110, 116, 105,
			116, 121, 1, 0, 0, 0, 17, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 76, 97, 110, 100,
			109, 105, 110, 101, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 97,
			115, 101, 86, 101, 104, 105, 99, 108, 101, 1,
			0, 0, 0, 31, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 66, 97, 115, 101, 86, 101, 104,
			105, 99, 108, 101, 124, 77, 111, 117, 110, 116,
			80, 111, 105, 110, 116, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 72,
			101, 108, 105, 99, 111, 112, 116, 101, 114, 1,
			0, 0, 0, 18, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 83, 101, 114, 118, 101, 114, 71,
			105, 98, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 117, 116, 111,
			84, 117, 114, 114, 101, 116, 1, 0, 0, 0,
			21, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 112, 104, 101, 114, 101, 69, 110, 116, 105,
			116, 121, 1, 0, 0, 0, 24, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 83, 116, 97, 98,
			105, 108, 105, 116, 121, 69, 110, 116, 105, 116,
			121, 1, 0, 0, 0, 18, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 79, 119, 110, 101, 114,
			73, 110, 102, 111, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 68, 101,
			99, 97, 121, 69, 110, 116, 105, 116, 121, 1,
			0, 0, 0, 18, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 83, 112, 97, 119, 110, 97, 98,
			108, 101, 1, 0, 0, 0, 21, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 83, 112, 105, 110,
			110, 101, 114, 87, 104, 101, 101, 108, 1, 0,
			0, 0, 13, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 76, 105, 102, 116, 1, 0, 0, 0,
			23, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			86, 101, 110, 100, 105, 110, 103, 77, 97, 99,
			104, 105, 110, 101, 1, 0, 0, 0, 33, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 86, 101,
			110, 100, 105, 110, 103, 77, 97, 99, 104, 105,
			110, 101, 124, 83, 101, 108, 108, 79, 114, 100,
			101, 114, 1, 0, 0, 0, 42, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 86, 101, 110, 100,
			105, 110, 103, 77, 97, 99, 104, 105, 110, 101,
			124, 83, 101, 108, 108, 79, 114, 100, 101, 114,
			67, 111, 110, 116, 97, 105, 110, 101, 114, 1,
			0, 0, 0, 28, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 86, 101, 110, 100, 105, 110, 103,
			77, 97, 99, 104, 105, 110, 101, 83, 116, 97,
			116, 115, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 66, 114, 97, 100,
			108, 101, 121, 65, 80, 67, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			87, 97, 116, 101, 114, 87, 101, 108, 108, 1,
			0, 0, 0, 22, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 72, 111, 116, 65, 105, 114, 66,
			97, 108, 108, 111, 111, 110, 1, 0, 0, 0,
			16, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 65, 77, 83, 105, 116, 101, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 77, 111, 116, 111, 114, 98, 111, 97, 116,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 77, 105, 110, 105, 99, 111,
			112, 116, 101, 114, 1, 0, 0, 0, 23, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 77, 111,
			100, 117, 108, 97, 114, 86, 101, 104, 105, 99,
			108, 101, 1, 0, 0, 0, 19, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 77, 111, 100, 117,
			108, 97, 114, 67, 97, 114, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 105, 109, 112, 108, 101, 85, 73, 68, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 83, 105, 109, 112, 108, 101, 85,
			73, 110, 116, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 105, 109,
			112, 108, 101, 73, 110, 116, 1, 0, 0, 0,
			20, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			86, 101, 104, 105, 99, 108, 101, 76, 105, 102,
			116, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 69, 110, 103, 105, 110,
			101, 83, 116, 111, 114, 97, 103, 101, 1, 0,
			0, 0, 17, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 73, 79, 69, 110, 116, 105, 116, 121,
			1, 0, 0, 0, 30, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 73, 79, 69, 110, 116, 105,
			116, 121, 124, 73, 79, 67, 111, 110, 110, 101,
			99, 116, 105, 111, 110, 1, 0, 0, 0, 38,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 73,
			79, 69, 110, 116, 105, 116, 121, 43, 73, 79,
			67, 111, 110, 110, 101, 99, 116, 105, 111, 110,
			124, 76, 105, 110, 101, 86, 101, 99, 1, 0,
			0, 0, 44, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 73, 79, 69, 110, 116, 105, 116, 121,
			43, 73, 79, 67, 111, 110, 110, 101, 99, 116,
			105, 111, 110, 124, 76, 105, 110, 101, 80, 111,
			105, 110, 116, 76, 105, 115, 116, 1, 0, 0,
			0, 20, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 117, 122, 122, 108, 101, 82, 101, 115,
			101, 116, 1, 0, 0, 0, 28, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 82, 101, 108, 97,
			116, 105, 111, 110, 115, 104, 105, 112, 77, 97,
			110, 97, 103, 101, 114, 1, 0, 0, 0, 51,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 82,
			101, 108, 97, 116, 105, 111, 110, 115, 104, 105,
			112, 77, 97, 110, 97, 103, 101, 114, 124, 80,
			108, 97, 121, 101, 114, 82, 101, 108, 97, 116,
			105, 111, 110, 115, 104, 105, 112, 73, 110, 102,
			111, 1, 0, 0, 0, 48, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 82, 101, 108, 97, 116,
			105, 111, 110, 115, 104, 105, 112, 77, 97, 110,
			97, 103, 101, 114, 124, 80, 108, 97, 121, 101,
			114, 82, 101, 108, 97, 116, 105, 111, 110, 115,
			104, 105, 112, 115, 1, 0, 0, 0, 16, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 69, 103,
			103, 72, 117, 110, 116, 1, 0, 0, 0, 26,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 69,
			103, 103, 72, 117, 110, 116, 124, 69, 103, 103,
			72, 117, 110, 116, 101, 114, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 114, 99, 97, 100, 101, 77, 97, 99, 104,
			105, 110, 101, 1, 0, 0, 0, 33, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 65, 114, 99,
			97, 100, 101, 77, 97, 99, 104, 105, 110, 101,
			124, 83, 99, 111, 114, 101, 69, 110, 116, 114,
			121, 1, 0, 0, 0, 14, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 72, 111, 114, 115, 101,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 72, 111, 114, 115, 101, 77,
			111, 100, 105, 102, 105, 101, 114, 115, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 83, 109, 97, 114, 116, 65, 108, 97,
			114, 109, 1, 0, 0, 0, 28, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 73, 110, 115, 116,
			114, 117, 109, 101, 110, 116, 82, 101, 99, 111,
			114, 100, 105, 110, 103, 1, 0, 0, 0, 32,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 73,
			110, 115, 116, 114, 117, 109, 101, 110, 116, 82,
			101, 99, 111, 114, 100, 105, 110, 103, 78, 111,
			116, 101, 1, 0, 0, 0, 31, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 73, 110, 115, 116,
			114, 117, 109, 101, 110, 116, 77, 105, 100, 105,
			66, 105, 110, 100, 105, 110, 103, 115, 1, 0,
			0, 0, 30, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 73, 110, 115, 116, 114, 117, 109, 101,
			110, 116, 77, 105, 100, 105, 66, 105, 110, 100,
			105, 110, 103, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 76, 105, 103,
			104, 116, 83, 116, 114, 105, 110, 103, 1, 0,
			0, 0, 32, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 76, 105, 103, 104, 116, 83, 116, 114,
			105, 110, 103, 124, 83, 116, 114, 105, 110, 103,
			80, 111, 105, 110, 116, 1, 0, 0, 0, 22,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 76,
			105, 103, 104, 116, 68, 101, 112, 108, 111, 121,
			101, 114, 1, 0, 0, 0, 17, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 82, 67, 69, 110,
			116, 105, 116, 121, 1, 0, 0, 0, 24, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 67, 111,
			109, 112, 117, 116, 101, 114, 83, 116, 97, 116,
			105, 111, 110, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 67, 111, 109,
			112, 111, 115, 116, 101, 114, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			86, 101, 104, 105, 99, 108, 101, 86, 101, 110,
			100, 111, 114, 1, 0, 0, 0, 36, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 86, 101, 104,
			105, 99, 108, 101, 86, 101, 110, 100, 111, 114,
			124, 80, 108, 97, 121, 101, 114, 83, 116, 111,
			114, 97, 103, 101, 1, 0, 0, 0, 56, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 86, 101,
			104, 105, 99, 108, 101, 86, 101, 110, 100, 111,
			114, 43, 80, 108, 97, 121, 101, 114, 83, 116,
			111, 114, 97, 103, 101, 124, 80, 108, 97, 121,
			101, 114, 83, 116, 111, 114, 101, 100, 86, 101,
			104, 105, 99, 108, 101, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			104, 111, 112, 75, 101, 101, 112, 101, 114, 1,
			0, 0, 0, 18, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 87, 97, 116, 101, 114, 80, 111,
			111, 108, 1, 0, 0, 0, 14, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 80, 104, 111, 116,
			111, 1, 0, 0, 0, 19, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 80, 104, 111, 116, 111,
			70, 114, 97, 109, 101, 1, 0, 0, 0, 22,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 86,
			101, 104, 105, 99, 108, 101, 77, 111, 100, 117,
			108, 101, 1, 0, 0, 0, 20, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 77, 105, 120, 105,
			110, 103, 84, 97, 98, 108, 101, 1, 0, 0,
			0, 17, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 69, 108, 101, 118, 97, 116, 111, 114, 1,
			0, 0, 0, 20, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 83, 107, 117, 108, 108, 84, 114,
			111, 112, 104, 121, 1, 0, 0, 0, 17, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 67, 97,
			115, 115, 101, 116, 116, 101, 1, 0, 0, 0,
			18, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			84, 101, 108, 101, 112, 104, 111, 110, 101, 1,
			0, 0, 0, 16, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 111, 111, 109, 66, 111, 120,
			1, 0, 0, 0, 17, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 78, 101, 111, 110, 83, 105,
			103, 110, 1, 0, 0, 0, 24, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 111, 110,
			83, 105, 103, 110, 124, 76, 105, 103, 104, 116,
			115, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 84, 114, 97, 105, 110,
			69, 110, 103, 105, 110, 101, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			83, 117, 98, 69, 110, 116, 105, 116, 121, 76,
			105, 115, 116, 1, 0, 0, 0, 23, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 77, 97, 114,
			107, 101, 116, 84, 101, 114, 109, 105, 110, 97,
			108, 1, 0, 0, 0, 36, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 77, 97, 114, 107, 101,
			116, 84, 101, 114, 109, 105, 110, 97, 108, 124,
			80, 101, 110, 100, 105, 110, 103, 79, 114, 100,
			101, 114, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 68, 101, 108, 105,
			118, 101, 114, 121, 68, 114, 111, 110, 101, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 71, 97, 109, 101, 77, 111, 100,
			101, 1, 0, 0, 0, 26, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 71, 97, 109, 101, 77,
			111, 100, 101, 124, 84, 101, 97, 109, 73, 110,
			102, 111, 1, 0, 0, 0, 29, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 71, 97, 109, 101,
			77, 111, 100, 101, 124, 83, 99, 111, 114, 101,
			67, 111, 108, 117, 109, 110, 1, 0, 0, 0,
			29, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			71, 97, 109, 101, 77, 111, 100, 101, 124, 80,
			108, 97, 121, 101, 114, 83, 99, 111, 114, 101,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 82, 101, 99, 108, 97, 105,
			109, 77, 97, 110, 97, 103, 101, 114, 1, 0,
			0, 0, 35, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 82, 101, 99, 108, 97, 105, 109, 77,
			97, 110, 97, 103, 101, 114, 124, 82, 101, 99,
			108, 97, 105, 109, 73, 110, 102, 111, 1, 0,
			0, 0, 24, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 82, 101, 99, 108, 97, 105, 109, 84,
			101, 114, 109, 105, 110, 97, 108, 1, 0, 0,
			0, 20, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 83, 108, 111, 116, 77, 97, 99, 104, 105,
			110, 101, 1, 0, 0, 0, 17, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 97, 114, 100,
			71, 97, 109, 101, 1, 0, 0, 0, 28, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 67, 97,
			114, 100, 71, 97, 109, 101, 124, 67, 97, 114,
			100, 80, 108, 97, 121, 101, 114, 1, 0, 0,
			0, 29, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 67, 97, 114, 100, 71, 97, 109, 101, 124,
			84, 101, 120, 97, 115, 72, 111, 108, 100, 69,
			109, 1, 0, 0, 0, 30, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 67, 97, 114, 100, 71,
			97, 109, 101, 124, 82, 111, 117, 110, 100, 82,
			101, 115, 117, 108, 116, 115, 1, 0, 0, 0,
			37, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			67, 97, 114, 100, 71, 97, 109, 101, 43, 82,
			111, 117, 110, 100, 82, 101, 115, 117, 108, 116,
			115, 124, 82, 101, 115, 117, 108, 116, 1, 0,
			0, 0, 27, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 67, 97, 114, 100, 71, 97, 109, 101,
			124, 66, 108, 97, 99, 107, 106, 97, 99, 107,
			1, 0, 0, 0, 37, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 67, 97, 114, 100, 71, 97,
			109, 101, 124, 66, 108, 97, 99, 107, 106, 97,
			99, 107, 67, 97, 114, 100, 80, 108, 97, 121,
			101, 114, 1, 0, 0, 0, 26, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 67, 97, 114, 100,
			71, 97, 109, 101, 124, 67, 97, 114, 100, 76,
			105, 115, 116, 1, 0, 0, 0, 14, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 67, 114, 97,
			110, 101, 1, 0, 0, 0, 25, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 111, 110, 110,
			101, 99, 116, 101, 100, 83, 112, 101, 97, 107,
			101, 114, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 86, 111, 105, 99,
			101, 109, 97, 105, 108, 69, 110, 116, 114, 121,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 117, 100, 105, 111, 69,
			110, 116, 105, 116, 121, 1, 0, 0, 0, 24,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 77,
			105, 99, 114, 111, 112, 104, 111, 110, 101, 83,
			116, 97, 110, 100, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 67, 111,
			109, 109, 97, 110, 100, 66, 108, 111, 99, 107,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 117, 98, 109, 97, 114,
			105, 110, 101, 1, 0, 0, 0, 26, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 108, 101,
			101, 112, 105, 110, 103, 66, 97, 103, 67, 97,
			109, 112, 101, 114, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 67, 97,
			109, 112, 101, 114, 77, 111, 100, 117, 108, 101,
			1, 0, 0, 0, 22, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 97, 105, 110, 116, 97,
			98, 108, 101, 83, 105, 103, 110, 1, 0, 0,
			0, 13, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 77, 76, 82, 83, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 83,
			110, 111, 119, 109, 111, 98, 105, 108, 101, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 80, 97, 116, 116, 101, 114, 110,
			70, 105, 114, 101, 119, 111, 114, 107, 1, 0,
			0, 0, 31, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 80, 97, 116, 116, 101, 114, 110, 70,
			105, 114, 101, 119, 111, 114, 107, 124, 68, 101,
			115, 105, 103, 110, 1, 0, 0, 0, 29, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 80, 97,
			116, 116, 101, 114, 110, 70, 105, 114, 101, 119,
			111, 114, 107, 124, 83, 116, 97, 114, 1, 0,
			0, 0, 36, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 80, 97, 116, 116, 101, 114, 110, 70,
			105, 114, 101, 119, 111, 114, 107, 124, 83, 97,
			118, 101, 100, 68, 101, 115, 105, 103, 110, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 97, 114, 103, 111, 80, 108,
			97, 110, 101, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 80, 97, 105,
			110, 116, 101, 100, 73, 116, 101, 109, 1, 0,
			0, 0, 14, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 83, 112, 114, 97, 121, 1, 0, 0,
			0, 18, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 83, 112, 114, 97, 121, 76, 105, 110, 101,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 112, 114, 97, 121, 76,
			105, 115, 116, 1, 0, 0, 0, 18, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 76, 105, 110,
			101, 80, 111, 105, 110, 116, 1, 0, 0, 0,
			16, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			90, 105, 112, 108, 105, 110, 101, 1, 0, 0,
			0, 25, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 90, 105, 112, 108, 105, 110, 101, 77, 111,
			117, 110, 116, 97, 98, 108, 101, 1, 0, 0,
			0, 28, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 90, 105, 112, 108, 105, 110, 101, 65, 114,
			114, 105, 118, 97, 108, 80, 111, 105, 110, 116,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 66, 97, 115, 101, 84, 114,
			97, 105, 110, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 67, 111, 97,
			108, 105, 110, 103, 84, 111, 119, 101, 114, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 97, 115, 101, 79, 118, 101,
			110, 1, 0, 0, 0, 29, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 66, 97, 115, 101, 79,
			118, 101, 110, 124, 67, 111, 111, 107, 105, 110,
			103, 73, 116, 101, 109, 1, 0, 0, 0, 23,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 66,
			114, 97, 105, 110, 67, 111, 109, 112, 111, 110,
			101, 110, 116, 1, 0, 0, 0, 26, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 80, 114, 111,
			99, 101, 100, 117, 114, 97, 108, 68, 117, 110,
			103, 101, 111, 110, 1, 0, 0, 0, 27, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 73, 110,
			100, 117, 115, 116, 114, 105, 97, 108, 67, 111,
			110, 118, 101, 121, 111, 114, 1, 0, 0, 0,
			38, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			73, 110, 100, 117, 115, 116, 114, 105, 97, 108,
			67, 111, 110, 118, 101, 121, 111, 114, 124, 73,
			116, 101, 109, 70, 105, 108, 116, 101, 114, 1,
			0, 0, 0, 42, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 73, 110, 100, 117, 115, 116, 114,
			105, 97, 108, 67, 111, 110, 118, 101, 121, 111,
			114, 124, 73, 116, 101, 109, 70, 105, 108, 116,
			101, 114, 76, 105, 115, 116, 1, 0, 0, 0,
			26, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			73, 110, 100, 117, 115, 116, 114, 105, 97, 108,
			67, 114, 97, 102, 116, 101, 114, 1, 0, 0,
			0, 35, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 73, 110, 100, 117, 115, 116, 114, 105, 97,
			108, 67, 111, 110, 118, 101, 121, 111, 114, 84,
			114, 97, 110, 115, 102, 101, 114, 1, 0, 0,
			0, 48, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 73, 110, 100, 117, 115, 116, 114, 105, 97,
			108, 67, 111, 110, 118, 101, 121, 111, 114, 84,
			114, 97, 110, 115, 102, 101, 114, 124, 73, 116,
			101, 109, 84, 114, 97, 110, 115, 102, 101, 114,
			1, 0, 0, 0, 14, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 68, 114, 111, 110, 101, 1,
			0, 0, 0, 23, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 84, 105, 109, 101, 100, 69, 120,
			112, 108, 111, 115, 105, 118, 101, 1, 0, 0,
			0, 19, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 116, 116, 97, 99, 107, 72, 101, 108,
			105, 1, 0, 0, 0, 25, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 116, 116, 97, 99,
			107, 72, 101, 108, 105, 84, 117, 114, 114, 101,
			116, 1, 0, 0, 0, 26, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 116, 116, 97, 99,
			107, 72, 101, 108, 105, 82, 111, 99, 107, 101,
			116, 115, 1, 0, 0, 0, 20, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 108, 97, 110,
			77, 97, 110, 97, 103, 101, 114, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 115, 115, 111, 99, 105, 97, 116, 101,
			100, 70, 105, 108, 101, 115, 1, 0, 0, 0,
			39, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			65, 115, 115, 111, 99, 105, 97, 116, 101, 100,
			70, 105, 108, 101, 115, 124, 65, 115, 115, 111,
			99, 105, 97, 116, 101, 100, 70, 105, 108, 101,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 78, 101, 120, 117, 115, 70,
			101, 114, 114, 121, 1, 0, 0, 0, 20, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 78, 101,
			120, 117, 115, 73, 115, 108, 97, 110, 100, 1,
			0, 0, 0, 26, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 78, 101, 120, 117, 115, 68, 111,
			99, 107, 84, 101, 114, 109, 105, 110, 97, 108,
			1, 0, 0, 0, 40, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 78, 101, 120, 117, 115, 68,
			111, 99, 107, 84, 101, 114, 109, 105, 110, 97,
			108, 124, 83, 99, 104, 101, 100, 117, 108, 101,
			69, 110, 116, 114, 121, 1, 0, 0, 0, 17,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 66,
			97, 115, 101, 66, 111, 97, 116, 1, 0, 0,
			0, 21, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 68, 105, 101, 115, 101, 108, 69, 110, 103,
			105, 110, 101, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 82, 111, 99,
			107, 105, 110, 103, 67, 104, 97, 105, 114, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 72, 101, 97, 100, 68, 97, 116,
			97, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 87, 97, 110, 116, 101,
			100, 80, 111, 115, 116, 101, 114, 1, 0, 0,
			0, 21, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 87, 97, 121, 112, 111, 105, 110, 116, 82,
			97, 99, 101, 1, 0, 0, 0, 16, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 82, 97, 103,
			100, 111, 108, 108, 1, 0, 0, 0, 22, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 76, 101,
			103, 97, 99, 121, 83, 104, 101, 108, 116, 101,
			114, 1, 0, 0, 0, 28, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 77, 101, 116, 97, 108,
			68, 101, 116, 101, 99, 116, 111, 114, 83, 111,
			117, 114, 99, 101, 1, 0, 0, 0, 23, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 84, 117,
			116, 111, 114, 105, 97, 108, 73, 115, 108, 97,
			110, 100, 1, 0, 0, 0, 24, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 105, 110, 101,
			109, 97, 116, 105, 99, 69, 110, 116, 105, 116,
			121, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 72, 97, 114, 98, 111,
			114, 67, 114, 97, 110, 101, 1, 0, 0, 0,
			31, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			72, 97, 114, 98, 111, 114, 67, 114, 97, 110,
			101, 124, 81, 117, 101, 117, 101, 100, 77, 111,
			118, 101, 1, 0, 0, 0, 18, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 97, 114, 103,
			111, 83, 104, 105, 112, 1, 0, 0, 0, 27,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 67,
			97, 114, 103, 111, 83, 104, 105, 112, 67, 111,
			110, 116, 97, 105, 110, 101, 114, 1, 0, 0,
			0, 25, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 77, 105, 115, 115, 105, 111, 110, 77, 97,
			112, 77, 97, 114, 107, 101, 114, 1, 0, 0,
			0, 13, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 66, 105, 107, 101, 1, 0, 0, 0, 25,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 84,
			114, 97, 118, 101, 108, 108, 105, 110, 103, 86,
			101, 110, 100, 111, 114, 1, 0, 0, 0, 30,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 86,
			101, 110, 100, 105, 110, 103, 68, 121, 110, 97,
			109, 105, 99, 80, 114, 105, 99, 105, 110, 103,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 83, 97, 108, 101, 115, 68,
			97, 116, 97, 1, 0, 0, 0, 20, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 84, 105, 110,
			67, 97, 110, 65, 108, 97, 114, 109, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 105, 103, 105, 116, 97, 108, 67,
			108, 111, 99, 107, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 69, 108,
			101, 118, 97, 116, 111, 114, 76, 105, 102, 116,
			1, 0, 0, 0, 31, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 68, 105, 118, 101, 114, 80,
			114, 111, 112, 117, 108, 115, 105, 111, 110, 86,
			101, 104, 105, 99, 108, 101, 1, 0, 0, 0,
			26, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			78, 80, 67, 86, 101, 110, 100, 105, 110, 103,
			77, 97, 99, 104, 105, 110, 101, 1, 0, 0,
			0, 16, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 77, 97, 105, 108, 98, 111, 120, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 71, 117, 110, 87, 101, 97, 112, 111,
			110, 77, 111, 100, 1, 0, 0, 0, 22, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 97,
			115, 101, 83, 99, 117, 108, 112, 116, 117, 114,
			101, 1, 0, 0, 0, 17, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 67, 97, 116, 97, 112,
			117, 108, 116, 1, 0, 0, 0, 19, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 83, 105, 101,
			103, 101, 84, 111, 119, 101, 114, 1, 0, 0,
			0, 17, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 66, 97, 108, 108, 105, 115, 116, 97, 1,
			0, 0, 0, 20, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 66, 97, 108, 108, 105, 115, 116,
			97, 71, 117, 110, 1, 0, 0, 0, 21, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 97,
			116, 116, 101, 114, 105, 110, 103, 82, 97, 109,
			1, 0, 0, 0, 25, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 84, 101, 109, 112, 111, 114,
			97, 114, 121, 82, 97, 103, 100, 111, 108, 108,
			1, 0, 0, 0, 28, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 111, 110, 115, 116, 114,
			117, 99, 116, 97, 98, 108, 101, 69, 110, 116,
			105, 116, 121, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 67, 104, 105,
			99, 107, 101, 110, 83, 116, 97, 116, 117, 115,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 104, 105, 99, 107, 101,
			110, 67, 111, 111, 112, 1, 0, 0, 0, 23,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 70,
			97, 114, 109, 97, 98, 108, 101, 65, 110, 105,
			109, 97, 108, 1, 0, 0, 0, 16, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 66, 101, 101,
			104, 105, 118, 101, 1, 0, 0, 0, 23, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 101,
			101, 77, 97, 115, 116, 101, 114, 83, 119, 97,
			114, 109, 1, 0, 0, 0, 28, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 111, 110, 116,
			97, 105, 110, 101, 114, 67, 111, 114, 112, 115,
			101, 68, 97, 116, 97, 1, 0, 0, 0, 22,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 86,
			105, 110, 101, 77, 111, 117, 110, 116, 97, 98,
			108, 101, 1, 0, 0, 0, 20, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 84, 114, 101, 101,
			82, 101, 115, 112, 97, 119, 110, 1, 0, 0,
			0, 17, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 86, 105, 110, 101, 84, 114, 101, 101, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 86, 105, 110, 101, 68, 101, 115,
			116, 105, 110, 97, 116, 105, 111, 110, 1, 0,
			0, 0, 30, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 83, 116, 97, 116, 105, 99, 82, 101,
			115, 112, 97, 119, 110, 65, 114, 101, 97, 68,
			97, 116, 97, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 73, 116, 101,
			109, 67, 111, 110, 116, 97, 105, 110, 101, 114,
			1, 0, 0, 0, 13, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 73, 116, 101, 109, 1, 0,
			0, 0, 26, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 73, 116, 101, 109, 124, 73, 110, 115,
			116, 97, 110, 99, 101, 68, 97, 116, 97, 1,
			0, 0, 0, 27, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 73, 116, 101, 109, 124, 67, 111,
			110, 100, 105, 116, 105, 111, 110, 68, 97, 116,
			97, 1, 0, 0, 0, 28, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 73, 116, 101, 109, 79,
			119, 110, 101, 114, 115, 104, 105, 112, 65, 109,
			111, 117, 110, 116, 1, 0, 0, 0, 19, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 66, 97,
			115, 101, 80, 108, 97, 121, 101, 114, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 108, 97, 121, 101, 114, 84, 101,
			97, 109, 1, 0, 0, 0, 30, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 80, 108, 97, 121,
			101, 114, 84, 101, 97, 109, 124, 84, 101, 97,
			109, 77, 101, 109, 98, 101, 114, 1, 0, 0,
			0, 25, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 108, 97, 121, 101, 114, 77, 101, 116,
			97, 98, 111, 108, 105, 115, 109, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 108, 97, 121, 101, 114, 77, 111, 100,
			105, 102, 105, 101, 114, 115, 1, 0, 0, 0,
			17, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			77, 111, 100, 105, 102, 105, 101, 114, 1, 0,
			0, 0, 17, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 105, 115, 115, 105, 111, 110, 115,
			1, 0, 0, 0, 24, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 79, 98, 106, 101, 99, 116,
			105, 118, 101, 83, 116, 97, 116, 117, 115, 1,
			0, 0, 0, 21, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 77, 105, 115, 115, 105, 111, 110,
			80, 111, 105, 110, 116, 1, 0, 0, 0, 22,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 77,
			105, 115, 115, 105, 111, 110, 69, 110, 116, 105,
			116, 121, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 77, 105, 115, 115,
			105, 111, 110, 82, 101, 119, 97, 114, 100, 1,
			0, 0, 0, 24, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 77, 105, 115, 115, 105, 111, 110,
			73, 110, 115, 116, 97, 110, 99, 101, 1, 0,
			0, 0, 28, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 105, 115, 115, 105, 111, 110, 73,
			110, 115, 116, 97, 110, 99, 101, 68, 97, 116,
			97, 1, 0, 0, 0, 24, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 80, 108, 97, 121, 101,
			114, 73, 110, 118, 101, 110, 116, 111, 114, 121,
			1, 0, 0, 0, 25, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 101, 114, 115, 105, 115,
			116, 97, 110, 116, 80, 108, 97, 121, 101, 114,
			1, 0, 0, 0, 24, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 80, 108, 97, 121, 101, 114,
			76, 105, 102, 101, 83, 116, 111, 114, 121, 1,
			0, 0, 0, 34, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 80, 108, 97, 121, 101, 114, 76,
			105, 102, 101, 83, 116, 111, 114, 121, 124, 68,
			101, 97, 116, 104, 73, 110, 102, 111, 1, 0,
			0, 0, 36, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 80, 108, 97, 121, 101, 114, 76, 105,
			102, 101, 83, 116, 111, 114, 121, 124, 87, 101,
			97, 112, 111, 110, 83, 116, 97, 116, 115, 1,
			0, 0, 0, 36, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 80, 108, 97, 121, 101, 114, 76,
			105, 102, 101, 83, 116, 111, 114, 121, 124, 71,
			101, 110, 101, 114, 105, 99, 83, 116, 97, 116,
			1, 0, 0, 0, 16, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 77, 97, 112, 78, 111, 116,
			101, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 77, 97, 112, 78, 111,
			116, 101, 76, 105, 115, 116, 1, 0, 0, 0,
			20, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			73, 116, 101, 109, 67, 114, 97, 102, 116, 101,
			114, 1, 0, 0, 0, 25, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 73, 116, 101, 109, 67,
			114, 97, 102, 116, 101, 114, 124, 84, 97, 115,
			107, 1, 0, 0, 0, 25, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 83, 112, 101, 99, 116,
			97, 116, 101, 84, 101, 97, 109, 73, 110, 102,
			111, 1, 0, 0, 0, 21, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 83, 112, 101, 99, 116,
			97, 116, 101, 84, 101, 97, 109, 1, 0, 0,
			0, 20, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 108, 97, 121, 101, 114, 83, 116, 97,
			116, 101, 1, 0, 0, 0, 21, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 80, 108, 97, 121,
			101, 114, 78, 97, 109, 101, 73, 68, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 101, 109, 111, 72, 101, 97, 100,
			101, 114, 1, 0, 0, 0, 29, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 70, 105, 108, 101,
			83, 116, 111, 114, 97, 103, 101, 67, 97, 99,
			104, 101, 68, 97, 116, 97, 1, 0, 0, 0,
			17, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			68, 101, 109, 111, 83, 104, 111, 116, 1, 0,
			0, 0, 28, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 68, 101, 109, 111, 83, 104, 111, 116,
			86, 101, 99, 116, 111, 114, 84, 114, 97, 99,
			107, 1, 0, 0, 0, 31, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 101, 109, 111, 83,
			104, 111, 116, 86, 101, 99, 116, 111, 114, 75,
			101, 121, 102, 114, 97, 109, 101, 1, 0, 0,
			0, 27, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 68, 101, 109, 111, 83, 104, 111, 116, 70,
			108, 111, 97, 116, 84, 114, 97, 99, 107, 1,
			0, 0, 0, 30, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 68, 101, 109, 111, 83, 104, 111,
			116, 70, 108, 111, 97, 116, 75, 101, 121, 102,
			114, 97, 109, 101, 1, 0, 0, 0, 32, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 68, 101,
			109, 111, 83, 104, 111, 116, 81, 117, 97, 116,
			101, 114, 110, 105, 111, 110, 84, 114, 97, 99,
			107, 1, 0, 0, 0, 35, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 101, 109, 111, 83,
			104, 111, 116, 81, 117, 97, 116, 101, 114, 110,
			105, 111, 110, 75, 101, 121, 102, 114, 97, 109,
			101, 1, 0, 0, 0, 28, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 68, 101, 109, 111, 83,
			104, 111, 116, 80, 97, 114, 101, 110, 116, 84,
			114, 97, 99, 107, 1, 0, 0, 0, 31, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 68, 101,
			109, 111, 83, 104, 111, 116, 80, 97, 114, 101,
			110, 116, 75, 101, 121, 102, 114, 97, 109, 101,
			1, 0, 0, 0, 28, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 67, 111, 112, 121, 80, 97,
			115, 116, 101, 69, 110, 116, 105, 116, 121, 73,
			110, 102, 111, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 80, 97, 115,
			116, 101, 82, 101, 113, 117, 101, 115, 116, 0,
			0, 0, 0, 29, 85, 110, 105, 116, 121, 69,
			110, 103, 105, 110, 101, 124, 86, 101, 99, 116,
			111, 114, 51, 83, 101, 114, 105, 97, 108, 105,
			122, 101, 100, 1, 0, 0, 0, 14, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 72, 97, 108,
			102, 51, 0, 0, 0, 0, 25, 85, 110, 105,
			116, 121, 69, 110, 103, 105, 110, 101, 124, 82,
			97, 121, 83, 101, 114, 105, 97, 108, 105, 122,
			101, 100, 0, 0, 0, 0, 29, 85, 110, 105,
			116, 121, 69, 110, 103, 105, 110, 101, 124, 86,
			101, 99, 116, 111, 114, 52, 83, 101, 114, 105,
			97, 108, 105, 122, 101, 100, 0, 0, 0, 0,
			27, 85, 110, 105, 116, 121, 69, 110, 103, 105,
			110, 101, 124, 67, 111, 108, 111, 114, 83, 101,
			114, 105, 97, 108, 105, 122, 101, 100, 0, 0,
			0, 0, 29, 85, 110, 105, 116, 121, 69, 110,
			103, 105, 110, 101, 124, 86, 101, 99, 116, 111,
			114, 50, 83, 101, 114, 105, 97, 108, 105, 122,
			101, 100, 1, 0, 0, 0, 13, 124, 73, 110,
			112, 117, 116, 77, 101, 115, 115, 97, 103, 101,
			1, 0, 0, 0, 17, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 114, 111, 118,
			97, 108, 1, 0, 0, 0, 28, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 85, 112, 100, 97,
			116, 101, 73, 116, 101, 109, 67, 111, 110, 116,
			97, 105, 110, 101, 114, 1, 0, 0, 0, 25,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 80,
			108, 97, 121, 101, 114, 85, 112, 100, 97, 116,
			101, 76, 111, 111, 116, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 85,
			112, 100, 97, 116, 101, 73, 116, 101, 109, 1,
			0, 0, 0, 11, 124, 80, 108, 97, 121, 101,
			114, 84, 105, 99, 107, 1, 0, 0, 0, 11,
			124, 77, 111, 100, 101, 108, 83, 116, 97, 116,
			101, 1, 0, 0, 0, 19, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 84, 97, 107, 101, 68,
			97, 109, 97, 103, 101, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 69,
			110, 116, 105, 116, 121, 76, 105, 115, 116, 1,
			0, 0, 0, 23, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 114, 101, 97, 116, 101, 66,
			117, 105, 108, 100, 105, 110, 103, 1, 0, 0,
			0, 15, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 116, 116, 97, 99, 107, 1, 0, 0,
			0, 21, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 108, 97, 121, 101, 114, 65, 116, 116,
			97, 99, 107, 1, 0, 0, 0, 31, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 80, 108, 97,
			121, 101, 114, 80, 114, 111, 106, 101, 99, 116,
			105, 108, 101, 65, 116, 116, 97, 99, 107, 1,
			0, 0, 0, 33, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 80, 108, 97, 121, 101, 114, 80,
			114, 111, 106, 101, 99, 116, 105, 108, 101, 82,
			105, 99, 111, 99, 104, 101, 116, 1, 0, 0,
			0, 31, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 108, 97, 121, 101, 114, 80, 114, 111,
			106, 101, 99, 116, 105, 108, 101, 85, 112, 100,
			97, 116, 101, 1, 0, 0, 0, 24, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 80, 114, 111,
			106, 101, 99, 116, 105, 108, 101, 83, 104, 111,
			111, 116, 1, 0, 0, 0, 35, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 80, 114, 111, 106,
			101, 99, 116, 105, 108, 101, 83, 104, 111, 111,
			116, 124, 80, 114, 111, 106, 101, 99, 116, 105,
			108, 101, 1, 0, 0, 0, 11, 124, 69, 102,
			102, 101, 99, 116, 68, 97, 116, 97, 1, 0,
			0, 0, 22, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 77, 111, 100, 117, 108, 101, 77, 101,
			115, 115, 97, 103, 101, 1, 0, 0, 0, 27,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 82,
			101, 115, 112, 97, 119, 110, 73, 110, 102, 111,
			114, 109, 97, 116, 105, 111, 110, 1, 0, 0,
			0, 40, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 82, 101, 115, 112, 97, 119, 110, 73, 110,
			102, 111, 114, 109, 97, 116, 105, 111, 110, 124,
			83, 112, 97, 119, 110, 79, 112, 116, 105, 111,
			110, 115, 1, 0, 0, 0, 20, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 67, 108, 105, 101,
			110, 116, 82, 101, 97, 100, 121, 1, 0, 0,
			0, 31, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 67, 108, 105, 101, 110, 116, 82, 101, 97,
			100, 121, 124, 67, 108, 105, 101, 110, 116, 73,
			110, 102, 111, 1, 0, 0, 0, 13, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 84, 114, 101,
			101, 1, 0, 0, 0, 17, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 84, 114, 101, 101, 76,
			105, 115, 116, 1, 0, 0, 0, 21, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 87, 111, 114,
			108, 100, 77, 101, 115, 115, 97, 103, 101, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 114, 99, 97, 100, 101, 71,
			97, 109, 101, 1, 0, 0, 0, 29, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 65, 114, 99,
			97, 100, 101, 71, 97, 109, 101, 124, 97, 114,
			99, 97, 100, 101, 69, 110, 116, 1, 0, 0,
			0, 23, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 80, 104, 111, 110, 101, 68, 105, 114, 101,
			99, 116, 111, 114, 121, 1, 0, 0, 0, 38,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 80,
			104, 111, 110, 101, 68, 105, 114, 101, 99, 116,
			111, 114, 121, 124, 68, 105, 114, 101, 99, 116,
			111, 114, 121, 69, 110, 116, 114, 121, 1, 0,
			0, 0, 21, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 69, 110, 116, 105, 116, 121, 73, 100,
			76, 105, 115, 116, 1, 0, 0, 0, 18, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 82, 97,
			100, 105, 111, 76, 105, 115, 116, 1, 0, 0,
			0, 23, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 73, 116, 101, 109, 65, 109, 111, 117, 110,
			116, 76, 105, 115, 116, 1, 0, 0, 0, 29,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 87,
			105, 114, 101, 82, 101, 99, 111, 110, 110, 101,
			99, 116, 77, 101, 115, 115, 97, 103, 101, 1,
			0, 0, 0, 27, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 87, 105, 114, 101, 76, 105, 110,
			101, 65, 110, 99, 104, 111, 114, 73, 110, 102,
			111, 1, 0, 0, 0, 30, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 87, 105, 114, 101, 67,
			111, 110, 110, 101, 99, 116, 105, 111, 110, 77,
			101, 115, 115, 97, 103, 101, 1, 0, 0, 0,
			19, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			79, 99, 101, 97, 110, 80, 97, 116, 104, 115,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 86, 101, 99, 116, 111, 114,
			76, 105, 115, 116, 1, 0, 0, 0, 28, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 68, 105,
			103, 105, 116, 97, 108, 67, 108, 111, 99, 107,
			77, 101, 115, 115, 97, 103, 101, 1, 0, 0,
			0, 26, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 68, 105, 103, 105, 116, 97, 108, 67, 108,
			111, 99, 107, 65, 108, 97, 114, 109, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 86, 68, 68, 114, 97, 119, 69, 110,
			116, 114, 121, 1, 0, 0, 0, 50, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 86, 101, 110,
			100, 105, 110, 103, 77, 97, 99, 104, 105, 110,
			101, 80, 117, 114, 99, 104, 97, 115, 101, 72,
			105, 115, 116, 111, 114, 121, 69, 110, 116, 114,
			121, 77, 101, 115, 115, 97, 103, 101, 1, 0,
			0, 0, 55, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 86, 101, 110, 100, 105, 110, 103, 77,
			97, 99, 104, 105, 110, 101, 80, 117, 114, 99,
			104, 97, 115, 101, 72, 105, 115, 116, 111, 114,
			121, 69, 110, 116, 114, 121, 83, 109, 97, 108,
			108, 77, 101, 115, 115, 97, 103, 101, 1, 0,
			0, 0, 45, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 86, 101, 110, 100, 105, 110, 103, 77,
			97, 99, 104, 105, 110, 101, 80, 117, 114, 99,
			104, 97, 115, 101, 72, 105, 115, 116, 111, 114,
			121, 77, 101, 115, 115, 97, 103, 101, 1, 0,
			0, 0, 36, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 86, 101, 110, 100, 105, 110, 103, 77,
			97, 99, 104, 105, 110, 101, 76, 111, 110, 103,
			84, 101, 114, 109, 83, 116, 97, 116, 115, 1,
			0, 0, 0, 32, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 104, 105, 99, 107, 101, 110,
			67, 111, 111, 112, 83, 116, 97, 116, 117, 115,
			85, 112, 100, 97, 116, 101, 1, 0, 0, 0,
			29, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			70, 97, 114, 109, 97, 98, 108, 101, 65, 110,
			105, 109, 97, 108, 83, 116, 97, 116, 117, 115,
			1, 0, 0, 0, 23, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 78, 80, 67, 83, 101, 110,
			115, 101, 115, 83, 116, 97, 116, 101, 1, 0,
			0, 0, 18, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 97, 114, 116, 121, 68, 97, 116,
			97, 1, 0, 0, 0, 24, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 80, 97, 114, 116, 121,
			77, 101, 109, 98, 101, 114, 68, 97, 116, 97,
			1, 0, 0, 0, 18, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 87, 111, 114, 108, 100, 68,
			97, 116, 97, 1, 0, 0, 0, 16, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 77, 97, 112,
			68, 97, 116, 97, 1, 0, 0, 0, 19, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 80, 114,
			101, 102, 97, 98, 68, 97, 116, 97, 1, 0,
			0, 0, 17, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 80, 97, 116, 104, 68, 97, 116, 97,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 86, 101, 99, 116, 111, 114,
			68, 97, 116, 97, 1, 0, 0, 0, 19, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 112,
			112, 82, 101, 113, 117, 101, 115, 116, 1, 0,
			0, 0, 19, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 77, 101, 115, 115, 97,
			103, 101, 1, 0, 0, 0, 20, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 112, 112, 82,
			101, 115, 112, 111, 110, 115, 101, 1, 0, 0,
			0, 21, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 66, 114, 111, 97, 100, 99,
			97, 115, 116, 1, 0, 0, 0, 17, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			69, 109, 112, 116, 121, 1, 0, 0, 0, 23,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 83, 101, 110, 100, 77, 101, 115, 115,
			97, 103, 101, 1, 0, 0, 0, 26, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			83, 101, 116, 69, 110, 116, 105, 116, 121, 86,
			97, 108, 117, 101, 1, 0, 0, 0, 27, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 112,
			112, 80, 114, 111, 109, 111, 116, 101, 84, 111,
			76, 101, 97, 100, 101, 114, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 71, 101, 116, 78, 101, 120, 117,
			115, 65, 117, 116, 104, 1, 0, 0, 0, 27,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 67, 97, 109, 101, 114, 97, 83, 117,
			98, 115, 99, 114, 105, 98, 101, 1, 0, 0,
			0, 23, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 67, 97, 109, 101, 114, 97,
			73, 110, 112, 117, 116, 1, 0, 0, 0, 19,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 83, 117, 99, 99, 101, 115, 115, 1,
			0, 0, 0, 17, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 112, 112, 69, 114, 114, 111,
			114, 1, 0, 0, 0, 16, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 70, 108,
			97, 103, 1, 0, 0, 0, 16, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 112, 112, 73,
			110, 102, 111, 1, 0, 0, 0, 16, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			84, 105, 109, 101, 1, 0, 0, 0, 15, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 65, 112,
			112, 77, 97, 112, 1, 0, 0, 0, 24, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 65, 112,
			112, 77, 97, 112, 124, 77, 111, 110, 117, 109,
			101, 110, 116, 1, 0, 0, 0, 22, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			69, 110, 116, 105, 116, 121, 73, 110, 102, 111,
			1, 0, 0, 0, 25, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 69, 110, 116,
			105, 116, 121, 80, 97, 121, 108, 111, 97, 100,
			1, 0, 0, 0, 30, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 65, 112, 112, 69, 110, 116,
			105, 116, 121, 80, 97, 121, 108, 111, 97, 100,
			124, 73, 116, 101, 109, 1, 0, 0, 0, 20,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 84, 101, 97, 109, 73, 110, 102, 111,
			1, 0, 0, 0, 27, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 65, 112, 112, 84, 101, 97,
			109, 73, 110, 102, 111, 124, 77, 101, 109, 98,
			101, 114, 1, 0, 0, 0, 25, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 65, 112, 112, 84,
			101, 97, 109, 73, 110, 102, 111, 124, 78, 111,
			116, 101, 1, 0, 0, 0, 23, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 112, 112, 84,
			101, 97, 109, 77, 101, 115, 115, 97, 103, 101,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 112, 112, 84, 101, 97,
			109, 67, 104, 97, 116, 1, 0, 0, 0, 18,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 65,
			112, 112, 77, 97, 114, 107, 101, 114, 1, 0,
			0, 0, 28, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 65, 112, 112, 77, 97, 114, 107, 101,
			114, 124, 83, 101, 108, 108, 79, 114, 100, 101,
			114, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 77, 97,
			112, 77, 97, 114, 107, 101, 114, 115, 1, 0,
			0, 0, 20, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 67, 108, 97, 110, 73,
			110, 102, 111, 1, 0, 0, 0, 23, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 65, 112, 112,
			67, 108, 97, 110, 77, 101, 115, 115, 97, 103,
			101, 1, 0, 0, 0, 20, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 65, 112, 112, 67, 108,
			97, 110, 67, 104, 97, 116, 1, 0, 0, 0,
			21, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 78, 101, 120, 117, 115, 65, 117,
			116, 104, 1, 0, 0, 0, 22, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 65, 112, 112, 67,
			97, 109, 101, 114, 97, 73, 110, 102, 111, 1,
			0, 0, 0, 23, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 65, 112, 112, 84, 101, 97, 109,
			67, 104, 97, 110, 103, 101, 100, 1, 0, 0,
			0, 26, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 78, 101, 119, 84, 101, 97,
			109, 77, 101, 115, 115, 97, 103, 101, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 69, 110, 116, 105, 116,
			121, 67, 104, 97, 110, 103, 101, 100, 1, 0,
			0, 0, 23, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 112, 112, 67, 108, 97, 110, 67,
			104, 97, 110, 103, 101, 100, 1, 0, 0, 0,
			26, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			65, 112, 112, 78, 101, 119, 67, 108, 97, 110,
			77, 101, 115, 115, 97, 103, 101, 1, 0, 0,
			0, 22, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 112, 112, 67, 97, 109, 101, 114, 97,
			82, 97, 121, 115, 1, 0, 0, 0, 29, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 65, 112,
			112, 67, 97, 109, 101, 114, 97, 82, 97, 121,
			115, 124, 69, 110, 116, 105, 116, 121, 1, 0,
			0, 0, 17, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 65, 73, 68, 101, 115, 105, 103, 110,
			1, 0, 0, 0, 25, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 73, 83, 116, 97, 116,
			101, 67, 111, 110, 116, 97, 105, 110, 101, 114,
			1, 0, 0, 0, 20, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 73, 69, 118, 101, 110,
			116, 68, 97, 116, 97, 1, 0, 0, 0, 25,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 84,
			105, 109, 101, 114, 65, 73, 69, 118, 101, 110,
			116, 68, 97, 116, 97, 1, 0, 0, 0, 34,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 80,
			108, 97, 121, 101, 114, 68, 101, 116, 101, 99,
			116, 101, 100, 65, 73, 69, 118, 101, 110, 116,
			68, 97, 116, 97, 1, 0, 0, 0, 31, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 72, 101,
			97, 108, 116, 104, 66, 101, 108, 111, 119, 65,
			73, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			1, 0, 0, 0, 27, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 73, 110, 82, 97, 110, 103,
			101, 65, 73, 69, 118, 101, 110, 116, 68, 97,
			116, 97, 1, 0, 0, 0, 31, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 72, 117, 110, 103,
			101, 114, 65, 98, 111, 118, 101, 65, 73, 69,
			118, 101, 110, 116, 68, 97, 116, 97, 1, 0,
			0, 0, 34, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 84, 105, 114, 101, 100, 110, 101, 115,
			115, 65, 98, 111, 118, 101, 65, 73, 69, 118,
			101, 110, 116, 68, 97, 116, 97, 1, 0, 0,
			0, 29, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 65, 109, 109, 111, 66, 101, 108, 111, 119,
			65, 73, 69, 118, 101, 110, 116, 68, 97, 116,
			97, 1, 0, 0, 0, 34, 80, 114, 111, 116,
			111, 66, 117, 102, 124, 84, 104, 114, 101, 97,
			116, 68, 101, 116, 101, 99, 116, 101, 100, 65,
			73, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			1, 0, 0, 0, 34, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 84, 97, 114, 103, 101, 116,
			68, 101, 116, 101, 99, 116, 101, 100, 65, 73,
			69, 118, 101, 110, 116, 68, 97, 116, 97, 1,
			0, 0, 0, 26, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 67, 104, 97, 110, 99, 101, 65,
			73, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			1, 0, 0, 0, 35, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 84, 105, 109, 101, 83, 105,
			110, 99, 101, 84, 104, 114, 101, 97, 116, 65,
			73, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			1, 0, 0, 0, 35, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 65, 103, 103, 114, 101, 115,
			115, 105, 111, 110, 84, 105, 109, 101, 114, 65,
			73, 69, 118, 101, 110, 116, 68, 97, 116, 97,
			1, 0, 0, 0, 19, 80, 114, 111, 116, 111,
			66, 117, 102, 124, 77, 101, 109, 111, 114, 121,
			66, 97, 110, 107, 1, 0, 0, 0, 33, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 73, 110,
			82, 97, 110, 103, 101, 79, 102, 72, 111, 109,
			101, 65, 73, 69, 118, 101, 110, 116, 68, 97,
			116, 97, 1, 0, 0, 0, 25, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 71, 108, 111, 98,
			97, 108, 69, 110, 116, 105, 116, 121, 68, 97,
			116, 97, 1, 0, 0, 0, 31, 80, 114, 111,
			116, 111, 66, 117, 102, 124, 71, 108, 111, 98,
			97, 108, 69, 110, 116, 105, 116, 121, 67, 111,
			108, 108, 101, 99, 116, 105, 111, 110, 1, 0,
			0, 0, 25, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 67, 108, 97, 110, 65, 99, 116, 105,
			111, 110, 82, 101, 115, 117, 108, 116, 1, 0,
			0, 0, 17, 80, 114, 111, 116, 111, 66, 117,
			102, 124, 67, 108, 97, 110, 73, 110, 102, 111,
			1, 0, 0, 0, 22, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 67, 108, 97, 110, 73, 110,
			102, 111, 124, 82, 111, 108, 101, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			46, 67, 108, 97, 110, 73, 110, 102, 111, 124,
			77, 101, 109, 98, 101, 114, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			67, 108, 97, 110, 73, 110, 102, 111, 124, 73,
			110, 118, 105, 116, 101, 1, 0, 0, 0, 16,
			80, 114, 111, 116, 111, 66, 117, 102, 124, 67,
			108, 97, 110, 76, 111, 103, 1, 0, 0, 0,
			22, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			67, 108, 97, 110, 76, 111, 103, 124, 69, 110,
			116, 114, 121, 1, 0, 0, 0, 24, 80, 114,
			111, 116, 111, 66, 117, 102, 124, 67, 108, 97,
			110, 83, 99, 111, 114, 101, 69, 118, 101, 110,
			116, 115, 1, 0, 0, 0, 30, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 67, 108, 97, 110,
			83, 99, 111, 114, 101, 69, 118, 101, 110, 116,
			115, 124, 69, 110, 116, 114, 121, 1, 0, 0,
			0, 24, 80, 114, 111, 116, 111, 66, 117, 102,
			124, 67, 108, 97, 110, 73, 110, 118, 105, 116,
			97, 116, 105, 111, 110, 115, 1, 0, 0, 0,
			35, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			67, 108, 97, 110, 73, 110, 118, 105, 116, 97,
			116, 105, 111, 110, 115, 124, 73, 110, 118, 105,
			116, 97, 116, 105, 111, 110, 1, 0, 0, 0,
			24, 80, 114, 111, 116, 111, 66, 117, 102, 124,
			67, 108, 97, 110, 76, 101, 97, 100, 101, 114,
			98, 111, 97, 114, 100, 1, 0, 0, 0, 30,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 67,
			108, 97, 110, 76, 101, 97, 100, 101, 114, 98,
			111, 97, 114, 100, 124, 69, 110, 116, 114, 121,
			0, 0, 0, 0, 30, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 78, 101, 120, 117, 115,
			124, 85, 117, 105, 100, 83, 101, 114, 105, 97,
			108, 105, 122, 101, 100, 1, 0, 0, 0, 21,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 78,
			101, 120, 117, 115, 124, 80, 97, 99, 107, 101,
			116, 1, 0, 0, 0, 22, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 78, 101, 120, 117, 115,
			124, 82, 101, 113, 117, 101, 115, 116, 1, 0,
			0, 0, 23, 80, 114, 111, 116, 111, 66, 117,
			102, 46, 78, 101, 120, 117, 115, 124, 82, 101,
			115, 112, 111, 110, 115, 101, 1, 0, 0, 0,
			21, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			78, 101, 120, 117, 115, 124, 83, 116, 97, 116,
			117, 115, 1, 0, 0, 0, 26, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 80, 105, 110, 103, 82, 101, 113, 117,
			101, 115, 116, 1, 0, 0, 0, 27, 80, 114,
			111, 116, 111, 66, 117, 102, 46, 78, 101, 120,
			117, 115, 124, 80, 105, 110, 103, 82, 101, 115,
			112, 111, 110, 115, 101, 1, 0, 0, 0, 30,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 78,
			101, 120, 117, 115, 124, 84, 114, 97, 110, 115,
			102, 101, 114, 82, 101, 113, 117, 101, 115, 116,
			1, 0, 0, 0, 34, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 78, 101, 120, 117, 115, 124,
			80, 108, 97, 121, 101, 114, 83, 101, 99, 111,
			110, 100, 97, 114, 121, 68, 97, 116, 97, 1,
			0, 0, 0, 51, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 78, 101, 120, 117, 115, 46, 80,
			108, 97, 121, 101, 114, 83, 101, 99, 111, 110,
			100, 97, 114, 121, 68, 97, 116, 97, 124, 82,
			101, 108, 97, 116, 105, 111, 110, 115, 104, 105,
			112, 68, 97, 116, 97, 1, 0, 0, 0, 34,
			80, 114, 111, 116, 111, 66, 117, 102, 46, 78,
			101, 120, 117, 115, 124, 83, 112, 97, 119, 110,
			79, 112, 116, 105, 111, 110, 115, 82, 101, 113,
			117, 101, 115, 116, 1, 0, 0, 0, 35, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 124, 83, 112, 97, 119, 110, 79,
			112, 116, 105, 111, 110, 115, 82, 101, 115, 112,
			111, 110, 115, 101, 1, 0, 0, 0, 40, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 124, 83, 108, 101, 101, 112, 105,
			110, 103, 66, 97, 103, 82, 101, 115, 112, 97,
			119, 110, 82, 101, 113, 117, 101, 115, 116, 1,
			0, 0, 0, 40, 80, 114, 111, 116, 111, 66,
			117, 102, 46, 78, 101, 120, 117, 115, 124, 83,
			108, 101, 101, 112, 105, 110, 103, 66, 97, 103,
			68, 101, 115, 116, 114, 111, 121, 82, 101, 113,
			117, 101, 115, 116, 1, 0, 0, 0, 33, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 124, 70, 101, 114, 114, 121, 83,
			116, 97, 116, 117, 115, 82, 101, 113, 117, 101,
			115, 116, 1, 0, 0, 0, 34, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 70, 101, 114, 114, 121, 83, 116, 97,
			116, 117, 115, 82, 101, 115, 112, 111, 110, 115,
			101, 1, 0, 0, 0, 26, 80, 114, 111, 116,
			111, 66, 117, 102, 46, 78, 101, 120, 117, 115,
			124, 70, 101, 114, 114, 121, 83, 116, 97, 116,
			117, 115, 1, 0, 0, 0, 33, 80, 114, 111,
			116, 111, 66, 117, 102, 46, 78, 101, 120, 117,
			115, 124, 70, 101, 114, 114, 121, 82, 101, 116,
			105, 114, 101, 82, 101, 113, 117, 101, 115, 116,
			1, 0, 0, 0, 41, 80, 114, 111, 116, 111,
			66, 117, 102, 46, 78, 101, 120, 117, 115, 124,
			70, 101, 114, 114, 121, 85, 112, 100, 97, 116,
			101, 83, 99, 104, 101, 100, 117, 108, 101, 82,
			101, 113, 117, 101, 115, 116, 1, 0, 0, 0,
			35, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			78, 101, 120, 117, 115, 124, 67, 108, 97, 110,
			67, 104, 97, 116, 66, 97, 116, 99, 104, 82,
			101, 113, 117, 101, 115, 116, 1, 0, 0, 0,
			43, 80, 114, 111, 116, 111, 66, 117, 102, 46,
			78, 101, 120, 117, 115, 46, 67, 108, 97, 110,
			67, 104, 97, 116, 66, 97, 116, 99, 104, 82,
			101, 113, 117, 101, 115, 116, 124, 77, 101, 115,
			115, 97, 103, 101, 1, 0, 0, 0, 36, 80,
			114, 111, 116, 111, 66, 117, 102, 46, 78, 101,
			120, 117, 115, 124, 80, 108, 97, 121, 101, 114,
			77, 97, 110, 105, 102, 101, 115, 116, 82, 101,
			113, 117, 101, 115, 116, 1, 0, 0, 0, 34,
			83, 105, 108, 101, 110, 116, 79, 114, 98, 105,
			116, 46, 80, 114, 111, 116, 111, 99, 111, 108,
			66, 117, 102, 102, 101, 114, 115, 124, 73, 80,
			114, 111, 116, 111, 1, 0, 0, 0, 34, 83,
			105, 108, 101, 110, 116, 79, 114, 98, 105, 116,
			46, 80, 114, 111, 116, 111, 99, 111, 108, 66,
			117, 102, 102, 101, 114, 115, 124, 73, 80, 114,
			111, 116, 111, 1, 0, 0, 0, 42, 83, 105,
			108, 101, 110, 116, 79, 114, 98, 105, 116, 46,
			80, 114, 111, 116, 111, 99, 111, 108, 66, 117,
			102, 102, 101, 114, 115, 124, 80, 114, 111, 116,
			111, 99, 111, 108, 80, 97, 114, 115, 101, 114,
			0, 0, 0, 0, 22, 124, 80, 114, 111, 116,
			111, 83, 116, 114, 101, 97, 109, 69, 120, 116,
			101, 110, 115, 105, 111, 110, 115, 0, 0, 0,
			0, 51, 83, 105, 108, 101, 110, 116, 79, 114,
			98, 105, 116, 46, 80, 114, 111, 116, 111, 99,
			111, 108, 66, 117, 102, 102, 101, 114, 115, 124,
			80, 114, 111, 116, 111, 99, 111, 108, 66, 117,
			102, 102, 101, 114, 69, 120, 99, 101, 112, 116,
			105, 111, 110, 0, 0, 0, 0, 31, 83, 105,
			108, 101, 110, 116, 79, 114, 98, 105, 116, 46,
			80, 114, 111, 116, 111, 99, 111, 108, 66, 117,
			102, 102, 101, 114, 115, 124, 75, 101, 121, 1,
			0, 0, 0, 42, 83, 105, 108, 101, 110, 116,
			79, 114, 98, 105, 116, 46, 80, 114, 111, 116,
			111, 99, 111, 108, 66, 117, 102, 102, 101, 114,
			115, 124, 80, 114, 111, 116, 111, 99, 111, 108,
			80, 97, 114, 115, 101, 114, 1, 0, 0, 0,
			42, 83, 105, 108, 101, 110, 116, 79, 114, 98,
			105, 116, 46, 80, 114, 111, 116, 111, 99, 111,
			108, 66, 117, 102, 102, 101, 114, 115, 124, 80,
			114, 111, 116, 111, 99, 111, 108, 80, 97, 114,
			115, 101, 114, 0, 0, 0, 0, 13, 124, 66,
			117, 102, 102, 101, 114, 83, 116, 114, 101, 97,
			109, 0, 0, 0, 0, 19, 66, 117, 102, 102,
			101, 114, 83, 116, 114, 101, 97, 109, 124, 83,
			104, 97, 114, 101, 100, 0, 0, 0, 0, 24,
			66, 117, 102, 102, 101, 114, 83, 116, 114, 101,
			97, 109, 124, 82, 97, 110, 103, 101, 72, 97,
			110, 100, 108, 101, 1, 0, 0, 0, 14, 80,
			114, 111, 116, 111, 66, 117, 102, 124, 72, 97,
			108, 102, 51, 0, 0, 0, 0, 14, 124, 73,
			83, 116, 114, 101, 97, 109, 82, 101, 97, 100,
			101, 114, 0, 0, 0, 0, 14, 124, 73, 83,
			116, 114, 101, 97, 109, 87, 114, 105, 116, 101,
			114, 0, 0, 0, 0, 16, 124, 73, 116, 101,
			109, 67, 111, 110, 116, 97, 105, 110, 101, 114,
			73, 100, 0, 0, 0, 0, 7, 124, 73, 116,
			101, 109, 73, 100, 1, 0, 0, 0, 11, 124,
			77, 111, 100, 101, 108, 83, 116, 97, 116, 101,
			0, 0, 0, 0, 14, 124, 78, 101, 116, 119,
			111, 114, 107, 97, 98, 108, 101, 73, 100, 0,
			0, 0, 0, 15, 124, 78, 101, 116, 119, 111,
			114, 107, 68, 101, 102, 105, 110, 101, 115, 1,
			0, 0, 0, 19, 80, 114, 111, 116, 111, 66,
			117, 102, 124, 86, 101, 99, 116, 111, 114, 68,
			97, 116, 97
		};
		result.TotalFiles = 12;
		result.TotalTypes = 874;
		result.IsEditorOnly = false;
		return result;
	}
}


public interface IProto
{
	void WriteToStream(BufferStream stream);

	void ReadFromStream(BufferStream stream, bool isDelta = false);

	void ReadFromStream(BufferStream stream, int size, bool isDelta = false);
}


using SilentOrbit.ProtocolBuffers;

public interface IProto<in T> : IProto where T : IProto
{
	void WriteToStreamDelta(BufferStream stream, T previousProto);

	void CopyTo(T other);
}


using System;
using System.IO;
using System.Text;
using SilentOrbit.ProtocolBuffers;

public static class ProtocolParser
{
	private const int staticBufferSize = 131072;

	[ThreadStatic]
	private static byte[] _staticBuffer;

	private static byte[] GetStaticBuffer()
	{
		return _staticBuffer ?? (_staticBuffer = new byte[131072]);
	}

	public static int ReadFixedInt32(BufferStream stream)
	{
		return stream.Read<int>();
	}

	public static void WriteFixedInt32(BufferStream stream, int i)
	{
		stream.Write(i);
	}

	public static long ReadFixedInt64(BufferStream stream)
	{
		return stream.Read<long>();
	}

	public static void WriteFixedInt64(BufferStream stream, long i)
	{
		stream.Write(i);
	}

	public static float ReadSingle(BufferStream stream)
	{
		return stream.Read<float>();
	}

	public static void WriteSingle(BufferStream stream, float f)
	{
		stream.Write(f);
	}

	public static double ReadDouble(BufferStream stream)
	{
		return stream.Read<double>();
	}

	public static void WriteDouble(BufferStream stream, double f)
	{
		stream.Write(f);
	}

	public unsafe static string ReadString(BufferStream stream)
	{
		int num = (int)ReadUInt32(stream);
		if (num <= 0)
		{
			return "";
		}
		string @string;
		fixed (byte* bytes = &stream.GetRange(num).GetSpan()[0])
		{
			@string = Encoding.UTF8.GetString(bytes, num);
		}
		return @string;
	}

	public static void WriteString(BufferStream stream, string val)
	{
		byte[] staticBuffer = GetStaticBuffer();
		int bytes = Encoding.UTF8.GetBytes(val, 0, val.Length, staticBuffer, 0);
		WriteUInt32(stream, (uint)bytes);
		if (bytes > 0)
		{
			new Span<byte>(staticBuffer, 0, bytes).CopyTo(stream.GetRange(bytes).GetSpan());
		}
	}

	public static byte[] ReadBytes(BufferStream stream)
	{
		int num = (int)ReadUInt32(stream);
		byte[] array = new byte[num];
		ReadBytesInto(stream, array, num);
		return array;
	}

	public static ArraySegment<byte> ReadPooledBytes(BufferStream stream)
	{
		int num = (int)ReadUInt32(stream);
		byte[] array = BufferStream.Shared.ArrayPool.Rent(num);
		ReadBytesInto(stream, array, num);
		return new ArraySegment<byte>(array, 0, num);
	}

	private static void ReadBytesInto(BufferStream stream, byte[] buffer, int length)
	{
		stream.GetRange(length).GetSpan().CopyTo(buffer);
	}

	public static void SkipBytes(BufferStream stream)
	{
		int count = (int)ReadUInt32(stream);
		stream.Skip(count);
	}

	public static void WriteBytes(BufferStream stream, byte[] val)
	{
		WriteUInt32(stream, (uint)val.Length);
		new Span<byte>(val).CopyTo(stream.GetRange(val.Length).GetSpan());
	}

	public static void WritePooledBytes(BufferStream stream, ArraySegment<byte> segment)
	{
		if (segment.Array == null)
		{
			WriteUInt32(stream, 0u);
			return;
		}
		WriteUInt32(stream, (uint)segment.Count);
		new Span<byte>(segment.Array, segment.Offset, segment.Count).CopyTo(stream.GetRange(segment.Count).GetSpan());
	}

	public static Key ReadKey(BufferStream stream)
	{
		uint num = ReadUInt32(stream);
		return new Key(num >> 3, (Wire)(num & 7));
	}

	public static Key ReadKey(byte firstByte, BufferStream stream)
	{
		if (firstByte < 128)
		{
			return new Key((uint)(firstByte >> 3), (Wire)(firstByte & 7));
		}
		return new Key((ReadUInt32(stream) << 4) | (uint)((firstByte >> 3) & 0xF), (Wire)(firstByte & 7));
	}

	public static void WriteKey(BufferStream stream, Key key)
	{
		uint val = (key.Field << 3) | (uint)key.WireType;
		WriteUInt32(stream, val);
	}

	public static void SkipKey(BufferStream stream, Key key)
	{
		switch (key.WireType)
		{
		case Wire.Fixed32:
			stream.Skip(4);
			break;
		case Wire.Fixed64:
			stream.Skip(8);
			break;
		case Wire.LengthDelimited:
			stream.Skip((int)ReadUInt32(stream));
			break;
		case Wire.Varint:
			ReadSkipVarInt(stream);
			break;
		default:
			throw new NotImplementedException("Unknown wire type: " + key.WireType);
		}
	}

	public static void ReadSkipVarInt(BufferStream stream)
	{
		int num;
		do
		{
			num = stream.ReadByte();
			if (num < 0)
			{
				throw new IOException("Stream ended too early");
			}
		}
		while ((num & 0x80) != 0);
	}

	public static uint ReadUInt32(Span<byte> array, int pos, out int length)
	{
		uint num = 0u;
		length = 0;
		for (int i = 0; i < 5; i++)
		{
			length++;
			if (pos >= array.Length)
			{
				break;
			}
			int num2 = array[pos++];
			if (num2 < 0)
			{
				throw new IOException("Stream ended too early");
			}
			if (i == 4 && (num2 & 0xF0) != 0)
			{
				throw new ProtocolBufferException("Got larger VarInt than 32bit unsigned");
			}
			if ((num2 & 0x80) == 0)
			{
				return num | (uint)(num2 << 7 * i);
			}
			num |= (uint)((num2 & 0x7F) << 7 * i);
		}
		throw new ProtocolBufferException("Got larger VarInt than 32bit unsigned");
	}

	public static int WriteUInt32(uint val, Span<byte> array, int pos)
	{
		int num = 0;
		while (pos < array.Length)
		{
			num++;
			byte b = (byte)(val & 0x7F);
			val >>= 7;
			if (val == 0)
			{
				array[pos++] = b;
				break;
			}
			b |= 0x80;
			array[pos++] = b;
		}
		return num;
	}

	public static int ReadZInt32(BufferStream stream)
	{
		uint num = ReadUInt32(stream);
		return (int)(num >> 1) ^ ((int)(num << 31) >> 31);
	}

	public static void WriteZInt32(BufferStream stream, int val)
	{
		WriteUInt32(stream, (uint)((val << 1) ^ (val >> 31)));
	}

	public static uint ReadUInt32(BufferStream stream)
	{
		uint num = 0u;
		for (int i = 0; i < 5; i++)
		{
			int num2 = stream.ReadByte();
			if (num2 < 0)
			{
				throw new IOException("Stream ended too early");
			}
			if (i == 4 && (num2 & 0xF0) != 0)
			{
				throw new ProtocolBufferException("Got larger VarInt than 32bit unsigned");
			}
			if ((num2 & 0x80) == 0)
			{
				return num | (uint)(num2 << 7 * i);
			}
			num |= (uint)((num2 & 0x7F) << 7 * i);
		}
		throw new ProtocolBufferException("Got larger VarInt than 32bit unsigned");
	}

	public static void WriteUInt32(BufferStream stream, uint val)
	{
		byte b;
		while (true)
		{
			b = (byte)(val & 0x7F);
			val >>= 7;
			if (val == 0)
			{
				break;
			}
			b |= 0x80;
			stream.WriteByte(b);
		}
		stream.WriteByte(b);
	}

	public static uint ReadUInt32(Stream stream)
	{
		uint num = 0u;
		for (int i = 0; i < 5; i++)
		{
			int num2 = stream.ReadByte();
			if (num2 < 0)
			{
				throw new IOException("Stream ended too early");
			}
			if (i == 4 && (num2 & 0xF0) != 0)
			{
				throw new ProtocolBufferException("Got larger VarInt than 32bit unsigned");
			}
			if ((num2 & 0x80) == 0)
			{
				return num | (uint)(num2 << 7 * i);
			}
			num |= (uint)((num2 & 0x7F) << 7 * i);
		}
		throw new ProtocolBufferException("Got larger VarInt than 32bit unsigned");
	}

	public static void WriteUInt32(Stream stream, uint val)
	{
		byte b;
		while (true)
		{
			b = (byte)(val & 0x7F);
			val >>= 7;
			if (val == 0)
			{
				break;
			}
			b |= 0x80;
			stream.WriteByte(b);
		}
		stream.WriteByte(b);
	}

	public static long ReadZInt64(BufferStream stream)
	{
		ulong num = ReadUInt64(stream);
		return (long)(num >> 1) ^ ((long)(num << 63) >> 63);
	}

	public static void WriteZInt64(BufferStream stream, long val)
	{
		WriteUInt64(stream, (ulong)((val << 1) ^ (val >> 63)));
	}

	public static ulong ReadUInt64(BufferStream stream)
	{
		ulong num = 0uL;
		for (int i = 0; i < 10; i++)
		{
			int num2 = stream.ReadByte();
			if (num2 < 0)
			{
				throw new IOException("Stream ended too early");
			}
			if (i == 9 && (num2 & 0xFE) != 0)
			{
				throw new ProtocolBufferException("Got larger VarInt than 64 bit unsigned");
			}
			if ((num2 & 0x80) == 0)
			{
				return num | (ulong)((long)num2 << 7 * i);
			}
			num |= (ulong)((long)(num2 & 0x7F) << 7 * i);
		}
		throw new ProtocolBufferException("Got larger VarInt than 64 bit unsigned");
	}

	public static void WriteUInt64(BufferStream stream, ulong val)
	{
		byte b;
		while (true)
		{
			b = (byte)(val & 0x7F);
			val >>= 7;
			if (val == 0L)
			{
				break;
			}
			b |= 0x80;
			stream.WriteByte(b);
		}
		stream.WriteByte(b);
	}

	public static ulong ReadUInt64(Span<byte> array, int pos, out int length)
	{
		ulong num = 0uL;
		length = 0;
		for (int i = 0; i < 10; i++)
		{
			length++;
			int num2 = array[pos++];
			if (num2 < 0)
			{
				throw new IOException("Stream ended too early");
			}
			if (i == 9 && (num2 & 0xFE) != 0)
			{
				throw new ProtocolBufferException("Got larger VarInt than 64 bit unsigned");
			}
			if ((num2 & 0x80) == 0)
			{
				return num | (ulong)((long)num2 << 7 * i);
			}
			num |= (ulong)((long)(num2 & 0x7F) << 7 * i);
		}
		throw new ProtocolBufferException("Got larger VarInt than 64 bit unsigned");
	}

	public static int WriteUInt64(ulong val, Span<byte> buffer, int pos)
	{
		int num = 0;
		byte b;
		while (true)
		{
			num++;
			b = (byte)(val & 0x7F);
			val >>= 7;
			if (val == 0L)
			{
				break;
			}
			b |= 0x80;
			buffer[pos++] = b;
		}
		buffer[pos] = b;
		return num;
	}

	public static bool ReadBool(BufferStream stream)
	{
		int num = stream.ReadByte();
		if (num < 0)
		{
			throw new IOException("Stream ended too early");
		}
		return num switch
		{
			1 => true, 
			0 => false, 
			_ => throw new ProtocolBufferException("Invalid boolean value"), 
		};
	}

	public static void WriteBool(BufferStream stream, bool val)
	{
		stream.WriteByte((byte)(val ? 1 : 0));
	}
}


using System;

public class ProtocolBufferException : Exception
{
	public ProtocolBufferException(string message)
		: base(message)
	{
	}
}


public enum Wire
{
	Varint = 0,
	Fixed64 = 1,
	LengthDelimited = 2,
	Fixed32 = 5
}


using SilentOrbit.ProtocolBuffers;

public struct Key
{
	public uint Field { get; set; }

	public Wire WireType { get; set; }

	public Key(uint field, Wire wireType)
	{
		Field = field;
		WireType = wireType;
	}

	public override string ToString()
	{
		return $"[Key: {Field}, {WireType}]";
	}
}


using System.IO;
using Facepunch.Nexus;
using SilentOrbit.ProtocolBuffers;

public class UuidSerialized
{
	public static void ResetToPool(Uuid instance)
	{
		((Uuid)(ref instance)).NodeId = 0;
		((Uuid)(ref instance)).Sequence = 0;
		((Uuid)(ref instance)).Timestamp = 0uL;
	}

	public static Uuid Deserialize(BufferStream stream, ref Uuid instance, bool isDelta)
	{
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				((Uuid)(ref instance)).NodeId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				((Uuid)(ref instance)).Sequence = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				((Uuid)(ref instance)).Timestamp = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Uuid DeserializeLengthDelimited(BufferStream stream, ref Uuid instance, bool isDelta)
	{
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				((Uuid)(ref instance)).NodeId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				((Uuid)(ref instance)).Sequence = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				((Uuid)(ref instance)).Timestamp = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Uuid DeserializeLength(BufferStream stream, int length, ref Uuid instance, bool isDelta)
	{
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				((Uuid)(ref instance)).NodeId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				((Uuid)(ref instance)).Sequence = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				((Uuid)(ref instance)).Timestamp = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Uuid instance, Uuid previous)
	{
		if (((Uuid)(ref instance)).NodeId != ((Uuid)(ref previous)).NodeId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).NodeId);
		}
		if (((Uuid)(ref instance)).Sequence != ((Uuid)(ref previous)).Sequence)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).Sequence);
		}
		if (((Uuid)(ref instance)).Timestamp != ((Uuid)(ref previous)).Timestamp)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, ((Uuid)(ref instance)).Timestamp);
		}
	}

	public static void Serialize(BufferStream stream, Uuid instance)
	{
		if (((Uuid)(ref instance)).NodeId != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).NodeId);
		}
		if (((Uuid)(ref instance)).Sequence != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).Sequence);
		}
		if (((Uuid)(ref instance)).Timestamp != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, ((Uuid)(ref instance)).Timestamp);
		}
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System.IO;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class Vector3Serialized
{
	public static void ResetToPool(Vector3 instance)
	{
		instance.x = 0f;
		instance.y = 0f;
		instance.z = 0f;
	}

	public static Vector3 Deserialize(BufferStream stream, ref Vector3 instance, bool isDelta)
	{
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.z = 0f;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Vector3 DeserializeLengthDelimited(BufferStream stream, ref Vector3 instance, bool isDelta)
	{
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.z = 0f;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Vector3 DeserializeLength(BufferStream stream, int length, ref Vector3 instance, bool isDelta)
	{
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.z = 0f;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Vector3 instance, Vector3 previous)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		if (instance.x != previous.x)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != previous.y)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.z != previous.z)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.z);
		}
	}

	public static void Serialize(BufferStream stream, Vector3 instance)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		if (instance.x != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.z != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.z);
		}
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class RaySerialized
{
	public static void ResetToPool(Ray instance)
	{
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		((Ray)(ref instance)).origin = default(Vector3);
		((Ray)(ref instance)).direction = default(Vector3);
	}

	public static Ray Deserialize(BufferStream stream, ref Ray instance, bool isDelta)
	{
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
			{
				Vector3 instance3 = ((Ray)(ref instance)).origin;
				((Ray)(ref instance)).origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				break;
			}
			case 18:
			{
				Vector3 instance2 = ((Ray)(ref instance)).direction;
				((Ray)(ref instance)).direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				break;
			}
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static Ray DeserializeLengthDelimited(BufferStream stream, ref Ray instance, bool isDelta)
	{
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				Vector3 instance3 = ((Ray)(ref instance)).origin;
				((Ray)(ref instance)).origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				break;
			}
			case 18:
			{
				Vector3 instance2 = ((Ray)(ref instance)).direction;
				((Ray)(ref instance)).direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				break;
			}
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Ray DeserializeLength(BufferStream stream, int length, ref Ray instance, bool isDelta)
	{
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				Vector3 instance3 = ((Ray)(ref instance)).origin;
				((Ray)(ref instance)).origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				break;
			}
			case 18:
			{
				Vector3 instance2 = ((Ray)(ref instance)).direction;
				((Ray)(ref instance)).direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				break;
			}
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Ray instance, Ray previous)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		if (((Ray)(ref instance)).origin != ((Ray)(ref previous)).origin)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.SerializeDelta(stream, ((Ray)(ref instance)).origin, ((Ray)(ref previous)).origin);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field origin (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (((Ray)(ref instance)).direction != ((Ray)(ref previous)).direction)
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, ((Ray)(ref instance)).direction, ((Ray)(ref previous)).direction);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field direction (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
	}

	public static void Serialize(BufferStream stream, Ray instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		if (((Ray)(ref instance)).origin != default(Vector3))
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.Serialize(stream, ((Ray)(ref instance)).origin);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field origin (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (((Ray)(ref instance)).direction != default(Vector3))
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.Serialize(stream, ((Ray)(ref instance)).direction);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field direction (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System.IO;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class Vector4Serialized
{
	public static void ResetToPool(Vector4 instance)
	{
		instance.x = 0f;
		instance.y = 0f;
		instance.z = 0f;
		instance.w = 0f;
	}

	public static Vector4 Deserialize(BufferStream stream, ref Vector4 instance, bool isDelta)
	{
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.z = 0f;
			instance.w = 0f;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.w = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Vector4 DeserializeLengthDelimited(BufferStream stream, ref Vector4 instance, bool isDelta)
	{
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.z = 0f;
			instance.w = 0f;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.w = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Vector4 DeserializeLength(BufferStream stream, int length, ref Vector4 instance, bool isDelta)
	{
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.z = 0f;
			instance.w = 0f;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.w = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Vector4 instance, Vector4 previous)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		if (instance.x != previous.x)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != previous.y)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.z != previous.z)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.z);
		}
		if (instance.w != previous.w)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.w);
		}
	}

	public static void Serialize(BufferStream stream, Vector4 instance)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		if (instance.x != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.z != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.z);
		}
		if (instance.w != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.w);
		}
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System.IO;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class ColorSerialized
{
	public static void ResetToPool(Color instance)
	{
		instance.r = 0f;
		instance.g = 0f;
		instance.b = 0f;
		instance.a = 0f;
	}

	public static Color Deserialize(BufferStream stream, ref Color instance, bool isDelta)
	{
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.r = 0f;
			instance.g = 0f;
			instance.b = 0f;
			instance.a = 0f;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.r = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.g = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.b = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.a = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Color DeserializeLengthDelimited(BufferStream stream, ref Color instance, bool isDelta)
	{
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.r = 0f;
			instance.g = 0f;
			instance.b = 0f;
			instance.a = 0f;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.r = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.g = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.b = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.a = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Color DeserializeLength(BufferStream stream, int length, ref Color instance, bool isDelta)
	{
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.r = 0f;
			instance.g = 0f;
			instance.b = 0f;
			instance.a = 0f;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.r = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.g = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.b = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.a = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Color instance, Color previous)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		if (instance.r != previous.r)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.r);
		}
		if (instance.g != previous.g)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.g);
		}
		if (instance.b != previous.b)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.b);
		}
		if (instance.a != previous.a)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.a);
		}
	}

	public static void Serialize(BufferStream stream, Color instance)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		if (instance.r != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.r);
		}
		if (instance.g != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.g);
		}
		if (instance.b != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.b);
		}
		if (instance.a != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.a);
		}
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System.IO;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class Vector2Serialized
{
	public static void ResetToPool(Vector2 instance)
	{
		instance.x = 0f;
		instance.y = 0f;
	}

	public static Vector2 Deserialize(BufferStream stream, ref Vector2 instance, bool isDelta)
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Vector2 DeserializeLengthDelimited(BufferStream stream, ref Vector2 instance, bool isDelta)
	{
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Vector2 DeserializeLength(BufferStream stream, int length, ref Vector2 instance, bool isDelta)
	{
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Vector2 instance, Vector2 previous)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		if (instance.x != previous.x)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != previous.y)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
	}

	public static void Serialize(BufferStream stream, Vector2 instance)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		if (instance.x != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Entity : IDisposable, IPooled, IProto<Entity>, IProto
{
	[NonSerialized]
	public BaseNetworkable baseNetworkable;

	[NonSerialized]
	public BaseEntity baseEntity;

	[NonSerialized]
	public BasePlayer basePlayer;

	[NonSerialized]
	public WorldItem worldItem;

	[NonSerialized]
	public BaseResource resource;

	[NonSerialized]
	public BuildingBlock buildingBlock;

	[NonSerialized]
	public ProtoBuf.Environment environment;

	[NonSerialized]
	public Corpse corpse;

	[NonSerialized]
	public ParentInfo parent;

	[NonSerialized]
	public KeyLock keyLock;

	[NonSerialized]
	public CodeLock codeLock;

	[NonSerialized]
	public EntitySlots entitySlots;

	[NonSerialized]
	public BuildingPrivilege buildingPrivilege;

	[NonSerialized]
	public StorageBox storageBox;

	[NonSerialized]
	public HeldEntity heldEntity;

	[NonSerialized]
	public BaseProjectile baseProjectile;

	[NonSerialized]
	public BaseNPC baseNPC;

	[NonSerialized]
	public Loot loot;

	[NonSerialized]
	public GenericSpawner genericSpawner;

	[NonSerialized]
	public SleepingBag sleepingBag;

	[NonSerialized]
	public LootableCorpse lootableCorpse;

	[NonSerialized]
	public Sign sign;

	[NonSerialized]
	public BaseCombat baseCombat;

	[NonSerialized]
	public MapEntity mapEntity;

	[NonSerialized]
	public ResearchTable researchTable;

	[NonSerialized]
	public DudExplosive dudExplosive;

	[NonSerialized]
	public MiningQuarry miningQuarry;

	[NonSerialized]
	public BaseVehicle baseVehicle;

	[NonSerialized]
	public Helicopter helicopter;

	[NonSerialized]
	public Landmine landmine;

	[NonSerialized]
	public AutoTurret autoturret;

	[NonSerialized]
	public SphereEntity sphereEntity;

	[NonSerialized]
	public StabilityEntity stabilityEntity;

	[NonSerialized]
	public OwnerInfo ownerInfo;

	[NonSerialized]
	public DecayEntity decayEntity;

	[NonSerialized]
	public Spawnable spawnable;

	[NonSerialized]
	public ServerGib servergib;

	[NonSerialized]
	public VendingMachine vendingMachine;

	[NonSerialized]
	public SpinnerWheel spinnerWheel;

	[NonSerialized]
	public Lift lift;

	[NonSerialized]
	public BradleyAPC bradley;

	[NonSerialized]
	public WaterWell waterwell;

	[NonSerialized]
	public Motorboat motorBoat;

	[NonSerialized]
	public IOEntity ioEntity;

	[NonSerialized]
	public PuzzleReset puzzleReset;

	[NonSerialized]
	public RelationshipManager relationshipManager;

	[NonSerialized]
	public HotAirBalloon hotAirBalloon;

	[NonSerialized]
	public SAMSite samSite;

	[NonSerialized]
	public EggHunt eggHunt;

	[NonSerialized]
	public ArcadeMachine arcadeMachine;

	[NonSerialized]
	public Minicopter miniCopter;

	[NonSerialized]
	public Horse horse;

	[NonSerialized]
	public SmartAlarm smartAlarm;

	[NonSerialized]
	public LightString lightString;

	[NonSerialized]
	public LightDeployer lightDeployer;

	[NonSerialized]
	public RCEntity rcEntity;

	[NonSerialized]
	public ComputerStation computerStation;

	[NonSerialized]
	public GrowableEntity growableEntity;

	[NonSerialized]
	public Composter composter;

	[NonSerialized]
	public ModularVehicle modularVehicle;

	[NonSerialized]
	public ModularCar modularCar;

	[NonSerialized]
	public SimpleUID simpleUID;

	[NonSerialized]
	public VehicleLift vehicleLift;

	[NonSerialized]
	public EngineStorage engineStorage;

	[NonSerialized]
	public VehicleVendor vehicleVendor;

	[NonSerialized]
	public WaterPool WaterPool;

	[NonSerialized]
	public Photo photo;

	[NonSerialized]
	public PhotoFrame photoFrame;

	[NonSerialized]
	public VehicleModule vehicleModule;

	[NonSerialized]
	public MixingTable mixingTable;

	[NonSerialized]
	public ShopKeeper shopKeeper;

	[NonSerialized]
	public Elevator elevator;

	[NonSerialized]
	public SkullTrophy skullTrophy;

	[NonSerialized]
	public Cassette cassette;

	[NonSerialized]
	public Telephone telephone;

	[NonSerialized]
	public BoomBox boomBox;

	[NonSerialized]
	public NeonSign neonSign;

	[NonSerialized]
	public SubEntityList subEntityList;

	[NonSerialized]
	public MarketTerminal marketTerminal;

	[NonSerialized]
	public DeliveryDrone deliveryDrone;

	[NonSerialized]
	public ReclaimTerminal reclaimTerminal;

	[NonSerialized]
	public SlotMachine slotMachine;

	[NonSerialized]
	public TrainEngine trainEngine;

	[NonSerialized]
	public CardGame cardGame;

	[NonSerialized]
	public Crane crane;

	[NonSerialized]
	public ConnectedSpeaker connectedSpeaker;

	[NonSerialized]
	public AudioEntity audioEntity;

	[NonSerialized]
	public MicrophoneStand microphoneStand;

	[NonSerialized]
	public Submarine submarine;

	[NonSerialized]
	public SleepingBagCamper sleepingBagCamper;

	[NonSerialized]
	public CamperModule camperModule;

	[NonSerialized]
	public PaintableSign paintableSign;

	[NonSerialized]
	public Whitelist whitelist;

	[NonSerialized]
	public FrankensteinTable FrankensteinTable;

	[NonSerialized]
	public MLRS mlrs;

	[NonSerialized]
	public ReclaimManager reclaimManager;

	[NonSerialized]
	public GameMode gameMode;

	[NonSerialized]
	public Snowmobile snowmobile;

	[NonSerialized]
	public bool createdThisFrame;

	[NonSerialized]
	public PatternFirework patternFirework;

	[NonSerialized]
	public CargoPlane cargoPlane;

	[NonSerialized]
	public PaintedItem paintedItem;

	[NonSerialized]
	public ClanManager clanManager;

	[NonSerialized]
	public Spray spray;

	[NonSerialized]
	public BaseTrain baseTrain;

	[NonSerialized]
	public Zipline zipline;

	[NonSerialized]
	public ZiplineMountable ziplineMountable;

	[NonSerialized]
	public ZiplineArrivalPoint ZiplineArrival;

	[NonSerialized]
	public SprayLine sprayLine;

	[NonSerialized]
	public CoalingTower coalingTower;

	[NonSerialized]
	public SimpleInt simpleInt;

	[NonSerialized]
	public BaseOven baseOven;

	[NonSerialized]
	public BrainComponent brainComponent;

	[NonSerialized]
	public ProceduralDungeon proceduralDungeon;

	[NonSerialized]
	public IndustrialConveyor industrialConveyor;

	[NonSerialized]
	public IndustrialCrafter industrialCrafter;

	[NonSerialized]
	public Drone drone;

	[NonSerialized]
	public TimedExplosive explosive;

	[NonSerialized]
	public SimpleUInt simpleUint;

	[NonSerialized]
	public WeaponRack weaponRack;

	[NonSerialized]
	public AttackHeli attackHeli;

	[NonSerialized]
	public AttackHeliTurret attackHeliTurret;

	[NonSerialized]
	public AttackHeliRockets attackHeliRockets;

	[NonSerialized]
	public BaseBoat baseBoat;

	[NonSerialized]
	public Ragdoll ragdoll;

	[NonSerialized]
	public DieselEngine dieselEngine;

	[NonSerialized]
	public AssociatedFiles associatedFiles;

	[NonSerialized]
	public NexusFerry nexusFerry;

	[NonSerialized]
	public NexusIsland nexusIsland;

	[NonSerialized]
	public NexusDockTerminal nexusDockTerminal;

	[NonSerialized]
	public RockingChair rockingChair;

	[NonSerialized]
	public HeadData headData;

	[NonSerialized]
	public WantedPoster wantedPoster;

	[NonSerialized]
	public WaypointRace waypointRace;

	[NonSerialized]
	public LegacyShelter legacyShelter;

	[NonSerialized]
	public MetalDetectorSource metalDetectorSource;

	[NonSerialized]
	public TutorialIsland tutorialIsland;

	[NonSerialized]
	public CinematicEntity cinematicEntity;

	[NonSerialized]
	public BuildingPrivilegeRetro buildingPrivilegeRetro;

	[NonSerialized]
	public HarborCrane harborCrane;

	[NonSerialized]
	public CargoShip cargoShip;

	[NonSerialized]
	public CargoShipContainer cargoShipContainer;

	[NonSerialized]
	public MissionMapMarker missionMapMarker;

	[NonSerialized]
	public Bike bike;

	[NonSerialized]
	public DiverPropulsionVehicle diverPropulsionVehicle;

	[NonSerialized]
	public TravellingVendor travellingVendor;

	[NonSerialized]
	public VendingDynamicPricing vendingDynamicPricing;

	[NonSerialized]
	public TinCanAlarm tinCanAlarm;

	[NonSerialized]
	public DigitalClock digitalClock;

	[NonSerialized]
	public ElevatorLift elevatorLift;

	[NonSerialized]
	public NPCVendingMachine npcVendingMachine;

	[NonSerialized]
	public Mailbox mailbox;

	[NonSerialized]
	public GunWeaponMod projectileWeaponMod;

	[NonSerialized]
	public BaseSculpture baseSculpture;

	[NonSerialized]
	public VendingMachineStats vendingMachineStats;

	[NonSerialized]
	public Catapult catapult;

	[NonSerialized]
	public SiegeTower siegeTower;

	[NonSerialized]
	public Ballista ballista;

	[NonSerialized]
	public BallistaGun ballistaGun;

	[NonSerialized]
	public BatteringRam batteringRam;

	[NonSerialized]
	public TemporaryRagdoll temporaryRagdoll;

	[NonSerialized]
	public ConstructableEntity constructableEntity;

	[NonSerialized]
	public ChickenCoop chickenCoop;

	[NonSerialized]
	public FarmableAnimal farmableAnimal;

	[NonSerialized]
	public ItemOwnershipAmount ownership;

	[NonSerialized]
	public Beehive beehive;

	[NonSerialized]
	public BeeMasterSwarm beeMasterSwarm;

	[NonSerialized]
	public ContainerCorpseData containerCorpse;

	[NonSerialized]
	public NPCSensesState npcSensesState;

	[NonSerialized]
	public VineMountable vineMountable;

	[NonSerialized]
	public VineTree vineTree;

	[NonSerialized]
	public TreeRespawn treeRespawn;

	[NonSerialized]
	public WallpaperTool wallpaperTool;

	[NonSerialized]
	public CommandBlock commandBlock;

	[NonSerialized]
	public StaticRespawnAreaData staticRespawn;

	[NonSerialized]
	public BuriedItems buriedItemStorage;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Entity instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.baseNetworkable != null)
			{
				instance.baseNetworkable.ResetToPool();
				instance.baseNetworkable = null;
			}
			if (instance.baseEntity != null)
			{
				instance.baseEntity.ResetToPool();
				instance.baseEntity = null;
			}
			if (instance.basePlayer != null)
			{
				instance.basePlayer.ResetToPool();
				instance.basePlayer = null;
			}
			if (instance.worldItem != null)
			{
				instance.worldItem.ResetToPool();
				instance.worldItem = null;
			}
			if (instance.resource != null)
			{
				instance.resource.ResetToPool();
				instance.resource = null;
			}
			if (instance.buildingBlock != null)
			{
				instance.buildingBlock.ResetToPool();
				instance.buildingBlock = null;
			}
			if (instance.environment != null)
			{
				instance.environment.ResetToPool();
				instance.environment = null;
			}
			if (instance.corpse != null)
			{
				instance.corpse.ResetToPool();
				instance.corpse = null;
			}
			if (instance.parent != null)
			{
				instance.parent.ResetToPool();
				instance.parent = null;
			}
			if (instance.keyLock != null)
			{
				instance.keyLock.ResetToPool();
				instance.keyLock = null;
			}
			if (instance.codeLock != null)
			{
				instance.codeLock.ResetToPool();
				instance.codeLock = null;
			}
			if (instance.entitySlots != null)
			{
				instance.entitySlots.ResetToPool();
				instance.entitySlots = null;
			}
			if (instance.buildingPrivilege != null)
			{
				instance.buildingPrivilege.ResetToPool();
				instance.buildingPrivilege = null;
			}
			if (instance.storageBox != null)
			{
				instance.storageBox.ResetToPool();
				instance.storageBox = null;
			}
			if (instance.heldEntity != null)
			{
				instance.heldEntity.ResetToPool();
				instance.heldEntity = null;
			}
			if (instance.baseProjectile != null)
			{
				instance.baseProjectile.ResetToPool();
				instance.baseProjectile = null;
			}
			if (instance.baseNPC != null)
			{
				instance.baseNPC.ResetToPool();
				instance.baseNPC = null;
			}
			if (instance.loot != null)
			{
				instance.loot.ResetToPool();
				instance.loot = null;
			}
			if (instance.genericSpawner != null)
			{
				instance.genericSpawner.ResetToPool();
				instance.genericSpawner = null;
			}
			if (instance.sleepingBag != null)
			{
				instance.sleepingBag.ResetToPool();
				instance.sleepingBag = null;
			}
			if (instance.lootableCorpse != null)
			{
				instance.lootableCorpse.ResetToPool();
				instance.lootableCorpse = null;
			}
			if (instance.sign != null)
			{
				instance.sign.ResetToPool();
				instance.sign = null;
			}
			if (instance.baseCombat != null)
			{
				instance.baseCombat.ResetToPool();
				instance.baseCombat = null;
			}
			if (instance.mapEntity != null)
			{
				instance.mapEntity.ResetToPool();
				instance.mapEntity = null;
			}
			if (instance.researchTable != null)
			{
				instance.researchTable.ResetToPool();
				instance.researchTable = null;
			}
			if (instance.dudExplosive != null)
			{
				instance.dudExplosive.ResetToPool();
				instance.dudExplosive = null;
			}
			if (instance.miningQuarry != null)
			{
				instance.miningQuarry.ResetToPool();
				instance.miningQuarry = null;
			}
			if (instance.baseVehicle != null)
			{
				instance.baseVehicle.ResetToPool();
				instance.baseVehicle = null;
			}
			if (instance.helicopter != null)
			{
				instance.helicopter.ResetToPool();
				instance.helicopter = null;
			}
			if (instance.landmine != null)
			{
				instance.landmine.ResetToPool();
				instance.landmine = null;
			}
			if (instance.autoturret != null)
			{
				instance.autoturret.ResetToPool();
				instance.autoturret = null;
			}
			if (instance.sphereEntity != null)
			{
				instance.sphereEntity.ResetToPool();
				instance.sphereEntity = null;
			}
			if (instance.stabilityEntity != null)
			{
				instance.stabilityEntity.ResetToPool();
				instance.stabilityEntity = null;
			}
			if (instance.ownerInfo != null)
			{
				instance.ownerInfo.ResetToPool();
				instance.ownerInfo = null;
			}
			if (instance.decayEntity != null)
			{
				instance.decayEntity.ResetToPool();
				instance.decayEntity = null;
			}
			if (instance.spawnable != null)
			{
				instance.spawnable.ResetToPool();
				instance.spawnable = null;
			}
			if (instance.servergib != null)
			{
				instance.servergib.ResetToPool();
				instance.servergib = null;
			}
			if (instance.vendingMachine != null)
			{
				instance.vendingMachine.ResetToPool();
				instance.vendingMachine = null;
			}
			if (instance.spinnerWheel != null)
			{
				instance.spinnerWheel.ResetToPool();
				instance.spinnerWheel = null;
			}
			if (instance.lift != null)
			{
				instance.lift.ResetToPool();
				instance.lift = null;
			}
			if (instance.bradley != null)
			{
				instance.bradley.ResetToPool();
				instance.bradley = null;
			}
			if (instance.waterwell != null)
			{
				instance.waterwell.ResetToPool();
				instance.waterwell = null;
			}
			if (instance.motorBoat != null)
			{
				instance.motorBoat.ResetToPool();
				instance.motorBoat = null;
			}
			if (instance.ioEntity != null)
			{
				instance.ioEntity.ResetToPool();
				instance.ioEntity = null;
			}
			if (instance.puzzleReset != null)
			{
				instance.puzzleReset.ResetToPool();
				instance.puzzleReset = null;
			}
			if (instance.relationshipManager != null)
			{
				instance.relationshipManager.ResetToPool();
				instance.relationshipManager = null;
			}
			if (instance.hotAirBalloon != null)
			{
				instance.hotAirBalloon.ResetToPool();
				instance.hotAirBalloon = null;
			}
			if (instance.samSite != null)
			{
				instance.samSite.ResetToPool();
				instance.samSite = null;
			}
			if (instance.eggHunt != null)
			{
				instance.eggHunt.ResetToPool();
				instance.eggHunt = null;
			}
			if (instance.arcadeMachine != null)
			{
				instance.arcadeMachine.ResetToPool();
				instance.arcadeMachine = null;
			}
			if (instance.miniCopter != null)
			{
				instance.miniCopter.ResetToPool();
				instance.miniCopter = null;
			}
			if (instance.horse != null)
			{
				instance.horse.ResetToPool();
				instance.horse = null;
			}
			if (instance.smartAlarm != null)
			{
				instance.smartAlarm.ResetToPool();
				instance.smartAlarm = null;
			}
			if (instance.lightString != null)
			{
				instance.lightString.ResetToPool();
				instance.lightString = null;
			}
			if (instance.lightDeployer != null)
			{
				instance.lightDeployer.ResetToPool();
				instance.lightDeployer = null;
			}
			if (instance.rcEntity != null)
			{
				instance.rcEntity.ResetToPool();
				instance.rcEntity = null;
			}
			if (instance.computerStation != null)
			{
				instance.computerStation.ResetToPool();
				instance.computerStation = null;
			}
			if (instance.growableEntity != null)
			{
				instance.growableEntity.ResetToPool();
				instance.growableEntity = null;
			}
			if (instance.composter != null)
			{
				instance.composter.ResetToPool();
				instance.composter = null;
			}
			if (instance.modularVehicle != null)
			{
				instance.modularVehicle.ResetToPool();
				instance.modularVehicle = null;
			}
			if (instance.modularCar != null)
			{
				instance.modularCar.ResetToPool();
				instance.modularCar = null;
			}
			if (instance.simpleUID != null)
			{
				instance.simpleUID.ResetToPool();
				instance.simpleUID = null;
			}
			if (instance.vehicleLift != null)
			{
				instance.vehicleLift.ResetToPool();
				instance.vehicleLift = null;
			}
			if (instance.engineStorage != null)
			{
				instance.engineStorage.ResetToPool();
				instance.engineStorage = null;
			}
			if (instance.vehicleVendor != null)
			{
				instance.vehicleVendor.ResetToPool();
				instance.vehicleVendor = null;
			}
			if (instance.WaterPool != null)
			{
				instance.WaterPool.ResetToPool();
				instance.WaterPool = null;
			}
			if (instance.photo != null)
			{
				instance.photo.ResetToPool();
				instance.photo = null;
			}
			if (instance.photoFrame != null)
			{
				instance.photoFrame.ResetToPool();
				instance.photoFrame = null;
			}
			if (instance.vehicleModule != null)
			{
				instance.vehicleModule.ResetToPool();
				instance.vehicleModule = null;
			}
			if (instance.mixingTable != null)
			{
				instance.mixingTable.ResetToPool();
				instance.mixingTable = null;
			}
			if (instance.shopKeeper != null)
			{
				instance.shopKeeper.ResetToPool();
				instance.shopKeeper = null;
			}
			if (instance.elevator != null)
			{
				instance.elevator.ResetToPool();
				instance.elevator = null;
			}
			if (instance.skullTrophy != null)
			{
				instance.skullTrophy.ResetToPool();
				instance.skullTrophy = null;
			}
			if (instance.cassette != null)
			{
				instance.cassette.ResetToPool();
				instance.cassette = null;
			}
			if (instance.telephone != null)
			{
				instance.telephone.ResetToPool();
				instance.telephone = null;
			}
			if (instance.boomBox != null)
			{
				instance.boomBox.ResetToPool();
				instance.boomBox = null;
			}
			if (instance.neonSign != null)
			{
				instance.neonSign.ResetToPool();
				instance.neonSign = null;
			}
			if (instance.subEntityList != null)
			{
				instance.subEntityList.ResetToPool();
				instance.subEntityList = null;
			}
			if (instance.marketTerminal != null)
			{
				instance.marketTerminal.ResetToPool();
				instance.marketTerminal = null;
			}
			if (instance.deliveryDrone != null)
			{
				instance.deliveryDrone.ResetToPool();
				instance.deliveryDrone = null;
			}
			if (instance.reclaimTerminal != null)
			{
				instance.reclaimTerminal.ResetToPool();
				instance.reclaimTerminal = null;
			}
			if (instance.slotMachine != null)
			{
				instance.slotMachine.ResetToPool();
				instance.slotMachine = null;
			}
			if (instance.trainEngine != null)
			{
				instance.trainEngine.ResetToPool();
				instance.trainEngine = null;
			}
			if (instance.cardGame != null)
			{
				instance.cardGame.ResetToPool();
				instance.cardGame = null;
			}
			if (instance.crane != null)
			{
				instance.crane.ResetToPool();
				instance.crane = null;
			}
			if (instance.connectedSpeaker != null)
			{
				instance.connectedSpeaker.ResetToPool();
				instance.connectedSpeaker = null;
			}
			if (instance.audioEntity != null)
			{
				instance.audioEntity.ResetToPool();
				instance.audioEntity = null;
			}
			if (instance.microphoneStand != null)
			{
				instance.microphoneStand.ResetToPool();
				instance.microphoneStand = null;
			}
			if (instance.submarine != null)
			{
				instance.submarine.ResetToPool();
				instance.submarine = null;
			}
			if (instance.sleepingBagCamper != null)
			{
				instance.sleepingBagCamper.ResetToPool();
				instance.sleepingBagCamper = null;
			}
			if (instance.camperModule != null)
			{
				instance.camperModule.ResetToPool();
				instance.camperModule = null;
			}
			if (instance.paintableSign != null)
			{
				instance.paintableSign.ResetToPool();
				instance.paintableSign = null;
			}
			if (instance.whitelist != null)
			{
				instance.whitelist.ResetToPool();
				instance.whitelist = null;
			}
			if (instance.FrankensteinTable != null)
			{
				instance.FrankensteinTable.ResetToPool();
				instance.FrankensteinTable = null;
			}
			if (instance.mlrs != null)
			{
				instance.mlrs.ResetToPool();
				instance.mlrs = null;
			}
			if (instance.reclaimManager != null)
			{
				instance.reclaimManager.ResetToPool();
				instance.reclaimManager = null;
			}
			if (instance.gameMode != null)
			{
				instance.gameMode.ResetToPool();
				instance.gameMode = null;
			}
			if (instance.snowmobile != null)
			{
				instance.snowmobile.ResetToPool();
				instance.snowmobile = null;
			}
			instance.createdThisFrame = false;
			if (instance.patternFirework != null)
			{
				instance.patternFirework.ResetToPool();
				instance.patternFirework = null;
			}
			if (instance.cargoPlane != null)
			{
				instance.cargoPlane.ResetToPool();
				instance.cargoPlane = null;
			}
			if (instance.paintedItem != null)
			{
				instance.paintedItem.ResetToPool();
				instance.paintedItem = null;
			}
			if (instance.clanManager != null)
			{
				instance.clanManager.ResetToPool();
				instance.clanManager = null;
			}
			if (instance.spray != null)
			{
				instance.spray.ResetToPool();
				instance.spray = null;
			}
			if (instance.baseTrain != null)
			{
				instance.baseTrain.ResetToPool();
				instance.baseTrain = null;
			}
			if (instance.zipline != null)
			{
				instance.zipline.ResetToPool();
				instance.zipline = null;
			}
			if (instance.ziplineMountable != null)
			{
				instance.ziplineMountable.ResetToPool();
				instance.ziplineMountable = null;
			}
			if (instance.ZiplineArrival != null)
			{
				instance.ZiplineArrival.ResetToPool();
				instance.ZiplineArrival = null;
			}
			if (instance.sprayLine != null)
			{
				instance.sprayLine.ResetToPool();
				instance.sprayLine = null;
			}
			if (instance.coalingTower != null)
			{
				instance.coalingTower.ResetToPool();
				instance.coalingTower = null;
			}
			if (instance.simpleInt != null)
			{
				instance.simpleInt.ResetToPool();
				instance.simpleInt = null;
			}
			if (instance.baseOven != null)
			{
				instance.baseOven.ResetToPool();
				instance.baseOven = null;
			}
			if (instance.brainComponent != null)
			{
				instance.brainComponent.ResetToPool();
				instance.brainComponent = null;
			}
			if (instance.proceduralDungeon != null)
			{
				instance.proceduralDungeon.ResetToPool();
				instance.proceduralDungeon = null;
			}
			if (instance.industrialConveyor != null)
			{
				instance.industrialConveyor.ResetToPool();
				instance.industrialConveyor = null;
			}
			if (instance.industrialCrafter != null)
			{
				instance.industrialCrafter.ResetToPool();
				instance.industrialCrafter = null;
			}
			if (instance.drone != null)
			{
				instance.drone.ResetToPool();
				instance.drone = null;
			}
			if (instance.explosive != null)
			{
				instance.explosive.ResetToPool();
				instance.explosive = null;
			}
			if (instance.simpleUint != null)
			{
				instance.simpleUint.ResetToPool();
				instance.simpleUint = null;
			}
			if (instance.weaponRack != null)
			{
				instance.weaponRack.ResetToPool();
				instance.weaponRack = null;
			}
			if (instance.attackHeli != null)
			{
				instance.attackHeli.ResetToPool();
				instance.attackHeli = null;
			}
			if (instance.attackHeliTurret != null)
			{
				instance.attackHeliTurret.ResetToPool();
				instance.attackHeliTurret = null;
			}
			if (instance.attackHeliRockets != null)
			{
				instance.attackHeliRockets.ResetToPool();
				instance.attackHeliRockets = null;
			}
			if (instance.baseBoat != null)
			{
				instance.baseBoat.ResetToPool();
				instance.baseBoat = null;
			}
			if (instance.ragdoll != null)
			{
				instance.ragdoll.ResetToPool();
				instance.ragdoll = null;
			}
			if (instance.dieselEngine != null)
			{
				instance.dieselEngine.ResetToPool();
				instance.dieselEngine = null;
			}
			if (instance.associatedFiles != null)
			{
				instance.associatedFiles.ResetToPool();
				instance.associatedFiles = null;
			}
			if (instance.nexusFerry != null)
			{
				instance.nexusFerry.ResetToPool();
				instance.nexusFerry = null;
			}
			if (instance.nexusIsland != null)
			{
				instance.nexusIsland.ResetToPool();
				instance.nexusIsland = null;
			}
			if (instance.nexusDockTerminal != null)
			{
				instance.nexusDockTerminal.ResetToPool();
				instance.nexusDockTerminal = null;
			}
			if (instance.rockingChair != null)
			{
				instance.rockingChair.ResetToPool();
				instance.rockingChair = null;
			}
			if (instance.headData != null)
			{
				instance.headData.ResetToPool();
				instance.headData = null;
			}
			if (instance.wantedPoster != null)
			{
				instance.wantedPoster.ResetToPool();
				instance.wantedPoster = null;
			}
			if (instance.waypointRace != null)
			{
				instance.waypointRace.ResetToPool();
				instance.waypointRace = null;
			}
			if (instance.legacyShelter != null)
			{
				instance.legacyShelter.ResetToPool();
				instance.legacyShelter = null;
			}
			if (instance.metalDetectorSource != null)
			{
				instance.metalDetectorSource.ResetToPool();
				instance.metalDetectorSource = null;
			}
			if (instance.tutorialIsland != null)
			{
				instance.tutorialIsland.ResetToPool();
				instance.tutorialIsland = null;
			}
			if (instance.cinematicEntity != null)
			{
				instance.cinematicEntity.ResetToPool();
				instance.cinematicEntity = null;
			}
			if (instance.buildingPrivilegeRetro != null)
			{
				instance.buildingPrivilegeRetro.ResetToPool();
				instance.buildingPrivilegeRetro = null;
			}
			if (instance.harborCrane != null)
			{
				instance.harborCrane.ResetToPool();
				instance.harborCrane = null;
			}
			if (instance.cargoShip != null)
			{
				instance.cargoShip.ResetToPool();
				instance.cargoShip = null;
			}
			if (instance.cargoShipContainer != null)
			{
				instance.cargoShipContainer.ResetToPool();
				instance.cargoShipContainer = null;
			}
			if (instance.missionMapMarker != null)
			{
				instance.missionMapMarker.ResetToPool();
				instance.missionMapMarker = null;
			}
			if (instance.bike != null)
			{
				instance.bike.ResetToPool();
				instance.bike = null;
			}
			if (instance.diverPropulsionVehicle != null)
			{
				instance.diverPropulsionVehicle.ResetToPool();
				instance.diverPropulsionVehicle = null;
			}
			if (instance.travellingVendor != null)
			{
				instance.travellingVendor.ResetToPool();
				instance.travellingVendor = null;
			}
			if (instance.vendingDynamicPricing != null)
			{
				instance.vendingDynamicPricing.ResetToPool();
				instance.vendingDynamicPricing = null;
			}
			if (instance.tinCanAlarm != null)
			{
				instance.tinCanAlarm.ResetToPool();
				instance.tinCanAlarm = null;
			}
			if (instance.digitalClock != null)
			{
				instance.digitalClock.ResetToPool();
				instance.digitalClock = null;
			}
			if (instance.elevatorLift != null)
			{
				instance.elevatorLift.ResetToPool();
				instance.elevatorLift = null;
			}
			if (instance.npcVendingMachine != null)
			{
				instance.npcVendingMachine.ResetToPool();
				instance.npcVendingMachine = null;
			}
			if (instance.mailbox != null)
			{
				instance.mailbox.ResetToPool();
				instance.mailbox = null;
			}
			if (instance.projectileWeaponMod != null)
			{
				instance.projectileWeaponMod.ResetToPool();
				instance.projectileWeaponMod = null;
			}
			if (instance.baseSculpture != null)
			{
				instance.baseSculpture.ResetToPool();
				instance.baseSculpture = null;
			}
			if (instance.vendingMachineStats != null)
			{
				instance.vendingMachineStats.ResetToPool();
				instance.vendingMachineStats = null;
			}
			if (instance.catapult != null)
			{
				instance.catapult.ResetToPool();
				instance.catapult = null;
			}
			if (instance.siegeTower != null)
			{
				instance.siegeTower.ResetToPool();
				instance.siegeTower = null;
			}
			if (instance.ballista != null)
			{
				instance.ballista.ResetToPool();
				instance.ballista = null;
			}
			if (instance.ballistaGun != null)
			{
				instance.ballistaGun.ResetToPool();
				instance.ballistaGun = null;
			}
			if (instance.batteringRam != null)
			{
				instance.batteringRam.ResetToPool();
				instance.batteringRam = null;
			}
			if (instance.temporaryRagdoll != null)
			{
				instance.temporaryRagdoll.ResetToPool();
				instance.temporaryRagdoll = null;
			}
			if (instance.constructableEntity != null)
			{
				instance.constructableEntity.ResetToPool();
				instance.constructableEntity = null;
			}
			if (instance.chickenCoop != null)
			{
				instance.chickenCoop.ResetToPool();
				instance.chickenCoop = null;
			}
			if (instance.farmableAnimal != null)
			{
				instance.farmableAnimal.ResetToPool();
				instance.farmableAnimal = null;
			}
			if (instance.ownership != null)
			{
				instance.ownership.ResetToPool();
				instance.ownership = null;
			}
			if (instance.beehive != null)
			{
				instance.beehive.ResetToPool();
				instance.beehive = null;
			}
			if (instance.beeMasterSwarm != null)
			{
				instance.beeMasterSwarm.ResetToPool();
				instance.beeMasterSwarm = null;
			}
			if (instance.containerCorpse != null)
			{
				instance.containerCorpse.ResetToPool();
				instance.containerCorpse = null;
			}
			if (instance.npcSensesState != null)
			{
				instance.npcSensesState.ResetToPool();
				instance.npcSensesState = null;
			}
			if (instance.vineMountable != null)
			{
				instance.vineMountable.ResetToPool();
				instance.vineMountable = null;
			}
			if (instance.vineTree != null)
			{
				instance.vineTree.ResetToPool();
				instance.vineTree = null;
			}
			if (instance.treeRespawn != null)
			{
				instance.treeRespawn.ResetToPool();
				instance.treeRespawn = null;
			}
			if (instance.wallpaperTool != null)
			{
				instance.wallpaperTool.ResetToPool();
				instance.wallpaperTool = null;
			}
			if (instance.commandBlock != null)
			{
				instance.commandBlock.ResetToPool();
				instance.commandBlock = null;
			}
			if (instance.staticRespawn != null)
			{
				instance.staticRespawn.ResetToPool();
				instance.staticRespawn = null;
			}
			if (instance.buriedItemStorage != null)
			{
				instance.buriedItemStorage.ResetToPool();
				instance.buriedItemStorage = null;
			}
			Pool.Free<Entity>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Entity with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Entity instance)
	{
		if (baseNetworkable != null)
		{
			if (instance.baseNetworkable == null)
			{
				instance.baseNetworkable = baseNetworkable.Copy();
			}
			else
			{
				baseNetworkable.CopyTo(instance.baseNetworkable);
			}
		}
		else
		{
			instance.baseNetworkable = null;
		}
		if (baseEntity != null)
		{
			if (instance.baseEntity == null)
			{
				instance.baseEntity = baseEntity.Copy();
			}
			else
			{
				baseEntity.CopyTo(instance.baseEntity);
			}
		}
		else
		{
			instance.baseEntity = null;
		}
		if (basePlayer != null)
		{
			if (instance.basePlayer == null)
			{
				instance.basePlayer = basePlayer.Copy();
			}
			else
			{
				basePlayer.CopyTo(instance.basePlayer);
			}
		}
		else
		{
			instance.basePlayer = null;
		}
		if (worldItem != null)
		{
			if (instance.worldItem == null)
			{
				instance.worldItem = worldItem.Copy();
			}
			else
			{
				worldItem.CopyTo(instance.worldItem);
			}
		}
		else
		{
			instance.worldItem = null;
		}
		if (resource != null)
		{
			if (instance.resource == null)
			{
				instance.resource = resource.Copy();
			}
			else
			{
				resource.CopyTo(instance.resource);
			}
		}
		else
		{
			instance.resource = null;
		}
		if (buildingBlock != null)
		{
			if (instance.buildingBlock == null)
			{
				instance.buildingBlock = buildingBlock.Copy();
			}
			else
			{
				buildingBlock.CopyTo(instance.buildingBlock);
			}
		}
		else
		{
			instance.buildingBlock = null;
		}
		if (environment != null)
		{
			if (instance.environment == null)
			{
				instance.environment = environment.Copy();
			}
			else
			{
				environment.CopyTo(instance.environment);
			}
		}
		else
		{
			instance.environment = null;
		}
		if (corpse != null)
		{
			if (instance.corpse == null)
			{
				instance.corpse = corpse.Copy();
			}
			else
			{
				corpse.CopyTo(instance.corpse);
			}
		}
		else
		{
			instance.corpse = null;
		}
		if (parent != null)
		{
			if (instance.parent == null)
			{
				instance.parent = parent.Copy();
			}
			else
			{
				parent.CopyTo(instance.parent);
			}
		}
		else
		{
			instance.parent = null;
		}
		if (keyLock != null)
		{
			if (instance.keyLock == null)
			{
				instance.keyLock = keyLock.Copy();
			}
			else
			{
				keyLock.CopyTo(instance.keyLock);
			}
		}
		else
		{
			instance.keyLock = null;
		}
		if (codeLock != null)
		{
			if (instance.codeLock == null)
			{
				instance.codeLock = codeLock.Copy();
			}
			else
			{
				codeLock.CopyTo(instance.codeLock);
			}
		}
		else
		{
			instance.codeLock = null;
		}
		if (entitySlots != null)
		{
			if (instance.entitySlots == null)
			{
				instance.entitySlots = entitySlots.Copy();
			}
			else
			{
				entitySlots.CopyTo(instance.entitySlots);
			}
		}
		else
		{
			instance.entitySlots = null;
		}
		if (buildingPrivilege != null)
		{
			if (instance.buildingPrivilege == null)
			{
				instance.buildingPrivilege = buildingPrivilege.Copy();
			}
			else
			{
				buildingPrivilege.CopyTo(instance.buildingPrivilege);
			}
		}
		else
		{
			instance.buildingPrivilege = null;
		}
		if (storageBox != null)
		{
			if (instance.storageBox == null)
			{
				instance.storageBox = storageBox.Copy();
			}
			else
			{
				storageBox.CopyTo(instance.storageBox);
			}
		}
		else
		{
			instance.storageBox = null;
		}
		if (heldEntity != null)
		{
			if (instance.heldEntity == null)
			{
				instance.heldEntity = heldEntity.Copy();
			}
			else
			{
				heldEntity.CopyTo(instance.heldEntity);
			}
		}
		else
		{
			instance.heldEntity = null;
		}
		if (baseProjectile != null)
		{
			if (instance.baseProjectile == null)
			{
				instance.baseProjectile = baseProjectile.Copy();
			}
			else
			{
				baseProjectile.CopyTo(instance.baseProjectile);
			}
		}
		else
		{
			instance.baseProjectile = null;
		}
		if (baseNPC != null)
		{
			if (instance.baseNPC == null)
			{
				instance.baseNPC = baseNPC.Copy();
			}
			else
			{
				baseNPC.CopyTo(instance.baseNPC);
			}
		}
		else
		{
			instance.baseNPC = null;
		}
		if (loot != null)
		{
			if (instance.loot == null)
			{
				instance.loot = loot.Copy();
			}
			else
			{
				loot.CopyTo(instance.loot);
			}
		}
		else
		{
			instance.loot = null;
		}
		if (genericSpawner != null)
		{
			if (instance.genericSpawner == null)
			{
				instance.genericSpawner = genericSpawner.Copy();
			}
			else
			{
				genericSpawner.CopyTo(instance.genericSpawner);
			}
		}
		else
		{
			instance.genericSpawner = null;
		}
		if (sleepingBag != null)
		{
			if (instance.sleepingBag == null)
			{
				instance.sleepingBag = sleepingBag.Copy();
			}
			else
			{
				sleepingBag.CopyTo(instance.sleepingBag);
			}
		}
		else
		{
			instance.sleepingBag = null;
		}
		if (lootableCorpse != null)
		{
			if (instance.lootableCorpse == null)
			{
				instance.lootableCorpse = lootableCorpse.Copy();
			}
			else
			{
				lootableCorpse.CopyTo(instance.lootableCorpse);
			}
		}
		else
		{
			instance.lootableCorpse = null;
		}
		if (sign != null)
		{
			if (instance.sign == null)
			{
				instance.sign = sign.Copy();
			}
			else
			{
				sign.CopyTo(instance.sign);
			}
		}
		else
		{
			instance.sign = null;
		}
		if (baseCombat != null)
		{
			if (instance.baseCombat == null)
			{
				instance.baseCombat = baseCombat.Copy();
			}
			else
			{
				baseCombat.CopyTo(instance.baseCombat);
			}
		}
		else
		{
			instance.baseCombat = null;
		}
		if (mapEntity != null)
		{
			if (instance.mapEntity == null)
			{
				instance.mapEntity = mapEntity.Copy();
			}
			else
			{
				mapEntity.CopyTo(instance.mapEntity);
			}
		}
		else
		{
			instance.mapEntity = null;
		}
		if (researchTable != null)
		{
			if (instance.researchTable == null)
			{
				instance.researchTable = researchTable.Copy();
			}
			else
			{
				researchTable.CopyTo(instance.researchTable);
			}
		}
		else
		{
			instance.researchTable = null;
		}
		if (dudExplosive != null)
		{
			if (instance.dudExplosive == null)
			{
				instance.dudExplosive = dudExplosive.Copy();
			}
			else
			{
				dudExplosive.CopyTo(instance.dudExplosive);
			}
		}
		else
		{
			instance.dudExplosive = null;
		}
		if (miningQuarry != null)
		{
			if (instance.miningQuarry == null)
			{
				instance.miningQuarry = miningQuarry.Copy();
			}
			else
			{
				miningQuarry.CopyTo(instance.miningQuarry);
			}
		}
		else
		{
			instance.miningQuarry = null;
		}
		if (baseVehicle != null)
		{
			if (instance.baseVehicle == null)
			{
				instance.baseVehicle = baseVehicle.Copy();
			}
			else
			{
				baseVehicle.CopyTo(instance.baseVehicle);
			}
		}
		else
		{
			instance.baseVehicle = null;
		}
		if (helicopter != null)
		{
			if (instance.helicopter == null)
			{
				instance.helicopter = helicopter.Copy();
			}
			else
			{
				helicopter.CopyTo(instance.helicopter);
			}
		}
		else
		{
			instance.helicopter = null;
		}
		if (landmine != null)
		{
			if (instance.landmine == null)
			{
				instance.landmine = landmine.Copy();
			}
			else
			{
				landmine.CopyTo(instance.landmine);
			}
		}
		else
		{
			instance.landmine = null;
		}
		if (autoturret != null)
		{
			if (instance.autoturret == null)
			{
				instance.autoturret = autoturret.Copy();
			}
			else
			{
				autoturret.CopyTo(instance.autoturret);
			}
		}
		else
		{
			instance.autoturret = null;
		}
		if (sphereEntity != null)
		{
			if (instance.sphereEntity == null)
			{
				instance.sphereEntity = sphereEntity.Copy();
			}
			else
			{
				sphereEntity.CopyTo(instance.sphereEntity);
			}
		}
		else
		{
			instance.sphereEntity = null;
		}
		if (stabilityEntity != null)
		{
			if (instance.stabilityEntity == null)
			{
				instance.stabilityEntity = stabilityEntity.Copy();
			}
			else
			{
				stabilityEntity.CopyTo(instance.stabilityEntity);
			}
		}
		else
		{
			instance.stabilityEntity = null;
		}
		if (ownerInfo != null)
		{
			if (instance.ownerInfo == null)
			{
				instance.ownerInfo = ownerInfo.Copy();
			}
			else
			{
				ownerInfo.CopyTo(instance.ownerInfo);
			}
		}
		else
		{
			instance.ownerInfo = null;
		}
		if (decayEntity != null)
		{
			if (instance.decayEntity == null)
			{
				instance.decayEntity = decayEntity.Copy();
			}
			else
			{
				decayEntity.CopyTo(instance.decayEntity);
			}
		}
		else
		{
			instance.decayEntity = null;
		}
		if (spawnable != null)
		{
			if (instance.spawnable == null)
			{
				instance.spawnable = spawnable.Copy();
			}
			else
			{
				spawnable.CopyTo(instance.spawnable);
			}
		}
		else
		{
			instance.spawnable = null;
		}
		if (servergib != null)
		{
			if (instance.servergib == null)
			{
				instance.servergib = servergib.Copy();
			}
			else
			{
				servergib.CopyTo(instance.servergib);
			}
		}
		else
		{
			instance.servergib = null;
		}
		if (vendingMachine != null)
		{
			if (instance.vendingMachine == null)
			{
				instance.vendingMachine = vendingMachine.Copy();
			}
			else
			{
				vendingMachine.CopyTo(instance.vendingMachine);
			}
		}
		else
		{
			instance.vendingMachine = null;
		}
		if (spinnerWheel != null)
		{
			if (instance.spinnerWheel == null)
			{
				instance.spinnerWheel = spinnerWheel.Copy();
			}
			else
			{
				spinnerWheel.CopyTo(instance.spinnerWheel);
			}
		}
		else
		{
			instance.spinnerWheel = null;
		}
		if (lift != null)
		{
			if (instance.lift == null)
			{
				instance.lift = lift.Copy();
			}
			else
			{
				lift.CopyTo(instance.lift);
			}
		}
		else
		{
			instance.lift = null;
		}
		if (bradley != null)
		{
			if (instance.bradley == null)
			{
				instance.bradley = bradley.Copy();
			}
			else
			{
				bradley.CopyTo(instance.bradley);
			}
		}
		else
		{
			instance.bradley = null;
		}
		if (waterwell != null)
		{
			if (instance.waterwell == null)
			{
				instance.waterwell = waterwell.Copy();
			}
			else
			{
				waterwell.CopyTo(instance.waterwell);
			}
		}
		else
		{
			instance.waterwell = null;
		}
		if (motorBoat != null)
		{
			if (instance.motorBoat == null)
			{
				instance.motorBoat = motorBoat.Copy();
			}
			else
			{
				motorBoat.CopyTo(instance.motorBoat);
			}
		}
		else
		{
			instance.motorBoat = null;
		}
		if (ioEntity != null)
		{
			if (instance.ioEntity == null)
			{
				instance.ioEntity = ioEntity.Copy();
			}
			else
			{
				ioEntity.CopyTo(instance.ioEntity);
			}
		}
		else
		{
			instance.ioEntity = null;
		}
		if (puzzleReset != null)
		{
			if (instance.puzzleReset == null)
			{
				instance.puzzleReset = puzzleReset.Copy();
			}
			else
			{
				puzzleReset.CopyTo(instance.puzzleReset);
			}
		}
		else
		{
			instance.puzzleReset = null;
		}
		if (relationshipManager != null)
		{
			if (instance.relationshipManager == null)
			{
				instance.relationshipManager = relationshipManager.Copy();
			}
			else
			{
				relationshipManager.CopyTo(instance.relationshipManager);
			}
		}
		else
		{
			instance.relationshipManager = null;
		}
		if (hotAirBalloon != null)
		{
			if (instance.hotAirBalloon == null)
			{
				instance.hotAirBalloon = hotAirBalloon.Copy();
			}
			else
			{
				hotAirBalloon.CopyTo(instance.hotAirBalloon);
			}
		}
		else
		{
			instance.hotAirBalloon = null;
		}
		if (samSite != null)
		{
			if (instance.samSite == null)
			{
				instance.samSite = samSite.Copy();
			}
			else
			{
				samSite.CopyTo(instance.samSite);
			}
		}
		else
		{
			instance.samSite = null;
		}
		if (eggHunt != null)
		{
			if (instance.eggHunt == null)
			{
				instance.eggHunt = eggHunt.Copy();
			}
			else
			{
				eggHunt.CopyTo(instance.eggHunt);
			}
		}
		else
		{
			instance.eggHunt = null;
		}
		if (arcadeMachine != null)
		{
			if (instance.arcadeMachine == null)
			{
				instance.arcadeMachine = arcadeMachine.Copy();
			}
			else
			{
				arcadeMachine.CopyTo(instance.arcadeMachine);
			}
		}
		else
		{
			instance.arcadeMachine = null;
		}
		if (miniCopter != null)
		{
			if (instance.miniCopter == null)
			{
				instance.miniCopter = miniCopter.Copy();
			}
			else
			{
				miniCopter.CopyTo(instance.miniCopter);
			}
		}
		else
		{
			instance.miniCopter = null;
		}
		if (horse != null)
		{
			if (instance.horse == null)
			{
				instance.horse = horse.Copy();
			}
			else
			{
				horse.CopyTo(instance.horse);
			}
		}
		else
		{
			instance.horse = null;
		}
		if (smartAlarm != null)
		{
			if (instance.smartAlarm == null)
			{
				instance.smartAlarm = smartAlarm.Copy();
			}
			else
			{
				smartAlarm.CopyTo(instance.smartAlarm);
			}
		}
		else
		{
			instance.smartAlarm = null;
		}
		if (lightString != null)
		{
			if (instance.lightString == null)
			{
				instance.lightString = lightString.Copy();
			}
			else
			{
				lightString.CopyTo(instance.lightString);
			}
		}
		else
		{
			instance.lightString = null;
		}
		if (lightDeployer != null)
		{
			if (instance.lightDeployer == null)
			{
				instance.lightDeployer = lightDeployer.Copy();
			}
			else
			{
				lightDeployer.CopyTo(instance.lightDeployer);
			}
		}
		else
		{
			instance.lightDeployer = null;
		}
		if (rcEntity != null)
		{
			if (instance.rcEntity == null)
			{
				instance.rcEntity = rcEntity.Copy();
			}
			else
			{
				rcEntity.CopyTo(instance.rcEntity);
			}
		}
		else
		{
			instance.rcEntity = null;
		}
		if (computerStation != null)
		{
			if (instance.computerStation == null)
			{
				instance.computerStation = computerStation.Copy();
			}
			else
			{
				computerStation.CopyTo(instance.computerStation);
			}
		}
		else
		{
			instance.computerStation = null;
		}
		if (growableEntity != null)
		{
			if (instance.growableEntity == null)
			{
				instance.growableEntity = growableEntity.Copy();
			}
			else
			{
				growableEntity.CopyTo(instance.growableEntity);
			}
		}
		else
		{
			instance.growableEntity = null;
		}
		if (composter != null)
		{
			if (instance.composter == null)
			{
				instance.composter = composter.Copy();
			}
			else
			{
				composter.CopyTo(instance.composter);
			}
		}
		else
		{
			instance.composter = null;
		}
		if (modularVehicle != null)
		{
			if (instance.modularVehicle == null)
			{
				instance.modularVehicle = modularVehicle.Copy();
			}
			else
			{
				modularVehicle.CopyTo(instance.modularVehicle);
			}
		}
		else
		{
			instance.modularVehicle = null;
		}
		if (modularCar != null)
		{
			if (instance.modularCar == null)
			{
				instance.modularCar = modularCar.Copy();
			}
			else
			{
				modularCar.CopyTo(instance.modularCar);
			}
		}
		else
		{
			instance.modularCar = null;
		}
		if (simpleUID != null)
		{
			if (instance.simpleUID == null)
			{
				instance.simpleUID = simpleUID.Copy();
			}
			else
			{
				simpleUID.CopyTo(instance.simpleUID);
			}
		}
		else
		{
			instance.simpleUID = null;
		}
		if (vehicleLift != null)
		{
			if (instance.vehicleLift == null)
			{
				instance.vehicleLift = vehicleLift.Copy();
			}
			else
			{
				vehicleLift.CopyTo(instance.vehicleLift);
			}
		}
		else
		{
			instance.vehicleLift = null;
		}
		if (engineStorage != null)
		{
			if (instance.engineStorage == null)
			{
				instance.engineStorage = engineStorage.Copy();
			}
			else
			{
				engineStorage.CopyTo(instance.engineStorage);
			}
		}
		else
		{
			instance.engineStorage = null;
		}
		if (vehicleVendor != null)
		{
			if (instance.vehicleVendor == null)
			{
				instance.vehicleVendor = vehicleVendor.Copy();
			}
			else
			{
				vehicleVendor.CopyTo(instance.vehicleVendor);
			}
		}
		else
		{
			instance.vehicleVendor = null;
		}
		if (WaterPool != null)
		{
			if (instance.WaterPool == null)
			{
				instance.WaterPool = WaterPool.Copy();
			}
			else
			{
				WaterPool.CopyTo(instance.WaterPool);
			}
		}
		else
		{
			instance.WaterPool = null;
		}
		if (photo != null)
		{
			if (instance.photo == null)
			{
				instance.photo = photo.Copy();
			}
			else
			{
				photo.CopyTo(instance.photo);
			}
		}
		else
		{
			instance.photo = null;
		}
		if (photoFrame != null)
		{
			if (instance.photoFrame == null)
			{
				instance.photoFrame = photoFrame.Copy();
			}
			else
			{
				photoFrame.CopyTo(instance.photoFrame);
			}
		}
		else
		{
			instance.photoFrame = null;
		}
		if (vehicleModule != null)
		{
			if (instance.vehicleModule == null)
			{
				instance.vehicleModule = vehicleModule.Copy();
			}
			else
			{
				vehicleModule.CopyTo(instance.vehicleModule);
			}
		}
		else
		{
			instance.vehicleModule = null;
		}
		if (mixingTable != null)
		{
			if (instance.mixingTable == null)
			{
				instance.mixingTable = mixingTable.Copy();
			}
			else
			{
				mixingTable.CopyTo(instance.mixingTable);
			}
		}
		else
		{
			instance.mixingTable = null;
		}
		if (shopKeeper != null)
		{
			if (instance.shopKeeper == null)
			{
				instance.shopKeeper = shopKeeper.Copy();
			}
			else
			{
				shopKeeper.CopyTo(instance.shopKeeper);
			}
		}
		else
		{
			instance.shopKeeper = null;
		}
		if (elevator != null)
		{
			if (instance.elevator == null)
			{
				instance.elevator = elevator.Copy();
			}
			else
			{
				elevator.CopyTo(instance.elevator);
			}
		}
		else
		{
			instance.elevator = null;
		}
		if (skullTrophy != null)
		{
			if (instance.skullTrophy == null)
			{
				instance.skullTrophy = skullTrophy.Copy();
			}
			else
			{
				skullTrophy.CopyTo(instance.skullTrophy);
			}
		}
		else
		{
			instance.skullTrophy = null;
		}
		if (cassette != null)
		{
			if (instance.cassette == null)
			{
				instance.cassette = cassette.Copy();
			}
			else
			{
				cassette.CopyTo(instance.cassette);
			}
		}
		else
		{
			instance.cassette = null;
		}
		if (telephone != null)
		{
			if (instance.telephone == null)
			{
				instance.telephone = telephone.Copy();
			}
			else
			{
				telephone.CopyTo(instance.telephone);
			}
		}
		else
		{
			instance.telephone = null;
		}
		if (boomBox != null)
		{
			if (instance.boomBox == null)
			{
				instance.boomBox = boomBox.Copy();
			}
			else
			{
				boomBox.CopyTo(instance.boomBox);
			}
		}
		else
		{
			instance.boomBox = null;
		}
		if (neonSign != null)
		{
			if (instance.neonSign == null)
			{
				instance.neonSign = neonSign.Copy();
			}
			else
			{
				neonSign.CopyTo(instance.neonSign);
			}
		}
		else
		{
			instance.neonSign = null;
		}
		if (subEntityList != null)
		{
			if (instance.subEntityList == null)
			{
				instance.subEntityList = subEntityList.Copy();
			}
			else
			{
				subEntityList.CopyTo(instance.subEntityList);
			}
		}
		else
		{
			instance.subEntityList = null;
		}
		if (marketTerminal != null)
		{
			if (instance.marketTerminal == null)
			{
				instance.marketTerminal = marketTerminal.Copy();
			}
			else
			{
				marketTerminal.CopyTo(instance.marketTerminal);
			}
		}
		else
		{
			instance.marketTerminal = null;
		}
		if (deliveryDrone != null)
		{
			if (instance.deliveryDrone == null)
			{
				instance.deliveryDrone = deliveryDrone.Copy();
			}
			else
			{
				deliveryDrone.CopyTo(instance.deliveryDrone);
			}
		}
		else
		{
			instance.deliveryDrone = null;
		}
		if (reclaimTerminal != null)
		{
			if (instance.reclaimTerminal == null)
			{
				instance.reclaimTerminal = reclaimTerminal.Copy();
			}
			else
			{
				reclaimTerminal.CopyTo(instance.reclaimTerminal);
			}
		}
		else
		{
			instance.reclaimTerminal = null;
		}
		if (slotMachine != null)
		{
			if (instance.slotMachine == null)
			{
				instance.slotMachine = slotMachine.Copy();
			}
			else
			{
				slotMachine.CopyTo(instance.slotMachine);
			}
		}
		else
		{
			instance.slotMachine = null;
		}
		if (trainEngine != null)
		{
			if (instance.trainEngine == null)
			{
				instance.trainEngine = trainEngine.Copy();
			}
			else
			{
				trainEngine.CopyTo(instance.trainEngine);
			}
		}
		else
		{
			instance.trainEngine = null;
		}
		if (cardGame != null)
		{
			if (instance.cardGame == null)
			{
				instance.cardGame = cardGame.Copy();
			}
			else
			{
				cardGame.CopyTo(instance.cardGame);
			}
		}
		else
		{
			instance.cardGame = null;
		}
		if (crane != null)
		{
			if (instance.crane == null)
			{
				instance.crane = crane.Copy();
			}
			else
			{
				crane.CopyTo(instance.crane);
			}
		}
		else
		{
			instance.crane = null;
		}
		if (connectedSpeaker != null)
		{
			if (instance.connectedSpeaker == null)
			{
				instance.connectedSpeaker = connectedSpeaker.Copy();
			}
			else
			{
				connectedSpeaker.CopyTo(instance.connectedSpeaker);
			}
		}
		else
		{
			instance.connectedSpeaker = null;
		}
		if (audioEntity != null)
		{
			if (instance.audioEntity == null)
			{
				instance.audioEntity = audioEntity.Copy();
			}
			else
			{
				audioEntity.CopyTo(instance.audioEntity);
			}
		}
		else
		{
			instance.audioEntity = null;
		}
		if (microphoneStand != null)
		{
			if (instance.microphoneStand == null)
			{
				instance.microphoneStand = microphoneStand.Copy();
			}
			else
			{
				microphoneStand.CopyTo(instance.microphoneStand);
			}
		}
		else
		{
			instance.microphoneStand = null;
		}
		if (submarine != null)
		{
			if (instance.submarine == null)
			{
				instance.submarine = submarine.Copy();
			}
			else
			{
				submarine.CopyTo(instance.submarine);
			}
		}
		else
		{
			instance.submarine = null;
		}
		if (sleepingBagCamper != null)
		{
			if (instance.sleepingBagCamper == null)
			{
				instance.sleepingBagCamper = sleepingBagCamper.Copy();
			}
			else
			{
				sleepingBagCamper.CopyTo(instance.sleepingBagCamper);
			}
		}
		else
		{
			instance.sleepingBagCamper = null;
		}
		if (camperModule != null)
		{
			if (instance.camperModule == null)
			{
				instance.camperModule = camperModule.Copy();
			}
			else
			{
				camperModule.CopyTo(instance.camperModule);
			}
		}
		else
		{
			instance.camperModule = null;
		}
		if (paintableSign != null)
		{
			if (instance.paintableSign == null)
			{
				instance.paintableSign = paintableSign.Copy();
			}
			else
			{
				paintableSign.CopyTo(instance.paintableSign);
			}
		}
		else
		{
			instance.paintableSign = null;
		}
		if (whitelist != null)
		{
			if (instance.whitelist == null)
			{
				instance.whitelist = whitelist.Copy();
			}
			else
			{
				whitelist.CopyTo(instance.whitelist);
			}
		}
		else
		{
			instance.whitelist = null;
		}
		if (FrankensteinTable != null)
		{
			if (instance.FrankensteinTable == null)
			{
				instance.FrankensteinTable = FrankensteinTable.Copy();
			}
			else
			{
				FrankensteinTable.CopyTo(instance.FrankensteinTable);
			}
		}
		else
		{
			instance.FrankensteinTable = null;
		}
		if (mlrs != null)
		{
			if (instance.mlrs == null)
			{
				instance.mlrs = mlrs.Copy();
			}
			else
			{
				mlrs.CopyTo(instance.mlrs);
			}
		}
		else
		{
			instance.mlrs = null;
		}
		if (reclaimManager != null)
		{
			if (instance.reclaimManager == null)
			{
				instance.reclaimManager = reclaimManager.Copy();
			}
			else
			{
				reclaimManager.CopyTo(instance.reclaimManager);
			}
		}
		else
		{
			instance.reclaimManager = null;
		}
		if (gameMode != null)
		{
			if (instance.gameMode == null)
			{
				instance.gameMode = gameMode.Copy();
			}
			else
			{
				gameMode.CopyTo(instance.gameMode);
			}
		}
		else
		{
			instance.gameMode = null;
		}
		if (snowmobile != null)
		{
			if (instance.snowmobile == null)
			{
				instance.snowmobile = snowmobile.Copy();
			}
			else
			{
				snowmobile.CopyTo(instance.snowmobile);
			}
		}
		else
		{
			instance.snowmobile = null;
		}
		instance.createdThisFrame = createdThisFrame;
		if (patternFirework != null)
		{
			if (instance.patternFirework == null)
			{
				instance.patternFirework = patternFirework.Copy();
			}
			else
			{
				patternFirework.CopyTo(instance.patternFirework);
			}
		}
		else
		{
			instance.patternFirework = null;
		}
		if (cargoPlane != null)
		{
			if (instance.cargoPlane == null)
			{
				instance.cargoPlane = cargoPlane.Copy();
			}
			else
			{
				cargoPlane.CopyTo(instance.cargoPlane);
			}
		}
		else
		{
			instance.cargoPlane = null;
		}
		if (paintedItem != null)
		{
			if (instance.paintedItem == null)
			{
				instance.paintedItem = paintedItem.Copy();
			}
			else
			{
				paintedItem.CopyTo(instance.paintedItem);
			}
		}
		else
		{
			instance.paintedItem = null;
		}
		if (clanManager != null)
		{
			if (instance.clanManager == null)
			{
				instance.clanManager = clanManager.Copy();
			}
			else
			{
				clanManager.CopyTo(instance.clanManager);
			}
		}
		else
		{
			instance.clanManager = null;
		}
		if (spray != null)
		{
			if (instance.spray == null)
			{
				instance.spray = spray.Copy();
			}
			else
			{
				spray.CopyTo(instance.spray);
			}
		}
		else
		{
			instance.spray = null;
		}
		if (baseTrain != null)
		{
			if (instance.baseTrain == null)
			{
				instance.baseTrain = baseTrain.Copy();
			}
			else
			{
				baseTrain.CopyTo(instance.baseTrain);
			}
		}
		else
		{
			instance.baseTrain = null;
		}
		if (zipline != null)
		{
			if (instance.zipline == null)
			{
				instance.zipline = zipline.Copy();
			}
			else
			{
				zipline.CopyTo(instance.zipline);
			}
		}
		else
		{
			instance.zipline = null;
		}
		if (ziplineMountable != null)
		{
			if (instance.ziplineMountable == null)
			{
				instance.ziplineMountable = ziplineMountable.Copy();
			}
			else
			{
				ziplineMountable.CopyTo(instance.ziplineMountable);
			}
		}
		else
		{
			instance.ziplineMountable = null;
		}
		if (ZiplineArrival != null)
		{
			if (instance.ZiplineArrival == null)
			{
				instance.ZiplineArrival = ZiplineArrival.Copy();
			}
			else
			{
				ZiplineArrival.CopyTo(instance.ZiplineArrival);
			}
		}
		else
		{
			instance.ZiplineArrival = null;
		}
		if (sprayLine != null)
		{
			if (instance.sprayLine == null)
			{
				instance.sprayLine = sprayLine.Copy();
			}
			else
			{
				sprayLine.CopyTo(instance.sprayLine);
			}
		}
		else
		{
			instance.sprayLine = null;
		}
		if (coalingTower != null)
		{
			if (instance.coalingTower == null)
			{
				instance.coalingTower = coalingTower.Copy();
			}
			else
			{
				coalingTower.CopyTo(instance.coalingTower);
			}
		}
		else
		{
			instance.coalingTower = null;
		}
		if (simpleInt != null)
		{
			if (instance.simpleInt == null)
			{
				instance.simpleInt = simpleInt.Copy();
			}
			else
			{
				simpleInt.CopyTo(instance.simpleInt);
			}
		}
		else
		{
			instance.simpleInt = null;
		}
		if (baseOven != null)
		{
			if (instance.baseOven == null)
			{
				instance.baseOven = baseOven.Copy();
			}
			else
			{
				baseOven.CopyTo(instance.baseOven);
			}
		}
		else
		{
			instance.baseOven = null;
		}
		if (brainComponent != null)
		{
			if (instance.brainComponent == null)
			{
				instance.brainComponent = brainComponent.Copy();
			}
			else
			{
				brainComponent.CopyTo(instance.brainComponent);
			}
		}
		else
		{
			instance.brainComponent = null;
		}
		if (proceduralDungeon != null)
		{
			if (instance.proceduralDungeon == null)
			{
				instance.proceduralDungeon = proceduralDungeon.Copy();
			}
			else
			{
				proceduralDungeon.CopyTo(instance.proceduralDungeon);
			}
		}
		else
		{
			instance.proceduralDungeon = null;
		}
		if (industrialConveyor != null)
		{
			if (instance.industrialConveyor == null)
			{
				instance.industrialConveyor = industrialConveyor.Copy();
			}
			else
			{
				industrialConveyor.CopyTo(instance.industrialConveyor);
			}
		}
		else
		{
			instance.industrialConveyor = null;
		}
		if (industrialCrafter != null)
		{
			if (instance.industrialCrafter == null)
			{
				instance.industrialCrafter = industrialCrafter.Copy();
			}
			else
			{
				industrialCrafter.CopyTo(instance.industrialCrafter);
			}
		}
		else
		{
			instance.industrialCrafter = null;
		}
		if (drone != null)
		{
			if (instance.drone == null)
			{
				instance.drone = drone.Copy();
			}
			else
			{
				drone.CopyTo(instance.drone);
			}
		}
		else
		{
			instance.drone = null;
		}
		if (explosive != null)
		{
			if (instance.explosive == null)
			{
				instance.explosive = explosive.Copy();
			}
			else
			{
				explosive.CopyTo(instance.explosive);
			}
		}
		else
		{
			instance.explosive = null;
		}
		if (simpleUint != null)
		{
			if (instance.simpleUint == null)
			{
				instance.simpleUint = simpleUint.Copy();
			}
			else
			{
				simpleUint.CopyTo(instance.simpleUint);
			}
		}
		else
		{
			instance.simpleUint = null;
		}
		if (weaponRack != null)
		{
			if (instance.weaponRack == null)
			{
				instance.weaponRack = weaponRack.Copy();
			}
			else
			{
				weaponRack.CopyTo(instance.weaponRack);
			}
		}
		else
		{
			instance.weaponRack = null;
		}
		if (attackHeli != null)
		{
			if (instance.attackHeli == null)
			{
				instance.attackHeli = attackHeli.Copy();
			}
			else
			{
				attackHeli.CopyTo(instance.attackHeli);
			}
		}
		else
		{
			instance.attackHeli = null;
		}
		if (attackHeliTurret != null)
		{
			if (instance.attackHeliTurret == null)
			{
				instance.attackHeliTurret = attackHeliTurret.Copy();
			}
			else
			{
				attackHeliTurret.CopyTo(instance.attackHeliTurret);
			}
		}
		else
		{
			instance.attackHeliTurret = null;
		}
		if (attackHeliRockets != null)
		{
			if (instance.attackHeliRockets == null)
			{
				instance.attackHeliRockets = attackHeliRockets.Copy();
			}
			else
			{
				attackHeliRockets.CopyTo(instance.attackHeliRockets);
			}
		}
		else
		{
			instance.attackHeliRockets = null;
		}
		if (baseBoat != null)
		{
			if (instance.baseBoat == null)
			{
				instance.baseBoat = baseBoat.Copy();
			}
			else
			{
				baseBoat.CopyTo(instance.baseBoat);
			}
		}
		else
		{
			instance.baseBoat = null;
		}
		if (ragdoll != null)
		{
			if (instance.ragdoll == null)
			{
				instance.ragdoll = ragdoll.Copy();
			}
			else
			{
				ragdoll.CopyTo(instance.ragdoll);
			}
		}
		else
		{
			instance.ragdoll = null;
		}
		if (dieselEngine != null)
		{
			if (instance.dieselEngine == null)
			{
				instance.dieselEngine = dieselEngine.Copy();
			}
			else
			{
				dieselEngine.CopyTo(instance.dieselEngine);
			}
		}
		else
		{
			instance.dieselEngine = null;
		}
		if (associatedFiles != null)
		{
			if (instance.associatedFiles == null)
			{
				instance.associatedFiles = associatedFiles.Copy();
			}
			else
			{
				associatedFiles.CopyTo(instance.associatedFiles);
			}
		}
		else
		{
			instance.associatedFiles = null;
		}
		if (nexusFerry != null)
		{
			if (instance.nexusFerry == null)
			{
				instance.nexusFerry = nexusFerry.Copy();
			}
			else
			{
				nexusFerry.CopyTo(instance.nexusFerry);
			}
		}
		else
		{
			instance.nexusFerry = null;
		}
		if (nexusIsland != null)
		{
			if (instance.nexusIsland == null)
			{
				instance.nexusIsland = nexusIsland.Copy();
			}
			else
			{
				nexusIsland.CopyTo(instance.nexusIsland);
			}
		}
		else
		{
			instance.nexusIsland = null;
		}
		if (nexusDockTerminal != null)
		{
			if (instance.nexusDockTerminal == null)
			{
				instance.nexusDockTerminal = nexusDockTerminal.Copy();
			}
			else
			{
				nexusDockTerminal.CopyTo(instance.nexusDockTerminal);
			}
		}
		else
		{
			instance.nexusDockTerminal = null;
		}
		if (rockingChair != null)
		{
			if (instance.rockingChair == null)
			{
				instance.rockingChair = rockingChair.Copy();
			}
			else
			{
				rockingChair.CopyTo(instance.rockingChair);
			}
		}
		else
		{
			instance.rockingChair = null;
		}
		if (headData != null)
		{
			if (instance.headData == null)
			{
				instance.headData = headData.Copy();
			}
			else
			{
				headData.CopyTo(instance.headData);
			}
		}
		else
		{
			instance.headData = null;
		}
		if (wantedPoster != null)
		{
			if (instance.wantedPoster == null)
			{
				instance.wantedPoster = wantedPoster.Copy();
			}
			else
			{
				wantedPoster.CopyTo(instance.wantedPoster);
			}
		}
		else
		{
			instance.wantedPoster = null;
		}
		if (waypointRace != null)
		{
			if (instance.waypointRace == null)
			{
				instance.waypointRace = waypointRace.Copy();
			}
			else
			{
				waypointRace.CopyTo(instance.waypointRace);
			}
		}
		else
		{
			instance.waypointRace = null;
		}
		if (legacyShelter != null)
		{
			if (instance.legacyShelter == null)
			{
				instance.legacyShelter = legacyShelter.Copy();
			}
			else
			{
				legacyShelter.CopyTo(instance.legacyShelter);
			}
		}
		else
		{
			instance.legacyShelter = null;
		}
		if (metalDetectorSource != null)
		{
			if (instance.metalDetectorSource == null)
			{
				instance.metalDetectorSource = metalDetectorSource.Copy();
			}
			else
			{
				metalDetectorSource.CopyTo(instance.metalDetectorSource);
			}
		}
		else
		{
			instance.metalDetectorSource = null;
		}
		if (tutorialIsland != null)
		{
			if (instance.tutorialIsland == null)
			{
				instance.tutorialIsland = tutorialIsland.Copy();
			}
			else
			{
				tutorialIsland.CopyTo(instance.tutorialIsland);
			}
		}
		else
		{
			instance.tutorialIsland = null;
		}
		if (cinematicEntity != null)
		{
			if (instance.cinematicEntity == null)
			{
				instance.cinematicEntity = cinematicEntity.Copy();
			}
			else
			{
				cinematicEntity.CopyTo(instance.cinematicEntity);
			}
		}
		else
		{
			instance.cinematicEntity = null;
		}
		if (buildingPrivilegeRetro != null)
		{
			if (instance.buildingPrivilegeRetro == null)
			{
				instance.buildingPrivilegeRetro = buildingPrivilegeRetro.Copy();
			}
			else
			{
				buildingPrivilegeRetro.CopyTo(instance.buildingPrivilegeRetro);
			}
		}
		else
		{
			instance.buildingPrivilegeRetro = null;
		}
		if (harborCrane != null)
		{
			if (instance.harborCrane == null)
			{
				instance.harborCrane = harborCrane.Copy();
			}
			else
			{
				harborCrane.CopyTo(instance.harborCrane);
			}
		}
		else
		{
			instance.harborCrane = null;
		}
		if (cargoShip != null)
		{
			if (instance.cargoShip == null)
			{
				instance.cargoShip = cargoShip.Copy();
			}
			else
			{
				cargoShip.CopyTo(instance.cargoShip);
			}
		}
		else
		{
			instance.cargoShip = null;
		}
		if (cargoShipContainer != null)
		{
			if (instance.cargoShipContainer == null)
			{
				instance.cargoShipContainer = cargoShipContainer.Copy();
			}
			else
			{
				cargoShipContainer.CopyTo(instance.cargoShipContainer);
			}
		}
		else
		{
			instance.cargoShipContainer = null;
		}
		if (missionMapMarker != null)
		{
			if (instance.missionMapMarker == null)
			{
				instance.missionMapMarker = missionMapMarker.Copy();
			}
			else
			{
				missionMapMarker.CopyTo(instance.missionMapMarker);
			}
		}
		else
		{
			instance.missionMapMarker = null;
		}
		if (bike != null)
		{
			if (instance.bike == null)
			{
				instance.bike = bike.Copy();
			}
			else
			{
				bike.CopyTo(instance.bike);
			}
		}
		else
		{
			instance.bike = null;
		}
		if (diverPropulsionVehicle != null)
		{
			if (instance.diverPropulsionVehicle == null)
			{
				instance.diverPropulsionVehicle = diverPropulsionVehicle.Copy();
			}
			else
			{
				diverPropulsionVehicle.CopyTo(instance.diverPropulsionVehicle);
			}
		}
		else
		{
			instance.diverPropulsionVehicle = null;
		}
		if (travellingVendor != null)
		{
			if (instance.travellingVendor == null)
			{
				instance.travellingVendor = travellingVendor.Copy();
			}
			else
			{
				travellingVendor.CopyTo(instance.travellingVendor);
			}
		}
		else
		{
			instance.travellingVendor = null;
		}
		if (vendingDynamicPricing != null)
		{
			if (instance.vendingDynamicPricing == null)
			{
				instance.vendingDynamicPricing = vendingDynamicPricing.Copy();
			}
			else
			{
				vendingDynamicPricing.CopyTo(instance.vendingDynamicPricing);
			}
		}
		else
		{
			instance.vendingDynamicPricing = null;
		}
		if (tinCanAlarm != null)
		{
			if (instance.tinCanAlarm == null)
			{
				instance.tinCanAlarm = tinCanAlarm.Copy();
			}
			else
			{
				tinCanAlarm.CopyTo(instance.tinCanAlarm);
			}
		}
		else
		{
			instance.tinCanAlarm = null;
		}
		if (digitalClock != null)
		{
			if (instance.digitalClock == null)
			{
				instance.digitalClock = digitalClock.Copy();
			}
			else
			{
				digitalClock.CopyTo(instance.digitalClock);
			}
		}
		else
		{
			instance.digitalClock = null;
		}
		if (elevatorLift != null)
		{
			if (instance.elevatorLift == null)
			{
				instance.elevatorLift = elevatorLift.Copy();
			}
			else
			{
				elevatorLift.CopyTo(instance.elevatorLift);
			}
		}
		else
		{
			instance.elevatorLift = null;
		}
		if (npcVendingMachine != null)
		{
			if (instance.npcVendingMachine == null)
			{
				instance.npcVendingMachine = npcVendingMachine.Copy();
			}
			else
			{
				npcVendingMachine.CopyTo(instance.npcVendingMachine);
			}
		}
		else
		{
			instance.npcVendingMachine = null;
		}
		if (mailbox != null)
		{
			if (instance.mailbox == null)
			{
				instance.mailbox = mailbox.Copy();
			}
			else
			{
				mailbox.CopyTo(instance.mailbox);
			}
		}
		else
		{
			instance.mailbox = null;
		}
		if (projectileWeaponMod != null)
		{
			if (instance.projectileWeaponMod == null)
			{
				instance.projectileWeaponMod = projectileWeaponMod.Copy();
			}
			else
			{
				projectileWeaponMod.CopyTo(instance.projectileWeaponMod);
			}
		}
		else
		{
			instance.projectileWeaponMod = null;
		}
		if (baseSculpture != null)
		{
			if (instance.baseSculpture == null)
			{
				instance.baseSculpture = baseSculpture.Copy();
			}
			else
			{
				baseSculpture.CopyTo(instance.baseSculpture);
			}
		}
		else
		{
			instance.baseSculpture = null;
		}
		if (vendingMachineStats != null)
		{
			if (instance.vendingMachineStats == null)
			{
				instance.vendingMachineStats = vendingMachineStats.Copy();
			}
			else
			{
				vendingMachineStats.CopyTo(instance.vendingMachineStats);
			}
		}
		else
		{
			instance.vendingMachineStats = null;
		}
		if (catapult != null)
		{
			if (instance.catapult == null)
			{
				instance.catapult = catapult.Copy();
			}
			else
			{
				catapult.CopyTo(instance.catapult);
			}
		}
		else
		{
			instance.catapult = null;
		}
		if (siegeTower != null)
		{
			if (instance.siegeTower == null)
			{
				instance.siegeTower = siegeTower.Copy();
			}
			else
			{
				siegeTower.CopyTo(instance.siegeTower);
			}
		}
		else
		{
			instance.siegeTower = null;
		}
		if (ballista != null)
		{
			if (instance.ballista == null)
			{
				instance.ballista = ballista.Copy();
			}
			else
			{
				ballista.CopyTo(instance.ballista);
			}
		}
		else
		{
			instance.ballista = null;
		}
		if (ballistaGun != null)
		{
			if (instance.ballistaGun == null)
			{
				instance.ballistaGun = ballistaGun.Copy();
			}
			else
			{
				ballistaGun.CopyTo(instance.ballistaGun);
			}
		}
		else
		{
			instance.ballistaGun = null;
		}
		if (batteringRam != null)
		{
			if (instance.batteringRam == null)
			{
				instance.batteringRam = batteringRam.Copy();
			}
			else
			{
				batteringRam.CopyTo(instance.batteringRam);
			}
		}
		else
		{
			instance.batteringRam = null;
		}
		if (temporaryRagdoll != null)
		{
			if (instance.temporaryRagdoll == null)
			{
				instance.temporaryRagdoll = temporaryRagdoll.Copy();
			}
			else
			{
				temporaryRagdoll.CopyTo(instance.temporaryRagdoll);
			}
		}
		else
		{
			instance.temporaryRagdoll = null;
		}
		if (constructableEntity != null)
		{
			if (instance.constructableEntity == null)
			{
				instance.constructableEntity = constructableEntity.Copy();
			}
			else
			{
				constructableEntity.CopyTo(instance.constructableEntity);
			}
		}
		else
		{
			instance.constructableEntity = null;
		}
		if (chickenCoop != null)
		{
			if (instance.chickenCoop == null)
			{
				instance.chickenCoop = chickenCoop.Copy();
			}
			else
			{
				chickenCoop.CopyTo(instance.chickenCoop);
			}
		}
		else
		{
			instance.chickenCoop = null;
		}
		if (farmableAnimal != null)
		{
			if (instance.farmableAnimal == null)
			{
				instance.farmableAnimal = farmableAnimal.Copy();
			}
			else
			{
				farmableAnimal.CopyTo(instance.farmableAnimal);
			}
		}
		else
		{
			instance.farmableAnimal = null;
		}
		if (ownership != null)
		{
			if (instance.ownership == null)
			{
				instance.ownership = ownership.Copy();
			}
			else
			{
				ownership.CopyTo(instance.ownership);
			}
		}
		else
		{
			instance.ownership = null;
		}
		if (beehive != null)
		{
			if (instance.beehive == null)
			{
				instance.beehive = beehive.Copy();
			}
			else
			{
				beehive.CopyTo(instance.beehive);
			}
		}
		else
		{
			instance.beehive = null;
		}
		if (beeMasterSwarm != null)
		{
			if (instance.beeMasterSwarm == null)
			{
				instance.beeMasterSwarm = beeMasterSwarm.Copy();
			}
			else
			{
				beeMasterSwarm.CopyTo(instance.beeMasterSwarm);
			}
		}
		else
		{
			instance.beeMasterSwarm = null;
		}
		if (containerCorpse != null)
		{
			if (instance.containerCorpse == null)
			{
				instance.containerCorpse = containerCorpse.Copy();
			}
			else
			{
				containerCorpse.CopyTo(instance.containerCorpse);
			}
		}
		else
		{
			instance.containerCorpse = null;
		}
		if (npcSensesState != null)
		{
			if (instance.npcSensesState == null)
			{
				instance.npcSensesState = npcSensesState.Copy();
			}
			else
			{
				npcSensesState.CopyTo(instance.npcSensesState);
			}
		}
		else
		{
			instance.npcSensesState = null;
		}
		if (vineMountable != null)
		{
			if (instance.vineMountable == null)
			{
				instance.vineMountable = vineMountable.Copy();
			}
			else
			{
				vineMountable.CopyTo(instance.vineMountable);
			}
		}
		else
		{
			instance.vineMountable = null;
		}
		if (vineTree != null)
		{
			if (instance.vineTree == null)
			{
				instance.vineTree = vineTree.Copy();
			}
			else
			{
				vineTree.CopyTo(instance.vineTree);
			}
		}
		else
		{
			instance.vineTree = null;
		}
		if (treeRespawn != null)
		{
			if (instance.treeRespawn == null)
			{
				instance.treeRespawn = treeRespawn.Copy();
			}
			else
			{
				treeRespawn.CopyTo(instance.treeRespawn);
			}
		}
		else
		{
			instance.treeRespawn = null;
		}
		if (wallpaperTool != null)
		{
			if (instance.wallpaperTool == null)
			{
				instance.wallpaperTool = wallpaperTool.Copy();
			}
			else
			{
				wallpaperTool.CopyTo(instance.wallpaperTool);
			}
		}
		else
		{
			instance.wallpaperTool = null;
		}
		if (commandBlock != null)
		{
			if (instance.commandBlock == null)
			{
				instance.commandBlock = commandBlock.Copy();
			}
			else
			{
				commandBlock.CopyTo(instance.commandBlock);
			}
		}
		else
		{
			instance.commandBlock = null;
		}
		if (staticRespawn != null)
		{
			if (instance.staticRespawn == null)
			{
				instance.staticRespawn = staticRespawn.Copy();
			}
			else
			{
				staticRespawn.CopyTo(instance.staticRespawn);
			}
		}
		else
		{
			instance.staticRespawn = null;
		}
		if (buriedItemStorage != null)
		{
			if (instance.buriedItemStorage == null)
			{
				instance.buriedItemStorage = buriedItemStorage.Copy();
			}
			else
			{
				buriedItemStorage.CopyTo(instance.buriedItemStorage);
			}
		}
		else
		{
			instance.buriedItemStorage = null;
		}
	}

	public Entity Copy()
	{
		Entity entity = Pool.Get<Entity>();
		CopyTo(entity);
		return entity;
	}

	public static Entity Deserialize(BufferStream stream)
	{
		Entity entity = Pool.Get<Entity>();
		Deserialize(stream, entity, isDelta: false);
		return entity;
	}

	public static Entity DeserializeLengthDelimited(BufferStream stream)
	{
		Entity entity = Pool.Get<Entity>();
		DeserializeLengthDelimited(stream, entity, isDelta: false);
		return entity;
	}

	public static Entity DeserializeLength(BufferStream stream, int length)
	{
		Entity entity = Pool.Get<Entity>();
		DeserializeLength(stream, length, entity, isDelta: false);
		return entity;
	}

	public static Entity Deserialize(byte[] buffer)
	{
		Entity entity = Pool.Get<Entity>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, entity, isDelta: false);
		return entity;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, Entity previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Entity Deserialize(BufferStream stream, Entity instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.baseNetworkable == null)
				{
					instance.baseNetworkable = BaseNetworkable.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseNetworkable.DeserializeLengthDelimited(stream, instance.baseNetworkable, isDelta);
				}
				continue;
			case 18:
				if (instance.baseEntity == null)
				{
					instance.baseEntity = BaseEntity.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseEntity.DeserializeLengthDelimited(stream, instance.baseEntity, isDelta);
				}
				continue;
			case 26:
				if (instance.basePlayer == null)
				{
					instance.basePlayer = BasePlayer.DeserializeLengthDelimited(stream);
				}
				else
				{
					BasePlayer.DeserializeLengthDelimited(stream, instance.basePlayer, isDelta);
				}
				continue;
			case 34:
				if (instance.worldItem == null)
				{
					instance.worldItem = WorldItem.DeserializeLengthDelimited(stream);
				}
				else
				{
					WorldItem.DeserializeLengthDelimited(stream, instance.worldItem, isDelta);
				}
				continue;
			case 42:
				if (instance.resource == null)
				{
					instance.resource = BaseResource.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseResource.DeserializeLengthDelimited(stream, instance.resource, isDelta);
				}
				continue;
			case 50:
				if (instance.buildingBlock == null)
				{
					instance.buildingBlock = BuildingBlock.DeserializeLengthDelimited(stream);
				}
				else
				{
					BuildingBlock.DeserializeLengthDelimited(stream, instance.buildingBlock, isDelta);
				}
				continue;
			case 58:
				if (instance.environment == null)
				{
					instance.environment = ProtoBuf.Environment.DeserializeLengthDelimited(stream);
				}
				else
				{
					ProtoBuf.Environment.DeserializeLengthDelimited(stream, instance.environment, isDelta);
				}
				continue;
			case 66:
				if (instance.corpse == null)
				{
					instance.corpse = Corpse.DeserializeLengthDelimited(stream);
				}
				else
				{
					Corpse.DeserializeLengthDelimited(stream, instance.corpse, isDelta);
				}
				continue;
			case 82:
				if (instance.parent == null)
				{
					instance.parent = ParentInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ParentInfo.DeserializeLengthDelimited(stream, instance.parent, isDelta);
				}
				continue;
			case 90:
				if (instance.keyLock == null)
				{
					instance.keyLock = KeyLock.DeserializeLengthDelimited(stream);
				}
				else
				{
					KeyLock.DeserializeLengthDelimited(stream, instance.keyLock, isDelta);
				}
				continue;
			case 98:
				if (instance.codeLock == null)
				{
					instance.codeLock = CodeLock.DeserializeLengthDelimited(stream);
				}
				else
				{
					CodeLock.DeserializeLengthDelimited(stream, instance.codeLock, isDelta);
				}
				continue;
			case 106:
				if (instance.entitySlots == null)
				{
					instance.entitySlots = EntitySlots.DeserializeLengthDelimited(stream);
				}
				else
				{
					EntitySlots.DeserializeLengthDelimited(stream, instance.entitySlots, isDelta);
				}
				continue;
			case 114:
				if (instance.buildingPrivilege == null)
				{
					instance.buildingPrivilege = BuildingPrivilege.DeserializeLengthDelimited(stream);
				}
				else
				{
					BuildingPrivilege.DeserializeLengthDelimited(stream, instance.buildingPrivilege, isDelta);
				}
				continue;
			case 122:
				if (instance.storageBox == null)
				{
					instance.storageBox = StorageBox.DeserializeLengthDelimited(stream);
				}
				else
				{
					StorageBox.DeserializeLengthDelimited(stream, instance.storageBox, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			switch (key.Field)
			{
			case 16u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.heldEntity == null)
					{
						instance.heldEntity = HeldEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						HeldEntity.DeserializeLengthDelimited(stream, instance.heldEntity, isDelta);
					}
				}
				break;
			case 17u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseProjectile == null)
					{
						instance.baseProjectile = BaseProjectile.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseProjectile.DeserializeLengthDelimited(stream, instance.baseProjectile, isDelta);
					}
				}
				break;
			case 18u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseNPC == null)
					{
						instance.baseNPC = BaseNPC.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseNPC.DeserializeLengthDelimited(stream, instance.baseNPC, isDelta);
					}
				}
				break;
			case 19u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.loot == null)
					{
						instance.loot = Loot.DeserializeLengthDelimited(stream);
					}
					else
					{
						Loot.DeserializeLengthDelimited(stream, instance.loot, isDelta);
					}
				}
				break;
			case 20u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.genericSpawner == null)
					{
						instance.genericSpawner = GenericSpawner.DeserializeLengthDelimited(stream);
					}
					else
					{
						GenericSpawner.DeserializeLengthDelimited(stream, instance.genericSpawner, isDelta);
					}
				}
				break;
			case 21u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sleepingBag == null)
					{
						instance.sleepingBag = SleepingBag.DeserializeLengthDelimited(stream);
					}
					else
					{
						SleepingBag.DeserializeLengthDelimited(stream, instance.sleepingBag, isDelta);
					}
				}
				break;
			case 22u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lootableCorpse == null)
					{
						instance.lootableCorpse = LootableCorpse.DeserializeLengthDelimited(stream);
					}
					else
					{
						LootableCorpse.DeserializeLengthDelimited(stream, instance.lootableCorpse, isDelta);
					}
				}
				break;
			case 23u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sign == null)
					{
						instance.sign = Sign.DeserializeLengthDelimited(stream);
					}
					else
					{
						Sign.DeserializeLengthDelimited(stream, instance.sign, isDelta);
					}
				}
				break;
			case 24u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseCombat == null)
					{
						instance.baseCombat = BaseCombat.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseCombat.DeserializeLengthDelimited(stream, instance.baseCombat, isDelta);
					}
				}
				break;
			case 25u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mapEntity == null)
					{
						instance.mapEntity = MapEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						MapEntity.DeserializeLengthDelimited(stream, instance.mapEntity, isDelta);
					}
				}
				break;
			case 26u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.researchTable == null)
					{
						instance.researchTable = ResearchTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						ResearchTable.DeserializeLengthDelimited(stream, instance.researchTable, isDelta);
					}
				}
				break;
			case 27u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.dudExplosive == null)
					{
						instance.dudExplosive = DudExplosive.DeserializeLengthDelimited(stream);
					}
					else
					{
						DudExplosive.DeserializeLengthDelimited(stream, instance.dudExplosive, isDelta);
					}
				}
				break;
			case 28u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.miningQuarry == null)
					{
						instance.miningQuarry = MiningQuarry.DeserializeLengthDelimited(stream);
					}
					else
					{
						MiningQuarry.DeserializeLengthDelimited(stream, instance.miningQuarry, isDelta);
					}
				}
				break;
			case 29u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseVehicle == null)
					{
						instance.baseVehicle = BaseVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseVehicle.DeserializeLengthDelimited(stream, instance.baseVehicle, isDelta);
					}
				}
				break;
			case 30u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.helicopter == null)
					{
						instance.helicopter = Helicopter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Helicopter.DeserializeLengthDelimited(stream, instance.helicopter, isDelta);
					}
				}
				break;
			case 31u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.landmine == null)
					{
						instance.landmine = Landmine.DeserializeLengthDelimited(stream);
					}
					else
					{
						Landmine.DeserializeLengthDelimited(stream, instance.landmine, isDelta);
					}
				}
				break;
			case 32u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.autoturret == null)
					{
						instance.autoturret = AutoTurret.DeserializeLengthDelimited(stream);
					}
					else
					{
						AutoTurret.DeserializeLengthDelimited(stream, instance.autoturret, isDelta);
					}
				}
				break;
			case 33u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sphereEntity == null)
					{
						instance.sphereEntity = SphereEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						SphereEntity.DeserializeLengthDelimited(stream, instance.sphereEntity, isDelta);
					}
				}
				break;
			case 34u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.stabilityEntity == null)
					{
						instance.stabilityEntity = StabilityEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						StabilityEntity.DeserializeLengthDelimited(stream, instance.stabilityEntity, isDelta);
					}
				}
				break;
			case 35u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ownerInfo == null)
					{
						instance.ownerInfo = OwnerInfo.DeserializeLengthDelimited(stream);
					}
					else
					{
						OwnerInfo.DeserializeLengthDelimited(stream, instance.ownerInfo, isDelta);
					}
				}
				break;
			case 36u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.decayEntity == null)
					{
						instance.decayEntity = DecayEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						DecayEntity.DeserializeLengthDelimited(stream, instance.decayEntity, isDelta);
					}
				}
				break;
			case 37u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spawnable == null)
					{
						instance.spawnable = Spawnable.DeserializeLengthDelimited(stream);
					}
					else
					{
						Spawnable.DeserializeLengthDelimited(stream, instance.spawnable, isDelta);
					}
				}
				break;
			case 38u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.servergib == null)
					{
						instance.servergib = ServerGib.DeserializeLengthDelimited(stream);
					}
					else
					{
						ServerGib.DeserializeLengthDelimited(stream, instance.servergib, isDelta);
					}
				}
				break;
			case 39u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingMachine == null)
					{
						instance.vendingMachine = VendingMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingMachine.DeserializeLengthDelimited(stream, instance.vendingMachine, isDelta);
					}
				}
				break;
			case 40u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spinnerWheel == null)
					{
						instance.spinnerWheel = SpinnerWheel.DeserializeLengthDelimited(stream);
					}
					else
					{
						SpinnerWheel.DeserializeLengthDelimited(stream, instance.spinnerWheel, isDelta);
					}
				}
				break;
			case 41u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lift == null)
					{
						instance.lift = Lift.DeserializeLengthDelimited(stream);
					}
					else
					{
						Lift.DeserializeLengthDelimited(stream, instance.lift, isDelta);
					}
				}
				break;
			case 42u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.bradley == null)
					{
						instance.bradley = BradleyAPC.DeserializeLengthDelimited(stream);
					}
					else
					{
						BradleyAPC.DeserializeLengthDelimited(stream, instance.bradley, isDelta);
					}
				}
				break;
			case 43u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.waterwell == null)
					{
						instance.waterwell = WaterWell.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaterWell.DeserializeLengthDelimited(stream, instance.waterwell, isDelta);
					}
				}
				break;
			case 44u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.motorBoat == null)
					{
						instance.motorBoat = Motorboat.DeserializeLengthDelimited(stream);
					}
					else
					{
						Motorboat.DeserializeLengthDelimited(stream, instance.motorBoat, isDelta);
					}
				}
				break;
			case 45u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ioEntity == null)
					{
						instance.ioEntity = IOEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						IOEntity.DeserializeLengthDelimited(stream, instance.ioEntity, isDelta);
					}
				}
				break;
			case 46u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.puzzleReset == null)
					{
						instance.puzzleReset = PuzzleReset.DeserializeLengthDelimited(stream);
					}
					else
					{
						PuzzleReset.DeserializeLengthDelimited(stream, instance.puzzleReset, isDelta);
					}
				}
				break;
			case 47u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.relationshipManager == null)
					{
						instance.relationshipManager = RelationshipManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						RelationshipManager.DeserializeLengthDelimited(stream, instance.relationshipManager, isDelta);
					}
				}
				break;
			case 48u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.hotAirBalloon == null)
					{
						instance.hotAirBalloon = HotAirBalloon.DeserializeLengthDelimited(stream);
					}
					else
					{
						HotAirBalloon.DeserializeLengthDelimited(stream, instance.hotAirBalloon, isDelta);
					}
				}
				break;
			case 49u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.samSite == null)
					{
						instance.samSite = SAMSite.DeserializeLengthDelimited(stream);
					}
					else
					{
						SAMSite.DeserializeLengthDelimited(stream, instance.samSite, isDelta);
					}
				}
				break;
			case 50u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.eggHunt == null)
					{
						instance.eggHunt = EggHunt.DeserializeLengthDelimited(stream);
					}
					else
					{
						EggHunt.DeserializeLengthDelimited(stream, instance.eggHunt, isDelta);
					}
				}
				break;
			case 51u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.arcadeMachine == null)
					{
						instance.arcadeMachine = ArcadeMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						ArcadeMachine.DeserializeLengthDelimited(stream, instance.arcadeMachine, isDelta);
					}
				}
				break;
			case 52u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.miniCopter == null)
					{
						instance.miniCopter = Minicopter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Minicopter.DeserializeLengthDelimited(stream, instance.miniCopter, isDelta);
					}
				}
				break;
			case 53u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.horse == null)
					{
						instance.horse = Horse.DeserializeLengthDelimited(stream);
					}
					else
					{
						Horse.DeserializeLengthDelimited(stream, instance.horse, isDelta);
					}
				}
				break;
			case 54u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.smartAlarm == null)
					{
						instance.smartAlarm = SmartAlarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						SmartAlarm.DeserializeLengthDelimited(stream, instance.smartAlarm, isDelta);
					}
				}
				break;
			case 55u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lightString == null)
					{
						instance.lightString = LightString.DeserializeLengthDelimited(stream);
					}
					else
					{
						LightString.DeserializeLengthDelimited(stream, instance.lightString, isDelta);
					}
				}
				break;
			case 56u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lightDeployer == null)
					{
						instance.lightDeployer = LightDeployer.DeserializeLengthDelimited(stream);
					}
					else
					{
						LightDeployer.DeserializeLengthDelimited(stream, instance.lightDeployer, isDelta);
					}
				}
				break;
			case 57u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.rcEntity == null)
					{
						instance.rcEntity = RCEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						RCEntity.DeserializeLengthDelimited(stream, instance.rcEntity, isDelta);
					}
				}
				break;
			case 58u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.computerStation == null)
					{
						instance.computerStation = ComputerStation.DeserializeLengthDelimited(stream);
					}
					else
					{
						ComputerStation.DeserializeLengthDelimited(stream, instance.computerStation, isDelta);
					}
				}
				break;
			case 59u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.growableEntity == null)
					{
						instance.growableEntity = GrowableEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						GrowableEntity.DeserializeLengthDelimited(stream, instance.growableEntity, isDelta);
					}
				}
				break;
			case 60u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.composter == null)
					{
						instance.composter = Composter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Composter.DeserializeLengthDelimited(stream, instance.composter, isDelta);
					}
				}
				break;
			case 61u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.modularVehicle == null)
					{
						instance.modularVehicle = ModularVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						ModularVehicle.DeserializeLengthDelimited(stream, instance.modularVehicle, isDelta);
					}
				}
				break;
			case 62u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.modularCar == null)
					{
						instance.modularCar = ModularCar.DeserializeLengthDelimited(stream);
					}
					else
					{
						ModularCar.DeserializeLengthDelimited(stream, instance.modularCar, isDelta);
					}
				}
				break;
			case 63u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleUID == null)
					{
						instance.simpleUID = SimpleUID.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleUID.DeserializeLengthDelimited(stream, instance.simpleUID, isDelta);
					}
				}
				break;
			case 64u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleLift == null)
					{
						instance.vehicleLift = VehicleLift.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleLift.DeserializeLengthDelimited(stream, instance.vehicleLift, isDelta);
					}
				}
				break;
			case 65u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.engineStorage == null)
					{
						instance.engineStorage = EngineStorage.DeserializeLengthDelimited(stream);
					}
					else
					{
						EngineStorage.DeserializeLengthDelimited(stream, instance.engineStorage, isDelta);
					}
				}
				break;
			case 66u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleVendor == null)
					{
						instance.vehicleVendor = VehicleVendor.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleVendor.DeserializeLengthDelimited(stream, instance.vehicleVendor, isDelta);
					}
				}
				break;
			case 67u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.WaterPool == null)
					{
						instance.WaterPool = WaterPool.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaterPool.DeserializeLengthDelimited(stream, instance.WaterPool, isDelta);
					}
				}
				break;
			case 68u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.photo == null)
					{
						instance.photo = Photo.DeserializeLengthDelimited(stream);
					}
					else
					{
						Photo.DeserializeLengthDelimited(stream, instance.photo, isDelta);
					}
				}
				break;
			case 69u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.photoFrame == null)
					{
						instance.photoFrame = PhotoFrame.DeserializeLengthDelimited(stream);
					}
					else
					{
						PhotoFrame.DeserializeLengthDelimited(stream, instance.photoFrame, isDelta);
					}
				}
				break;
			case 70u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleModule == null)
					{
						instance.vehicleModule = VehicleModule.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleModule.DeserializeLengthDelimited(stream, instance.vehicleModule, isDelta);
					}
				}
				break;
			case 71u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mixingTable == null)
					{
						instance.mixingTable = MixingTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						MixingTable.DeserializeLengthDelimited(stream, instance.mixingTable, isDelta);
					}
				}
				break;
			case 72u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.shopKeeper == null)
					{
						instance.shopKeeper = ShopKeeper.DeserializeLengthDelimited(stream);
					}
					else
					{
						ShopKeeper.DeserializeLengthDelimited(stream, instance.shopKeeper, isDelta);
					}
				}
				break;
			case 73u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.elevator == null)
					{
						instance.elevator = Elevator.DeserializeLengthDelimited(stream);
					}
					else
					{
						Elevator.DeserializeLengthDelimited(stream, instance.elevator, isDelta);
					}
				}
				break;
			case 74u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.skullTrophy == null)
					{
						instance.skullTrophy = SkullTrophy.DeserializeLengthDelimited(stream);
					}
					else
					{
						SkullTrophy.DeserializeLengthDelimited(stream, instance.skullTrophy, isDelta);
					}
				}
				break;
			case 75u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cassette == null)
					{
						instance.cassette = Cassette.DeserializeLengthDelimited(stream);
					}
					else
					{
						Cassette.DeserializeLengthDelimited(stream, instance.cassette, isDelta);
					}
				}
				break;
			case 76u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.telephone == null)
					{
						instance.telephone = Telephone.DeserializeLengthDelimited(stream);
					}
					else
					{
						Telephone.DeserializeLengthDelimited(stream, instance.telephone, isDelta);
					}
				}
				break;
			case 77u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.boomBox == null)
					{
						instance.boomBox = BoomBox.DeserializeLengthDelimited(stream);
					}
					else
					{
						BoomBox.DeserializeLengthDelimited(stream, instance.boomBox, isDelta);
					}
				}
				break;
			case 78u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.neonSign == null)
					{
						instance.neonSign = NeonSign.DeserializeLengthDelimited(stream);
					}
					else
					{
						NeonSign.DeserializeLengthDelimited(stream, instance.neonSign, isDelta);
					}
				}
				break;
			case 79u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.subEntityList == null)
					{
						instance.subEntityList = SubEntityList.DeserializeLengthDelimited(stream);
					}
					else
					{
						SubEntityList.DeserializeLengthDelimited(stream, instance.subEntityList, isDelta);
					}
				}
				break;
			case 80u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.marketTerminal == null)
					{
						instance.marketTerminal = MarketTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						MarketTerminal.DeserializeLengthDelimited(stream, instance.marketTerminal, isDelta);
					}
				}
				break;
			case 81u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.deliveryDrone == null)
					{
						instance.deliveryDrone = DeliveryDrone.DeserializeLengthDelimited(stream);
					}
					else
					{
						DeliveryDrone.DeserializeLengthDelimited(stream, instance.deliveryDrone, isDelta);
					}
				}
				break;
			case 82u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.reclaimTerminal == null)
					{
						instance.reclaimTerminal = ReclaimTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						ReclaimTerminal.DeserializeLengthDelimited(stream, instance.reclaimTerminal, isDelta);
					}
				}
				break;
			case 83u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.slotMachine == null)
					{
						instance.slotMachine = SlotMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						SlotMachine.DeserializeLengthDelimited(stream, instance.slotMachine, isDelta);
					}
				}
				break;
			case 84u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.trainEngine == null)
					{
						instance.trainEngine = TrainEngine.DeserializeLengthDelimited(stream);
					}
					else
					{
						TrainEngine.DeserializeLengthDelimited(stream, instance.trainEngine, isDelta);
					}
				}
				break;
			case 85u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cardGame == null)
					{
						instance.cardGame = CardGame.DeserializeLengthDelimited(stream);
					}
					else
					{
						CardGame.DeserializeLengthDelimited(stream, instance.cardGame, isDelta);
					}
				}
				break;
			case 86u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.crane == null)
					{
						instance.crane = Crane.DeserializeLengthDelimited(stream);
					}
					else
					{
						Crane.DeserializeLengthDelimited(stream, instance.crane, isDelta);
					}
				}
				break;
			case 87u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.connectedSpeaker == null)
					{
						instance.connectedSpeaker = ConnectedSpeaker.DeserializeLengthDelimited(stream);
					}
					else
					{
						ConnectedSpeaker.DeserializeLengthDelimited(stream, instance.connectedSpeaker, isDelta);
					}
				}
				break;
			case 88u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.audioEntity == null)
					{
						instance.audioEntity = AudioEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						AudioEntity.DeserializeLengthDelimited(stream, instance.audioEntity, isDelta);
					}
				}
				break;
			case 89u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.microphoneStand == null)
					{
						instance.microphoneStand = MicrophoneStand.DeserializeLengthDelimited(stream);
					}
					else
					{
						MicrophoneStand.DeserializeLengthDelimited(stream, instance.microphoneStand, isDelta);
					}
				}
				break;
			case 90u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.submarine == null)
					{
						instance.submarine = Submarine.DeserializeLengthDelimited(stream);
					}
					else
					{
						Submarine.DeserializeLengthDelimited(stream, instance.submarine, isDelta);
					}
				}
				break;
			case 91u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sleepingBagCamper == null)
					{
						instance.sleepingBagCamper = SleepingBagCamper.DeserializeLengthDelimited(stream);
					}
					else
					{
						SleepingBagCamper.DeserializeLengthDelimited(stream, instance.sleepingBagCamper, isDelta);
					}
				}
				break;
			case 92u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.camperModule == null)
					{
						instance.camperModule = CamperModule.DeserializeLengthDelimited(stream);
					}
					else
					{
						CamperModule.DeserializeLengthDelimited(stream, instance.camperModule, isDelta);
					}
				}
				break;
			case 93u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.paintableSign == null)
					{
						instance.paintableSign = PaintableSign.DeserializeLengthDelimited(stream);
					}
					else
					{
						PaintableSign.DeserializeLengthDelimited(stream, instance.paintableSign, isDelta);
					}
				}
				break;
			case 94u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.whitelist == null)
					{
						instance.whitelist = Whitelist.DeserializeLengthDelimited(stream);
					}
					else
					{
						Whitelist.DeserializeLengthDelimited(stream, instance.whitelist, isDelta);
					}
				}
				break;
			case 95u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.FrankensteinTable == null)
					{
						instance.FrankensteinTable = FrankensteinTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						FrankensteinTable.DeserializeLengthDelimited(stream, instance.FrankensteinTable, isDelta);
					}
				}
				break;
			case 96u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mlrs == null)
					{
						instance.mlrs = MLRS.DeserializeLengthDelimited(stream);
					}
					else
					{
						MLRS.DeserializeLengthDelimited(stream, instance.mlrs, isDelta);
					}
				}
				break;
			case 97u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.reclaimManager == null)
					{
						instance.reclaimManager = ReclaimManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						ReclaimManager.DeserializeLengthDelimited(stream, instance.reclaimManager, isDelta);
					}
				}
				break;
			case 98u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.gameMode == null)
					{
						instance.gameMode = GameMode.DeserializeLengthDelimited(stream);
					}
					else
					{
						GameMode.DeserializeLengthDelimited(stream, instance.gameMode, isDelta);
					}
				}
				break;
			case 99u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.snowmobile == null)
					{
						instance.snowmobile = Snowmobile.DeserializeLengthDelimited(stream);
					}
					else
					{
						Snowmobile.DeserializeLengthDelimited(stream, instance.snowmobile, isDelta);
					}
				}
				break;
			case 100u:
				if (key.WireType == Wire.Varint)
				{
					instance.createdThisFrame = ProtocolParser.ReadBool(stream);
				}
				break;
			case 101u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.patternFirework == null)
					{
						instance.patternFirework = PatternFirework.DeserializeLengthDelimited(stream);
					}
					else
					{
						PatternFirework.DeserializeLengthDelimited(stream, instance.patternFirework, isDelta);
					}
				}
				break;
			case 102u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoPlane == null)
					{
						instance.cargoPlane = CargoPlane.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoPlane.DeserializeLengthDelimited(stream, instance.cargoPlane, isDelta);
					}
				}
				break;
			case 103u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.paintedItem == null)
					{
						instance.paintedItem = PaintedItem.DeserializeLengthDelimited(stream);
					}
					else
					{
						PaintedItem.DeserializeLengthDelimited(stream, instance.paintedItem, isDelta);
					}
				}
				break;
			case 104u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.clanManager == null)
					{
						instance.clanManager = ClanManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						ClanManager.DeserializeLengthDelimited(stream, instance.clanManager, isDelta);
					}
				}
				break;
			case 105u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spray == null)
					{
						instance.spray = Spray.DeserializeLengthDelimited(stream);
					}
					else
					{
						Spray.DeserializeLengthDelimited(stream, instance.spray, isDelta);
					}
				}
				break;
			case 106u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseTrain == null)
					{
						instance.baseTrain = BaseTrain.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseTrain.DeserializeLengthDelimited(stream, instance.baseTrain, isDelta);
					}
				}
				break;
			case 107u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.zipline == null)
					{
						instance.zipline = Zipline.DeserializeLengthDelimited(stream);
					}
					else
					{
						Zipline.DeserializeLengthDelimited(stream, instance.zipline, isDelta);
					}
				}
				break;
			case 108u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ziplineMountable == null)
					{
						instance.ziplineMountable = ZiplineMountable.DeserializeLengthDelimited(stream);
					}
					else
					{
						ZiplineMountable.DeserializeLengthDelimited(stream, instance.ziplineMountable, isDelta);
					}
				}
				break;
			case 109u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ZiplineArrival == null)
					{
						instance.ZiplineArrival = ZiplineArrivalPoint.DeserializeLengthDelimited(stream);
					}
					else
					{
						ZiplineArrivalPoint.DeserializeLengthDelimited(stream, instance.ZiplineArrival, isDelta);
					}
				}
				break;
			case 110u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sprayLine == null)
					{
						instance.sprayLine = SprayLine.DeserializeLengthDelimited(stream);
					}
					else
					{
						SprayLine.DeserializeLengthDelimited(stream, instance.sprayLine, isDelta);
					}
				}
				break;
			case 111u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.coalingTower == null)
					{
						instance.coalingTower = CoalingTower.DeserializeLengthDelimited(stream);
					}
					else
					{
						CoalingTower.DeserializeLengthDelimited(stream, instance.coalingTower, isDelta);
					}
				}
				break;
			case 112u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleInt == null)
					{
						instance.simpleInt = SimpleInt.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleInt.DeserializeLengthDelimited(stream, instance.simpleInt, isDelta);
					}
				}
				break;
			case 113u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseOven == null)
					{
						instance.baseOven = BaseOven.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseOven.DeserializeLengthDelimited(stream, instance.baseOven, isDelta);
					}
				}
				break;
			case 114u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.brainComponent == null)
					{
						instance.brainComponent = BrainComponent.DeserializeLengthDelimited(stream);
					}
					else
					{
						BrainComponent.DeserializeLengthDelimited(stream, instance.brainComponent, isDelta);
					}
				}
				break;
			case 115u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.proceduralDungeon == null)
					{
						instance.proceduralDungeon = ProceduralDungeon.DeserializeLengthDelimited(stream);
					}
					else
					{
						ProceduralDungeon.DeserializeLengthDelimited(stream, instance.proceduralDungeon, isDelta);
					}
				}
				break;
			case 116u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.industrialConveyor == null)
					{
						instance.industrialConveyor = IndustrialConveyor.DeserializeLengthDelimited(stream);
					}
					else
					{
						IndustrialConveyor.DeserializeLengthDelimited(stream, instance.industrialConveyor, isDelta);
					}
				}
				break;
			case 117u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.industrialCrafter == null)
					{
						instance.industrialCrafter = IndustrialCrafter.DeserializeLengthDelimited(stream);
					}
					else
					{
						IndustrialCrafter.DeserializeLengthDelimited(stream, instance.industrialCrafter, isDelta);
					}
				}
				break;
			case 118u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.drone == null)
					{
						instance.drone = Drone.DeserializeLengthDelimited(stream);
					}
					else
					{
						Drone.DeserializeLengthDelimited(stream, instance.drone, isDelta);
					}
				}
				break;
			case 119u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.explosive == null)
					{
						instance.explosive = TimedExplosive.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimedExplosive.DeserializeLengthDelimited(stream, instance.explosive, isDelta);
					}
				}
				break;
			case 120u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleUint == null)
					{
						instance.simpleUint = SimpleUInt.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleUInt.DeserializeLengthDelimited(stream, instance.simpleUint, isDelta);
					}
				}
				break;
			case 121u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.weaponRack == null)
					{
						instance.weaponRack = WeaponRack.DeserializeLengthDelimited(stream);
					}
					else
					{
						WeaponRack.DeserializeLengthDelimited(stream, instance.weaponRack, isDelta);
					}
				}
				break;
			case 122u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeli == null)
					{
						instance.attackHeli = AttackHeli.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeli.DeserializeLengthDelimited(stream, instance.attackHeli, isDelta);
					}
				}
				break;
			case 123u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeliTurret == null)
					{
						instance.attackHeliTurret = AttackHeliTurret.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeliTurret.DeserializeLengthDelimited(stream, instance.attackHeliTurret, isDelta);
					}
				}
				break;
			case 124u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeliRockets == null)
					{
						instance.attackHeliRockets = AttackHeliRockets.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeliRockets.DeserializeLengthDelimited(stream, instance.attackHeliRockets, isDelta);
					}
				}
				break;
			case 125u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseBoat == null)
					{
						instance.baseBoat = BaseBoat.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseBoat.DeserializeLengthDelimited(stream, instance.baseBoat, isDelta);
					}
				}
				break;
			case 126u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ragdoll == null)
					{
						instance.ragdoll = Ragdoll.DeserializeLengthDelimited(stream);
					}
					else
					{
						Ragdoll.DeserializeLengthDelimited(stream, instance.ragdoll, isDelta);
					}
				}
				break;
			case 127u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.dieselEngine == null)
					{
						instance.dieselEngine = DieselEngine.DeserializeLengthDelimited(stream);
					}
					else
					{
						DieselEngine.DeserializeLengthDelimited(stream, instance.dieselEngine, isDelta);
					}
				}
				break;
			case 150u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.associatedFiles == null)
					{
						instance.associatedFiles = AssociatedFiles.DeserializeLengthDelimited(stream);
					}
					else
					{
						AssociatedFiles.DeserializeLengthDelimited(stream, instance.associatedFiles, isDelta);
					}
				}
				break;
			case 151u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusFerry == null)
					{
						instance.nexusFerry = NexusFerry.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusFerry.DeserializeLengthDelimited(stream, instance.nexusFerry, isDelta);
					}
				}
				break;
			case 152u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusIsland == null)
					{
						instance.nexusIsland = NexusIsland.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusIsland.DeserializeLengthDelimited(stream, instance.nexusIsland, isDelta);
					}
				}
				break;
			case 153u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusDockTerminal == null)
					{
						instance.nexusDockTerminal = NexusDockTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusDockTerminal.DeserializeLengthDelimited(stream, instance.nexusDockTerminal, isDelta);
					}
				}
				break;
			case 154u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.rockingChair == null)
					{
						instance.rockingChair = RockingChair.DeserializeLengthDelimited(stream);
					}
					else
					{
						RockingChair.DeserializeLengthDelimited(stream, instance.rockingChair, isDelta);
					}
				}
				break;
			case 155u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.headData == null)
					{
						instance.headData = HeadData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HeadData.DeserializeLengthDelimited(stream, instance.headData, isDelta);
					}
				}
				break;
			case 156u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.wantedPoster == null)
					{
						instance.wantedPoster = WantedPoster.DeserializeLengthDelimited(stream);
					}
					else
					{
						WantedPoster.DeserializeLengthDelimited(stream, instance.wantedPoster, isDelta);
					}
				}
				break;
			case 158u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.waypointRace == null)
					{
						instance.waypointRace = WaypointRace.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaypointRace.DeserializeLengthDelimited(stream, instance.waypointRace, isDelta);
					}
				}
				break;
			case 159u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.legacyShelter == null)
					{
						instance.legacyShelter = LegacyShelter.DeserializeLengthDelimited(stream);
					}
					else
					{
						LegacyShelter.DeserializeLengthDelimited(stream, instance.legacyShelter, isDelta);
					}
				}
				break;
			case 160u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.metalDetectorSource == null)
					{
						instance.metalDetectorSource = MetalDetectorSource.DeserializeLengthDelimited(stream);
					}
					else
					{
						MetalDetectorSource.DeserializeLengthDelimited(stream, instance.metalDetectorSource, isDelta);
					}
				}
				break;
			case 161u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tutorialIsland == null)
					{
						instance.tutorialIsland = TutorialIsland.DeserializeLengthDelimited(stream);
					}
					else
					{
						TutorialIsland.DeserializeLengthDelimited(stream, instance.tutorialIsland, isDelta);
					}
				}
				break;
			case 162u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cinematicEntity == null)
					{
						instance.cinematicEntity = CinematicEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						CinematicEntity.DeserializeLengthDelimited(stream, instance.cinematicEntity, isDelta);
					}
				}
				break;
			case 163u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.buildingPrivilegeRetro == null)
					{
						instance.buildingPrivilegeRetro = BuildingPrivilegeRetro.DeserializeLengthDelimited(stream);
					}
					else
					{
						BuildingPrivilegeRetro.DeserializeLengthDelimited(stream, instance.buildingPrivilegeRetro, isDelta);
					}
				}
				break;
			case 164u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.harborCrane == null)
					{
						instance.harborCrane = HarborCrane.DeserializeLengthDelimited(stream);
					}
					else
					{
						HarborCrane.DeserializeLengthDelimited(stream, instance.harborCrane, isDelta);
					}
				}
				break;
			case 165u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoShip == null)
					{
						instance.cargoShip = CargoShip.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoShip.DeserializeLengthDelimited(stream, instance.cargoShip, isDelta);
					}
				}
				break;
			case 166u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoShipContainer == null)
					{
						instance.cargoShipContainer = CargoShipContainer.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoShipContainer.DeserializeLengthDelimited(stream, instance.cargoShipContainer, isDelta);
					}
				}
				break;
			case 167u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.missionMapMarker == null)
					{
						instance.missionMapMarker = MissionMapMarker.DeserializeLengthDelimited(stream);
					}
					else
					{
						MissionMapMarker.DeserializeLengthDelimited(stream, instance.missionMapMarker, isDelta);
					}
				}
				break;
			case 168u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.bike == null)
					{
						instance.bike = Bike.DeserializeLengthDelimited(stream);
					}
					else
					{
						Bike.DeserializeLengthDelimited(stream, instance.bike, isDelta);
					}
				}
				break;
			case 169u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.diverPropulsionVehicle == null)
					{
						instance.diverPropulsionVehicle = DiverPropulsionVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						DiverPropulsionVehicle.DeserializeLengthDelimited(stream, instance.diverPropulsionVehicle, isDelta);
					}
				}
				break;
			case 174u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.travellingVendor == null)
					{
						instance.travellingVendor = TravellingVendor.DeserializeLengthDelimited(stream);
					}
					else
					{
						TravellingVendor.DeserializeLengthDelimited(stream, instance.travellingVendor, isDelta);
					}
				}
				break;
			case 175u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingDynamicPricing == null)
					{
						instance.vendingDynamicPricing = VendingDynamicPricing.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingDynamicPricing.DeserializeLengthDelimited(stream, instance.vendingDynamicPricing, isDelta);
					}
				}
				break;
			case 176u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tinCanAlarm == null)
					{
						instance.tinCanAlarm = TinCanAlarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						TinCanAlarm.DeserializeLengthDelimited(stream, instance.tinCanAlarm, isDelta);
					}
				}
				break;
			case 177u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.digitalClock == null)
					{
						instance.digitalClock = DigitalClock.DeserializeLengthDelimited(stream);
					}
					else
					{
						DigitalClock.DeserializeLengthDelimited(stream, instance.digitalClock, isDelta);
					}
				}
				break;
			case 178u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.elevatorLift == null)
					{
						instance.elevatorLift = ElevatorLift.DeserializeLengthDelimited(stream);
					}
					else
					{
						ElevatorLift.DeserializeLengthDelimited(stream, instance.elevatorLift, isDelta);
					}
				}
				break;
			case 179u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.npcVendingMachine == null)
					{
						instance.npcVendingMachine = NPCVendingMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						NPCVendingMachine.DeserializeLengthDelimited(stream, instance.npcVendingMachine, isDelta);
					}
				}
				break;
			case 180u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mailbox == null)
					{
						instance.mailbox = Mailbox.DeserializeLengthDelimited(stream);
					}
					else
					{
						Mailbox.DeserializeLengthDelimited(stream, instance.mailbox, isDelta);
					}
				}
				break;
			case 181u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.projectileWeaponMod == null)
					{
						instance.projectileWeaponMod = GunWeaponMod.DeserializeLengthDelimited(stream);
					}
					else
					{
						GunWeaponMod.DeserializeLengthDelimited(stream, instance.projectileWeaponMod, isDelta);
					}
				}
				break;
			case 182u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseSculpture == null)
					{
						instance.baseSculpture = BaseSculpture.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseSculpture.DeserializeLengthDelimited(stream, instance.baseSculpture, isDelta);
					}
				}
				break;
			case 183u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingMachineStats == null)
					{
						instance.vendingMachineStats = VendingMachineStats.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingMachineStats.DeserializeLengthDelimited(stream, instance.vendingMachineStats, isDelta);
					}
				}
				break;
			case 184u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.catapult == null)
					{
						instance.catapult = Catapult.DeserializeLengthDelimited(stream);
					}
					else
					{
						Catapult.DeserializeLengthDelimited(stream, instance.catapult, isDelta);
					}
				}
				break;
			case 185u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.siegeTower == null)
					{
						instance.siegeTower = SiegeTower.DeserializeLengthDelimited(stream);
					}
					else
					{
						SiegeTower.DeserializeLengthDelimited(stream, instance.siegeTower, isDelta);
					}
				}
				break;
			case 186u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ballista == null)
					{
						instance.ballista = Ballista.DeserializeLengthDelimited(stream);
					}
					else
					{
						Ballista.DeserializeLengthDelimited(stream, instance.ballista, isDelta);
					}
				}
				break;
			case 187u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ballistaGun == null)
					{
						instance.ballistaGun = BallistaGun.DeserializeLengthDelimited(stream);
					}
					else
					{
						BallistaGun.DeserializeLengthDelimited(stream, instance.ballistaGun, isDelta);
					}
				}
				break;
			case 188u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.batteringRam == null)
					{
						instance.batteringRam = BatteringRam.DeserializeLengthDelimited(stream);
					}
					else
					{
						BatteringRam.DeserializeLengthDelimited(stream, instance.batteringRam, isDelta);
					}
				}
				break;
			case 189u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.temporaryRagdoll == null)
					{
						instance.temporaryRagdoll = TemporaryRagdoll.DeserializeLengthDelimited(stream);
					}
					else
					{
						TemporaryRagdoll.DeserializeLengthDelimited(stream, instance.temporaryRagdoll, isDelta);
					}
				}
				break;
			case 191u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.constructableEntity == null)
					{
						instance.constructableEntity = ConstructableEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						ConstructableEntity.DeserializeLengthDelimited(stream, instance.constructableEntity, isDelta);
					}
				}
				break;
			case 192u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.chickenCoop == null)
					{
						instance.chickenCoop = ChickenCoop.DeserializeLengthDelimited(stream);
					}
					else
					{
						ChickenCoop.DeserializeLengthDelimited(stream, instance.chickenCoop, isDelta);
					}
				}
				break;
			case 193u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.farmableAnimal == null)
					{
						instance.farmableAnimal = FarmableAnimal.DeserializeLengthDelimited(stream);
					}
					else
					{
						FarmableAnimal.DeserializeLengthDelimited(stream, instance.farmableAnimal, isDelta);
					}
				}
				break;
			case 194u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ownership == null)
					{
						instance.ownership = ItemOwnershipAmount.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemOwnershipAmount.DeserializeLengthDelimited(stream, instance.ownership, isDelta);
					}
				}
				break;
			case 195u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.beehive == null)
					{
						instance.beehive = Beehive.DeserializeLengthDelimited(stream);
					}
					else
					{
						Beehive.DeserializeLengthDelimited(stream, instance.beehive, isDelta);
					}
				}
				break;
			case 196u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.beeMasterSwarm == null)
					{
						instance.beeMasterSwarm = BeeMasterSwarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						BeeMasterSwarm.DeserializeLengthDelimited(stream, instance.beeMasterSwarm, isDelta);
					}
				}
				break;
			case 197u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.containerCorpse == null)
					{
						instance.containerCorpse = ContainerCorpseData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ContainerCorpseData.DeserializeLengthDelimited(stream, instance.containerCorpse, isDelta);
					}
				}
				break;
			case 198u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.npcSensesState == null)
					{
						instance.npcSensesState = NPCSensesState.DeserializeLengthDelimited(stream);
					}
					else
					{
						NPCSensesState.DeserializeLengthDelimited(stream, instance.npcSensesState, isDelta);
					}
				}
				break;
			case 199u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vineMountable == null)
					{
						instance.vineMountable = VineMountable.DeserializeLengthDelimited(stream);
					}
					else
					{
						VineMountable.DeserializeLengthDelimited(stream, instance.vineMountable, isDelta);
					}
				}
				break;
			case 200u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vineTree == null)
					{
						instance.vineTree = VineTree.DeserializeLengthDelimited(stream);
					}
					else
					{
						VineTree.DeserializeLengthDelimited(stream, instance.vineTree, isDelta);
					}
				}
				break;
			case 201u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.treeRespawn == null)
					{
						instance.treeRespawn = TreeRespawn.DeserializeLengthDelimited(stream);
					}
					else
					{
						TreeRespawn.DeserializeLengthDelimited(stream, instance.treeRespawn, isDelta);
					}
				}
				break;
			case 202u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.wallpaperTool == null)
					{
						instance.wallpaperTool = WallpaperTool.DeserializeLengthDelimited(stream);
					}
					else
					{
						WallpaperTool.DeserializeLengthDelimited(stream, instance.wallpaperTool, isDelta);
					}
				}
				break;
			case 203u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.commandBlock == null)
					{
						instance.commandBlock = CommandBlock.DeserializeLengthDelimited(stream);
					}
					else
					{
						CommandBlock.DeserializeLengthDelimited(stream, instance.commandBlock, isDelta);
					}
				}
				break;
			case 204u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.staticRespawn == null)
					{
						instance.staticRespawn = StaticRespawnAreaData.DeserializeLengthDelimited(stream);
					}
					else
					{
						StaticRespawnAreaData.DeserializeLengthDelimited(stream, instance.staticRespawn, isDelta);
					}
				}
				break;
			case 205u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.buriedItemStorage == null)
					{
						instance.buriedItemStorage = BuriedItems.DeserializeLengthDelimited(stream);
					}
					else
					{
						BuriedItems.DeserializeLengthDelimited(stream, instance.buriedItemStorage, isDelta);
					}
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
	}

	public static Entity DeserializeLengthDelimited(BufferStream stream, Entity instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.baseNetworkable == null)
				{
					instance.baseNetworkable = BaseNetworkable.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseNetworkable.DeserializeLengthDelimited(stream, instance.baseNetworkable, isDelta);
				}
				continue;
			case 18:
				if (instance.baseEntity == null)
				{
					instance.baseEntity = BaseEntity.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseEntity.DeserializeLengthDelimited(stream, instance.baseEntity, isDelta);
				}
				continue;
			case 26:
				if (instance.basePlayer == null)
				{
					instance.basePlayer = BasePlayer.DeserializeLengthDelimited(stream);
				}
				else
				{
					BasePlayer.DeserializeLengthDelimited(stream, instance.basePlayer, isDelta);
				}
				continue;
			case 34:
				if (instance.worldItem == null)
				{
					instance.worldItem = WorldItem.DeserializeLengthDelimited(stream);
				}
				else
				{
					WorldItem.DeserializeLengthDelimited(stream, instance.worldItem, isDelta);
				}
				continue;
			case 42:
				if (instance.resource == null)
				{
					instance.resource = BaseResource.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseResource.DeserializeLengthDelimited(stream, instance.resource, isDelta);
				}
				continue;
			case 50:
				if (instance.buildingBlock == null)
				{
					instance.buildingBlock = BuildingBlock.DeserializeLengthDelimited(stream);
				}
				else
				{
					BuildingBlock.DeserializeLengthDelimited(stream, instance.buildingBlock, isDelta);
				}
				continue;
			case 58:
				if (instance.environment == null)
				{
					instance.environment = ProtoBuf.Environment.DeserializeLengthDelimited(stream);
				}
				else
				{
					ProtoBuf.Environment.DeserializeLengthDelimited(stream, instance.environment, isDelta);
				}
				continue;
			case 66:
				if (instance.corpse == null)
				{
					instance.corpse = Corpse.DeserializeLengthDelimited(stream);
				}
				else
				{
					Corpse.DeserializeLengthDelimited(stream, instance.corpse, isDelta);
				}
				continue;
			case 82:
				if (instance.parent == null)
				{
					instance.parent = ParentInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ParentInfo.DeserializeLengthDelimited(stream, instance.parent, isDelta);
				}
				continue;
			case 90:
				if (instance.keyLock == null)
				{
					instance.keyLock = KeyLock.DeserializeLengthDelimited(stream);
				}
				else
				{
					KeyLock.DeserializeLengthDelimited(stream, instance.keyLock, isDelta);
				}
				continue;
			case 98:
				if (instance.codeLock == null)
				{
					instance.codeLock = CodeLock.DeserializeLengthDelimited(stream);
				}
				else
				{
					CodeLock.DeserializeLengthDelimited(stream, instance.codeLock, isDelta);
				}
				continue;
			case 106:
				if (instance.entitySlots == null)
				{
					instance.entitySlots = EntitySlots.DeserializeLengthDelimited(stream);
				}
				else
				{
					EntitySlots.DeserializeLengthDelimited(stream, instance.entitySlots, isDelta);
				}
				continue;
			case 114:
				if (instance.buildingPrivilege == null)
				{
					instance.buildingPrivilege = BuildingPrivilege.DeserializeLengthDelimited(stream);
				}
				else
				{
					BuildingPrivilege.DeserializeLengthDelimited(stream, instance.buildingPrivilege, isDelta);
				}
				continue;
			case 122:
				if (instance.storageBox == null)
				{
					instance.storageBox = StorageBox.DeserializeLengthDelimited(stream);
				}
				else
				{
					StorageBox.DeserializeLengthDelimited(stream, instance.storageBox, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 16u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.heldEntity == null)
					{
						instance.heldEntity = HeldEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						HeldEntity.DeserializeLengthDelimited(stream, instance.heldEntity, isDelta);
					}
				}
				break;
			case 17u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseProjectile == null)
					{
						instance.baseProjectile = BaseProjectile.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseProjectile.DeserializeLengthDelimited(stream, instance.baseProjectile, isDelta);
					}
				}
				break;
			case 18u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseNPC == null)
					{
						instance.baseNPC = BaseNPC.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseNPC.DeserializeLengthDelimited(stream, instance.baseNPC, isDelta);
					}
				}
				break;
			case 19u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.loot == null)
					{
						instance.loot = Loot.DeserializeLengthDelimited(stream);
					}
					else
					{
						Loot.DeserializeLengthDelimited(stream, instance.loot, isDelta);
					}
				}
				break;
			case 20u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.genericSpawner == null)
					{
						instance.genericSpawner = GenericSpawner.DeserializeLengthDelimited(stream);
					}
					else
					{
						GenericSpawner.DeserializeLengthDelimited(stream, instance.genericSpawner, isDelta);
					}
				}
				break;
			case 21u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sleepingBag == null)
					{
						instance.sleepingBag = SleepingBag.DeserializeLengthDelimited(stream);
					}
					else
					{
						SleepingBag.DeserializeLengthDelimited(stream, instance.sleepingBag, isDelta);
					}
				}
				break;
			case 22u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lootableCorpse == null)
					{
						instance.lootableCorpse = LootableCorpse.DeserializeLengthDelimited(stream);
					}
					else
					{
						LootableCorpse.DeserializeLengthDelimited(stream, instance.lootableCorpse, isDelta);
					}
				}
				break;
			case 23u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sign == null)
					{
						instance.sign = Sign.DeserializeLengthDelimited(stream);
					}
					else
					{
						Sign.DeserializeLengthDelimited(stream, instance.sign, isDelta);
					}
				}
				break;
			case 24u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseCombat == null)
					{
						instance.baseCombat = BaseCombat.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseCombat.DeserializeLengthDelimited(stream, instance.baseCombat, isDelta);
					}
				}
				break;
			case 25u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mapEntity == null)
					{
						instance.mapEntity = MapEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						MapEntity.DeserializeLengthDelimited(stream, instance.mapEntity, isDelta);
					}
				}
				break;
			case 26u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.researchTable == null)
					{
						instance.researchTable = ResearchTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						ResearchTable.DeserializeLengthDelimited(stream, instance.researchTable, isDelta);
					}
				}
				break;
			case 27u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.dudExplosive == null)
					{
						instance.dudExplosive = DudExplosive.DeserializeLengthDelimited(stream);
					}
					else
					{
						DudExplosive.DeserializeLengthDelimited(stream, instance.dudExplosive, isDelta);
					}
				}
				break;
			case 28u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.miningQuarry == null)
					{
						instance.miningQuarry = MiningQuarry.DeserializeLengthDelimited(stream);
					}
					else
					{
						MiningQuarry.DeserializeLengthDelimited(stream, instance.miningQuarry, isDelta);
					}
				}
				break;
			case 29u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseVehicle == null)
					{
						instance.baseVehicle = BaseVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseVehicle.DeserializeLengthDelimited(stream, instance.baseVehicle, isDelta);
					}
				}
				break;
			case 30u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.helicopter == null)
					{
						instance.helicopter = Helicopter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Helicopter.DeserializeLengthDelimited(stream, instance.helicopter, isDelta);
					}
				}
				break;
			case 31u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.landmine == null)
					{
						instance.landmine = Landmine.DeserializeLengthDelimited(stream);
					}
					else
					{
						Landmine.DeserializeLengthDelimited(stream, instance.landmine, isDelta);
					}
				}
				break;
			case 32u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.autoturret == null)
					{
						instance.autoturret = AutoTurret.DeserializeLengthDelimited(stream);
					}
					else
					{
						AutoTurret.DeserializeLengthDelimited(stream, instance.autoturret, isDelta);
					}
				}
				break;
			case 33u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sphereEntity == null)
					{
						instance.sphereEntity = SphereEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						SphereEntity.DeserializeLengthDelimited(stream, instance.sphereEntity, isDelta);
					}
				}
				break;
			case 34u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.stabilityEntity == null)
					{
						instance.stabilityEntity = StabilityEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						StabilityEntity.DeserializeLengthDelimited(stream, instance.stabilityEntity, isDelta);
					}
				}
				break;
			case 35u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ownerInfo == null)
					{
						instance.ownerInfo = OwnerInfo.DeserializeLengthDelimited(stream);
					}
					else
					{
						OwnerInfo.DeserializeLengthDelimited(stream, instance.ownerInfo, isDelta);
					}
				}
				break;
			case 36u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.decayEntity == null)
					{
						instance.decayEntity = DecayEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						DecayEntity.DeserializeLengthDelimited(stream, instance.decayEntity, isDelta);
					}
				}
				break;
			case 37u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spawnable == null)
					{
						instance.spawnable = Spawnable.DeserializeLengthDelimited(stream);
					}
					else
					{
						Spawnable.DeserializeLengthDelimited(stream, instance.spawnable, isDelta);
					}
				}
				break;
			case 38u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.servergib == null)
					{
						instance.servergib = ServerGib.DeserializeLengthDelimited(stream);
					}
					else
					{
						ServerGib.DeserializeLengthDelimited(stream, instance.servergib, isDelta);
					}
				}
				break;
			case 39u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingMachine == null)
					{
						instance.vendingMachine = VendingMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingMachine.DeserializeLengthDelimited(stream, instance.vendingMachine, isDelta);
					}
				}
				break;
			case 40u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spinnerWheel == null)
					{
						instance.spinnerWheel = SpinnerWheel.DeserializeLengthDelimited(stream);
					}
					else
					{
						SpinnerWheel.DeserializeLengthDelimited(stream, instance.spinnerWheel, isDelta);
					}
				}
				break;
			case 41u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lift == null)
					{
						instance.lift = Lift.DeserializeLengthDelimited(stream);
					}
					else
					{
						Lift.DeserializeLengthDelimited(stream, instance.lift, isDelta);
					}
				}
				break;
			case 42u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.bradley == null)
					{
						instance.bradley = BradleyAPC.DeserializeLengthDelimited(stream);
					}
					else
					{
						BradleyAPC.DeserializeLengthDelimited(stream, instance.bradley, isDelta);
					}
				}
				break;
			case 43u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.waterwell == null)
					{
						instance.waterwell = WaterWell.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaterWell.DeserializeLengthDelimited(stream, instance.waterwell, isDelta);
					}
				}
				break;
			case 44u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.motorBoat == null)
					{
						instance.motorBoat = Motorboat.DeserializeLengthDelimited(stream);
					}
					else
					{
						Motorboat.DeserializeLengthDelimited(stream, instance.motorBoat, isDelta);
					}
				}
				break;
			case 45u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ioEntity == null)
					{
						instance.ioEntity = IOEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						IOEntity.DeserializeLengthDelimited(stream, instance.ioEntity, isDelta);
					}
				}
				break;
			case 46u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.puzzleReset == null)
					{
						instance.puzzleReset = PuzzleReset.DeserializeLengthDelimited(stream);
					}
					else
					{
						PuzzleReset.DeserializeLengthDelimited(stream, instance.puzzleReset, isDelta);
					}
				}
				break;
			case 47u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.relationshipManager == null)
					{
						instance.relationshipManager = RelationshipManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						RelationshipManager.DeserializeLengthDelimited(stream, instance.relationshipManager, isDelta);
					}
				}
				break;
			case 48u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.hotAirBalloon == null)
					{
						instance.hotAirBalloon = HotAirBalloon.DeserializeLengthDelimited(stream);
					}
					else
					{
						HotAirBalloon.DeserializeLengthDelimited(stream, instance.hotAirBalloon, isDelta);
					}
				}
				break;
			case 49u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.samSite == null)
					{
						instance.samSite = SAMSite.DeserializeLengthDelimited(stream);
					}
					else
					{
						SAMSite.DeserializeLengthDelimited(stream, instance.samSite, isDelta);
					}
				}
				break;
			case 50u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.eggHunt == null)
					{
						instance.eggHunt = EggHunt.DeserializeLengthDelimited(stream);
					}
					else
					{
						EggHunt.DeserializeLengthDelimited(stream, instance.eggHunt, isDelta);
					}
				}
				break;
			case 51u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.arcadeMachine == null)
					{
						instance.arcadeMachine = ArcadeMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						ArcadeMachine.DeserializeLengthDelimited(stream, instance.arcadeMachine, isDelta);
					}
				}
				break;
			case 52u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.miniCopter == null)
					{
						instance.miniCopter = Minicopter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Minicopter.DeserializeLengthDelimited(stream, instance.miniCopter, isDelta);
					}
				}
				break;
			case 53u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.horse == null)
					{
						instance.horse = Horse.DeserializeLengthDelimited(stream);
					}
					else
					{
						Horse.DeserializeLengthDelimited(stream, instance.horse, isDelta);
					}
				}
				break;
			case 54u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.smartAlarm == null)
					{
						instance.smartAlarm = SmartAlarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						SmartAlarm.DeserializeLengthDelimited(stream, instance.smartAlarm, isDelta);
					}
				}
				break;
			case 55u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lightString == null)
					{
						instance.lightString = LightString.DeserializeLengthDelimited(stream);
					}
					else
					{
						LightString.DeserializeLengthDelimited(stream, instance.lightString, isDelta);
					}
				}
				break;
			case 56u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lightDeployer == null)
					{
						instance.lightDeployer = LightDeployer.DeserializeLengthDelimited(stream);
					}
					else
					{
						LightDeployer.DeserializeLengthDelimited(stream, instance.lightDeployer, isDelta);
					}
				}
				break;
			case 57u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.rcEntity == null)
					{
						instance.rcEntity = RCEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						RCEntity.DeserializeLengthDelimited(stream, instance.rcEntity, isDelta);
					}
				}
				break;
			case 58u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.computerStation == null)
					{
						instance.computerStation = ComputerStation.DeserializeLengthDelimited(stream);
					}
					else
					{
						ComputerStation.DeserializeLengthDelimited(stream, instance.computerStation, isDelta);
					}
				}
				break;
			case 59u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.growableEntity == null)
					{
						instance.growableEntity = GrowableEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						GrowableEntity.DeserializeLengthDelimited(stream, instance.growableEntity, isDelta);
					}
				}
				break;
			case 60u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.composter == null)
					{
						instance.composter = Composter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Composter.DeserializeLengthDelimited(stream, instance.composter, isDelta);
					}
				}
				break;
			case 61u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.modularVehicle == null)
					{
						instance.modularVehicle = ModularVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						ModularVehicle.DeserializeLengthDelimited(stream, instance.modularVehicle, isDelta);
					}
				}
				break;
			case 62u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.modularCar == null)
					{
						instance.modularCar = ModularCar.DeserializeLengthDelimited(stream);
					}
					else
					{
						ModularCar.DeserializeLengthDelimited(stream, instance.modularCar, isDelta);
					}
				}
				break;
			case 63u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleUID == null)
					{
						instance.simpleUID = SimpleUID.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleUID.DeserializeLengthDelimited(stream, instance.simpleUID, isDelta);
					}
				}
				break;
			case 64u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleLift == null)
					{
						instance.vehicleLift = VehicleLift.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleLift.DeserializeLengthDelimited(stream, instance.vehicleLift, isDelta);
					}
				}
				break;
			case 65u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.engineStorage == null)
					{
						instance.engineStorage = EngineStorage.DeserializeLengthDelimited(stream);
					}
					else
					{
						EngineStorage.DeserializeLengthDelimited(stream, instance.engineStorage, isDelta);
					}
				}
				break;
			case 66u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleVendor == null)
					{
						instance.vehicleVendor = VehicleVendor.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleVendor.DeserializeLengthDelimited(stream, instance.vehicleVendor, isDelta);
					}
				}
				break;
			case 67u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.WaterPool == null)
					{
						instance.WaterPool = WaterPool.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaterPool.DeserializeLengthDelimited(stream, instance.WaterPool, isDelta);
					}
				}
				break;
			case 68u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.photo == null)
					{
						instance.photo = Photo.DeserializeLengthDelimited(stream);
					}
					else
					{
						Photo.DeserializeLengthDelimited(stream, instance.photo, isDelta);
					}
				}
				break;
			case 69u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.photoFrame == null)
					{
						instance.photoFrame = PhotoFrame.DeserializeLengthDelimited(stream);
					}
					else
					{
						PhotoFrame.DeserializeLengthDelimited(stream, instance.photoFrame, isDelta);
					}
				}
				break;
			case 70u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleModule == null)
					{
						instance.vehicleModule = VehicleModule.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleModule.DeserializeLengthDelimited(stream, instance.vehicleModule, isDelta);
					}
				}
				break;
			case 71u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mixingTable == null)
					{
						instance.mixingTable = MixingTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						MixingTable.DeserializeLengthDelimited(stream, instance.mixingTable, isDelta);
					}
				}
				break;
			case 72u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.shopKeeper == null)
					{
						instance.shopKeeper = ShopKeeper.DeserializeLengthDelimited(stream);
					}
					else
					{
						ShopKeeper.DeserializeLengthDelimited(stream, instance.shopKeeper, isDelta);
					}
				}
				break;
			case 73u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.elevator == null)
					{
						instance.elevator = Elevator.DeserializeLengthDelimited(stream);
					}
					else
					{
						Elevator.DeserializeLengthDelimited(stream, instance.elevator, isDelta);
					}
				}
				break;
			case 74u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.skullTrophy == null)
					{
						instance.skullTrophy = SkullTrophy.DeserializeLengthDelimited(stream);
					}
					else
					{
						SkullTrophy.DeserializeLengthDelimited(stream, instance.skullTrophy, isDelta);
					}
				}
				break;
			case 75u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cassette == null)
					{
						instance.cassette = Cassette.DeserializeLengthDelimited(stream);
					}
					else
					{
						Cassette.DeserializeLengthDelimited(stream, instance.cassette, isDelta);
					}
				}
				break;
			case 76u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.telephone == null)
					{
						instance.telephone = Telephone.DeserializeLengthDelimited(stream);
					}
					else
					{
						Telephone.DeserializeLengthDelimited(stream, instance.telephone, isDelta);
					}
				}
				break;
			case 77u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.boomBox == null)
					{
						instance.boomBox = BoomBox.DeserializeLengthDelimited(stream);
					}
					else
					{
						BoomBox.DeserializeLengthDelimited(stream, instance.boomBox, isDelta);
					}
				}
				break;
			case 78u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.neonSign == null)
					{
						instance.neonSign = NeonSign.DeserializeLengthDelimited(stream);
					}
					else
					{
						NeonSign.DeserializeLengthDelimited(stream, instance.neonSign, isDelta);
					}
				}
				break;
			case 79u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.subEntityList == null)
					{
						instance.subEntityList = SubEntityList.DeserializeLengthDelimited(stream);
					}
					else
					{
						SubEntityList.DeserializeLengthDelimited(stream, instance.subEntityList, isDelta);
					}
				}
				break;
			case 80u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.marketTerminal == null)
					{
						instance.marketTerminal = MarketTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						MarketTerminal.DeserializeLengthDelimited(stream, instance.marketTerminal, isDelta);
					}
				}
				break;
			case 81u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.deliveryDrone == null)
					{
						instance.deliveryDrone = DeliveryDrone.DeserializeLengthDelimited(stream);
					}
					else
					{
						DeliveryDrone.DeserializeLengthDelimited(stream, instance.deliveryDrone, isDelta);
					}
				}
				break;
			case 82u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.reclaimTerminal == null)
					{
						instance.reclaimTerminal = ReclaimTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						ReclaimTerminal.DeserializeLengthDelimited(stream, instance.reclaimTerminal, isDelta);
					}
				}
				break;
			case 83u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.slotMachine == null)
					{
						instance.slotMachine = SlotMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						SlotMachine.DeserializeLengthDelimited(stream, instance.slotMachine, isDelta);
					}
				}
				break;
			case 84u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.trainEngine == null)
					{
						instance.trainEngine = TrainEngine.DeserializeLengthDelimited(stream);
					}
					else
					{
						TrainEngine.DeserializeLengthDelimited(stream, instance.trainEngine, isDelta);
					}
				}
				break;
			case 85u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cardGame == null)
					{
						instance.cardGame = CardGame.DeserializeLengthDelimited(stream);
					}
					else
					{
						CardGame.DeserializeLengthDelimited(stream, instance.cardGame, isDelta);
					}
				}
				break;
			case 86u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.crane == null)
					{
						instance.crane = Crane.DeserializeLengthDelimited(stream);
					}
					else
					{
						Crane.DeserializeLengthDelimited(stream, instance.crane, isDelta);
					}
				}
				break;
			case 87u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.connectedSpeaker == null)
					{
						instance.connectedSpeaker = ConnectedSpeaker.DeserializeLengthDelimited(stream);
					}
					else
					{
						ConnectedSpeaker.DeserializeLengthDelimited(stream, instance.connectedSpeaker, isDelta);
					}
				}
				break;
			case 88u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.audioEntity == null)
					{
						instance.audioEntity = AudioEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						AudioEntity.DeserializeLengthDelimited(stream, instance.audioEntity, isDelta);
					}
				}
				break;
			case 89u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.microphoneStand == null)
					{
						instance.microphoneStand = MicrophoneStand.DeserializeLengthDelimited(stream);
					}
					else
					{
						MicrophoneStand.DeserializeLengthDelimited(stream, instance.microphoneStand, isDelta);
					}
				}
				break;
			case 90u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.submarine == null)
					{
						instance.submarine = Submarine.DeserializeLengthDelimited(stream);
					}
					else
					{
						Submarine.DeserializeLengthDelimited(stream, instance.submarine, isDelta);
					}
				}
				break;
			case 91u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sleepingBagCamper == null)
					{
						instance.sleepingBagCamper = SleepingBagCamper.DeserializeLengthDelimited(stream);
					}
					else
					{
						SleepingBagCamper.DeserializeLengthDelimited(stream, instance.sleepingBagCamper, isDelta);
					}
				}
				break;
			case 92u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.camperModule == null)
					{
						instance.camperModule = CamperModule.DeserializeLengthDelimited(stream);
					}
					else
					{
						CamperModule.DeserializeLengthDelimited(stream, instance.camperModule, isDelta);
					}
				}
				break;
			case 93u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.paintableSign == null)
					{
						instance.paintableSign = PaintableSign.DeserializeLengthDelimited(stream);
					}
					else
					{
						PaintableSign.DeserializeLengthDelimited(stream, instance.paintableSign, isDelta);
					}
				}
				break;
			case 94u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.whitelist == null)
					{
						instance.whitelist = Whitelist.DeserializeLengthDelimited(stream);
					}
					else
					{
						Whitelist.DeserializeLengthDelimited(stream, instance.whitelist, isDelta);
					}
				}
				break;
			case 95u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.FrankensteinTable == null)
					{
						instance.FrankensteinTable = FrankensteinTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						FrankensteinTable.DeserializeLengthDelimited(stream, instance.FrankensteinTable, isDelta);
					}
				}
				break;
			case 96u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mlrs == null)
					{
						instance.mlrs = MLRS.DeserializeLengthDelimited(stream);
					}
					else
					{
						MLRS.DeserializeLengthDelimited(stream, instance.mlrs, isDelta);
					}
				}
				break;
			case 97u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.reclaimManager == null)
					{
						instance.reclaimManager = ReclaimManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						ReclaimManager.DeserializeLengthDelimited(stream, instance.reclaimManager, isDelta);
					}
				}
				break;
			case 98u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.gameMode == null)
					{
						instance.gameMode = GameMode.DeserializeLengthDelimited(stream);
					}
					else
					{
						GameMode.DeserializeLengthDelimited(stream, instance.gameMode, isDelta);
					}
				}
				break;
			case 99u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.snowmobile == null)
					{
						instance.snowmobile = Snowmobile.DeserializeLengthDelimited(stream);
					}
					else
					{
						Snowmobile.DeserializeLengthDelimited(stream, instance.snowmobile, isDelta);
					}
				}
				break;
			case 100u:
				if (key.WireType == Wire.Varint)
				{
					instance.createdThisFrame = ProtocolParser.ReadBool(stream);
				}
				break;
			case 101u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.patternFirework == null)
					{
						instance.patternFirework = PatternFirework.DeserializeLengthDelimited(stream);
					}
					else
					{
						PatternFirework.DeserializeLengthDelimited(stream, instance.patternFirework, isDelta);
					}
				}
				break;
			case 102u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoPlane == null)
					{
						instance.cargoPlane = CargoPlane.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoPlane.DeserializeLengthDelimited(stream, instance.cargoPlane, isDelta);
					}
				}
				break;
			case 103u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.paintedItem == null)
					{
						instance.paintedItem = PaintedItem.DeserializeLengthDelimited(stream);
					}
					else
					{
						PaintedItem.DeserializeLengthDelimited(stream, instance.paintedItem, isDelta);
					}
				}
				break;
			case 104u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.clanManager == null)
					{
						instance.clanManager = ClanManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						ClanManager.DeserializeLengthDelimited(stream, instance.clanManager, isDelta);
					}
				}
				break;
			case 105u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spray == null)
					{
						instance.spray = Spray.DeserializeLengthDelimited(stream);
					}
					else
					{
						Spray.DeserializeLengthDelimited(stream, instance.spray, isDelta);
					}
				}
				break;
			case 106u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseTrain == null)
					{
						instance.baseTrain = BaseTrain.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseTrain.DeserializeLengthDelimited(stream, instance.baseTrain, isDelta);
					}
				}
				break;
			case 107u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.zipline == null)
					{
						instance.zipline = Zipline.DeserializeLengthDelimited(stream);
					}
					else
					{
						Zipline.DeserializeLengthDelimited(stream, instance.zipline, isDelta);
					}
				}
				break;
			case 108u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ziplineMountable == null)
					{
						instance.ziplineMountable = ZiplineMountable.DeserializeLengthDelimited(stream);
					}
					else
					{
						ZiplineMountable.DeserializeLengthDelimited(stream, instance.ziplineMountable, isDelta);
					}
				}
				break;
			case 109u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ZiplineArrival == null)
					{
						instance.ZiplineArrival = ZiplineArrivalPoint.DeserializeLengthDelimited(stream);
					}
					else
					{
						ZiplineArrivalPoint.DeserializeLengthDelimited(stream, instance.ZiplineArrival, isDelta);
					}
				}
				break;
			case 110u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sprayLine == null)
					{
						instance.sprayLine = SprayLine.DeserializeLengthDelimited(stream);
					}
					else
					{
						SprayLine.DeserializeLengthDelimited(stream, instance.sprayLine, isDelta);
					}
				}
				break;
			case 111u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.coalingTower == null)
					{
						instance.coalingTower = CoalingTower.DeserializeLengthDelimited(stream);
					}
					else
					{
						CoalingTower.DeserializeLengthDelimited(stream, instance.coalingTower, isDelta);
					}
				}
				break;
			case 112u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleInt == null)
					{
						instance.simpleInt = SimpleInt.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleInt.DeserializeLengthDelimited(stream, instance.simpleInt, isDelta);
					}
				}
				break;
			case 113u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseOven == null)
					{
						instance.baseOven = BaseOven.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseOven.DeserializeLengthDelimited(stream, instance.baseOven, isDelta);
					}
				}
				break;
			case 114u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.brainComponent == null)
					{
						instance.brainComponent = BrainComponent.DeserializeLengthDelimited(stream);
					}
					else
					{
						BrainComponent.DeserializeLengthDelimited(stream, instance.brainComponent, isDelta);
					}
				}
				break;
			case 115u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.proceduralDungeon == null)
					{
						instance.proceduralDungeon = ProceduralDungeon.DeserializeLengthDelimited(stream);
					}
					else
					{
						ProceduralDungeon.DeserializeLengthDelimited(stream, instance.proceduralDungeon, isDelta);
					}
				}
				break;
			case 116u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.industrialConveyor == null)
					{
						instance.industrialConveyor = IndustrialConveyor.DeserializeLengthDelimited(stream);
					}
					else
					{
						IndustrialConveyor.DeserializeLengthDelimited(stream, instance.industrialConveyor, isDelta);
					}
				}
				break;
			case 117u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.industrialCrafter == null)
					{
						instance.industrialCrafter = IndustrialCrafter.DeserializeLengthDelimited(stream);
					}
					else
					{
						IndustrialCrafter.DeserializeLengthDelimited(stream, instance.industrialCrafter, isDelta);
					}
				}
				break;
			case 118u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.drone == null)
					{
						instance.drone = Drone.DeserializeLengthDelimited(stream);
					}
					else
					{
						Drone.DeserializeLengthDelimited(stream, instance.drone, isDelta);
					}
				}
				break;
			case 119u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.explosive == null)
					{
						instance.explosive = TimedExplosive.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimedExplosive.DeserializeLengthDelimited(stream, instance.explosive, isDelta);
					}
				}
				break;
			case 120u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleUint == null)
					{
						instance.simpleUint = SimpleUInt.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleUInt.DeserializeLengthDelimited(stream, instance.simpleUint, isDelta);
					}
				}
				break;
			case 121u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.weaponRack == null)
					{
						instance.weaponRack = WeaponRack.DeserializeLengthDelimited(stream);
					}
					else
					{
						WeaponRack.DeserializeLengthDelimited(stream, instance.weaponRack, isDelta);
					}
				}
				break;
			case 122u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeli == null)
					{
						instance.attackHeli = AttackHeli.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeli.DeserializeLengthDelimited(stream, instance.attackHeli, isDelta);
					}
				}
				break;
			case 123u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeliTurret == null)
					{
						instance.attackHeliTurret = AttackHeliTurret.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeliTurret.DeserializeLengthDelimited(stream, instance.attackHeliTurret, isDelta);
					}
				}
				break;
			case 124u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeliRockets == null)
					{
						instance.attackHeliRockets = AttackHeliRockets.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeliRockets.DeserializeLengthDelimited(stream, instance.attackHeliRockets, isDelta);
					}
				}
				break;
			case 125u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseBoat == null)
					{
						instance.baseBoat = BaseBoat.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseBoat.DeserializeLengthDelimited(stream, instance.baseBoat, isDelta);
					}
				}
				break;
			case 126u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ragdoll == null)
					{
						instance.ragdoll = Ragdoll.DeserializeLengthDelimited(stream);
					}
					else
					{
						Ragdoll.DeserializeLengthDelimited(stream, instance.ragdoll, isDelta);
					}
				}
				break;
			case 127u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.dieselEngine == null)
					{
						instance.dieselEngine = DieselEngine.DeserializeLengthDelimited(stream);
					}
					else
					{
						DieselEngine.DeserializeLengthDelimited(stream, instance.dieselEngine, isDelta);
					}
				}
				break;
			case 150u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.associatedFiles == null)
					{
						instance.associatedFiles = AssociatedFiles.DeserializeLengthDelimited(stream);
					}
					else
					{
						AssociatedFiles.DeserializeLengthDelimited(stream, instance.associatedFiles, isDelta);
					}
				}
				break;
			case 151u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusFerry == null)
					{
						instance.nexusFerry = NexusFerry.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusFerry.DeserializeLengthDelimited(stream, instance.nexusFerry, isDelta);
					}
				}
				break;
			case 152u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusIsland == null)
					{
						instance.nexusIsland = NexusIsland.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusIsland.DeserializeLengthDelimited(stream, instance.nexusIsland, isDelta);
					}
				}
				break;
			case 153u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusDockTerminal == null)
					{
						instance.nexusDockTerminal = NexusDockTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusDockTerminal.DeserializeLengthDelimited(stream, instance.nexusDockTerminal, isDelta);
					}
				}
				break;
			case 154u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.rockingChair == null)
					{
						instance.rockingChair = RockingChair.DeserializeLengthDelimited(stream);
					}
					else
					{
						RockingChair.DeserializeLengthDelimited(stream, instance.rockingChair, isDelta);
					}
				}
				break;
			case 155u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.headData == null)
					{
						instance.headData = HeadData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HeadData.DeserializeLengthDelimited(stream, instance.headData, isDelta);
					}
				}
				break;
			case 156u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.wantedPoster == null)
					{
						instance.wantedPoster = WantedPoster.DeserializeLengthDelimited(stream);
					}
					else
					{
						WantedPoster.DeserializeLengthDelimited(stream, instance.wantedPoster, isDelta);
					}
				}
				break;
			case 158u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.waypointRace == null)
					{
						instance.waypointRace = WaypointRace.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaypointRace.DeserializeLengthDelimited(stream, instance.waypointRace, isDelta);
					}
				}
				break;
			case 159u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.legacyShelter == null)
					{
						instance.legacyShelter = LegacyShelter.DeserializeLengthDelimited(stream);
					}
					else
					{
						LegacyShelter.DeserializeLengthDelimited(stream, instance.legacyShelter, isDelta);
					}
				}
				break;
			case 160u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.metalDetectorSource == null)
					{
						instance.metalDetectorSource = MetalDetectorSource.DeserializeLengthDelimited(stream);
					}
					else
					{
						MetalDetectorSource.DeserializeLengthDelimited(stream, instance.metalDetectorSource, isDelta);
					}
				}
				break;
			case 161u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tutorialIsland == null)
					{
						instance.tutorialIsland = TutorialIsland.DeserializeLengthDelimited(stream);
					}
					else
					{
						TutorialIsland.DeserializeLengthDelimited(stream, instance.tutorialIsland, isDelta);
					}
				}
				break;
			case 162u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cinematicEntity == null)
					{
						instance.cinematicEntity = CinematicEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						CinematicEntity.DeserializeLengthDelimited(stream, instance.cinematicEntity, isDelta);
					}
				}
				break;
			case 163u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.buildingPrivilegeRetro == null)
					{
						instance.buildingPrivilegeRetro = BuildingPrivilegeRetro.DeserializeLengthDelimited(stream);
					}
					else
					{
						BuildingPrivilegeRetro.DeserializeLengthDelimited(stream, instance.buildingPrivilegeRetro, isDelta);
					}
				}
				break;
			case 164u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.harborCrane == null)
					{
						instance.harborCrane = HarborCrane.DeserializeLengthDelimited(stream);
					}
					else
					{
						HarborCrane.DeserializeLengthDelimited(stream, instance.harborCrane, isDelta);
					}
				}
				break;
			case 165u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoShip == null)
					{
						instance.cargoShip = CargoShip.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoShip.DeserializeLengthDelimited(stream, instance.cargoShip, isDelta);
					}
				}
				break;
			case 166u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoShipContainer == null)
					{
						instance.cargoShipContainer = CargoShipContainer.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoShipContainer.DeserializeLengthDelimited(stream, instance.cargoShipContainer, isDelta);
					}
				}
				break;
			case 167u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.missionMapMarker == null)
					{
						instance.missionMapMarker = MissionMapMarker.DeserializeLengthDelimited(stream);
					}
					else
					{
						MissionMapMarker.DeserializeLengthDelimited(stream, instance.missionMapMarker, isDelta);
					}
				}
				break;
			case 168u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.bike == null)
					{
						instance.bike = Bike.DeserializeLengthDelimited(stream);
					}
					else
					{
						Bike.DeserializeLengthDelimited(stream, instance.bike, isDelta);
					}
				}
				break;
			case 169u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.diverPropulsionVehicle == null)
					{
						instance.diverPropulsionVehicle = DiverPropulsionVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						DiverPropulsionVehicle.DeserializeLengthDelimited(stream, instance.diverPropulsionVehicle, isDelta);
					}
				}
				break;
			case 174u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.travellingVendor == null)
					{
						instance.travellingVendor = TravellingVendor.DeserializeLengthDelimited(stream);
					}
					else
					{
						TravellingVendor.DeserializeLengthDelimited(stream, instance.travellingVendor, isDelta);
					}
				}
				break;
			case 175u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingDynamicPricing == null)
					{
						instance.vendingDynamicPricing = VendingDynamicPricing.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingDynamicPricing.DeserializeLengthDelimited(stream, instance.vendingDynamicPricing, isDelta);
					}
				}
				break;
			case 176u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tinCanAlarm == null)
					{
						instance.tinCanAlarm = TinCanAlarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						TinCanAlarm.DeserializeLengthDelimited(stream, instance.tinCanAlarm, isDelta);
					}
				}
				break;
			case 177u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.digitalClock == null)
					{
						instance.digitalClock = DigitalClock.DeserializeLengthDelimited(stream);
					}
					else
					{
						DigitalClock.DeserializeLengthDelimited(stream, instance.digitalClock, isDelta);
					}
				}
				break;
			case 178u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.elevatorLift == null)
					{
						instance.elevatorLift = ElevatorLift.DeserializeLengthDelimited(stream);
					}
					else
					{
						ElevatorLift.DeserializeLengthDelimited(stream, instance.elevatorLift, isDelta);
					}
				}
				break;
			case 179u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.npcVendingMachine == null)
					{
						instance.npcVendingMachine = NPCVendingMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						NPCVendingMachine.DeserializeLengthDelimited(stream, instance.npcVendingMachine, isDelta);
					}
				}
				break;
			case 180u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mailbox == null)
					{
						instance.mailbox = Mailbox.DeserializeLengthDelimited(stream);
					}
					else
					{
						Mailbox.DeserializeLengthDelimited(stream, instance.mailbox, isDelta);
					}
				}
				break;
			case 181u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.projectileWeaponMod == null)
					{
						instance.projectileWeaponMod = GunWeaponMod.DeserializeLengthDelimited(stream);
					}
					else
					{
						GunWeaponMod.DeserializeLengthDelimited(stream, instance.projectileWeaponMod, isDelta);
					}
				}
				break;
			case 182u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseSculpture == null)
					{
						instance.baseSculpture = BaseSculpture.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseSculpture.DeserializeLengthDelimited(stream, instance.baseSculpture, isDelta);
					}
				}
				break;
			case 183u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingMachineStats == null)
					{
						instance.vendingMachineStats = VendingMachineStats.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingMachineStats.DeserializeLengthDelimited(stream, instance.vendingMachineStats, isDelta);
					}
				}
				break;
			case 184u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.catapult == null)
					{
						instance.catapult = Catapult.DeserializeLengthDelimited(stream);
					}
					else
					{
						Catapult.DeserializeLengthDelimited(stream, instance.catapult, isDelta);
					}
				}
				break;
			case 185u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.siegeTower == null)
					{
						instance.siegeTower = SiegeTower.DeserializeLengthDelimited(stream);
					}
					else
					{
						SiegeTower.DeserializeLengthDelimited(stream, instance.siegeTower, isDelta);
					}
				}
				break;
			case 186u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ballista == null)
					{
						instance.ballista = Ballista.DeserializeLengthDelimited(stream);
					}
					else
					{
						Ballista.DeserializeLengthDelimited(stream, instance.ballista, isDelta);
					}
				}
				break;
			case 187u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ballistaGun == null)
					{
						instance.ballistaGun = BallistaGun.DeserializeLengthDelimited(stream);
					}
					else
					{
						BallistaGun.DeserializeLengthDelimited(stream, instance.ballistaGun, isDelta);
					}
				}
				break;
			case 188u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.batteringRam == null)
					{
						instance.batteringRam = BatteringRam.DeserializeLengthDelimited(stream);
					}
					else
					{
						BatteringRam.DeserializeLengthDelimited(stream, instance.batteringRam, isDelta);
					}
				}
				break;
			case 189u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.temporaryRagdoll == null)
					{
						instance.temporaryRagdoll = TemporaryRagdoll.DeserializeLengthDelimited(stream);
					}
					else
					{
						TemporaryRagdoll.DeserializeLengthDelimited(stream, instance.temporaryRagdoll, isDelta);
					}
				}
				break;
			case 191u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.constructableEntity == null)
					{
						instance.constructableEntity = ConstructableEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						ConstructableEntity.DeserializeLengthDelimited(stream, instance.constructableEntity, isDelta);
					}
				}
				break;
			case 192u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.chickenCoop == null)
					{
						instance.chickenCoop = ChickenCoop.DeserializeLengthDelimited(stream);
					}
					else
					{
						ChickenCoop.DeserializeLengthDelimited(stream, instance.chickenCoop, isDelta);
					}
				}
				break;
			case 193u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.farmableAnimal == null)
					{
						instance.farmableAnimal = FarmableAnimal.DeserializeLengthDelimited(stream);
					}
					else
					{
						FarmableAnimal.DeserializeLengthDelimited(stream, instance.farmableAnimal, isDelta);
					}
				}
				break;
			case 194u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ownership == null)
					{
						instance.ownership = ItemOwnershipAmount.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemOwnershipAmount.DeserializeLengthDelimited(stream, instance.ownership, isDelta);
					}
				}
				break;
			case 195u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.beehive == null)
					{
						instance.beehive = Beehive.DeserializeLengthDelimited(stream);
					}
					else
					{
						Beehive.DeserializeLengthDelimited(stream, instance.beehive, isDelta);
					}
				}
				break;
			case 196u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.beeMasterSwarm == null)
					{
						instance.beeMasterSwarm = BeeMasterSwarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						BeeMasterSwarm.DeserializeLengthDelimited(stream, instance.beeMasterSwarm, isDelta);
					}
				}
				break;
			case 197u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.containerCorpse == null)
					{
						instance.containerCorpse = ContainerCorpseData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ContainerCorpseData.DeserializeLengthDelimited(stream, instance.containerCorpse, isDelta);
					}
				}
				break;
			case 198u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.npcSensesState == null)
					{
						instance.npcSensesState = NPCSensesState.DeserializeLengthDelimited(stream);
					}
					else
					{
						NPCSensesState.DeserializeLengthDelimited(stream, instance.npcSensesState, isDelta);
					}
				}
				break;
			case 199u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vineMountable == null)
					{
						instance.vineMountable = VineMountable.DeserializeLengthDelimited(stream);
					}
					else
					{
						VineMountable.DeserializeLengthDelimited(stream, instance.vineMountable, isDelta);
					}
				}
				break;
			case 200u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vineTree == null)
					{
						instance.vineTree = VineTree.DeserializeLengthDelimited(stream);
					}
					else
					{
						VineTree.DeserializeLengthDelimited(stream, instance.vineTree, isDelta);
					}
				}
				break;
			case 201u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.treeRespawn == null)
					{
						instance.treeRespawn = TreeRespawn.DeserializeLengthDelimited(stream);
					}
					else
					{
						TreeRespawn.DeserializeLengthDelimited(stream, instance.treeRespawn, isDelta);
					}
				}
				break;
			case 202u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.wallpaperTool == null)
					{
						instance.wallpaperTool = WallpaperTool.DeserializeLengthDelimited(stream);
					}
					else
					{
						WallpaperTool.DeserializeLengthDelimited(stream, instance.wallpaperTool, isDelta);
					}
				}
				break;
			case 203u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.commandBlock == null)
					{
						instance.commandBlock = CommandBlock.DeserializeLengthDelimited(stream);
					}
					else
					{
						CommandBlock.DeserializeLengthDelimited(stream, instance.commandBlock, isDelta);
					}
				}
				break;
			case 204u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.staticRespawn == null)
					{
						instance.staticRespawn = StaticRespawnAreaData.DeserializeLengthDelimited(stream);
					}
					else
					{
						StaticRespawnAreaData.DeserializeLengthDelimited(stream, instance.staticRespawn, isDelta);
					}
				}
				break;
			case 205u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.buriedItemStorage == null)
					{
						instance.buriedItemStorage = BuriedItems.DeserializeLengthDelimited(stream);
					}
					else
					{
						BuriedItems.DeserializeLengthDelimited(stream, instance.buriedItemStorage, isDelta);
					}
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Entity DeserializeLength(BufferStream stream, int length, Entity instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.baseNetworkable == null)
				{
					instance.baseNetworkable = BaseNetworkable.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseNetworkable.DeserializeLengthDelimited(stream, instance.baseNetworkable, isDelta);
				}
				continue;
			case 18:
				if (instance.baseEntity == null)
				{
					instance.baseEntity = BaseEntity.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseEntity.DeserializeLengthDelimited(stream, instance.baseEntity, isDelta);
				}
				continue;
			case 26:
				if (instance.basePlayer == null)
				{
					instance.basePlayer = BasePlayer.DeserializeLengthDelimited(stream);
				}
				else
				{
					BasePlayer.DeserializeLengthDelimited(stream, instance.basePlayer, isDelta);
				}
				continue;
			case 34:
				if (instance.worldItem == null)
				{
					instance.worldItem = WorldItem.DeserializeLengthDelimited(stream);
				}
				else
				{
					WorldItem.DeserializeLengthDelimited(stream, instance.worldItem, isDelta);
				}
				continue;
			case 42:
				if (instance.resource == null)
				{
					instance.resource = BaseResource.DeserializeLengthDelimited(stream);
				}
				else
				{
					BaseResource.DeserializeLengthDelimited(stream, instance.resource, isDelta);
				}
				continue;
			case 50:
				if (instance.buildingBlock == null)
				{
					instance.buildingBlock = BuildingBlock.DeserializeLengthDelimited(stream);
				}
				else
				{
					BuildingBlock.DeserializeLengthDelimited(stream, instance.buildingBlock, isDelta);
				}
				continue;
			case 58:
				if (instance.environment == null)
				{
					instance.environment = ProtoBuf.Environment.DeserializeLengthDelimited(stream);
				}
				else
				{
					ProtoBuf.Environment.DeserializeLengthDelimited(stream, instance.environment, isDelta);
				}
				continue;
			case 66:
				if (instance.corpse == null)
				{
					instance.corpse = Corpse.DeserializeLengthDelimited(stream);
				}
				else
				{
					Corpse.DeserializeLengthDelimited(stream, instance.corpse, isDelta);
				}
				continue;
			case 82:
				if (instance.parent == null)
				{
					instance.parent = ParentInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ParentInfo.DeserializeLengthDelimited(stream, instance.parent, isDelta);
				}
				continue;
			case 90:
				if (instance.keyLock == null)
				{
					instance.keyLock = KeyLock.DeserializeLengthDelimited(stream);
				}
				else
				{
					KeyLock.DeserializeLengthDelimited(stream, instance.keyLock, isDelta);
				}
				continue;
			case 98:
				if (instance.codeLock == null)
				{
					instance.codeLock = CodeLock.DeserializeLengthDelimited(stream);
				}
				else
				{
					CodeLock.DeserializeLengthDelimited(stream, instance.codeLock, isDelta);
				}
				continue;
			case 106:
				if (instance.entitySlots == null)
				{
					instance.entitySlots = EntitySlots.DeserializeLengthDelimited(stream);
				}
				else
				{
					EntitySlots.DeserializeLengthDelimited(stream, instance.entitySlots, isDelta);
				}
				continue;
			case 114:
				if (instance.buildingPrivilege == null)
				{
					instance.buildingPrivilege = BuildingPrivilege.DeserializeLengthDelimited(stream);
				}
				else
				{
					BuildingPrivilege.DeserializeLengthDelimited(stream, instance.buildingPrivilege, isDelta);
				}
				continue;
			case 122:
				if (instance.storageBox == null)
				{
					instance.storageBox = StorageBox.DeserializeLengthDelimited(stream);
				}
				else
				{
					StorageBox.DeserializeLengthDelimited(stream, instance.storageBox, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 16u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.heldEntity == null)
					{
						instance.heldEntity = HeldEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						HeldEntity.DeserializeLengthDelimited(stream, instance.heldEntity, isDelta);
					}
				}
				break;
			case 17u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseProjectile == null)
					{
						instance.baseProjectile = BaseProjectile.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseProjectile.DeserializeLengthDelimited(stream, instance.baseProjectile, isDelta);
					}
				}
				break;
			case 18u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseNPC == null)
					{
						instance.baseNPC = BaseNPC.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseNPC.DeserializeLengthDelimited(stream, instance.baseNPC, isDelta);
					}
				}
				break;
			case 19u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.loot == null)
					{
						instance.loot = Loot.DeserializeLengthDelimited(stream);
					}
					else
					{
						Loot.DeserializeLengthDelimited(stream, instance.loot, isDelta);
					}
				}
				break;
			case 20u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.genericSpawner == null)
					{
						instance.genericSpawner = GenericSpawner.DeserializeLengthDelimited(stream);
					}
					else
					{
						GenericSpawner.DeserializeLengthDelimited(stream, instance.genericSpawner, isDelta);
					}
				}
				break;
			case 21u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sleepingBag == null)
					{
						instance.sleepingBag = SleepingBag.DeserializeLengthDelimited(stream);
					}
					else
					{
						SleepingBag.DeserializeLengthDelimited(stream, instance.sleepingBag, isDelta);
					}
				}
				break;
			case 22u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lootableCorpse == null)
					{
						instance.lootableCorpse = LootableCorpse.DeserializeLengthDelimited(stream);
					}
					else
					{
						LootableCorpse.DeserializeLengthDelimited(stream, instance.lootableCorpse, isDelta);
					}
				}
				break;
			case 23u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sign == null)
					{
						instance.sign = Sign.DeserializeLengthDelimited(stream);
					}
					else
					{
						Sign.DeserializeLengthDelimited(stream, instance.sign, isDelta);
					}
				}
				break;
			case 24u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseCombat == null)
					{
						instance.baseCombat = BaseCombat.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseCombat.DeserializeLengthDelimited(stream, instance.baseCombat, isDelta);
					}
				}
				break;
			case 25u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mapEntity == null)
					{
						instance.mapEntity = MapEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						MapEntity.DeserializeLengthDelimited(stream, instance.mapEntity, isDelta);
					}
				}
				break;
			case 26u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.researchTable == null)
					{
						instance.researchTable = ResearchTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						ResearchTable.DeserializeLengthDelimited(stream, instance.researchTable, isDelta);
					}
				}
				break;
			case 27u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.dudExplosive == null)
					{
						instance.dudExplosive = DudExplosive.DeserializeLengthDelimited(stream);
					}
					else
					{
						DudExplosive.DeserializeLengthDelimited(stream, instance.dudExplosive, isDelta);
					}
				}
				break;
			case 28u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.miningQuarry == null)
					{
						instance.miningQuarry = MiningQuarry.DeserializeLengthDelimited(stream);
					}
					else
					{
						MiningQuarry.DeserializeLengthDelimited(stream, instance.miningQuarry, isDelta);
					}
				}
				break;
			case 29u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseVehicle == null)
					{
						instance.baseVehicle = BaseVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseVehicle.DeserializeLengthDelimited(stream, instance.baseVehicle, isDelta);
					}
				}
				break;
			case 30u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.helicopter == null)
					{
						instance.helicopter = Helicopter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Helicopter.DeserializeLengthDelimited(stream, instance.helicopter, isDelta);
					}
				}
				break;
			case 31u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.landmine == null)
					{
						instance.landmine = Landmine.DeserializeLengthDelimited(stream);
					}
					else
					{
						Landmine.DeserializeLengthDelimited(stream, instance.landmine, isDelta);
					}
				}
				break;
			case 32u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.autoturret == null)
					{
						instance.autoturret = AutoTurret.DeserializeLengthDelimited(stream);
					}
					else
					{
						AutoTurret.DeserializeLengthDelimited(stream, instance.autoturret, isDelta);
					}
				}
				break;
			case 33u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sphereEntity == null)
					{
						instance.sphereEntity = SphereEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						SphereEntity.DeserializeLengthDelimited(stream, instance.sphereEntity, isDelta);
					}
				}
				break;
			case 34u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.stabilityEntity == null)
					{
						instance.stabilityEntity = StabilityEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						StabilityEntity.DeserializeLengthDelimited(stream, instance.stabilityEntity, isDelta);
					}
				}
				break;
			case 35u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ownerInfo == null)
					{
						instance.ownerInfo = OwnerInfo.DeserializeLengthDelimited(stream);
					}
					else
					{
						OwnerInfo.DeserializeLengthDelimited(stream, instance.ownerInfo, isDelta);
					}
				}
				break;
			case 36u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.decayEntity == null)
					{
						instance.decayEntity = DecayEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						DecayEntity.DeserializeLengthDelimited(stream, instance.decayEntity, isDelta);
					}
				}
				break;
			case 37u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spawnable == null)
					{
						instance.spawnable = Spawnable.DeserializeLengthDelimited(stream);
					}
					else
					{
						Spawnable.DeserializeLengthDelimited(stream, instance.spawnable, isDelta);
					}
				}
				break;
			case 38u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.servergib == null)
					{
						instance.servergib = ServerGib.DeserializeLengthDelimited(stream);
					}
					else
					{
						ServerGib.DeserializeLengthDelimited(stream, instance.servergib, isDelta);
					}
				}
				break;
			case 39u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingMachine == null)
					{
						instance.vendingMachine = VendingMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingMachine.DeserializeLengthDelimited(stream, instance.vendingMachine, isDelta);
					}
				}
				break;
			case 40u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spinnerWheel == null)
					{
						instance.spinnerWheel = SpinnerWheel.DeserializeLengthDelimited(stream);
					}
					else
					{
						SpinnerWheel.DeserializeLengthDelimited(stream, instance.spinnerWheel, isDelta);
					}
				}
				break;
			case 41u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lift == null)
					{
						instance.lift = Lift.DeserializeLengthDelimited(stream);
					}
					else
					{
						Lift.DeserializeLengthDelimited(stream, instance.lift, isDelta);
					}
				}
				break;
			case 42u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.bradley == null)
					{
						instance.bradley = BradleyAPC.DeserializeLengthDelimited(stream);
					}
					else
					{
						BradleyAPC.DeserializeLengthDelimited(stream, instance.bradley, isDelta);
					}
				}
				break;
			case 43u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.waterwell == null)
					{
						instance.waterwell = WaterWell.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaterWell.DeserializeLengthDelimited(stream, instance.waterwell, isDelta);
					}
				}
				break;
			case 44u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.motorBoat == null)
					{
						instance.motorBoat = Motorboat.DeserializeLengthDelimited(stream);
					}
					else
					{
						Motorboat.DeserializeLengthDelimited(stream, instance.motorBoat, isDelta);
					}
				}
				break;
			case 45u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ioEntity == null)
					{
						instance.ioEntity = IOEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						IOEntity.DeserializeLengthDelimited(stream, instance.ioEntity, isDelta);
					}
				}
				break;
			case 46u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.puzzleReset == null)
					{
						instance.puzzleReset = PuzzleReset.DeserializeLengthDelimited(stream);
					}
					else
					{
						PuzzleReset.DeserializeLengthDelimited(stream, instance.puzzleReset, isDelta);
					}
				}
				break;
			case 47u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.relationshipManager == null)
					{
						instance.relationshipManager = RelationshipManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						RelationshipManager.DeserializeLengthDelimited(stream, instance.relationshipManager, isDelta);
					}
				}
				break;
			case 48u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.hotAirBalloon == null)
					{
						instance.hotAirBalloon = HotAirBalloon.DeserializeLengthDelimited(stream);
					}
					else
					{
						HotAirBalloon.DeserializeLengthDelimited(stream, instance.hotAirBalloon, isDelta);
					}
				}
				break;
			case 49u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.samSite == null)
					{
						instance.samSite = SAMSite.DeserializeLengthDelimited(stream);
					}
					else
					{
						SAMSite.DeserializeLengthDelimited(stream, instance.samSite, isDelta);
					}
				}
				break;
			case 50u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.eggHunt == null)
					{
						instance.eggHunt = EggHunt.DeserializeLengthDelimited(stream);
					}
					else
					{
						EggHunt.DeserializeLengthDelimited(stream, instance.eggHunt, isDelta);
					}
				}
				break;
			case 51u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.arcadeMachine == null)
					{
						instance.arcadeMachine = ArcadeMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						ArcadeMachine.DeserializeLengthDelimited(stream, instance.arcadeMachine, isDelta);
					}
				}
				break;
			case 52u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.miniCopter == null)
					{
						instance.miniCopter = Minicopter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Minicopter.DeserializeLengthDelimited(stream, instance.miniCopter, isDelta);
					}
				}
				break;
			case 53u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.horse == null)
					{
						instance.horse = Horse.DeserializeLengthDelimited(stream);
					}
					else
					{
						Horse.DeserializeLengthDelimited(stream, instance.horse, isDelta);
					}
				}
				break;
			case 54u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.smartAlarm == null)
					{
						instance.smartAlarm = SmartAlarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						SmartAlarm.DeserializeLengthDelimited(stream, instance.smartAlarm, isDelta);
					}
				}
				break;
			case 55u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lightString == null)
					{
						instance.lightString = LightString.DeserializeLengthDelimited(stream);
					}
					else
					{
						LightString.DeserializeLengthDelimited(stream, instance.lightString, isDelta);
					}
				}
				break;
			case 56u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.lightDeployer == null)
					{
						instance.lightDeployer = LightDeployer.DeserializeLengthDelimited(stream);
					}
					else
					{
						LightDeployer.DeserializeLengthDelimited(stream, instance.lightDeployer, isDelta);
					}
				}
				break;
			case 57u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.rcEntity == null)
					{
						instance.rcEntity = RCEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						RCEntity.DeserializeLengthDelimited(stream, instance.rcEntity, isDelta);
					}
				}
				break;
			case 58u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.computerStation == null)
					{
						instance.computerStation = ComputerStation.DeserializeLengthDelimited(stream);
					}
					else
					{
						ComputerStation.DeserializeLengthDelimited(stream, instance.computerStation, isDelta);
					}
				}
				break;
			case 59u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.growableEntity == null)
					{
						instance.growableEntity = GrowableEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						GrowableEntity.DeserializeLengthDelimited(stream, instance.growableEntity, isDelta);
					}
				}
				break;
			case 60u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.composter == null)
					{
						instance.composter = Composter.DeserializeLengthDelimited(stream);
					}
					else
					{
						Composter.DeserializeLengthDelimited(stream, instance.composter, isDelta);
					}
				}
				break;
			case 61u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.modularVehicle == null)
					{
						instance.modularVehicle = ModularVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						ModularVehicle.DeserializeLengthDelimited(stream, instance.modularVehicle, isDelta);
					}
				}
				break;
			case 62u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.modularCar == null)
					{
						instance.modularCar = ModularCar.DeserializeLengthDelimited(stream);
					}
					else
					{
						ModularCar.DeserializeLengthDelimited(stream, instance.modularCar, isDelta);
					}
				}
				break;
			case 63u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleUID == null)
					{
						instance.simpleUID = SimpleUID.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleUID.DeserializeLengthDelimited(stream, instance.simpleUID, isDelta);
					}
				}
				break;
			case 64u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleLift == null)
					{
						instance.vehicleLift = VehicleLift.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleLift.DeserializeLengthDelimited(stream, instance.vehicleLift, isDelta);
					}
				}
				break;
			case 65u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.engineStorage == null)
					{
						instance.engineStorage = EngineStorage.DeserializeLengthDelimited(stream);
					}
					else
					{
						EngineStorage.DeserializeLengthDelimited(stream, instance.engineStorage, isDelta);
					}
				}
				break;
			case 66u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleVendor == null)
					{
						instance.vehicleVendor = VehicleVendor.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleVendor.DeserializeLengthDelimited(stream, instance.vehicleVendor, isDelta);
					}
				}
				break;
			case 67u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.WaterPool == null)
					{
						instance.WaterPool = WaterPool.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaterPool.DeserializeLengthDelimited(stream, instance.WaterPool, isDelta);
					}
				}
				break;
			case 68u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.photo == null)
					{
						instance.photo = Photo.DeserializeLengthDelimited(stream);
					}
					else
					{
						Photo.DeserializeLengthDelimited(stream, instance.photo, isDelta);
					}
				}
				break;
			case 69u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.photoFrame == null)
					{
						instance.photoFrame = PhotoFrame.DeserializeLengthDelimited(stream);
					}
					else
					{
						PhotoFrame.DeserializeLengthDelimited(stream, instance.photoFrame, isDelta);
					}
				}
				break;
			case 70u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vehicleModule == null)
					{
						instance.vehicleModule = VehicleModule.DeserializeLengthDelimited(stream);
					}
					else
					{
						VehicleModule.DeserializeLengthDelimited(stream, instance.vehicleModule, isDelta);
					}
				}
				break;
			case 71u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mixingTable == null)
					{
						instance.mixingTable = MixingTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						MixingTable.DeserializeLengthDelimited(stream, instance.mixingTable, isDelta);
					}
				}
				break;
			case 72u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.shopKeeper == null)
					{
						instance.shopKeeper = ShopKeeper.DeserializeLengthDelimited(stream);
					}
					else
					{
						ShopKeeper.DeserializeLengthDelimited(stream, instance.shopKeeper, isDelta);
					}
				}
				break;
			case 73u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.elevator == null)
					{
						instance.elevator = Elevator.DeserializeLengthDelimited(stream);
					}
					else
					{
						Elevator.DeserializeLengthDelimited(stream, instance.elevator, isDelta);
					}
				}
				break;
			case 74u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.skullTrophy == null)
					{
						instance.skullTrophy = SkullTrophy.DeserializeLengthDelimited(stream);
					}
					else
					{
						SkullTrophy.DeserializeLengthDelimited(stream, instance.skullTrophy, isDelta);
					}
				}
				break;
			case 75u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cassette == null)
					{
						instance.cassette = Cassette.DeserializeLengthDelimited(stream);
					}
					else
					{
						Cassette.DeserializeLengthDelimited(stream, instance.cassette, isDelta);
					}
				}
				break;
			case 76u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.telephone == null)
					{
						instance.telephone = Telephone.DeserializeLengthDelimited(stream);
					}
					else
					{
						Telephone.DeserializeLengthDelimited(stream, instance.telephone, isDelta);
					}
				}
				break;
			case 77u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.boomBox == null)
					{
						instance.boomBox = BoomBox.DeserializeLengthDelimited(stream);
					}
					else
					{
						BoomBox.DeserializeLengthDelimited(stream, instance.boomBox, isDelta);
					}
				}
				break;
			case 78u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.neonSign == null)
					{
						instance.neonSign = NeonSign.DeserializeLengthDelimited(stream);
					}
					else
					{
						NeonSign.DeserializeLengthDelimited(stream, instance.neonSign, isDelta);
					}
				}
				break;
			case 79u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.subEntityList == null)
					{
						instance.subEntityList = SubEntityList.DeserializeLengthDelimited(stream);
					}
					else
					{
						SubEntityList.DeserializeLengthDelimited(stream, instance.subEntityList, isDelta);
					}
				}
				break;
			case 80u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.marketTerminal == null)
					{
						instance.marketTerminal = MarketTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						MarketTerminal.DeserializeLengthDelimited(stream, instance.marketTerminal, isDelta);
					}
				}
				break;
			case 81u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.deliveryDrone == null)
					{
						instance.deliveryDrone = DeliveryDrone.DeserializeLengthDelimited(stream);
					}
					else
					{
						DeliveryDrone.DeserializeLengthDelimited(stream, instance.deliveryDrone, isDelta);
					}
				}
				break;
			case 82u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.reclaimTerminal == null)
					{
						instance.reclaimTerminal = ReclaimTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						ReclaimTerminal.DeserializeLengthDelimited(stream, instance.reclaimTerminal, isDelta);
					}
				}
				break;
			case 83u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.slotMachine == null)
					{
						instance.slotMachine = SlotMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						SlotMachine.DeserializeLengthDelimited(stream, instance.slotMachine, isDelta);
					}
				}
				break;
			case 84u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.trainEngine == null)
					{
						instance.trainEngine = TrainEngine.DeserializeLengthDelimited(stream);
					}
					else
					{
						TrainEngine.DeserializeLengthDelimited(stream, instance.trainEngine, isDelta);
					}
				}
				break;
			case 85u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cardGame == null)
					{
						instance.cardGame = CardGame.DeserializeLengthDelimited(stream);
					}
					else
					{
						CardGame.DeserializeLengthDelimited(stream, instance.cardGame, isDelta);
					}
				}
				break;
			case 86u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.crane == null)
					{
						instance.crane = Crane.DeserializeLengthDelimited(stream);
					}
					else
					{
						Crane.DeserializeLengthDelimited(stream, instance.crane, isDelta);
					}
				}
				break;
			case 87u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.connectedSpeaker == null)
					{
						instance.connectedSpeaker = ConnectedSpeaker.DeserializeLengthDelimited(stream);
					}
					else
					{
						ConnectedSpeaker.DeserializeLengthDelimited(stream, instance.connectedSpeaker, isDelta);
					}
				}
				break;
			case 88u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.audioEntity == null)
					{
						instance.audioEntity = AudioEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						AudioEntity.DeserializeLengthDelimited(stream, instance.audioEntity, isDelta);
					}
				}
				break;
			case 89u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.microphoneStand == null)
					{
						instance.microphoneStand = MicrophoneStand.DeserializeLengthDelimited(stream);
					}
					else
					{
						MicrophoneStand.DeserializeLengthDelimited(stream, instance.microphoneStand, isDelta);
					}
				}
				break;
			case 90u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.submarine == null)
					{
						instance.submarine = Submarine.DeserializeLengthDelimited(stream);
					}
					else
					{
						Submarine.DeserializeLengthDelimited(stream, instance.submarine, isDelta);
					}
				}
				break;
			case 91u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sleepingBagCamper == null)
					{
						instance.sleepingBagCamper = SleepingBagCamper.DeserializeLengthDelimited(stream);
					}
					else
					{
						SleepingBagCamper.DeserializeLengthDelimited(stream, instance.sleepingBagCamper, isDelta);
					}
				}
				break;
			case 92u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.camperModule == null)
					{
						instance.camperModule = CamperModule.DeserializeLengthDelimited(stream);
					}
					else
					{
						CamperModule.DeserializeLengthDelimited(stream, instance.camperModule, isDelta);
					}
				}
				break;
			case 93u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.paintableSign == null)
					{
						instance.paintableSign = PaintableSign.DeserializeLengthDelimited(stream);
					}
					else
					{
						PaintableSign.DeserializeLengthDelimited(stream, instance.paintableSign, isDelta);
					}
				}
				break;
			case 94u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.whitelist == null)
					{
						instance.whitelist = Whitelist.DeserializeLengthDelimited(stream);
					}
					else
					{
						Whitelist.DeserializeLengthDelimited(stream, instance.whitelist, isDelta);
					}
				}
				break;
			case 95u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.FrankensteinTable == null)
					{
						instance.FrankensteinTable = FrankensteinTable.DeserializeLengthDelimited(stream);
					}
					else
					{
						FrankensteinTable.DeserializeLengthDelimited(stream, instance.FrankensteinTable, isDelta);
					}
				}
				break;
			case 96u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mlrs == null)
					{
						instance.mlrs = MLRS.DeserializeLengthDelimited(stream);
					}
					else
					{
						MLRS.DeserializeLengthDelimited(stream, instance.mlrs, isDelta);
					}
				}
				break;
			case 97u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.reclaimManager == null)
					{
						instance.reclaimManager = ReclaimManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						ReclaimManager.DeserializeLengthDelimited(stream, instance.reclaimManager, isDelta);
					}
				}
				break;
			case 98u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.gameMode == null)
					{
						instance.gameMode = GameMode.DeserializeLengthDelimited(stream);
					}
					else
					{
						GameMode.DeserializeLengthDelimited(stream, instance.gameMode, isDelta);
					}
				}
				break;
			case 99u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.snowmobile == null)
					{
						instance.snowmobile = Snowmobile.DeserializeLengthDelimited(stream);
					}
					else
					{
						Snowmobile.DeserializeLengthDelimited(stream, instance.snowmobile, isDelta);
					}
				}
				break;
			case 100u:
				if (key.WireType == Wire.Varint)
				{
					instance.createdThisFrame = ProtocolParser.ReadBool(stream);
				}
				break;
			case 101u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.patternFirework == null)
					{
						instance.patternFirework = PatternFirework.DeserializeLengthDelimited(stream);
					}
					else
					{
						PatternFirework.DeserializeLengthDelimited(stream, instance.patternFirework, isDelta);
					}
				}
				break;
			case 102u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoPlane == null)
					{
						instance.cargoPlane = CargoPlane.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoPlane.DeserializeLengthDelimited(stream, instance.cargoPlane, isDelta);
					}
				}
				break;
			case 103u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.paintedItem == null)
					{
						instance.paintedItem = PaintedItem.DeserializeLengthDelimited(stream);
					}
					else
					{
						PaintedItem.DeserializeLengthDelimited(stream, instance.paintedItem, isDelta);
					}
				}
				break;
			case 104u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.clanManager == null)
					{
						instance.clanManager = ClanManager.DeserializeLengthDelimited(stream);
					}
					else
					{
						ClanManager.DeserializeLengthDelimited(stream, instance.clanManager, isDelta);
					}
				}
				break;
			case 105u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.spray == null)
					{
						instance.spray = Spray.DeserializeLengthDelimited(stream);
					}
					else
					{
						Spray.DeserializeLengthDelimited(stream, instance.spray, isDelta);
					}
				}
				break;
			case 106u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseTrain == null)
					{
						instance.baseTrain = BaseTrain.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseTrain.DeserializeLengthDelimited(stream, instance.baseTrain, isDelta);
					}
				}
				break;
			case 107u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.zipline == null)
					{
						instance.zipline = Zipline.DeserializeLengthDelimited(stream);
					}
					else
					{
						Zipline.DeserializeLengthDelimited(stream, instance.zipline, isDelta);
					}
				}
				break;
			case 108u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ziplineMountable == null)
					{
						instance.ziplineMountable = ZiplineMountable.DeserializeLengthDelimited(stream);
					}
					else
					{
						ZiplineMountable.DeserializeLengthDelimited(stream, instance.ziplineMountable, isDelta);
					}
				}
				break;
			case 109u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ZiplineArrival == null)
					{
						instance.ZiplineArrival = ZiplineArrivalPoint.DeserializeLengthDelimited(stream);
					}
					else
					{
						ZiplineArrivalPoint.DeserializeLengthDelimited(stream, instance.ZiplineArrival, isDelta);
					}
				}
				break;
			case 110u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.sprayLine == null)
					{
						instance.sprayLine = SprayLine.DeserializeLengthDelimited(stream);
					}
					else
					{
						SprayLine.DeserializeLengthDelimited(stream, instance.sprayLine, isDelta);
					}
				}
				break;
			case 111u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.coalingTower == null)
					{
						instance.coalingTower = CoalingTower.DeserializeLengthDelimited(stream);
					}
					else
					{
						CoalingTower.DeserializeLengthDelimited(stream, instance.coalingTower, isDelta);
					}
				}
				break;
			case 112u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleInt == null)
					{
						instance.simpleInt = SimpleInt.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleInt.DeserializeLengthDelimited(stream, instance.simpleInt, isDelta);
					}
				}
				break;
			case 113u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseOven == null)
					{
						instance.baseOven = BaseOven.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseOven.DeserializeLengthDelimited(stream, instance.baseOven, isDelta);
					}
				}
				break;
			case 114u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.brainComponent == null)
					{
						instance.brainComponent = BrainComponent.DeserializeLengthDelimited(stream);
					}
					else
					{
						BrainComponent.DeserializeLengthDelimited(stream, instance.brainComponent, isDelta);
					}
				}
				break;
			case 115u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.proceduralDungeon == null)
					{
						instance.proceduralDungeon = ProceduralDungeon.DeserializeLengthDelimited(stream);
					}
					else
					{
						ProceduralDungeon.DeserializeLengthDelimited(stream, instance.proceduralDungeon, isDelta);
					}
				}
				break;
			case 116u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.industrialConveyor == null)
					{
						instance.industrialConveyor = IndustrialConveyor.DeserializeLengthDelimited(stream);
					}
					else
					{
						IndustrialConveyor.DeserializeLengthDelimited(stream, instance.industrialConveyor, isDelta);
					}
				}
				break;
			case 117u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.industrialCrafter == null)
					{
						instance.industrialCrafter = IndustrialCrafter.DeserializeLengthDelimited(stream);
					}
					else
					{
						IndustrialCrafter.DeserializeLengthDelimited(stream, instance.industrialCrafter, isDelta);
					}
				}
				break;
			case 118u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.drone == null)
					{
						instance.drone = Drone.DeserializeLengthDelimited(stream);
					}
					else
					{
						Drone.DeserializeLengthDelimited(stream, instance.drone, isDelta);
					}
				}
				break;
			case 119u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.explosive == null)
					{
						instance.explosive = TimedExplosive.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimedExplosive.DeserializeLengthDelimited(stream, instance.explosive, isDelta);
					}
				}
				break;
			case 120u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.simpleUint == null)
					{
						instance.simpleUint = SimpleUInt.DeserializeLengthDelimited(stream);
					}
					else
					{
						SimpleUInt.DeserializeLengthDelimited(stream, instance.simpleUint, isDelta);
					}
				}
				break;
			case 121u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.weaponRack == null)
					{
						instance.weaponRack = WeaponRack.DeserializeLengthDelimited(stream);
					}
					else
					{
						WeaponRack.DeserializeLengthDelimited(stream, instance.weaponRack, isDelta);
					}
				}
				break;
			case 122u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeli == null)
					{
						instance.attackHeli = AttackHeli.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeli.DeserializeLengthDelimited(stream, instance.attackHeli, isDelta);
					}
				}
				break;
			case 123u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeliTurret == null)
					{
						instance.attackHeliTurret = AttackHeliTurret.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeliTurret.DeserializeLengthDelimited(stream, instance.attackHeliTurret, isDelta);
					}
				}
				break;
			case 124u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.attackHeliRockets == null)
					{
						instance.attackHeliRockets = AttackHeliRockets.DeserializeLengthDelimited(stream);
					}
					else
					{
						AttackHeliRockets.DeserializeLengthDelimited(stream, instance.attackHeliRockets, isDelta);
					}
				}
				break;
			case 125u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseBoat == null)
					{
						instance.baseBoat = BaseBoat.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseBoat.DeserializeLengthDelimited(stream, instance.baseBoat, isDelta);
					}
				}
				break;
			case 126u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ragdoll == null)
					{
						instance.ragdoll = Ragdoll.DeserializeLengthDelimited(stream);
					}
					else
					{
						Ragdoll.DeserializeLengthDelimited(stream, instance.ragdoll, isDelta);
					}
				}
				break;
			case 127u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.dieselEngine == null)
					{
						instance.dieselEngine = DieselEngine.DeserializeLengthDelimited(stream);
					}
					else
					{
						DieselEngine.DeserializeLengthDelimited(stream, instance.dieselEngine, isDelta);
					}
				}
				break;
			case 150u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.associatedFiles == null)
					{
						instance.associatedFiles = AssociatedFiles.DeserializeLengthDelimited(stream);
					}
					else
					{
						AssociatedFiles.DeserializeLengthDelimited(stream, instance.associatedFiles, isDelta);
					}
				}
				break;
			case 151u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusFerry == null)
					{
						instance.nexusFerry = NexusFerry.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusFerry.DeserializeLengthDelimited(stream, instance.nexusFerry, isDelta);
					}
				}
				break;
			case 152u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusIsland == null)
					{
						instance.nexusIsland = NexusIsland.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusIsland.DeserializeLengthDelimited(stream, instance.nexusIsland, isDelta);
					}
				}
				break;
			case 153u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.nexusDockTerminal == null)
					{
						instance.nexusDockTerminal = NexusDockTerminal.DeserializeLengthDelimited(stream);
					}
					else
					{
						NexusDockTerminal.DeserializeLengthDelimited(stream, instance.nexusDockTerminal, isDelta);
					}
				}
				break;
			case 154u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.rockingChair == null)
					{
						instance.rockingChair = RockingChair.DeserializeLengthDelimited(stream);
					}
					else
					{
						RockingChair.DeserializeLengthDelimited(stream, instance.rockingChair, isDelta);
					}
				}
				break;
			case 155u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.headData == null)
					{
						instance.headData = HeadData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HeadData.DeserializeLengthDelimited(stream, instance.headData, isDelta);
					}
				}
				break;
			case 156u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.wantedPoster == null)
					{
						instance.wantedPoster = WantedPoster.DeserializeLengthDelimited(stream);
					}
					else
					{
						WantedPoster.DeserializeLengthDelimited(stream, instance.wantedPoster, isDelta);
					}
				}
				break;
			case 158u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.waypointRace == null)
					{
						instance.waypointRace = WaypointRace.DeserializeLengthDelimited(stream);
					}
					else
					{
						WaypointRace.DeserializeLengthDelimited(stream, instance.waypointRace, isDelta);
					}
				}
				break;
			case 159u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.legacyShelter == null)
					{
						instance.legacyShelter = LegacyShelter.DeserializeLengthDelimited(stream);
					}
					else
					{
						LegacyShelter.DeserializeLengthDelimited(stream, instance.legacyShelter, isDelta);
					}
				}
				break;
			case 160u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.metalDetectorSource == null)
					{
						instance.metalDetectorSource = MetalDetectorSource.DeserializeLengthDelimited(stream);
					}
					else
					{
						MetalDetectorSource.DeserializeLengthDelimited(stream, instance.metalDetectorSource, isDelta);
					}
				}
				break;
			case 161u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tutorialIsland == null)
					{
						instance.tutorialIsland = TutorialIsland.DeserializeLengthDelimited(stream);
					}
					else
					{
						TutorialIsland.DeserializeLengthDelimited(stream, instance.tutorialIsland, isDelta);
					}
				}
				break;
			case 162u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cinematicEntity == null)
					{
						instance.cinematicEntity = CinematicEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						CinematicEntity.DeserializeLengthDelimited(stream, instance.cinematicEntity, isDelta);
					}
				}
				break;
			case 163u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.buildingPrivilegeRetro == null)
					{
						instance.buildingPrivilegeRetro = BuildingPrivilegeRetro.DeserializeLengthDelimited(stream);
					}
					else
					{
						BuildingPrivilegeRetro.DeserializeLengthDelimited(stream, instance.buildingPrivilegeRetro, isDelta);
					}
				}
				break;
			case 164u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.harborCrane == null)
					{
						instance.harborCrane = HarborCrane.DeserializeLengthDelimited(stream);
					}
					else
					{
						HarborCrane.DeserializeLengthDelimited(stream, instance.harborCrane, isDelta);
					}
				}
				break;
			case 165u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoShip == null)
					{
						instance.cargoShip = CargoShip.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoShip.DeserializeLengthDelimited(stream, instance.cargoShip, isDelta);
					}
				}
				break;
			case 166u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.cargoShipContainer == null)
					{
						instance.cargoShipContainer = CargoShipContainer.DeserializeLengthDelimited(stream);
					}
					else
					{
						CargoShipContainer.DeserializeLengthDelimited(stream, instance.cargoShipContainer, isDelta);
					}
				}
				break;
			case 167u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.missionMapMarker == null)
					{
						instance.missionMapMarker = MissionMapMarker.DeserializeLengthDelimited(stream);
					}
					else
					{
						MissionMapMarker.DeserializeLengthDelimited(stream, instance.missionMapMarker, isDelta);
					}
				}
				break;
			case 168u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.bike == null)
					{
						instance.bike = Bike.DeserializeLengthDelimited(stream);
					}
					else
					{
						Bike.DeserializeLengthDelimited(stream, instance.bike, isDelta);
					}
				}
				break;
			case 169u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.diverPropulsionVehicle == null)
					{
						instance.diverPropulsionVehicle = DiverPropulsionVehicle.DeserializeLengthDelimited(stream);
					}
					else
					{
						DiverPropulsionVehicle.DeserializeLengthDelimited(stream, instance.diverPropulsionVehicle, isDelta);
					}
				}
				break;
			case 174u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.travellingVendor == null)
					{
						instance.travellingVendor = TravellingVendor.DeserializeLengthDelimited(stream);
					}
					else
					{
						TravellingVendor.DeserializeLengthDelimited(stream, instance.travellingVendor, isDelta);
					}
				}
				break;
			case 175u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingDynamicPricing == null)
					{
						instance.vendingDynamicPricing = VendingDynamicPricing.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingDynamicPricing.DeserializeLengthDelimited(stream, instance.vendingDynamicPricing, isDelta);
					}
				}
				break;
			case 176u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tinCanAlarm == null)
					{
						instance.tinCanAlarm = TinCanAlarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						TinCanAlarm.DeserializeLengthDelimited(stream, instance.tinCanAlarm, isDelta);
					}
				}
				break;
			case 177u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.digitalClock == null)
					{
						instance.digitalClock = DigitalClock.DeserializeLengthDelimited(stream);
					}
					else
					{
						DigitalClock.DeserializeLengthDelimited(stream, instance.digitalClock, isDelta);
					}
				}
				break;
			case 178u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.elevatorLift == null)
					{
						instance.elevatorLift = ElevatorLift.DeserializeLengthDelimited(stream);
					}
					else
					{
						ElevatorLift.DeserializeLengthDelimited(stream, instance.elevatorLift, isDelta);
					}
				}
				break;
			case 179u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.npcVendingMachine == null)
					{
						instance.npcVendingMachine = NPCVendingMachine.DeserializeLengthDelimited(stream);
					}
					else
					{
						NPCVendingMachine.DeserializeLengthDelimited(stream, instance.npcVendingMachine, isDelta);
					}
				}
				break;
			case 180u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.mailbox == null)
					{
						instance.mailbox = Mailbox.DeserializeLengthDelimited(stream);
					}
					else
					{
						Mailbox.DeserializeLengthDelimited(stream, instance.mailbox, isDelta);
					}
				}
				break;
			case 181u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.projectileWeaponMod == null)
					{
						instance.projectileWeaponMod = GunWeaponMod.DeserializeLengthDelimited(stream);
					}
					else
					{
						GunWeaponMod.DeserializeLengthDelimited(stream, instance.projectileWeaponMod, isDelta);
					}
				}
				break;
			case 182u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.baseSculpture == null)
					{
						instance.baseSculpture = BaseSculpture.DeserializeLengthDelimited(stream);
					}
					else
					{
						BaseSculpture.DeserializeLengthDelimited(stream, instance.baseSculpture, isDelta);
					}
				}
				break;
			case 183u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vendingMachineStats == null)
					{
						instance.vendingMachineStats = VendingMachineStats.DeserializeLengthDelimited(stream);
					}
					else
					{
						VendingMachineStats.DeserializeLengthDelimited(stream, instance.vendingMachineStats, isDelta);
					}
				}
				break;
			case 184u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.catapult == null)
					{
						instance.catapult = Catapult.DeserializeLengthDelimited(stream);
					}
					else
					{
						Catapult.DeserializeLengthDelimited(stream, instance.catapult, isDelta);
					}
				}
				break;
			case 185u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.siegeTower == null)
					{
						instance.siegeTower = SiegeTower.DeserializeLengthDelimited(stream);
					}
					else
					{
						SiegeTower.DeserializeLengthDelimited(stream, instance.siegeTower, isDelta);
					}
				}
				break;
			case 186u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ballista == null)
					{
						instance.ballista = Ballista.DeserializeLengthDelimited(stream);
					}
					else
					{
						Ballista.DeserializeLengthDelimited(stream, instance.ballista, isDelta);
					}
				}
				break;
			case 187u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ballistaGun == null)
					{
						instance.ballistaGun = BallistaGun.DeserializeLengthDelimited(stream);
					}
					else
					{
						BallistaGun.DeserializeLengthDelimited(stream, instance.ballistaGun, isDelta);
					}
				}
				break;
			case 188u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.batteringRam == null)
					{
						instance.batteringRam = BatteringRam.DeserializeLengthDelimited(stream);
					}
					else
					{
						BatteringRam.DeserializeLengthDelimited(stream, instance.batteringRam, isDelta);
					}
				}
				break;
			case 189u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.temporaryRagdoll == null)
					{
						instance.temporaryRagdoll = TemporaryRagdoll.DeserializeLengthDelimited(stream);
					}
					else
					{
						TemporaryRagdoll.DeserializeLengthDelimited(stream, instance.temporaryRagdoll, isDelta);
					}
				}
				break;
			case 191u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.constructableEntity == null)
					{
						instance.constructableEntity = ConstructableEntity.DeserializeLengthDelimited(stream);
					}
					else
					{
						ConstructableEntity.DeserializeLengthDelimited(stream, instance.constructableEntity, isDelta);
					}
				}
				break;
			case 192u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.chickenCoop == null)
					{
						instance.chickenCoop = ChickenCoop.DeserializeLengthDelimited(stream);
					}
					else
					{
						ChickenCoop.DeserializeLengthDelimited(stream, instance.chickenCoop, isDelta);
					}
				}
				break;
			case 193u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.farmableAnimal == null)
					{
						instance.farmableAnimal = FarmableAnimal.DeserializeLengthDelimited(stream);
					}
					else
					{
						FarmableAnimal.DeserializeLengthDelimited(stream, instance.farmableAnimal, isDelta);
					}
				}
				break;
			case 194u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ownership == null)
					{
						instance.ownership = ItemOwnershipAmount.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemOwnershipAmount.DeserializeLengthDelimited(stream, instance.ownership, isDelta);
					}
				}
				break;
			case 195u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.beehive == null)
					{
						instance.beehive = Beehive.DeserializeLengthDelimited(stream);
					}
					else
					{
						Beehive.DeserializeLengthDelimited(stream, instance.beehive, isDelta);
					}
				}
				break;
			case 196u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.beeMasterSwarm == null)
					{
						instance.beeMasterSwarm = BeeMasterSwarm.DeserializeLengthDelimited(stream);
					}
					else
					{
						BeeMasterSwarm.DeserializeLengthDelimited(stream, instance.beeMasterSwarm, isDelta);
					}
				}
				break;
			case 197u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.containerCorpse == null)
					{
						instance.containerCorpse = ContainerCorpseData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ContainerCorpseData.DeserializeLengthDelimited(stream, instance.containerCorpse, isDelta);
					}
				}
				break;
			case 198u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.npcSensesState == null)
					{
						instance.npcSensesState = NPCSensesState.DeserializeLengthDelimited(stream);
					}
					else
					{
						NPCSensesState.DeserializeLengthDelimited(stream, instance.npcSensesState, isDelta);
					}
				}
				break;
			case 199u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vineMountable == null)
					{
						instance.vineMountable = VineMountable.DeserializeLengthDelimited(stream);
					}
					else
					{
						VineMountable.DeserializeLengthDelimited(stream, instance.vineMountable, isDelta);
					}
				}
				break;
			case 200u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.vineTree == null)
					{
						instance.vineTree = VineTree.DeserializeLengthDelimited(stream);
					}
					else
					{
						VineTree.DeserializeLengthDelimited(stream, instance.vineTree, isDelta);
					}
				}
				break;
			case 201u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.treeRespawn == null)
					{
						instance.treeRespawn = TreeRespawn.DeserializeLengthDelimited(stream);
					}
					else
					{
						TreeRespawn.DeserializeLengthDelimited(stream, instance.treeRespawn, isDelta);
					}
				}
				break;
			case 202u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.wallpaperTool == null)
					{
						instance.wallpaperTool = WallpaperTool.DeserializeLengthDelimited(stream);
					}
					else
					{
						WallpaperTool.DeserializeLengthDelimited(stream, instance.wallpaperTool, isDelta);
					}
				}
				break;
			case 203u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.commandBlock == null)
					{
						instance.commandBlock = CommandBlock.DeserializeLengthDelimited(stream);
					}
					else
					{
						CommandBlock.DeserializeLengthDelimited(stream, instance.commandBlock, isDelta);
					}
				}
				break;
			case 204u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.staticRespawn == null)
					{
						instance.staticRespawn = StaticRespawnAreaData.DeserializeLengthDelimited(stream);
					}
					else
					{
						StaticRespawnAreaData.DeserializeLengthDelimited(stream, instance.staticRespawn, isDelta);
					}
				}
				break;
			case 205u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.buriedItemStorage == null)
					{
						instance.buriedItemStorage = BuriedItems.DeserializeLengthDelimited(stream);
					}
					else
					{
						BuriedItems.DeserializeLengthDelimited(stream, instance.buriedItemStorage, isDelta);
					}
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Entity instance, Entity previous)
	{
		if (instance.baseNetworkable != null)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			BaseNetworkable.SerializeDelta(stream, instance.baseNetworkable, previous.baseNetworkable);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseNetworkable (ProtoBuf.BaseNetworkable)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.baseEntity != null)
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(5);
			int position2 = stream.Position;
			BaseEntity.SerializeDelta(stream, instance.baseEntity, previous.baseEntity);
			int val = stream.Position - position2;
			Span<byte> span2 = range2.GetSpan();
			int num2 = ProtocolParser.WriteUInt32((uint)val, span2, 0);
			if (num2 < 5)
			{
				span2[num2 - 1] |= 128;
				while (num2 < 4)
				{
					span2[num2++] = 128;
				}
				span2[4] = 0;
			}
		}
		if (instance.basePlayer != null)
		{
			stream.WriteByte(26);
			BufferStream.RangeHandle range3 = stream.GetRange(5);
			int position3 = stream.Position;
			BasePlayer.SerializeDelta(stream, instance.basePlayer, previous.basePlayer);
			int val2 = stream.Position - position3;
			Span<byte> span3 = range3.GetSpan();
			int num3 = ProtocolParser.WriteUInt32((uint)val2, span3, 0);
			if (num3 < 5)
			{
				span3[num3 - 1] |= 128;
				while (num3 < 4)
				{
					span3[num3++] = 128;
				}
				span3[4] = 0;
			}
		}
		if (instance.worldItem != null)
		{
			stream.WriteByte(34);
			BufferStream.RangeHandle range4 = stream.GetRange(5);
			int position4 = stream.Position;
			WorldItem.SerializeDelta(stream, instance.worldItem, previous.worldItem);
			int val3 = stream.Position - position4;
			Span<byte> span4 = range4.GetSpan();
			int num4 = ProtocolParser.WriteUInt32((uint)val3, span4, 0);
			if (num4 < 5)
			{
				span4[num4 - 1] |= 128;
				while (num4 < 4)
				{
					span4[num4++] = 128;
				}
				span4[4] = 0;
			}
		}
		if (instance.resource != null)
		{
			stream.WriteByte(42);
			BufferStream.RangeHandle range5 = stream.GetRange(1);
			int position5 = stream.Position;
			BaseResource.SerializeDelta(stream, instance.resource, previous.resource);
			int num5 = stream.Position - position5;
			if (num5 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field resource (ProtoBuf.BaseResource)");
			}
			Span<byte> span5 = range5.GetSpan();
			ProtocolParser.WriteUInt32((uint)num5, span5, 0);
		}
		if (instance.buildingBlock != null)
		{
			stream.WriteByte(50);
			BufferStream.RangeHandle range6 = stream.GetRange(1);
			int position6 = stream.Position;
			BuildingBlock.SerializeDelta(stream, instance.buildingBlock, previous.buildingBlock);
			int num6 = stream.Position - position6;
			if (num6 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field buildingBlock (ProtoBuf.BuildingBlock)");
			}
			Span<byte> span6 = range6.GetSpan();
			ProtocolParser.WriteUInt32((uint)num6, span6, 0);
		}
		if (instance.environment != null)
		{
			stream.WriteByte(58);
			BufferStream.RangeHandle range7 = stream.GetRange(1);
			int position7 = stream.Position;
			ProtoBuf.Environment.SerializeDelta(stream, instance.environment, previous.environment);
			int num7 = stream.Position - position7;
			if (num7 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field environment (ProtoBuf.Environment)");
			}
			Span<byte> span7 = range7.GetSpan();
			ProtocolParser.WriteUInt32((uint)num7, span7, 0);
		}
		if (instance.corpse != null)
		{
			stream.WriteByte(66);
			BufferStream.RangeHandle range8 = stream.GetRange(1);
			int position8 = stream.Position;
			Corpse.SerializeDelta(stream, instance.corpse, previous.corpse);
			int num8 = stream.Position - position8;
			if (num8 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field corpse (ProtoBuf.Corpse)");
			}
			Span<byte> span8 = range8.GetSpan();
			ProtocolParser.WriteUInt32((uint)num8, span8, 0);
		}
		if (instance.parent != null)
		{
			stream.WriteByte(82);
			BufferStream.RangeHandle range9 = stream.GetRange(1);
			int position9 = stream.Position;
			ParentInfo.SerializeDelta(stream, instance.parent, previous.parent);
			int num9 = stream.Position - position9;
			if (num9 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field parent (ProtoBuf.ParentInfo)");
			}
			Span<byte> span9 = range9.GetSpan();
			ProtocolParser.WriteUInt32((uint)num9, span9, 0);
		}
		if (instance.keyLock != null)
		{
			stream.WriteByte(90);
			BufferStream.RangeHandle range10 = stream.GetRange(1);
			int position10 = stream.Position;
			KeyLock.SerializeDelta(stream, instance.keyLock, previous.keyLock);
			int num10 = stream.Position - position10;
			if (num10 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field keyLock (ProtoBuf.KeyLock)");
			}
			Span<byte> span10 = range10.GetSpan();
			ProtocolParser.WriteUInt32((uint)num10, span10, 0);
		}
		if (instance.codeLock != null)
		{
			stream.WriteByte(98);
			BufferStream.RangeHandle range11 = stream.GetRange(5);
			int position11 = stream.Position;
			CodeLock.SerializeDelta(stream, instance.codeLock, previous.codeLock);
			int val4 = stream.Position - position11;
			Span<byte> span11 = range11.GetSpan();
			int num11 = ProtocolParser.WriteUInt32((uint)val4, span11, 0);
			if (num11 < 5)
			{
				span11[num11 - 1] |= 128;
				while (num11 < 4)
				{
					span11[num11++] = 128;
				}
				span11[4] = 0;
			}
		}
		if (instance.entitySlots != null)
		{
			stream.WriteByte(106);
			BufferStream.RangeHandle range12 = stream.GetRange(1);
			int position12 = stream.Position;
			EntitySlots.SerializeDelta(stream, instance.entitySlots, previous.entitySlots);
			int num12 = stream.Position - position12;
			if (num12 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field entitySlots (ProtoBuf.EntitySlots)");
			}
			Span<byte> span12 = range12.GetSpan();
			ProtocolParser.WriteUInt32((uint)num12, span12, 0);
		}
		if (instance.buildingPrivilege != null)
		{
			stream.WriteByte(114);
			BufferStream.RangeHandle range13 = stream.GetRange(5);
			int position13 = stream.Position;
			BuildingPrivilege.SerializeDelta(stream, instance.buildingPrivilege, previous.buildingPrivilege);
			int val5 = stream.Position - position13;
			Span<byte> span13 = range13.GetSpan();
			int num13 = ProtocolParser.WriteUInt32((uint)val5, span13, 0);
			if (num13 < 5)
			{
				span13[num13 - 1] |= 128;
				while (num13 < 4)
				{
					span13[num13++] = 128;
				}
				span13[4] = 0;
			}
		}
		if (instance.storageBox != null)
		{
			stream.WriteByte(122);
			BufferStream.RangeHandle range14 = stream.GetRange(5);
			int position14 = stream.Position;
			StorageBox.SerializeDelta(stream, instance.storageBox, previous.storageBox);
			int val6 = stream.Position - position14;
			Span<byte> span14 = range14.GetSpan();
			int num14 = ProtocolParser.WriteUInt32((uint)val6, span14, 0);
			if (num14 < 5)
			{
				span14[num14 - 1] |= 128;
				while (num14 < 4)
				{
					span14[num14++] = 128;
				}
				span14[4] = 0;
			}
		}
		if (instance.heldEntity != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(1);
			BufferStream.RangeHandle range15 = stream.GetRange(1);
			int position15 = stream.Position;
			HeldEntity.SerializeDelta(stream, instance.heldEntity, previous.heldEntity);
			int num15 = stream.Position - position15;
			if (num15 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field heldEntity (ProtoBuf.HeldEntity)");
			}
			Span<byte> span15 = range15.GetSpan();
			ProtocolParser.WriteUInt32((uint)num15, span15, 0);
		}
		if (instance.baseProjectile != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(1);
			BufferStream.RangeHandle range16 = stream.GetRange(1);
			int position16 = stream.Position;
			BaseProjectile.SerializeDelta(stream, instance.baseProjectile, previous.baseProjectile);
			int num16 = stream.Position - position16;
			if (num16 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseProjectile (ProtoBuf.BaseProjectile)");
			}
			Span<byte> span16 = range16.GetSpan();
			ProtocolParser.WriteUInt32((uint)num16, span16, 0);
		}
		if (instance.baseNPC != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(1);
			BufferStream.RangeHandle range17 = stream.GetRange(1);
			int position17 = stream.Position;
			BaseNPC.SerializeDelta(stream, instance.baseNPC, previous.baseNPC);
			int num17 = stream.Position - position17;
			if (num17 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseNPC (ProtoBuf.BaseNPC)");
			}
			Span<byte> span17 = range17.GetSpan();
			ProtocolParser.WriteUInt32((uint)num17, span17, 0);
		}
		if (instance.loot != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(1);
			BufferStream.RangeHandle range18 = stream.GetRange(5);
			int position18 = stream.Position;
			Loot.SerializeDelta(stream, instance.loot, previous.loot);
			int val7 = stream.Position - position18;
			Span<byte> span18 = range18.GetSpan();
			int num18 = ProtocolParser.WriteUInt32((uint)val7, span18, 0);
			if (num18 < 5)
			{
				span18[num18 - 1] |= 128;
				while (num18 < 4)
				{
					span18[num18++] = 128;
				}
				span18[4] = 0;
			}
		}
		if (instance.genericSpawner != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(1);
			BufferStream.RangeHandle range19 = stream.GetRange(3);
			int position19 = stream.Position;
			GenericSpawner.SerializeDelta(stream, instance.genericSpawner, previous.genericSpawner);
			int num19 = stream.Position - position19;
			if (num19 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field genericSpawner (ProtoBuf.GenericSpawner)");
			}
			Span<byte> span19 = range19.GetSpan();
			int num20 = ProtocolParser.WriteUInt32((uint)num19, span19, 0);
			if (num20 < 3)
			{
				span19[num20 - 1] |= 128;
				while (num20 < 2)
				{
					span19[num20++] = 128;
				}
				span19[2] = 0;
			}
		}
		if (instance.sleepingBag != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(1);
			BufferStream.RangeHandle range20 = stream.GetRange(5);
			int position20 = stream.Position;
			SleepingBag.SerializeDelta(stream, instance.sleepingBag, previous.sleepingBag);
			int val8 = stream.Position - position20;
			Span<byte> span20 = range20.GetSpan();
			int num21 = ProtocolParser.WriteUInt32((uint)val8, span20, 0);
			if (num21 < 5)
			{
				span20[num21 - 1] |= 128;
				while (num21 < 4)
				{
					span20[num21++] = 128;
				}
				span20[4] = 0;
			}
		}
		if (instance.lootableCorpse != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(1);
			BufferStream.RangeHandle range21 = stream.GetRange(5);
			int position21 = stream.Position;
			LootableCorpse.SerializeDelta(stream, instance.lootableCorpse, previous.lootableCorpse);
			int val9 = stream.Position - position21;
			Span<byte> span21 = range21.GetSpan();
			int num22 = ProtocolParser.WriteUInt32((uint)val9, span21, 0);
			if (num22 < 5)
			{
				span21[num22 - 1] |= 128;
				while (num22 < 4)
				{
					span21[num22++] = 128;
				}
				span21[4] = 0;
			}
		}
		if (instance.sign != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(1);
			BufferStream.RangeHandle range22 = stream.GetRange(3);
			int position22 = stream.Position;
			Sign.SerializeDelta(stream, instance.sign, previous.sign);
			int num23 = stream.Position - position22;
			if (num23 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sign (ProtoBuf.Sign)");
			}
			Span<byte> span22 = range22.GetSpan();
			int num24 = ProtocolParser.WriteUInt32((uint)num23, span22, 0);
			if (num24 < 3)
			{
				span22[num24 - 1] |= 128;
				while (num24 < 2)
				{
					span22[num24++] = 128;
				}
				span22[2] = 0;
			}
		}
		if (instance.baseCombat != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(1);
			BufferStream.RangeHandle range23 = stream.GetRange(1);
			int position23 = stream.Position;
			BaseCombat.SerializeDelta(stream, instance.baseCombat, previous.baseCombat);
			int num25 = stream.Position - position23;
			if (num25 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseCombat (ProtoBuf.BaseCombat)");
			}
			Span<byte> span23 = range23.GetSpan();
			ProtocolParser.WriteUInt32((uint)num25, span23, 0);
		}
		if (instance.mapEntity != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(1);
			BufferStream.RangeHandle range24 = stream.GetRange(3);
			int position24 = stream.Position;
			MapEntity.SerializeDelta(stream, instance.mapEntity, previous.mapEntity);
			int num26 = stream.Position - position24;
			if (num26 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mapEntity (ProtoBuf.MapEntity)");
			}
			Span<byte> span24 = range24.GetSpan();
			int num27 = ProtocolParser.WriteUInt32((uint)num26, span24, 0);
			if (num27 < 3)
			{
				span24[num27 - 1] |= 128;
				while (num27 < 2)
				{
					span24[num27++] = 128;
				}
				span24[2] = 0;
			}
		}
		if (instance.researchTable != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(1);
			BufferStream.RangeHandle range25 = stream.GetRange(1);
			int position25 = stream.Position;
			ResearchTable.SerializeDelta(stream, instance.researchTable, previous.researchTable);
			int num28 = stream.Position - position25;
			if (num28 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field researchTable (ProtoBuf.ResearchTable)");
			}
			Span<byte> span25 = range25.GetSpan();
			ProtocolParser.WriteUInt32((uint)num28, span25, 0);
		}
		if (instance.dudExplosive != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(1);
			BufferStream.RangeHandle range26 = stream.GetRange(1);
			int position26 = stream.Position;
			DudExplosive.SerializeDelta(stream, instance.dudExplosive, previous.dudExplosive);
			int num29 = stream.Position - position26;
			if (num29 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field dudExplosive (ProtoBuf.DudExplosive)");
			}
			Span<byte> span26 = range26.GetSpan();
			ProtocolParser.WriteUInt32((uint)num29, span26, 0);
		}
		if (instance.miningQuarry != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(1);
			BufferStream.RangeHandle range27 = stream.GetRange(5);
			int position27 = stream.Position;
			MiningQuarry.SerializeDelta(stream, instance.miningQuarry, previous.miningQuarry);
			int val10 = stream.Position - position27;
			Span<byte> span27 = range27.GetSpan();
			int num30 = ProtocolParser.WriteUInt32((uint)val10, span27, 0);
			if (num30 < 5)
			{
				span27[num30 - 1] |= 128;
				while (num30 < 4)
				{
					span27[num30++] = 128;
				}
				span27[4] = 0;
			}
		}
		if (instance.baseVehicle != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(1);
			BufferStream.RangeHandle range28 = stream.GetRange(3);
			int position28 = stream.Position;
			BaseVehicle.SerializeDelta(stream, instance.baseVehicle, previous.baseVehicle);
			int num31 = stream.Position - position28;
			if (num31 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseVehicle (ProtoBuf.BaseVehicle)");
			}
			Span<byte> span28 = range28.GetSpan();
			int num32 = ProtocolParser.WriteUInt32((uint)num31, span28, 0);
			if (num32 < 3)
			{
				span28[num32 - 1] |= 128;
				while (num32 < 2)
				{
					span28[num32++] = 128;
				}
				span28[2] = 0;
			}
		}
		if (instance.helicopter != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(1);
			BufferStream.RangeHandle range29 = stream.GetRange(3);
			int position29 = stream.Position;
			Helicopter.SerializeDelta(stream, instance.helicopter, previous.helicopter);
			int num33 = stream.Position - position29;
			if (num33 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field helicopter (ProtoBuf.Helicopter)");
			}
			Span<byte> span29 = range29.GetSpan();
			int num34 = ProtocolParser.WriteUInt32((uint)num33, span29, 0);
			if (num34 < 3)
			{
				span29[num34 - 1] |= 128;
				while (num34 < 2)
				{
					span29[num34++] = 128;
				}
				span29[2] = 0;
			}
		}
		if (instance.landmine != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(1);
			BufferStream.RangeHandle range30 = stream.GetRange(1);
			int position30 = stream.Position;
			Landmine.SerializeDelta(stream, instance.landmine, previous.landmine);
			int num35 = stream.Position - position30;
			if (num35 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field landmine (ProtoBuf.Landmine)");
			}
			Span<byte> span30 = range30.GetSpan();
			ProtocolParser.WriteUInt32((uint)num35, span30, 0);
		}
		if (instance.autoturret != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(2);
			BufferStream.RangeHandle range31 = stream.GetRange(5);
			int position31 = stream.Position;
			AutoTurret.SerializeDelta(stream, instance.autoturret, previous.autoturret);
			int val11 = stream.Position - position31;
			Span<byte> span31 = range31.GetSpan();
			int num36 = ProtocolParser.WriteUInt32((uint)val11, span31, 0);
			if (num36 < 5)
			{
				span31[num36 - 1] |= 128;
				while (num36 < 4)
				{
					span31[num36++] = 128;
				}
				span31[4] = 0;
			}
		}
		if (instance.sphereEntity != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(2);
			BufferStream.RangeHandle range32 = stream.GetRange(1);
			int position32 = stream.Position;
			SphereEntity.SerializeDelta(stream, instance.sphereEntity, previous.sphereEntity);
			int num37 = stream.Position - position32;
			if (num37 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sphereEntity (ProtoBuf.SphereEntity)");
			}
			Span<byte> span32 = range32.GetSpan();
			ProtocolParser.WriteUInt32((uint)num37, span32, 0);
		}
		if (instance.stabilityEntity != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(2);
			BufferStream.RangeHandle range33 = stream.GetRange(1);
			int position33 = stream.Position;
			StabilityEntity.SerializeDelta(stream, instance.stabilityEntity, previous.stabilityEntity);
			int num38 = stream.Position - position33;
			if (num38 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field stabilityEntity (ProtoBuf.StabilityEntity)");
			}
			Span<byte> span33 = range33.GetSpan();
			ProtocolParser.WriteUInt32((uint)num38, span33, 0);
		}
		if (instance.ownerInfo != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(2);
			BufferStream.RangeHandle range34 = stream.GetRange(1);
			int position34 = stream.Position;
			OwnerInfo.SerializeDelta(stream, instance.ownerInfo, previous.ownerInfo);
			int num39 = stream.Position - position34;
			if (num39 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ownerInfo (ProtoBuf.OwnerInfo)");
			}
			Span<byte> span34 = range34.GetSpan();
			ProtocolParser.WriteUInt32((uint)num39, span34, 0);
		}
		if (instance.decayEntity != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(2);
			BufferStream.RangeHandle range35 = stream.GetRange(1);
			int position35 = stream.Position;
			DecayEntity.SerializeDelta(stream, instance.decayEntity, previous.decayEntity);
			int num40 = stream.Position - position35;
			if (num40 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field decayEntity (ProtoBuf.DecayEntity)");
			}
			Span<byte> span35 = range35.GetSpan();
			ProtocolParser.WriteUInt32((uint)num40, span35, 0);
		}
		if (instance.spawnable != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(2);
			BufferStream.RangeHandle range36 = stream.GetRange(1);
			int position36 = stream.Position;
			Spawnable.SerializeDelta(stream, instance.spawnable, previous.spawnable);
			int num41 = stream.Position - position36;
			if (num41 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field spawnable (ProtoBuf.Spawnable)");
			}
			Span<byte> span36 = range36.GetSpan();
			ProtocolParser.WriteUInt32((uint)num41, span36, 0);
		}
		if (instance.servergib != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(2);
			BufferStream.RangeHandle range37 = stream.GetRange(5);
			int position37 = stream.Position;
			ServerGib.SerializeDelta(stream, instance.servergib, previous.servergib);
			int val12 = stream.Position - position37;
			Span<byte> span37 = range37.GetSpan();
			int num42 = ProtocolParser.WriteUInt32((uint)val12, span37, 0);
			if (num42 < 5)
			{
				span37[num42 - 1] |= 128;
				while (num42 < 4)
				{
					span37[num42++] = 128;
				}
				span37[4] = 0;
			}
		}
		if (instance.vendingMachine != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(2);
			BufferStream.RangeHandle range38 = stream.GetRange(5);
			int position38 = stream.Position;
			VendingMachine.SerializeDelta(stream, instance.vendingMachine, previous.vendingMachine);
			int val13 = stream.Position - position38;
			Span<byte> span38 = range38.GetSpan();
			int num43 = ProtocolParser.WriteUInt32((uint)val13, span38, 0);
			if (num43 < 5)
			{
				span38[num43 - 1] |= 128;
				while (num43 < 4)
				{
					span38[num43++] = 128;
				}
				span38[4] = 0;
			}
		}
		if (instance.spinnerWheel != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(2);
			BufferStream.RangeHandle range39 = stream.GetRange(1);
			int position39 = stream.Position;
			SpinnerWheel.SerializeDelta(stream, instance.spinnerWheel, previous.spinnerWheel);
			int num44 = stream.Position - position39;
			if (num44 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field spinnerWheel (ProtoBuf.SpinnerWheel)");
			}
			Span<byte> span39 = range39.GetSpan();
			ProtocolParser.WriteUInt32((uint)num44, span39, 0);
		}
		if (instance.lift != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(2);
			BufferStream.RangeHandle range40 = stream.GetRange(1);
			int position40 = stream.Position;
			Lift.SerializeDelta(stream, instance.lift, previous.lift);
			int num45 = stream.Position - position40;
			if (num45 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lift (ProtoBuf.Lift)");
			}
			Span<byte> span40 = range40.GetSpan();
			ProtocolParser.WriteUInt32((uint)num45, span40, 0);
		}
		if (instance.bradley != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(2);
			BufferStream.RangeHandle range41 = stream.GetRange(2);
			int position41 = stream.Position;
			BradleyAPC.SerializeDelta(stream, instance.bradley, previous.bradley);
			int num46 = stream.Position - position41;
			if (num46 > 16383)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field bradley (ProtoBuf.BradleyAPC)");
			}
			Span<byte> span41 = range41.GetSpan();
			if (ProtocolParser.WriteUInt32((uint)num46, span41, 0) < 2)
			{
				span41[0] |= 128;
				span41[1] = 0;
			}
		}
		if (instance.waterwell != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(2);
			BufferStream.RangeHandle range42 = stream.GetRange(1);
			int position42 = stream.Position;
			WaterWell.SerializeDelta(stream, instance.waterwell, previous.waterwell);
			int num47 = stream.Position - position42;
			if (num47 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field waterwell (ProtoBuf.WaterWell)");
			}
			Span<byte> span42 = range42.GetSpan();
			ProtocolParser.WriteUInt32((uint)num47, span42, 0);
		}
		if (instance.motorBoat != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(2);
			BufferStream.RangeHandle range43 = stream.GetRange(1);
			int position43 = stream.Position;
			Motorboat.SerializeDelta(stream, instance.motorBoat, previous.motorBoat);
			int num48 = stream.Position - position43;
			if (num48 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field motorBoat (ProtoBuf.Motorboat)");
			}
			Span<byte> span43 = range43.GetSpan();
			ProtocolParser.WriteUInt32((uint)num48, span43, 0);
		}
		if (instance.ioEntity != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(2);
			BufferStream.RangeHandle range44 = stream.GetRange(5);
			int position44 = stream.Position;
			IOEntity.SerializeDelta(stream, instance.ioEntity, previous.ioEntity);
			int val14 = stream.Position - position44;
			Span<byte> span44 = range44.GetSpan();
			int num49 = ProtocolParser.WriteUInt32((uint)val14, span44, 0);
			if (num49 < 5)
			{
				span44[num49 - 1] |= 128;
				while (num49 < 4)
				{
					span44[num49++] = 128;
				}
				span44[4] = 0;
			}
		}
		if (instance.puzzleReset != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(2);
			BufferStream.RangeHandle range45 = stream.GetRange(1);
			int position45 = stream.Position;
			PuzzleReset.SerializeDelta(stream, instance.puzzleReset, previous.puzzleReset);
			int num50 = stream.Position - position45;
			if (num50 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field puzzleReset (ProtoBuf.PuzzleReset)");
			}
			Span<byte> span45 = range45.GetSpan();
			ProtocolParser.WriteUInt32((uint)num50, span45, 0);
		}
		if (instance.relationshipManager != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(2);
			BufferStream.RangeHandle range46 = stream.GetRange(5);
			int position46 = stream.Position;
			RelationshipManager.SerializeDelta(stream, instance.relationshipManager, previous.relationshipManager);
			int val15 = stream.Position - position46;
			Span<byte> span46 = range46.GetSpan();
			int num51 = ProtocolParser.WriteUInt32((uint)val15, span46, 0);
			if (num51 < 5)
			{
				span46[num51 - 1] |= 128;
				while (num51 < 4)
				{
					span46[num51++] = 128;
				}
				span46[4] = 0;
			}
		}
		if (instance.hotAirBalloon != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(3);
			BufferStream.RangeHandle range47 = stream.GetRange(1);
			int position47 = stream.Position;
			HotAirBalloon.SerializeDelta(stream, instance.hotAirBalloon, previous.hotAirBalloon);
			int num52 = stream.Position - position47;
			if (num52 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field hotAirBalloon (ProtoBuf.HotAirBalloon)");
			}
			Span<byte> span47 = range47.GetSpan();
			ProtocolParser.WriteUInt32((uint)num52, span47, 0);
		}
		if (instance.samSite != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(3);
			BufferStream.RangeHandle range48 = stream.GetRange(1);
			int position48 = stream.Position;
			SAMSite.SerializeDelta(stream, instance.samSite, previous.samSite);
			int num53 = stream.Position - position48;
			if (num53 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field samSite (ProtoBuf.SAMSite)");
			}
			Span<byte> span48 = range48.GetSpan();
			ProtocolParser.WriteUInt32((uint)num53, span48, 0);
		}
		if (instance.eggHunt != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(3);
			BufferStream.RangeHandle range49 = stream.GetRange(5);
			int position49 = stream.Position;
			EggHunt.SerializeDelta(stream, instance.eggHunt, previous.eggHunt);
			int val16 = stream.Position - position49;
			Span<byte> span49 = range49.GetSpan();
			int num54 = ProtocolParser.WriteUInt32((uint)val16, span49, 0);
			if (num54 < 5)
			{
				span49[num54 - 1] |= 128;
				while (num54 < 4)
				{
					span49[num54++] = 128;
				}
				span49[4] = 0;
			}
		}
		if (instance.arcadeMachine != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(3);
			BufferStream.RangeHandle range50 = stream.GetRange(5);
			int position50 = stream.Position;
			ArcadeMachine.SerializeDelta(stream, instance.arcadeMachine, previous.arcadeMachine);
			int val17 = stream.Position - position50;
			Span<byte> span50 = range50.GetSpan();
			int num55 = ProtocolParser.WriteUInt32((uint)val17, span50, 0);
			if (num55 < 5)
			{
				span50[num55 - 1] |= 128;
				while (num55 < 4)
				{
					span50[num55++] = 128;
				}
				span50[4] = 0;
			}
		}
		if (instance.miniCopter != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(3);
			BufferStream.RangeHandle range51 = stream.GetRange(1);
			int position51 = stream.Position;
			Minicopter.SerializeDelta(stream, instance.miniCopter, previous.miniCopter);
			int num56 = stream.Position - position51;
			if (num56 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field miniCopter (ProtoBuf.Minicopter)");
			}
			Span<byte> span51 = range51.GetSpan();
			ProtocolParser.WriteUInt32((uint)num56, span51, 0);
		}
		if (instance.horse != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(3);
			BufferStream.RangeHandle range52 = stream.GetRange(5);
			int position52 = stream.Position;
			Horse.SerializeDelta(stream, instance.horse, previous.horse);
			int val18 = stream.Position - position52;
			Span<byte> span52 = range52.GetSpan();
			int num57 = ProtocolParser.WriteUInt32((uint)val18, span52, 0);
			if (num57 < 5)
			{
				span52[num57 - 1] |= 128;
				while (num57 < 4)
				{
					span52[num57++] = 128;
				}
				span52[4] = 0;
			}
		}
		if (instance.smartAlarm != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(3);
			BufferStream.RangeHandle range53 = stream.GetRange(5);
			int position53 = stream.Position;
			SmartAlarm.SerializeDelta(stream, instance.smartAlarm, previous.smartAlarm);
			int val19 = stream.Position - position53;
			Span<byte> span53 = range53.GetSpan();
			int num58 = ProtocolParser.WriteUInt32((uint)val19, span53, 0);
			if (num58 < 5)
			{
				span53[num58 - 1] |= 128;
				while (num58 < 4)
				{
					span53[num58++] = 128;
				}
				span53[4] = 0;
			}
		}
		if (instance.lightString != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(3);
			BufferStream.RangeHandle range54 = stream.GetRange(3);
			int position54 = stream.Position;
			LightString.SerializeDelta(stream, instance.lightString, previous.lightString);
			int num59 = stream.Position - position54;
			if (num59 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lightString (ProtoBuf.LightString)");
			}
			Span<byte> span54 = range54.GetSpan();
			int num60 = ProtocolParser.WriteUInt32((uint)num59, span54, 0);
			if (num60 < 3)
			{
				span54[num60 - 1] |= 128;
				while (num60 < 2)
				{
					span54[num60++] = 128;
				}
				span54[2] = 0;
			}
		}
		if (instance.lightDeployer != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(3);
			BufferStream.RangeHandle range55 = stream.GetRange(1);
			int position55 = stream.Position;
			LightDeployer.SerializeDelta(stream, instance.lightDeployer, previous.lightDeployer);
			int num61 = stream.Position - position55;
			if (num61 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lightDeployer (ProtoBuf.LightDeployer)");
			}
			Span<byte> span55 = range55.GetSpan();
			ProtocolParser.WriteUInt32((uint)num61, span55, 0);
		}
		if (instance.rcEntity != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(3);
			BufferStream.RangeHandle range56 = stream.GetRange(5);
			int position56 = stream.Position;
			RCEntity.SerializeDelta(stream, instance.rcEntity, previous.rcEntity);
			int val20 = stream.Position - position56;
			Span<byte> span56 = range56.GetSpan();
			int num62 = ProtocolParser.WriteUInt32((uint)val20, span56, 0);
			if (num62 < 5)
			{
				span56[num62 - 1] |= 128;
				while (num62 < 4)
				{
					span56[num62++] = 128;
				}
				span56[4] = 0;
			}
		}
		if (instance.computerStation != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(3);
			BufferStream.RangeHandle range57 = stream.GetRange(5);
			int position57 = stream.Position;
			ComputerStation.SerializeDelta(stream, instance.computerStation, previous.computerStation);
			int val21 = stream.Position - position57;
			Span<byte> span57 = range57.GetSpan();
			int num63 = ProtocolParser.WriteUInt32((uint)val21, span57, 0);
			if (num63 < 5)
			{
				span57[num63 - 1] |= 128;
				while (num63 < 4)
				{
					span57[num63++] = 128;
				}
				span57[4] = 0;
			}
		}
		if (instance.growableEntity != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(3);
			BufferStream.RangeHandle range58 = stream.GetRange(1);
			int position58 = stream.Position;
			GrowableEntity.SerializeDelta(stream, instance.growableEntity, previous.growableEntity);
			int num64 = stream.Position - position58;
			if (num64 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field growableEntity (ProtoBuf.GrowableEntity)");
			}
			Span<byte> span58 = range58.GetSpan();
			ProtocolParser.WriteUInt32((uint)num64, span58, 0);
		}
		if (instance.composter != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(3);
			BufferStream.RangeHandle range59 = stream.GetRange(1);
			int position59 = stream.Position;
			Composter.SerializeDelta(stream, instance.composter, previous.composter);
			int num65 = stream.Position - position59;
			if (num65 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field composter (ProtoBuf.Composter)");
			}
			Span<byte> span59 = range59.GetSpan();
			ProtocolParser.WriteUInt32((uint)num65, span59, 0);
		}
		if (instance.modularVehicle != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(3);
			BufferStream.RangeHandle range60 = stream.GetRange(1);
			int position60 = stream.Position;
			ModularVehicle.SerializeDelta(stream, instance.modularVehicle, previous.modularVehicle);
			int num66 = stream.Position - position60;
			if (num66 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field modularVehicle (ProtoBuf.ModularVehicle)");
			}
			Span<byte> span60 = range60.GetSpan();
			ProtocolParser.WriteUInt32((uint)num66, span60, 0);
		}
		if (instance.modularCar != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(3);
			BufferStream.RangeHandle range61 = stream.GetRange(5);
			int position61 = stream.Position;
			ModularCar.SerializeDelta(stream, instance.modularCar, previous.modularCar);
			int val22 = stream.Position - position61;
			Span<byte> span61 = range61.GetSpan();
			int num67 = ProtocolParser.WriteUInt32((uint)val22, span61, 0);
			if (num67 < 5)
			{
				span61[num67 - 1] |= 128;
				while (num67 < 4)
				{
					span61[num67++] = 128;
				}
				span61[4] = 0;
			}
		}
		if (instance.simpleUID != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(3);
			BufferStream.RangeHandle range62 = stream.GetRange(1);
			int position62 = stream.Position;
			SimpleUID.SerializeDelta(stream, instance.simpleUID, previous.simpleUID);
			int num68 = stream.Position - position62;
			if (num68 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field simpleUID (ProtoBuf.SimpleUID)");
			}
			Span<byte> span62 = range62.GetSpan();
			ProtocolParser.WriteUInt32((uint)num68, span62, 0);
		}
		if (instance.vehicleLift != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(4);
			BufferStream.RangeHandle range63 = stream.GetRange(1);
			int position63 = stream.Position;
			VehicleLift.SerializeDelta(stream, instance.vehicleLift, previous.vehicleLift);
			int num69 = stream.Position - position63;
			if (num69 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vehicleLift (ProtoBuf.VehicleLift)");
			}
			Span<byte> span63 = range63.GetSpan();
			ProtocolParser.WriteUInt32((uint)num69, span63, 0);
		}
		if (instance.engineStorage != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(4);
			BufferStream.RangeHandle range64 = stream.GetRange(1);
			int position64 = stream.Position;
			EngineStorage.SerializeDelta(stream, instance.engineStorage, previous.engineStorage);
			int num70 = stream.Position - position64;
			if (num70 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field engineStorage (ProtoBuf.EngineStorage)");
			}
			Span<byte> span64 = range64.GetSpan();
			ProtocolParser.WriteUInt32((uint)num70, span64, 0);
		}
		if (instance.vehicleVendor != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(4);
			BufferStream.RangeHandle range65 = stream.GetRange(5);
			int position65 = stream.Position;
			VehicleVendor.SerializeDelta(stream, instance.vehicleVendor, previous.vehicleVendor);
			int val23 = stream.Position - position65;
			Span<byte> span65 = range65.GetSpan();
			int num71 = ProtocolParser.WriteUInt32((uint)val23, span65, 0);
			if (num71 < 5)
			{
				span65[num71 - 1] |= 128;
				while (num71 < 4)
				{
					span65[num71++] = 128;
				}
				span65[4] = 0;
			}
		}
		if (instance.WaterPool != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(4);
			BufferStream.RangeHandle range66 = stream.GetRange(1);
			int position66 = stream.Position;
			WaterPool.SerializeDelta(stream, instance.WaterPool, previous.WaterPool);
			int num72 = stream.Position - position66;
			if (num72 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field WaterPool (ProtoBuf.WaterPool)");
			}
			Span<byte> span66 = range66.GetSpan();
			ProtocolParser.WriteUInt32((uint)num72, span66, 0);
		}
		if (instance.photo != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(4);
			BufferStream.RangeHandle range67 = stream.GetRange(1);
			int position67 = stream.Position;
			Photo.SerializeDelta(stream, instance.photo, previous.photo);
			int num73 = stream.Position - position67;
			if (num73 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field photo (ProtoBuf.Photo)");
			}
			Span<byte> span67 = range67.GetSpan();
			ProtocolParser.WriteUInt32((uint)num73, span67, 0);
		}
		if (instance.photoFrame != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(4);
			BufferStream.RangeHandle range68 = stream.GetRange(3);
			int position68 = stream.Position;
			PhotoFrame.SerializeDelta(stream, instance.photoFrame, previous.photoFrame);
			int num74 = stream.Position - position68;
			if (num74 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field photoFrame (ProtoBuf.PhotoFrame)");
			}
			Span<byte> span68 = range68.GetSpan();
			int num75 = ProtocolParser.WriteUInt32((uint)num74, span68, 0);
			if (num75 < 3)
			{
				span68[num75 - 1] |= 128;
				while (num75 < 2)
				{
					span68[num75++] = 128;
				}
				span68[2] = 0;
			}
		}
		if (instance.vehicleModule != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(4);
			BufferStream.RangeHandle range69 = stream.GetRange(1);
			int position69 = stream.Position;
			VehicleModule.SerializeDelta(stream, instance.vehicleModule, previous.vehicleModule);
			int num76 = stream.Position - position69;
			if (num76 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vehicleModule (ProtoBuf.VehicleModule)");
			}
			Span<byte> span69 = range69.GetSpan();
			ProtocolParser.WriteUInt32((uint)num76, span69, 0);
		}
		if (instance.mixingTable != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(4);
			BufferStream.RangeHandle range70 = stream.GetRange(1);
			int position70 = stream.Position;
			MixingTable.SerializeDelta(stream, instance.mixingTable, previous.mixingTable);
			int num77 = stream.Position - position70;
			if (num77 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mixingTable (ProtoBuf.MixingTable)");
			}
			Span<byte> span70 = range70.GetSpan();
			ProtocolParser.WriteUInt32((uint)num77, span70, 0);
		}
		if (instance.shopKeeper != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(4);
			BufferStream.RangeHandle range71 = stream.GetRange(1);
			int position71 = stream.Position;
			ShopKeeper.SerializeDelta(stream, instance.shopKeeper, previous.shopKeeper);
			int num78 = stream.Position - position71;
			if (num78 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field shopKeeper (ProtoBuf.ShopKeeper)");
			}
			Span<byte> span71 = range71.GetSpan();
			ProtocolParser.WriteUInt32((uint)num78, span71, 0);
		}
		if (instance.elevator != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(4);
			BufferStream.RangeHandle range72 = stream.GetRange(1);
			int position72 = stream.Position;
			Elevator.SerializeDelta(stream, instance.elevator, previous.elevator);
			int num79 = stream.Position - position72;
			if (num79 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field elevator (ProtoBuf.Elevator)");
			}
			Span<byte> span72 = range72.GetSpan();
			ProtocolParser.WriteUInt32((uint)num79, span72, 0);
		}
		if (instance.skullTrophy != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(4);
			BufferStream.RangeHandle range73 = stream.GetRange(5);
			int position73 = stream.Position;
			SkullTrophy.SerializeDelta(stream, instance.skullTrophy, previous.skullTrophy);
			int val24 = stream.Position - position73;
			Span<byte> span73 = range73.GetSpan();
			int num80 = ProtocolParser.WriteUInt32((uint)val24, span73, 0);
			if (num80 < 5)
			{
				span73[num80 - 1] |= 128;
				while (num80 < 4)
				{
					span73[num80++] = 128;
				}
				span73[4] = 0;
			}
		}
		if (instance.cassette != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(4);
			BufferStream.RangeHandle range74 = stream.GetRange(1);
			int position74 = stream.Position;
			Cassette.SerializeDelta(stream, instance.cassette, previous.cassette);
			int num81 = stream.Position - position74;
			if (num81 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cassette (ProtoBuf.Cassette)");
			}
			Span<byte> span74 = range74.GetSpan();
			ProtocolParser.WriteUInt32((uint)num81, span74, 0);
		}
		if (instance.telephone != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(4);
			BufferStream.RangeHandle range75 = stream.GetRange(5);
			int position75 = stream.Position;
			Telephone.SerializeDelta(stream, instance.telephone, previous.telephone);
			int val25 = stream.Position - position75;
			Span<byte> span75 = range75.GetSpan();
			int num82 = ProtocolParser.WriteUInt32((uint)val25, span75, 0);
			if (num82 < 5)
			{
				span75[num82 - 1] |= 128;
				while (num82 < 4)
				{
					span75[num82++] = 128;
				}
				span75[4] = 0;
			}
		}
		if (instance.boomBox != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(4);
			BufferStream.RangeHandle range76 = stream.GetRange(5);
			int position76 = stream.Position;
			BoomBox.SerializeDelta(stream, instance.boomBox, previous.boomBox);
			int val26 = stream.Position - position76;
			Span<byte> span76 = range76.GetSpan();
			int num83 = ProtocolParser.WriteUInt32((uint)val26, span76, 0);
			if (num83 < 5)
			{
				span76[num83 - 1] |= 128;
				while (num83 < 4)
				{
					span76[num83++] = 128;
				}
				span76[4] = 0;
			}
		}
		if (instance.neonSign != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(4);
			BufferStream.RangeHandle range77 = stream.GetRange(3);
			int position77 = stream.Position;
			NeonSign.SerializeDelta(stream, instance.neonSign, previous.neonSign);
			int num84 = stream.Position - position77;
			if (num84 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field neonSign (ProtoBuf.NeonSign)");
			}
			Span<byte> span77 = range77.GetSpan();
			int num85 = ProtocolParser.WriteUInt32((uint)num84, span77, 0);
			if (num85 < 3)
			{
				span77[num85 - 1] |= 128;
				while (num85 < 2)
				{
					span77[num85++] = 128;
				}
				span77[2] = 0;
			}
		}
		if (instance.subEntityList != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(4);
			BufferStream.RangeHandle range78 = stream.GetRange(3);
			int position78 = stream.Position;
			SubEntityList.SerializeDelta(stream, instance.subEntityList, previous.subEntityList);
			int num86 = stream.Position - position78;
			if (num86 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field subEntityList (ProtoBuf.SubEntityList)");
			}
			Span<byte> span78 = range78.GetSpan();
			int num87 = ProtocolParser.WriteUInt32((uint)num86, span78, 0);
			if (num87 < 3)
			{
				span78[num87 - 1] |= 128;
				while (num87 < 2)
				{
					span78[num87++] = 128;
				}
				span78[2] = 0;
			}
		}
		if (instance.marketTerminal != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(5);
			BufferStream.RangeHandle range79 = stream.GetRange(5);
			int position79 = stream.Position;
			MarketTerminal.SerializeDelta(stream, instance.marketTerminal, previous.marketTerminal);
			int val27 = stream.Position - position79;
			Span<byte> span79 = range79.GetSpan();
			int num88 = ProtocolParser.WriteUInt32((uint)val27, span79, 0);
			if (num88 < 5)
			{
				span79[num88 - 1] |= 128;
				while (num88 < 4)
				{
					span79[num88++] = 128;
				}
				span79[4] = 0;
			}
		}
		if (instance.deliveryDrone != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(5);
			BufferStream.RangeHandle range80 = stream.GetRange(1);
			int position80 = stream.Position;
			DeliveryDrone.SerializeDelta(stream, instance.deliveryDrone, previous.deliveryDrone);
			int num89 = stream.Position - position80;
			if (num89 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field deliveryDrone (ProtoBuf.DeliveryDrone)");
			}
			Span<byte> span80 = range80.GetSpan();
			ProtocolParser.WriteUInt32((uint)num89, span80, 0);
		}
		if (instance.reclaimTerminal != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(5);
			BufferStream.RangeHandle range81 = stream.GetRange(1);
			int position81 = stream.Position;
			ReclaimTerminal.SerializeDelta(stream, instance.reclaimTerminal, previous.reclaimTerminal);
			int num90 = stream.Position - position81;
			if (num90 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field reclaimTerminal (ProtoBuf.ReclaimTerminal)");
			}
			Span<byte> span81 = range81.GetSpan();
			ProtocolParser.WriteUInt32((uint)num90, span81, 0);
		}
		if (instance.slotMachine != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(5);
			BufferStream.RangeHandle range82 = stream.GetRange(1);
			int position82 = stream.Position;
			SlotMachine.SerializeDelta(stream, instance.slotMachine, previous.slotMachine);
			int num91 = stream.Position - position82;
			if (num91 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field slotMachine (ProtoBuf.SlotMachine)");
			}
			Span<byte> span82 = range82.GetSpan();
			ProtocolParser.WriteUInt32((uint)num91, span82, 0);
		}
		if (instance.trainEngine != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(5);
			BufferStream.RangeHandle range83 = stream.GetRange(1);
			int position83 = stream.Position;
			TrainEngine.SerializeDelta(stream, instance.trainEngine, previous.trainEngine);
			int num92 = stream.Position - position83;
			if (num92 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field trainEngine (ProtoBuf.TrainEngine)");
			}
			Span<byte> span83 = range83.GetSpan();
			ProtocolParser.WriteUInt32((uint)num92, span83, 0);
		}
		if (instance.cardGame != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(5);
			BufferStream.RangeHandle range84 = stream.GetRange(5);
			int position84 = stream.Position;
			CardGame.SerializeDelta(stream, instance.cardGame, previous.cardGame);
			int num93 = stream.Position - position84;
			if (num93 > int.MaxValue)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cardGame (ProtoBuf.CardGame)");
			}
			Span<byte> span84 = range84.GetSpan();
			int num94 = ProtocolParser.WriteUInt32((uint)num93, span84, 0);
			if (num94 < 5)
			{
				span84[num94 - 1] |= 128;
				while (num94 < 4)
				{
					span84[num94++] = 128;
				}
				span84[4] = 0;
			}
		}
		if (instance.crane != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(5);
			BufferStream.RangeHandle range85 = stream.GetRange(1);
			int position85 = stream.Position;
			Crane.SerializeDelta(stream, instance.crane, previous.crane);
			int num95 = stream.Position - position85;
			if (num95 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field crane (ProtoBuf.Crane)");
			}
			Span<byte> span85 = range85.GetSpan();
			ProtocolParser.WriteUInt32((uint)num95, span85, 0);
		}
		if (instance.connectedSpeaker != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(5);
			BufferStream.RangeHandle range86 = stream.GetRange(1);
			int position86 = stream.Position;
			ConnectedSpeaker.SerializeDelta(stream, instance.connectedSpeaker, previous.connectedSpeaker);
			int num96 = stream.Position - position86;
			if (num96 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field connectedSpeaker (ProtoBuf.ConnectedSpeaker)");
			}
			Span<byte> span86 = range86.GetSpan();
			ProtocolParser.WriteUInt32((uint)num96, span86, 0);
		}
		if (instance.audioEntity != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(5);
			BufferStream.RangeHandle range87 = stream.GetRange(1);
			int position87 = stream.Position;
			AudioEntity.SerializeDelta(stream, instance.audioEntity, previous.audioEntity);
			int num97 = stream.Position - position87;
			if (num97 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field audioEntity (ProtoBuf.AudioEntity)");
			}
			Span<byte> span87 = range87.GetSpan();
			ProtocolParser.WriteUInt32((uint)num97, span87, 0);
		}
		if (instance.microphoneStand != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(5);
			BufferStream.RangeHandle range88 = stream.GetRange(1);
			int position88 = stream.Position;
			MicrophoneStand.SerializeDelta(stream, instance.microphoneStand, previous.microphoneStand);
			int num98 = stream.Position - position88;
			if (num98 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field microphoneStand (ProtoBuf.MicrophoneStand)");
			}
			Span<byte> span88 = range88.GetSpan();
			ProtocolParser.WriteUInt32((uint)num98, span88, 0);
		}
		if (instance.submarine != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(5);
			BufferStream.RangeHandle range89 = stream.GetRange(1);
			int position89 = stream.Position;
			Submarine.SerializeDelta(stream, instance.submarine, previous.submarine);
			int num99 = stream.Position - position89;
			if (num99 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field submarine (ProtoBuf.Submarine)");
			}
			Span<byte> span89 = range89.GetSpan();
			ProtocolParser.WriteUInt32((uint)num99, span89, 0);
		}
		if (instance.sleepingBagCamper != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(5);
			BufferStream.RangeHandle range90 = stream.GetRange(1);
			int position90 = stream.Position;
			SleepingBagCamper.SerializeDelta(stream, instance.sleepingBagCamper, previous.sleepingBagCamper);
			int num100 = stream.Position - position90;
			if (num100 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sleepingBagCamper (ProtoBuf.SleepingBagCamper)");
			}
			Span<byte> span90 = range90.GetSpan();
			ProtocolParser.WriteUInt32((uint)num100, span90, 0);
		}
		if (instance.camperModule != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(5);
			BufferStream.RangeHandle range91 = stream.GetRange(1);
			int position91 = stream.Position;
			CamperModule.SerializeDelta(stream, instance.camperModule, previous.camperModule);
			int num101 = stream.Position - position91;
			if (num101 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field camperModule (ProtoBuf.CamperModule)");
			}
			Span<byte> span91 = range91.GetSpan();
			ProtocolParser.WriteUInt32((uint)num101, span91, 0);
		}
		if (instance.paintableSign != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(5);
			BufferStream.RangeHandle range92 = stream.GetRange(3);
			int position92 = stream.Position;
			PaintableSign.SerializeDelta(stream, instance.paintableSign, previous.paintableSign);
			int num102 = stream.Position - position92;
			if (num102 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field paintableSign (ProtoBuf.PaintableSign)");
			}
			Span<byte> span92 = range92.GetSpan();
			int num103 = ProtocolParser.WriteUInt32((uint)num102, span92, 0);
			if (num103 < 3)
			{
				span92[num103 - 1] |= 128;
				while (num103 < 2)
				{
					span92[num103++] = 128;
				}
				span92[2] = 0;
			}
		}
		if (instance.whitelist != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(5);
			BufferStream.RangeHandle range93 = stream.GetRange(3);
			int position93 = stream.Position;
			Whitelist.SerializeDelta(stream, instance.whitelist, previous.whitelist);
			int num104 = stream.Position - position93;
			if (num104 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field whitelist (ProtoBuf.Whitelist)");
			}
			Span<byte> span93 = range93.GetSpan();
			int num105 = ProtocolParser.WriteUInt32((uint)num104, span93, 0);
			if (num105 < 3)
			{
				span93[num105 - 1] |= 128;
				while (num105 < 2)
				{
					span93[num105++] = 128;
				}
				span93[2] = 0;
			}
		}
		if (instance.FrankensteinTable != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(5);
			BufferStream.RangeHandle range94 = stream.GetRange(3);
			int position94 = stream.Position;
			FrankensteinTable.SerializeDelta(stream, instance.FrankensteinTable, previous.FrankensteinTable);
			int num106 = stream.Position - position94;
			if (num106 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field FrankensteinTable (ProtoBuf.FrankensteinTable)");
			}
			Span<byte> span94 = range94.GetSpan();
			int num107 = ProtocolParser.WriteUInt32((uint)num106, span94, 0);
			if (num107 < 3)
			{
				span94[num107 - 1] |= 128;
				while (num107 < 2)
				{
					span94[num107++] = 128;
				}
				span94[2] = 0;
			}
		}
		if (instance.mlrs != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(6);
			BufferStream.RangeHandle range95 = stream.GetRange(1);
			int position95 = stream.Position;
			MLRS.SerializeDelta(stream, instance.mlrs, previous.mlrs);
			int num108 = stream.Position - position95;
			if (num108 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mlrs (ProtoBuf.MLRS)");
			}
			Span<byte> span95 = range95.GetSpan();
			ProtocolParser.WriteUInt32((uint)num108, span95, 0);
		}
		if (instance.reclaimManager != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(6);
			BufferStream.RangeHandle range96 = stream.GetRange(5);
			int position96 = stream.Position;
			ReclaimManager.SerializeDelta(stream, instance.reclaimManager, previous.reclaimManager);
			int val28 = stream.Position - position96;
			Span<byte> span96 = range96.GetSpan();
			int num109 = ProtocolParser.WriteUInt32((uint)val28, span96, 0);
			if (num109 < 5)
			{
				span96[num109 - 1] |= 128;
				while (num109 < 4)
				{
					span96[num109++] = 128;
				}
				span96[4] = 0;
			}
		}
		if (instance.gameMode != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(6);
			BufferStream.RangeHandle range97 = stream.GetRange(5);
			int position97 = stream.Position;
			GameMode.SerializeDelta(stream, instance.gameMode, previous.gameMode);
			int val29 = stream.Position - position97;
			Span<byte> span97 = range97.GetSpan();
			int num110 = ProtocolParser.WriteUInt32((uint)val29, span97, 0);
			if (num110 < 5)
			{
				span97[num110 - 1] |= 128;
				while (num110 < 4)
				{
					span97[num110++] = 128;
				}
				span97[4] = 0;
			}
		}
		if (instance.snowmobile != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(6);
			BufferStream.RangeHandle range98 = stream.GetRange(1);
			int position98 = stream.Position;
			Snowmobile.SerializeDelta(stream, instance.snowmobile, previous.snowmobile);
			int num111 = stream.Position - position98;
			if (num111 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field snowmobile (ProtoBuf.Snowmobile)");
			}
			Span<byte> span98 = range98.GetSpan();
			ProtocolParser.WriteUInt32((uint)num111, span98, 0);
		}
		stream.WriteByte(160);
		stream.WriteByte(6);
		ProtocolParser.WriteBool(stream, instance.createdThisFrame);
		if (instance.patternFirework != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(6);
			BufferStream.RangeHandle range99 = stream.GetRange(3);
			int position99 = stream.Position;
			PatternFirework.SerializeDelta(stream, instance.patternFirework, previous.patternFirework);
			int num112 = stream.Position - position99;
			if (num112 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field patternFirework (ProtoBuf.PatternFirework)");
			}
			Span<byte> span99 = range99.GetSpan();
			int num113 = ProtocolParser.WriteUInt32((uint)num112, span99, 0);
			if (num113 < 3)
			{
				span99[num113 - 1] |= 128;
				while (num113 < 2)
				{
					span99[num113++] = 128;
				}
				span99[2] = 0;
			}
		}
		if (instance.cargoPlane != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(6);
			BufferStream.RangeHandle range100 = stream.GetRange(1);
			int position100 = stream.Position;
			CargoPlane.SerializeDelta(stream, instance.cargoPlane, previous.cargoPlane);
			int num114 = stream.Position - position100;
			if (num114 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cargoPlane (ProtoBuf.CargoPlane)");
			}
			Span<byte> span100 = range100.GetSpan();
			ProtocolParser.WriteUInt32((uint)num114, span100, 0);
		}
		if (instance.paintedItem != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(6);
			BufferStream.RangeHandle range101 = stream.GetRange(1);
			int position101 = stream.Position;
			PaintedItem.SerializeDelta(stream, instance.paintedItem, previous.paintedItem);
			int num115 = stream.Position - position101;
			if (num115 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field paintedItem (ProtoBuf.PaintedItem)");
			}
			Span<byte> span101 = range101.GetSpan();
			ProtocolParser.WriteUInt32((uint)num115, span101, 0);
		}
		if (instance.clanManager != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(6);
			BufferStream.RangeHandle range102 = stream.GetRange(5);
			int position102 = stream.Position;
			ClanManager.SerializeDelta(stream, instance.clanManager, previous.clanManager);
			int val30 = stream.Position - position102;
			Span<byte> span102 = range102.GetSpan();
			int num116 = ProtocolParser.WriteUInt32((uint)val30, span102, 0);
			if (num116 < 5)
			{
				span102[num116 - 1] |= 128;
				while (num116 < 4)
				{
					span102[num116++] = 128;
				}
				span102[4] = 0;
			}
		}
		if (instance.spray != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(6);
			BufferStream.RangeHandle range103 = stream.GetRange(1);
			int position103 = stream.Position;
			Spray.SerializeDelta(stream, instance.spray, previous.spray);
			int num117 = stream.Position - position103;
			if (num117 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field spray (ProtoBuf.Spray)");
			}
			Span<byte> span103 = range103.GetSpan();
			ProtocolParser.WriteUInt32((uint)num117, span103, 0);
		}
		if (instance.baseTrain != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(6);
			BufferStream.RangeHandle range104 = stream.GetRange(1);
			int position104 = stream.Position;
			BaseTrain.SerializeDelta(stream, instance.baseTrain, previous.baseTrain);
			int num118 = stream.Position - position104;
			if (num118 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseTrain (ProtoBuf.BaseTrain)");
			}
			Span<byte> span104 = range104.GetSpan();
			ProtocolParser.WriteUInt32((uint)num118, span104, 0);
		}
		if (instance.zipline != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(6);
			BufferStream.RangeHandle range105 = stream.GetRange(3);
			int position105 = stream.Position;
			Zipline.SerializeDelta(stream, instance.zipline, previous.zipline);
			int num119 = stream.Position - position105;
			if (num119 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field zipline (ProtoBuf.Zipline)");
			}
			Span<byte> span105 = range105.GetSpan();
			int num120 = ProtocolParser.WriteUInt32((uint)num119, span105, 0);
			if (num120 < 3)
			{
				span105[num120 - 1] |= 128;
				while (num120 < 2)
				{
					span105[num120++] = 128;
				}
				span105[2] = 0;
			}
		}
		if (instance.ziplineMountable != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(6);
			BufferStream.RangeHandle range106 = stream.GetRange(3);
			int position106 = stream.Position;
			ZiplineMountable.SerializeDelta(stream, instance.ziplineMountable, previous.ziplineMountable);
			int num121 = stream.Position - position106;
			if (num121 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ziplineMountable (ProtoBuf.ZiplineMountable)");
			}
			Span<byte> span106 = range106.GetSpan();
			int num122 = ProtocolParser.WriteUInt32((uint)num121, span106, 0);
			if (num122 < 3)
			{
				span106[num122 - 1] |= 128;
				while (num122 < 2)
				{
					span106[num122++] = 128;
				}
				span106[2] = 0;
			}
		}
		if (instance.ZiplineArrival != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(6);
			BufferStream.RangeHandle range107 = stream.GetRange(3);
			int position107 = stream.Position;
			ZiplineArrivalPoint.SerializeDelta(stream, instance.ZiplineArrival, previous.ZiplineArrival);
			int num123 = stream.Position - position107;
			if (num123 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ZiplineArrival (ProtoBuf.ZiplineArrivalPoint)");
			}
			Span<byte> span107 = range107.GetSpan();
			int num124 = ProtocolParser.WriteUInt32((uint)num123, span107, 0);
			if (num124 < 3)
			{
				span107[num124 - 1] |= 128;
				while (num124 < 2)
				{
					span107[num124++] = 128;
				}
				span107[2] = 0;
			}
		}
		if (instance.sprayLine != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(6);
			BufferStream.RangeHandle range108 = stream.GetRange(3);
			int position108 = stream.Position;
			SprayLine.SerializeDelta(stream, instance.sprayLine, previous.sprayLine);
			int num125 = stream.Position - position108;
			if (num125 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sprayLine (ProtoBuf.SprayLine)");
			}
			Span<byte> span108 = range108.GetSpan();
			int num126 = ProtocolParser.WriteUInt32((uint)num125, span108, 0);
			if (num126 < 3)
			{
				span108[num126 - 1] |= 128;
				while (num126 < 2)
				{
					span108[num126++] = 128;
				}
				span108[2] = 0;
			}
		}
		if (instance.coalingTower != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(6);
			BufferStream.RangeHandle range109 = stream.GetRange(1);
			int position109 = stream.Position;
			CoalingTower.SerializeDelta(stream, instance.coalingTower, previous.coalingTower);
			int num127 = stream.Position - position109;
			if (num127 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field coalingTower (ProtoBuf.CoalingTower)");
			}
			Span<byte> span109 = range109.GetSpan();
			ProtocolParser.WriteUInt32((uint)num127, span109, 0);
		}
		if (instance.simpleInt != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(7);
			BufferStream.RangeHandle range110 = stream.GetRange(1);
			int position110 = stream.Position;
			SimpleInt.SerializeDelta(stream, instance.simpleInt, previous.simpleInt);
			int num128 = stream.Position - position110;
			if (num128 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field simpleInt (ProtoBuf.SimpleInt)");
			}
			Span<byte> span110 = range110.GetSpan();
			ProtocolParser.WriteUInt32((uint)num128, span110, 0);
		}
		if (instance.baseOven != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(7);
			BufferStream.RangeHandle range111 = stream.GetRange(3);
			int position111 = stream.Position;
			BaseOven.SerializeDelta(stream, instance.baseOven, previous.baseOven);
			int num129 = stream.Position - position111;
			if (num129 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseOven (ProtoBuf.BaseOven)");
			}
			Span<byte> span111 = range111.GetSpan();
			int num130 = ProtocolParser.WriteUInt32((uint)num129, span111, 0);
			if (num130 < 3)
			{
				span111[num130 - 1] |= 128;
				while (num130 < 2)
				{
					span111[num130++] = 128;
				}
				span111[2] = 0;
			}
		}
		if (instance.brainComponent != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(7);
			BufferStream.RangeHandle range112 = stream.GetRange(1);
			int position112 = stream.Position;
			BrainComponent.SerializeDelta(stream, instance.brainComponent, previous.brainComponent);
			int num131 = stream.Position - position112;
			if (num131 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field brainComponent (ProtoBuf.BrainComponent)");
			}
			Span<byte> span112 = range112.GetSpan();
			ProtocolParser.WriteUInt32((uint)num131, span112, 0);
		}
		if (instance.proceduralDungeon != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(7);
			BufferStream.RangeHandle range113 = stream.GetRange(1);
			int position113 = stream.Position;
			ProceduralDungeon.SerializeDelta(stream, instance.proceduralDungeon, previous.proceduralDungeon);
			int num132 = stream.Position - position113;
			if (num132 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field proceduralDungeon (ProtoBuf.ProceduralDungeon)");
			}
			Span<byte> span113 = range113.GetSpan();
			ProtocolParser.WriteUInt32((uint)num132, span113, 0);
		}
		if (instance.industrialConveyor != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(7);
			BufferStream.RangeHandle range114 = stream.GetRange(3);
			int position114 = stream.Position;
			IndustrialConveyor.SerializeDelta(stream, instance.industrialConveyor, previous.industrialConveyor);
			int num133 = stream.Position - position114;
			if (num133 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field industrialConveyor (ProtoBuf.IndustrialConveyor)");
			}
			Span<byte> span114 = range114.GetSpan();
			int num134 = ProtocolParser.WriteUInt32((uint)num133, span114, 0);
			if (num134 < 3)
			{
				span114[num134 - 1] |= 128;
				while (num134 < 2)
				{
					span114[num134++] = 128;
				}
				span114[2] = 0;
			}
		}
		if (instance.industrialCrafter != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(7);
			BufferStream.RangeHandle range115 = stream.GetRange(1);
			int position115 = stream.Position;
			IndustrialCrafter.SerializeDelta(stream, instance.industrialCrafter, previous.industrialCrafter);
			int num135 = stream.Position - position115;
			if (num135 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field industrialCrafter (ProtoBuf.IndustrialCrafter)");
			}
			Span<byte> span115 = range115.GetSpan();
			ProtocolParser.WriteUInt32((uint)num135, span115, 0);
		}
		if (instance.drone != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(7);
			BufferStream.RangeHandle range116 = stream.GetRange(1);
			int position116 = stream.Position;
			Drone.SerializeDelta(stream, instance.drone, previous.drone);
			int num136 = stream.Position - position116;
			if (num136 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field drone (ProtoBuf.Drone)");
			}
			Span<byte> span116 = range116.GetSpan();
			ProtocolParser.WriteUInt32((uint)num136, span116, 0);
		}
		if (instance.explosive != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(7);
			BufferStream.RangeHandle range117 = stream.GetRange(1);
			int position117 = stream.Position;
			TimedExplosive.SerializeDelta(stream, instance.explosive, previous.explosive);
			int num137 = stream.Position - position117;
			if (num137 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field explosive (ProtoBuf.TimedExplosive)");
			}
			Span<byte> span117 = range117.GetSpan();
			ProtocolParser.WriteUInt32((uint)num137, span117, 0);
		}
		if (instance.simpleUint != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(7);
			BufferStream.RangeHandle range118 = stream.GetRange(1);
			int position118 = stream.Position;
			SimpleUInt.SerializeDelta(stream, instance.simpleUint, previous.simpleUint);
			int num138 = stream.Position - position118;
			if (num138 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field simpleUint (ProtoBuf.SimpleUInt)");
			}
			Span<byte> span118 = range118.GetSpan();
			ProtocolParser.WriteUInt32((uint)num138, span118, 0);
		}
		if (instance.weaponRack != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(7);
			BufferStream.RangeHandle range119 = stream.GetRange(3);
			int position119 = stream.Position;
			WeaponRack.SerializeDelta(stream, instance.weaponRack, previous.weaponRack);
			int num139 = stream.Position - position119;
			if (num139 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field weaponRack (ProtoBuf.WeaponRack)");
			}
			Span<byte> span119 = range119.GetSpan();
			int num140 = ProtocolParser.WriteUInt32((uint)num139, span119, 0);
			if (num140 < 3)
			{
				span119[num140 - 1] |= 128;
				while (num140 < 2)
				{
					span119[num140++] = 128;
				}
				span119[2] = 0;
			}
		}
		if (instance.attackHeli != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(7);
			BufferStream.RangeHandle range120 = stream.GetRange(1);
			int position120 = stream.Position;
			AttackHeli.SerializeDelta(stream, instance.attackHeli, previous.attackHeli);
			int num141 = stream.Position - position120;
			if (num141 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field attackHeli (ProtoBuf.AttackHeli)");
			}
			Span<byte> span120 = range120.GetSpan();
			ProtocolParser.WriteUInt32((uint)num141, span120, 0);
		}
		if (instance.attackHeliTurret != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(7);
			BufferStream.RangeHandle range121 = stream.GetRange(1);
			int position121 = stream.Position;
			AttackHeliTurret.SerializeDelta(stream, instance.attackHeliTurret, previous.attackHeliTurret);
			int num142 = stream.Position - position121;
			if (num142 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field attackHeliTurret (ProtoBuf.AttackHeliTurret)");
			}
			Span<byte> span121 = range121.GetSpan();
			ProtocolParser.WriteUInt32((uint)num142, span121, 0);
		}
		if (instance.attackHeliRockets != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(7);
			BufferStream.RangeHandle range122 = stream.GetRange(1);
			int position122 = stream.Position;
			AttackHeliRockets.SerializeDelta(stream, instance.attackHeliRockets, previous.attackHeliRockets);
			int num143 = stream.Position - position122;
			if (num143 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field attackHeliRockets (ProtoBuf.AttackHeliRockets)");
			}
			Span<byte> span122 = range122.GetSpan();
			ProtocolParser.WriteUInt32((uint)num143, span122, 0);
		}
		if (instance.baseBoat != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(7);
			BufferStream.RangeHandle range123 = stream.GetRange(1);
			int position123 = stream.Position;
			BaseBoat.SerializeDelta(stream, instance.baseBoat, previous.baseBoat);
			int num144 = stream.Position - position123;
			if (num144 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseBoat (ProtoBuf.BaseBoat)");
			}
			Span<byte> span123 = range123.GetSpan();
			ProtocolParser.WriteUInt32((uint)num144, span123, 0);
		}
		if (instance.ragdoll != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(7);
			BufferStream.RangeHandle range124 = stream.GetRange(3);
			int position124 = stream.Position;
			Ragdoll.SerializeDelta(stream, instance.ragdoll, previous.ragdoll);
			int num145 = stream.Position - position124;
			if (num145 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ragdoll (ProtoBuf.Ragdoll)");
			}
			Span<byte> span124 = range124.GetSpan();
			int num146 = ProtocolParser.WriteUInt32((uint)num145, span124, 0);
			if (num146 < 3)
			{
				span124[num146 - 1] |= 128;
				while (num146 < 2)
				{
					span124[num146++] = 128;
				}
				span124[2] = 0;
			}
		}
		if (instance.dieselEngine != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(7);
			BufferStream.RangeHandle range125 = stream.GetRange(1);
			int position125 = stream.Position;
			DieselEngine.SerializeDelta(stream, instance.dieselEngine, previous.dieselEngine);
			int num147 = stream.Position - position125;
			if (num147 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field dieselEngine (ProtoBuf.DieselEngine)");
			}
			Span<byte> span125 = range125.GetSpan();
			ProtocolParser.WriteUInt32((uint)num147, span125, 0);
		}
		if (instance.associatedFiles != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(9);
			BufferStream.RangeHandle range126 = stream.GetRange(5);
			int position126 = stream.Position;
			AssociatedFiles.SerializeDelta(stream, instance.associatedFiles, previous.associatedFiles);
			int val31 = stream.Position - position126;
			Span<byte> span126 = range126.GetSpan();
			int num148 = ProtocolParser.WriteUInt32((uint)val31, span126, 0);
			if (num148 < 5)
			{
				span126[num148 - 1] |= 128;
				while (num148 < 4)
				{
					span126[num148++] = 128;
				}
				span126[4] = 0;
			}
		}
		if (instance.nexusFerry != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(9);
			BufferStream.RangeHandle range127 = stream.GetRange(5);
			int position127 = stream.Position;
			NexusFerry.SerializeDelta(stream, instance.nexusFerry, previous.nexusFerry);
			int val32 = stream.Position - position127;
			Span<byte> span127 = range127.GetSpan();
			int num149 = ProtocolParser.WriteUInt32((uint)val32, span127, 0);
			if (num149 < 5)
			{
				span127[num149 - 1] |= 128;
				while (num149 < 4)
				{
					span127[num149++] = 128;
				}
				span127[4] = 0;
			}
		}
		if (instance.nexusIsland != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(9);
			BufferStream.RangeHandle range128 = stream.GetRange(5);
			int position128 = stream.Position;
			NexusIsland.SerializeDelta(stream, instance.nexusIsland, previous.nexusIsland);
			int val33 = stream.Position - position128;
			Span<byte> span128 = range128.GetSpan();
			int num150 = ProtocolParser.WriteUInt32((uint)val33, span128, 0);
			if (num150 < 5)
			{
				span128[num150 - 1] |= 128;
				while (num150 < 4)
				{
					span128[num150++] = 128;
				}
				span128[4] = 0;
			}
		}
		if (instance.nexusDockTerminal != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(9);
			BufferStream.RangeHandle range129 = stream.GetRange(3);
			int position129 = stream.Position;
			NexusDockTerminal.SerializeDelta(stream, instance.nexusDockTerminal, previous.nexusDockTerminal);
			int num151 = stream.Position - position129;
			if (num151 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field nexusDockTerminal (ProtoBuf.NexusDockTerminal)");
			}
			Span<byte> span129 = range129.GetSpan();
			int num152 = ProtocolParser.WriteUInt32((uint)num151, span129, 0);
			if (num152 < 3)
			{
				span129[num152 - 1] |= 128;
				while (num152 < 2)
				{
					span129[num152++] = 128;
				}
				span129[2] = 0;
			}
		}
		if (instance.rockingChair != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(9);
			BufferStream.RangeHandle range130 = stream.GetRange(1);
			int position130 = stream.Position;
			RockingChair.SerializeDelta(stream, instance.rockingChair, previous.rockingChair);
			int num153 = stream.Position - position130;
			if (num153 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field rockingChair (ProtoBuf.RockingChair)");
			}
			Span<byte> span130 = range130.GetSpan();
			ProtocolParser.WriteUInt32((uint)num153, span130, 0);
		}
		if (instance.headData != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(9);
			BufferStream.RangeHandle range131 = stream.GetRange(5);
			int position131 = stream.Position;
			HeadData.SerializeDelta(stream, instance.headData, previous.headData);
			int val34 = stream.Position - position131;
			Span<byte> span131 = range131.GetSpan();
			int num154 = ProtocolParser.WriteUInt32((uint)val34, span131, 0);
			if (num154 < 5)
			{
				span131[num154 - 1] |= 128;
				while (num154 < 4)
				{
					span131[num154++] = 128;
				}
				span131[4] = 0;
			}
		}
		if (instance.wantedPoster != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(9);
			BufferStream.RangeHandle range132 = stream.GetRange(5);
			int position132 = stream.Position;
			WantedPoster.SerializeDelta(stream, instance.wantedPoster, previous.wantedPoster);
			int val35 = stream.Position - position132;
			Span<byte> span132 = range132.GetSpan();
			int num155 = ProtocolParser.WriteUInt32((uint)val35, span132, 0);
			if (num155 < 5)
			{
				span132[num155 - 1] |= 128;
				while (num155 < 4)
				{
					span132[num155++] = 128;
				}
				span132[4] = 0;
			}
		}
		if (instance.waypointRace != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(9);
			BufferStream.RangeHandle range133 = stream.GetRange(3);
			int position133 = stream.Position;
			WaypointRace.SerializeDelta(stream, instance.waypointRace, previous.waypointRace);
			int num156 = stream.Position - position133;
			if (num156 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field waypointRace (ProtoBuf.WaypointRace)");
			}
			Span<byte> span133 = range133.GetSpan();
			int num157 = ProtocolParser.WriteUInt32((uint)num156, span133, 0);
			if (num157 < 3)
			{
				span133[num157 - 1] |= 128;
				while (num157 < 2)
				{
					span133[num157++] = 128;
				}
				span133[2] = 0;
			}
		}
		if (instance.legacyShelter != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(9);
			BufferStream.RangeHandle range134 = stream.GetRange(1);
			int position134 = stream.Position;
			LegacyShelter.SerializeDelta(stream, instance.legacyShelter, previous.legacyShelter);
			int num158 = stream.Position - position134;
			if (num158 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field legacyShelter (ProtoBuf.LegacyShelter)");
			}
			Span<byte> span134 = range134.GetSpan();
			ProtocolParser.WriteUInt32((uint)num158, span134, 0);
		}
		if (instance.metalDetectorSource != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(10);
			BufferStream.RangeHandle range135 = stream.GetRange(3);
			int position135 = stream.Position;
			MetalDetectorSource.SerializeDelta(stream, instance.metalDetectorSource, previous.metalDetectorSource);
			int num159 = stream.Position - position135;
			if (num159 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field metalDetectorSource (ProtoBuf.MetalDetectorSource)");
			}
			Span<byte> span135 = range135.GetSpan();
			int num160 = ProtocolParser.WriteUInt32((uint)num159, span135, 0);
			if (num160 < 3)
			{
				span135[num160 - 1] |= 128;
				while (num160 < 2)
				{
					span135[num160++] = 128;
				}
				span135[2] = 0;
			}
		}
		if (instance.tutorialIsland != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(10);
			BufferStream.RangeHandle range136 = stream.GetRange(1);
			int position136 = stream.Position;
			TutorialIsland.SerializeDelta(stream, instance.tutorialIsland, previous.tutorialIsland);
			int num161 = stream.Position - position136;
			if (num161 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field tutorialIsland (ProtoBuf.TutorialIsland)");
			}
			Span<byte> span136 = range136.GetSpan();
			ProtocolParser.WriteUInt32((uint)num161, span136, 0);
		}
		if (instance.cinematicEntity != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(10);
			BufferStream.RangeHandle range137 = stream.GetRange(1);
			int position137 = stream.Position;
			CinematicEntity.SerializeDelta(stream, instance.cinematicEntity, previous.cinematicEntity);
			int num162 = stream.Position - position137;
			if (num162 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cinematicEntity (ProtoBuf.CinematicEntity)");
			}
			Span<byte> span137 = range137.GetSpan();
			ProtocolParser.WriteUInt32((uint)num162, span137, 0);
		}
		if (instance.buildingPrivilegeRetro != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(10);
			BufferStream.RangeHandle range138 = stream.GetRange(3);
			int position138 = stream.Position;
			BuildingPrivilegeRetro.SerializeDelta(stream, instance.buildingPrivilegeRetro, previous.buildingPrivilegeRetro);
			int num163 = stream.Position - position138;
			if (num163 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field buildingPrivilegeRetro (ProtoBuf.BuildingPrivilegeRetro)");
			}
			Span<byte> span138 = range138.GetSpan();
			int num164 = ProtocolParser.WriteUInt32((uint)num163, span138, 0);
			if (num164 < 3)
			{
				span138[num164 - 1] |= 128;
				while (num164 < 2)
				{
					span138[num164++] = 128;
				}
				span138[2] = 0;
			}
		}
		if (instance.harborCrane != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(10);
			BufferStream.RangeHandle range139 = stream.GetRange(3);
			int position139 = stream.Position;
			HarborCrane.SerializeDelta(stream, instance.harborCrane, previous.harborCrane);
			int num165 = stream.Position - position139;
			if (num165 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field harborCrane (ProtoBuf.HarborCrane)");
			}
			Span<byte> span139 = range139.GetSpan();
			int num166 = ProtocolParser.WriteUInt32((uint)num165, span139, 0);
			if (num166 < 3)
			{
				span139[num166 - 1] |= 128;
				while (num166 < 2)
				{
					span139[num166++] = 128;
				}
				span139[2] = 0;
			}
		}
		if (instance.cargoShip != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(10);
			BufferStream.RangeHandle range140 = stream.GetRange(3);
			int position140 = stream.Position;
			CargoShip.SerializeDelta(stream, instance.cargoShip, previous.cargoShip);
			int num167 = stream.Position - position140;
			if (num167 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cargoShip (ProtoBuf.CargoShip)");
			}
			Span<byte> span140 = range140.GetSpan();
			int num168 = ProtocolParser.WriteUInt32((uint)num167, span140, 0);
			if (num168 < 3)
			{
				span140[num168 - 1] |= 128;
				while (num168 < 2)
				{
					span140[num168++] = 128;
				}
				span140[2] = 0;
			}
		}
		if (instance.cargoShipContainer != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(10);
			BufferStream.RangeHandle range141 = stream.GetRange(1);
			int position141 = stream.Position;
			CargoShipContainer.SerializeDelta(stream, instance.cargoShipContainer, previous.cargoShipContainer);
			int num169 = stream.Position - position141;
			if (num169 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cargoShipContainer (ProtoBuf.CargoShipContainer)");
			}
			Span<byte> span141 = range141.GetSpan();
			ProtocolParser.WriteUInt32((uint)num169, span141, 0);
		}
		if (instance.missionMapMarker != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(10);
			BufferStream.RangeHandle range142 = stream.GetRange(5);
			int position142 = stream.Position;
			MissionMapMarker.SerializeDelta(stream, instance.missionMapMarker, previous.missionMapMarker);
			int val36 = stream.Position - position142;
			Span<byte> span142 = range142.GetSpan();
			int num170 = ProtocolParser.WriteUInt32((uint)val36, span142, 0);
			if (num170 < 5)
			{
				span142[num170 - 1] |= 128;
				while (num170 < 4)
				{
					span142[num170++] = 128;
				}
				span142[4] = 0;
			}
		}
		if (instance.bike != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(10);
			BufferStream.RangeHandle range143 = stream.GetRange(1);
			int position143 = stream.Position;
			Bike.SerializeDelta(stream, instance.bike, previous.bike);
			int num171 = stream.Position - position143;
			if (num171 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field bike (ProtoBuf.Bike)");
			}
			Span<byte> span143 = range143.GetSpan();
			ProtocolParser.WriteUInt32((uint)num171, span143, 0);
		}
		if (instance.diverPropulsionVehicle != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(10);
			BufferStream.RangeHandle range144 = stream.GetRange(1);
			int position144 = stream.Position;
			DiverPropulsionVehicle.SerializeDelta(stream, instance.diverPropulsionVehicle, previous.diverPropulsionVehicle);
			int num172 = stream.Position - position144;
			if (num172 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field diverPropulsionVehicle (ProtoBuf.DiverPropulsionVehicle)");
			}
			Span<byte> span144 = range144.GetSpan();
			ProtocolParser.WriteUInt32((uint)num172, span144, 0);
		}
		if (instance.travellingVendor != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(10);
			BufferStream.RangeHandle range145 = stream.GetRange(1);
			int position145 = stream.Position;
			TravellingVendor.SerializeDelta(stream, instance.travellingVendor, previous.travellingVendor);
			int num173 = stream.Position - position145;
			if (num173 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field travellingVendor (ProtoBuf.TravellingVendor)");
			}
			Span<byte> span145 = range145.GetSpan();
			ProtocolParser.WriteUInt32((uint)num173, span145, 0);
		}
		if (instance.vendingDynamicPricing != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(10);
			BufferStream.RangeHandle range146 = stream.GetRange(3);
			int position146 = stream.Position;
			VendingDynamicPricing.SerializeDelta(stream, instance.vendingDynamicPricing, previous.vendingDynamicPricing);
			int num174 = stream.Position - position146;
			if (num174 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vendingDynamicPricing (ProtoBuf.VendingDynamicPricing)");
			}
			Span<byte> span146 = range146.GetSpan();
			int num175 = ProtocolParser.WriteUInt32((uint)num174, span146, 0);
			if (num175 < 3)
			{
				span146[num175 - 1] |= 128;
				while (num175 < 2)
				{
					span146[num175++] = 128;
				}
				span146[2] = 0;
			}
		}
		if (instance.tinCanAlarm != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(11);
			BufferStream.RangeHandle range147 = stream.GetRange(1);
			int position147 = stream.Position;
			TinCanAlarm.SerializeDelta(stream, instance.tinCanAlarm, previous.tinCanAlarm);
			int num176 = stream.Position - position147;
			if (num176 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field tinCanAlarm (ProtoBuf.TinCanAlarm)");
			}
			Span<byte> span147 = range147.GetSpan();
			ProtocolParser.WriteUInt32((uint)num176, span147, 0);
		}
		if (instance.digitalClock != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(11);
			BufferStream.RangeHandle range148 = stream.GetRange(3);
			int position148 = stream.Position;
			DigitalClock.SerializeDelta(stream, instance.digitalClock, previous.digitalClock);
			int num177 = stream.Position - position148;
			if (num177 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field digitalClock (ProtoBuf.DigitalClock)");
			}
			Span<byte> span148 = range148.GetSpan();
			int num178 = ProtocolParser.WriteUInt32((uint)num177, span148, 0);
			if (num178 < 3)
			{
				span148[num178 - 1] |= 128;
				while (num178 < 2)
				{
					span148[num178++] = 128;
				}
				span148[2] = 0;
			}
		}
		if (instance.elevatorLift != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(11);
			BufferStream.RangeHandle range149 = stream.GetRange(1);
			int position149 = stream.Position;
			ElevatorLift.SerializeDelta(stream, instance.elevatorLift, previous.elevatorLift);
			int num179 = stream.Position - position149;
			if (num179 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field elevatorLift (ProtoBuf.ElevatorLift)");
			}
			Span<byte> span149 = range149.GetSpan();
			ProtocolParser.WriteUInt32((uint)num179, span149, 0);
		}
		if (instance.npcVendingMachine != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(11);
			BufferStream.RangeHandle range150 = stream.GetRange(1);
			int position150 = stream.Position;
			NPCVendingMachine.SerializeDelta(stream, instance.npcVendingMachine, previous.npcVendingMachine);
			int num180 = stream.Position - position150;
			if (num180 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field npcVendingMachine (ProtoBuf.NPCVendingMachine)");
			}
			Span<byte> span150 = range150.GetSpan();
			ProtocolParser.WriteUInt32((uint)num180, span150, 0);
		}
		if (instance.mailbox != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(11);
			BufferStream.RangeHandle range151 = stream.GetRange(5);
			int position151 = stream.Position;
			Mailbox.SerializeDelta(stream, instance.mailbox, previous.mailbox);
			int val37 = stream.Position - position151;
			Span<byte> span151 = range151.GetSpan();
			int num181 = ProtocolParser.WriteUInt32((uint)val37, span151, 0);
			if (num181 < 5)
			{
				span151[num181 - 1] |= 128;
				while (num181 < 4)
				{
					span151[num181++] = 128;
				}
				span151[4] = 0;
			}
		}
		if (instance.projectileWeaponMod != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(11);
			BufferStream.RangeHandle range152 = stream.GetRange(1);
			int position152 = stream.Position;
			GunWeaponMod.SerializeDelta(stream, instance.projectileWeaponMod, previous.projectileWeaponMod);
			int num182 = stream.Position - position152;
			if (num182 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field projectileWeaponMod (ProtoBuf.GunWeaponMod)");
			}
			Span<byte> span152 = range152.GetSpan();
			ProtocolParser.WriteUInt32((uint)num182, span152, 0);
		}
		if (instance.baseSculpture != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(11);
			BufferStream.RangeHandle range153 = stream.GetRange(1);
			int position153 = stream.Position;
			BaseSculpture.SerializeDelta(stream, instance.baseSculpture, previous.baseSculpture);
			int num183 = stream.Position - position153;
			if (num183 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseSculpture (ProtoBuf.BaseSculpture)");
			}
			Span<byte> span153 = range153.GetSpan();
			ProtocolParser.WriteUInt32((uint)num183, span153, 0);
		}
		if (instance.vendingMachineStats != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(11);
			BufferStream.RangeHandle range154 = stream.GetRange(3);
			int position154 = stream.Position;
			VendingMachineStats.SerializeDelta(stream, instance.vendingMachineStats, previous.vendingMachineStats);
			int num184 = stream.Position - position154;
			if (num184 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vendingMachineStats (ProtoBuf.VendingMachineStats)");
			}
			Span<byte> span154 = range154.GetSpan();
			int num185 = ProtocolParser.WriteUInt32((uint)num184, span154, 0);
			if (num185 < 3)
			{
				span154[num185 - 1] |= 128;
				while (num185 < 2)
				{
					span154[num185++] = 128;
				}
				span154[2] = 0;
			}
		}
		if (instance.catapult != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(11);
			BufferStream.RangeHandle range155 = stream.GetRange(1);
			int position155 = stream.Position;
			Catapult.SerializeDelta(stream, instance.catapult, previous.catapult);
			int num186 = stream.Position - position155;
			if (num186 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field catapult (ProtoBuf.Catapult)");
			}
			Span<byte> span155 = range155.GetSpan();
			ProtocolParser.WriteUInt32((uint)num186, span155, 0);
		}
		if (instance.siegeTower != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(11);
			BufferStream.RangeHandle range156 = stream.GetRange(1);
			int position156 = stream.Position;
			SiegeTower.SerializeDelta(stream, instance.siegeTower, previous.siegeTower);
			int num187 = stream.Position - position156;
			if (num187 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field siegeTower (ProtoBuf.SiegeTower)");
			}
			Span<byte> span156 = range156.GetSpan();
			ProtocolParser.WriteUInt32((uint)num187, span156, 0);
		}
		if (instance.ballista != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(11);
			BufferStream.RangeHandle range157 = stream.GetRange(1);
			int position157 = stream.Position;
			Ballista.SerializeDelta(stream, instance.ballista, previous.ballista);
			int num188 = stream.Position - position157;
			if (num188 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ballista (ProtoBuf.Ballista)");
			}
			Span<byte> span157 = range157.GetSpan();
			ProtocolParser.WriteUInt32((uint)num188, span157, 0);
		}
		if (instance.ballistaGun != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(11);
			BufferStream.RangeHandle range158 = stream.GetRange(1);
			int position158 = stream.Position;
			BallistaGun.SerializeDelta(stream, instance.ballistaGun, previous.ballistaGun);
			int num189 = stream.Position - position158;
			if (num189 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ballistaGun (ProtoBuf.BallistaGun)");
			}
			Span<byte> span158 = range158.GetSpan();
			ProtocolParser.WriteUInt32((uint)num189, span158, 0);
		}
		if (instance.batteringRam != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(11);
			BufferStream.RangeHandle range159 = stream.GetRange(1);
			int position159 = stream.Position;
			BatteringRam.SerializeDelta(stream, instance.batteringRam, previous.batteringRam);
			int num190 = stream.Position - position159;
			if (num190 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field batteringRam (ProtoBuf.BatteringRam)");
			}
			Span<byte> span159 = range159.GetSpan();
			ProtocolParser.WriteUInt32((uint)num190, span159, 0);
		}
		if (instance.temporaryRagdoll != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(11);
			BufferStream.RangeHandle range160 = stream.GetRange(1);
			int position160 = stream.Position;
			TemporaryRagdoll.SerializeDelta(stream, instance.temporaryRagdoll, previous.temporaryRagdoll);
			int num191 = stream.Position - position160;
			if (num191 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field temporaryRagdoll (ProtoBuf.TemporaryRagdoll)");
			}
			Span<byte> span160 = range160.GetSpan();
			ProtocolParser.WriteUInt32((uint)num191, span160, 0);
		}
		if (instance.constructableEntity != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(11);
			BufferStream.RangeHandle range161 = stream.GetRange(3);
			int position161 = stream.Position;
			ConstructableEntity.SerializeDelta(stream, instance.constructableEntity, previous.constructableEntity);
			int num192 = stream.Position - position161;
			if (num192 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field constructableEntity (ProtoBuf.ConstructableEntity)");
			}
			Span<byte> span161 = range161.GetSpan();
			int num193 = ProtocolParser.WriteUInt32((uint)num192, span161, 0);
			if (num193 < 3)
			{
				span161[num193 - 1] |= 128;
				while (num193 < 2)
				{
					span161[num193++] = 128;
				}
				span161[2] = 0;
			}
		}
		if (instance.chickenCoop != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(12);
			BufferStream.RangeHandle range162 = stream.GetRange(3);
			int position162 = stream.Position;
			ChickenCoop.SerializeDelta(stream, instance.chickenCoop, previous.chickenCoop);
			int num194 = stream.Position - position162;
			if (num194 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field chickenCoop (ProtoBuf.ChickenCoop)");
			}
			Span<byte> span162 = range162.GetSpan();
			int num195 = ProtocolParser.WriteUInt32((uint)num194, span162, 0);
			if (num195 < 3)
			{
				span162[num195 - 1] |= 128;
				while (num195 < 2)
				{
					span162[num195++] = 128;
				}
				span162[2] = 0;
			}
		}
		if (instance.farmableAnimal != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(12);
			BufferStream.RangeHandle range163 = stream.GetRange(5);
			int position163 = stream.Position;
			FarmableAnimal.SerializeDelta(stream, instance.farmableAnimal, previous.farmableAnimal);
			int val38 = stream.Position - position163;
			Span<byte> span163 = range163.GetSpan();
			int num196 = ProtocolParser.WriteUInt32((uint)val38, span163, 0);
			if (num196 < 5)
			{
				span163[num196 - 1] |= 128;
				while (num196 < 4)
				{
					span163[num196++] = 128;
				}
				span163[4] = 0;
			}
		}
		if (instance.ownership != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(12);
			BufferStream.RangeHandle range164 = stream.GetRange(5);
			int position164 = stream.Position;
			ItemOwnershipAmount.SerializeDelta(stream, instance.ownership, previous.ownership);
			int val39 = stream.Position - position164;
			Span<byte> span164 = range164.GetSpan();
			int num197 = ProtocolParser.WriteUInt32((uint)val39, span164, 0);
			if (num197 < 5)
			{
				span164[num197 - 1] |= 128;
				while (num197 < 4)
				{
					span164[num197++] = 128;
				}
				span164[4] = 0;
			}
		}
		if (instance.beehive != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(12);
			BufferStream.RangeHandle range165 = stream.GetRange(1);
			int position165 = stream.Position;
			Beehive.SerializeDelta(stream, instance.beehive, previous.beehive);
			int num198 = stream.Position - position165;
			if (num198 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field beehive (ProtoBuf.Beehive)");
			}
			Span<byte> span165 = range165.GetSpan();
			ProtocolParser.WriteUInt32((uint)num198, span165, 0);
		}
		if (instance.beeMasterSwarm != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(12);
			BufferStream.RangeHandle range166 = stream.GetRange(1);
			int position166 = stream.Position;
			BeeMasterSwarm.SerializeDelta(stream, instance.beeMasterSwarm, previous.beeMasterSwarm);
			int num199 = stream.Position - position166;
			if (num199 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field beeMasterSwarm (ProtoBuf.BeeMasterSwarm)");
			}
			Span<byte> span166 = range166.GetSpan();
			ProtocolParser.WriteUInt32((uint)num199, span166, 0);
		}
		if (instance.containerCorpse != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(12);
			BufferStream.RangeHandle range167 = stream.GetRange(5);
			int position167 = stream.Position;
			ContainerCorpseData.SerializeDelta(stream, instance.containerCorpse, previous.containerCorpse);
			int val40 = stream.Position - position167;
			Span<byte> span167 = range167.GetSpan();
			int num200 = ProtocolParser.WriteUInt32((uint)val40, span167, 0);
			if (num200 < 5)
			{
				span167[num200 - 1] |= 128;
				while (num200 < 4)
				{
					span167[num200++] = 128;
				}
				span167[4] = 0;
			}
		}
		if (instance.npcSensesState != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(12);
			BufferStream.RangeHandle range168 = stream.GetRange(1);
			int position168 = stream.Position;
			NPCSensesState.SerializeDelta(stream, instance.npcSensesState, previous.npcSensesState);
			int num201 = stream.Position - position168;
			if (num201 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field npcSensesState (ProtoBuf.NPCSensesState)");
			}
			Span<byte> span168 = range168.GetSpan();
			ProtocolParser.WriteUInt32((uint)num201, span168, 0);
		}
		if (instance.vineMountable != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(12);
			BufferStream.RangeHandle range169 = stream.GetRange(3);
			int position169 = stream.Position;
			VineMountable.SerializeDelta(stream, instance.vineMountable, previous.vineMountable);
			int num202 = stream.Position - position169;
			if (num202 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vineMountable (ProtoBuf.VineMountable)");
			}
			Span<byte> span169 = range169.GetSpan();
			int num203 = ProtocolParser.WriteUInt32((uint)num202, span169, 0);
			if (num203 < 3)
			{
				span169[num203 - 1] |= 128;
				while (num203 < 2)
				{
					span169[num203++] = 128;
				}
				span169[2] = 0;
			}
		}
		if (instance.vineTree != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(12);
			BufferStream.RangeHandle range170 = stream.GetRange(3);
			int position170 = stream.Position;
			VineTree.SerializeDelta(stream, instance.vineTree, previous.vineTree);
			int num204 = stream.Position - position170;
			if (num204 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vineTree (ProtoBuf.VineTree)");
			}
			Span<byte> span170 = range170.GetSpan();
			int num205 = ProtocolParser.WriteUInt32((uint)num204, span170, 0);
			if (num205 < 3)
			{
				span170[num205 - 1] |= 128;
				while (num205 < 2)
				{
					span170[num205++] = 128;
				}
				span170[2] = 0;
			}
		}
		if (instance.treeRespawn != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(12);
			BufferStream.RangeHandle range171 = stream.GetRange(1);
			int position171 = stream.Position;
			TreeRespawn.SerializeDelta(stream, instance.treeRespawn, previous.treeRespawn);
			int num206 = stream.Position - position171;
			if (num206 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field treeRespawn (ProtoBuf.TreeRespawn)");
			}
			Span<byte> span171 = range171.GetSpan();
			ProtocolParser.WriteUInt32((uint)num206, span171, 0);
		}
		if (instance.wallpaperTool != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(12);
			BufferStream.RangeHandle range172 = stream.GetRange(1);
			int position172 = stream.Position;
			WallpaperTool.SerializeDelta(stream, instance.wallpaperTool, previous.wallpaperTool);
			int num207 = stream.Position - position172;
			if (num207 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field wallpaperTool (ProtoBuf.WallpaperTool)");
			}
			Span<byte> span172 = range172.GetSpan();
			ProtocolParser.WriteUInt32((uint)num207, span172, 0);
		}
		if (instance.commandBlock != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(12);
			BufferStream.RangeHandle range173 = stream.GetRange(5);
			int position173 = stream.Position;
			CommandBlock.SerializeDelta(stream, instance.commandBlock, previous.commandBlock);
			int val41 = stream.Position - position173;
			Span<byte> span173 = range173.GetSpan();
			int num208 = ProtocolParser.WriteUInt32((uint)val41, span173, 0);
			if (num208 < 5)
			{
				span173[num208 - 1] |= 128;
				while (num208 < 4)
				{
					span173[num208++] = 128;
				}
				span173[4] = 0;
			}
		}
		if (instance.staticRespawn != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(12);
			BufferStream.RangeHandle range174 = stream.GetRange(3);
			int position174 = stream.Position;
			StaticRespawnAreaData.SerializeDelta(stream, instance.staticRespawn, previous.staticRespawn);
			int num209 = stream.Position - position174;
			if (num209 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field staticRespawn (ProtoBuf.StaticRespawnAreaData)");
			}
			Span<byte> span174 = range174.GetSpan();
			int num210 = ProtocolParser.WriteUInt32((uint)num209, span174, 0);
			if (num210 < 3)
			{
				span174[num210 - 1] |= 128;
				while (num210 < 2)
				{
					span174[num210++] = 128;
				}
				span174[2] = 0;
			}
		}
		if (instance.buriedItemStorage == null)
		{
			return;
		}
		stream.WriteByte(234);
		stream.WriteByte(12);
		BufferStream.RangeHandle range175 = stream.GetRange(5);
		int position175 = stream.Position;
		BuriedItems.SerializeDelta(stream, instance.buriedItemStorage, previous.buriedItemStorage);
		int val42 = stream.Position - position175;
		Span<byte> span175 = range175.GetSpan();
		int num211 = ProtocolParser.WriteUInt32((uint)val42, span175, 0);
		if (num211 < 5)
		{
			span175[num211 - 1] |= 128;
			while (num211 < 4)
			{
				span175[num211++] = 128;
			}
			span175[4] = 0;
		}
	}

	public static void Serialize(BufferStream stream, Entity instance)
	{
		if (instance.baseNetworkable != null)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			BaseNetworkable.Serialize(stream, instance.baseNetworkable);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseNetworkable (ProtoBuf.BaseNetworkable)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.baseEntity != null)
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(5);
			int position2 = stream.Position;
			BaseEntity.Serialize(stream, instance.baseEntity);
			int val = stream.Position - position2;
			Span<byte> span2 = range2.GetSpan();
			int num2 = ProtocolParser.WriteUInt32((uint)val, span2, 0);
			if (num2 < 5)
			{
				span2[num2 - 1] |= 128;
				while (num2 < 4)
				{
					span2[num2++] = 128;
				}
				span2[4] = 0;
			}
		}
		if (instance.basePlayer != null)
		{
			stream.WriteByte(26);
			BufferStream.RangeHandle range3 = stream.GetRange(5);
			int position3 = stream.Position;
			BasePlayer.Serialize(stream, instance.basePlayer);
			int val2 = stream.Position - position3;
			Span<byte> span3 = range3.GetSpan();
			int num3 = ProtocolParser.WriteUInt32((uint)val2, span3, 0);
			if (num3 < 5)
			{
				span3[num3 - 1] |= 128;
				while (num3 < 4)
				{
					span3[num3++] = 128;
				}
				span3[4] = 0;
			}
		}
		if (instance.worldItem != null)
		{
			stream.WriteByte(34);
			BufferStream.RangeHandle range4 = stream.GetRange(5);
			int position4 = stream.Position;
			WorldItem.Serialize(stream, instance.worldItem);
			int val3 = stream.Position - position4;
			Span<byte> span4 = range4.GetSpan();
			int num4 = ProtocolParser.WriteUInt32((uint)val3, span4, 0);
			if (num4 < 5)
			{
				span4[num4 - 1] |= 128;
				while (num4 < 4)
				{
					span4[num4++] = 128;
				}
				span4[4] = 0;
			}
		}
		if (instance.resource != null)
		{
			stream.WriteByte(42);
			BufferStream.RangeHandle range5 = stream.GetRange(1);
			int position5 = stream.Position;
			BaseResource.Serialize(stream, instance.resource);
			int num5 = stream.Position - position5;
			if (num5 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field resource (ProtoBuf.BaseResource)");
			}
			Span<byte> span5 = range5.GetSpan();
			ProtocolParser.WriteUInt32((uint)num5, span5, 0);
		}
		if (instance.buildingBlock != null)
		{
			stream.WriteByte(50);
			BufferStream.RangeHandle range6 = stream.GetRange(1);
			int position6 = stream.Position;
			BuildingBlock.Serialize(stream, instance.buildingBlock);
			int num6 = stream.Position - position6;
			if (num6 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field buildingBlock (ProtoBuf.BuildingBlock)");
			}
			Span<byte> span6 = range6.GetSpan();
			ProtocolParser.WriteUInt32((uint)num6, span6, 0);
		}
		if (instance.environment != null)
		{
			stream.WriteByte(58);
			BufferStream.RangeHandle range7 = stream.GetRange(1);
			int position7 = stream.Position;
			ProtoBuf.Environment.Serialize(stream, instance.environment);
			int num7 = stream.Position - position7;
			if (num7 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field environment (ProtoBuf.Environment)");
			}
			Span<byte> span7 = range7.GetSpan();
			ProtocolParser.WriteUInt32((uint)num7, span7, 0);
		}
		if (instance.corpse != null)
		{
			stream.WriteByte(66);
			BufferStream.RangeHandle range8 = stream.GetRange(1);
			int position8 = stream.Position;
			Corpse.Serialize(stream, instance.corpse);
			int num8 = stream.Position - position8;
			if (num8 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field corpse (ProtoBuf.Corpse)");
			}
			Span<byte> span8 = range8.GetSpan();
			ProtocolParser.WriteUInt32((uint)num8, span8, 0);
		}
		if (instance.parent != null)
		{
			stream.WriteByte(82);
			BufferStream.RangeHandle range9 = stream.GetRange(1);
			int position9 = stream.Position;
			ParentInfo.Serialize(stream, instance.parent);
			int num9 = stream.Position - position9;
			if (num9 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field parent (ProtoBuf.ParentInfo)");
			}
			Span<byte> span9 = range9.GetSpan();
			ProtocolParser.WriteUInt32((uint)num9, span9, 0);
		}
		if (instance.keyLock != null)
		{
			stream.WriteByte(90);
			BufferStream.RangeHandle range10 = stream.GetRange(1);
			int position10 = stream.Position;
			KeyLock.Serialize(stream, instance.keyLock);
			int num10 = stream.Position - position10;
			if (num10 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field keyLock (ProtoBuf.KeyLock)");
			}
			Span<byte> span10 = range10.GetSpan();
			ProtocolParser.WriteUInt32((uint)num10, span10, 0);
		}
		if (instance.codeLock != null)
		{
			stream.WriteByte(98);
			BufferStream.RangeHandle range11 = stream.GetRange(5);
			int position11 = stream.Position;
			CodeLock.Serialize(stream, instance.codeLock);
			int val4 = stream.Position - position11;
			Span<byte> span11 = range11.GetSpan();
			int num11 = ProtocolParser.WriteUInt32((uint)val4, span11, 0);
			if (num11 < 5)
			{
				span11[num11 - 1] |= 128;
				while (num11 < 4)
				{
					span11[num11++] = 128;
				}
				span11[4] = 0;
			}
		}
		if (instance.entitySlots != null)
		{
			stream.WriteByte(106);
			BufferStream.RangeHandle range12 = stream.GetRange(1);
			int position12 = stream.Position;
			EntitySlots.Serialize(stream, instance.entitySlots);
			int num12 = stream.Position - position12;
			if (num12 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field entitySlots (ProtoBuf.EntitySlots)");
			}
			Span<byte> span12 = range12.GetSpan();
			ProtocolParser.WriteUInt32((uint)num12, span12, 0);
		}
		if (instance.buildingPrivilege != null)
		{
			stream.WriteByte(114);
			BufferStream.RangeHandle range13 = stream.GetRange(5);
			int position13 = stream.Position;
			BuildingPrivilege.Serialize(stream, instance.buildingPrivilege);
			int val5 = stream.Position - position13;
			Span<byte> span13 = range13.GetSpan();
			int num13 = ProtocolParser.WriteUInt32((uint)val5, span13, 0);
			if (num13 < 5)
			{
				span13[num13 - 1] |= 128;
				while (num13 < 4)
				{
					span13[num13++] = 128;
				}
				span13[4] = 0;
			}
		}
		if (instance.storageBox != null)
		{
			stream.WriteByte(122);
			BufferStream.RangeHandle range14 = stream.GetRange(5);
			int position14 = stream.Position;
			StorageBox.Serialize(stream, instance.storageBox);
			int val6 = stream.Position - position14;
			Span<byte> span14 = range14.GetSpan();
			int num14 = ProtocolParser.WriteUInt32((uint)val6, span14, 0);
			if (num14 < 5)
			{
				span14[num14 - 1] |= 128;
				while (num14 < 4)
				{
					span14[num14++] = 128;
				}
				span14[4] = 0;
			}
		}
		if (instance.heldEntity != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(1);
			BufferStream.RangeHandle range15 = stream.GetRange(1);
			int position15 = stream.Position;
			HeldEntity.Serialize(stream, instance.heldEntity);
			int num15 = stream.Position - position15;
			if (num15 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field heldEntity (ProtoBuf.HeldEntity)");
			}
			Span<byte> span15 = range15.GetSpan();
			ProtocolParser.WriteUInt32((uint)num15, span15, 0);
		}
		if (instance.baseProjectile != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(1);
			BufferStream.RangeHandle range16 = stream.GetRange(1);
			int position16 = stream.Position;
			BaseProjectile.Serialize(stream, instance.baseProjectile);
			int num16 = stream.Position - position16;
			if (num16 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseProjectile (ProtoBuf.BaseProjectile)");
			}
			Span<byte> span16 = range16.GetSpan();
			ProtocolParser.WriteUInt32((uint)num16, span16, 0);
		}
		if (instance.baseNPC != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(1);
			BufferStream.RangeHandle range17 = stream.GetRange(1);
			int position17 = stream.Position;
			BaseNPC.Serialize(stream, instance.baseNPC);
			int num17 = stream.Position - position17;
			if (num17 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseNPC (ProtoBuf.BaseNPC)");
			}
			Span<byte> span17 = range17.GetSpan();
			ProtocolParser.WriteUInt32((uint)num17, span17, 0);
		}
		if (instance.loot != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(1);
			BufferStream.RangeHandle range18 = stream.GetRange(5);
			int position18 = stream.Position;
			Loot.Serialize(stream, instance.loot);
			int val7 = stream.Position - position18;
			Span<byte> span18 = range18.GetSpan();
			int num18 = ProtocolParser.WriteUInt32((uint)val7, span18, 0);
			if (num18 < 5)
			{
				span18[num18 - 1] |= 128;
				while (num18 < 4)
				{
					span18[num18++] = 128;
				}
				span18[4] = 0;
			}
		}
		if (instance.genericSpawner != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(1);
			BufferStream.RangeHandle range19 = stream.GetRange(3);
			int position19 = stream.Position;
			GenericSpawner.Serialize(stream, instance.genericSpawner);
			int num19 = stream.Position - position19;
			if (num19 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field genericSpawner (ProtoBuf.GenericSpawner)");
			}
			Span<byte> span19 = range19.GetSpan();
			int num20 = ProtocolParser.WriteUInt32((uint)num19, span19, 0);
			if (num20 < 3)
			{
				span19[num20 - 1] |= 128;
				while (num20 < 2)
				{
					span19[num20++] = 128;
				}
				span19[2] = 0;
			}
		}
		if (instance.sleepingBag != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(1);
			BufferStream.RangeHandle range20 = stream.GetRange(5);
			int position20 = stream.Position;
			SleepingBag.Serialize(stream, instance.sleepingBag);
			int val8 = stream.Position - position20;
			Span<byte> span20 = range20.GetSpan();
			int num21 = ProtocolParser.WriteUInt32((uint)val8, span20, 0);
			if (num21 < 5)
			{
				span20[num21 - 1] |= 128;
				while (num21 < 4)
				{
					span20[num21++] = 128;
				}
				span20[4] = 0;
			}
		}
		if (instance.lootableCorpse != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(1);
			BufferStream.RangeHandle range21 = stream.GetRange(5);
			int position21 = stream.Position;
			LootableCorpse.Serialize(stream, instance.lootableCorpse);
			int val9 = stream.Position - position21;
			Span<byte> span21 = range21.GetSpan();
			int num22 = ProtocolParser.WriteUInt32((uint)val9, span21, 0);
			if (num22 < 5)
			{
				span21[num22 - 1] |= 128;
				while (num22 < 4)
				{
					span21[num22++] = 128;
				}
				span21[4] = 0;
			}
		}
		if (instance.sign != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(1);
			BufferStream.RangeHandle range22 = stream.GetRange(3);
			int position22 = stream.Position;
			Sign.Serialize(stream, instance.sign);
			int num23 = stream.Position - position22;
			if (num23 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sign (ProtoBuf.Sign)");
			}
			Span<byte> span22 = range22.GetSpan();
			int num24 = ProtocolParser.WriteUInt32((uint)num23, span22, 0);
			if (num24 < 3)
			{
				span22[num24 - 1] |= 128;
				while (num24 < 2)
				{
					span22[num24++] = 128;
				}
				span22[2] = 0;
			}
		}
		if (instance.baseCombat != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(1);
			BufferStream.RangeHandle range23 = stream.GetRange(1);
			int position23 = stream.Position;
			BaseCombat.Serialize(stream, instance.baseCombat);
			int num25 = stream.Position - position23;
			if (num25 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseCombat (ProtoBuf.BaseCombat)");
			}
			Span<byte> span23 = range23.GetSpan();
			ProtocolParser.WriteUInt32((uint)num25, span23, 0);
		}
		if (instance.mapEntity != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(1);
			BufferStream.RangeHandle range24 = stream.GetRange(3);
			int position24 = stream.Position;
			MapEntity.Serialize(stream, instance.mapEntity);
			int num26 = stream.Position - position24;
			if (num26 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mapEntity (ProtoBuf.MapEntity)");
			}
			Span<byte> span24 = range24.GetSpan();
			int num27 = ProtocolParser.WriteUInt32((uint)num26, span24, 0);
			if (num27 < 3)
			{
				span24[num27 - 1] |= 128;
				while (num27 < 2)
				{
					span24[num27++] = 128;
				}
				span24[2] = 0;
			}
		}
		if (instance.researchTable != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(1);
			BufferStream.RangeHandle range25 = stream.GetRange(1);
			int position25 = stream.Position;
			ResearchTable.Serialize(stream, instance.researchTable);
			int num28 = stream.Position - position25;
			if (num28 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field researchTable (ProtoBuf.ResearchTable)");
			}
			Span<byte> span25 = range25.GetSpan();
			ProtocolParser.WriteUInt32((uint)num28, span25, 0);
		}
		if (instance.dudExplosive != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(1);
			BufferStream.RangeHandle range26 = stream.GetRange(1);
			int position26 = stream.Position;
			DudExplosive.Serialize(stream, instance.dudExplosive);
			int num29 = stream.Position - position26;
			if (num29 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field dudExplosive (ProtoBuf.DudExplosive)");
			}
			Span<byte> span26 = range26.GetSpan();
			ProtocolParser.WriteUInt32((uint)num29, span26, 0);
		}
		if (instance.miningQuarry != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(1);
			BufferStream.RangeHandle range27 = stream.GetRange(5);
			int position27 = stream.Position;
			MiningQuarry.Serialize(stream, instance.miningQuarry);
			int val10 = stream.Position - position27;
			Span<byte> span27 = range27.GetSpan();
			int num30 = ProtocolParser.WriteUInt32((uint)val10, span27, 0);
			if (num30 < 5)
			{
				span27[num30 - 1] |= 128;
				while (num30 < 4)
				{
					span27[num30++] = 128;
				}
				span27[4] = 0;
			}
		}
		if (instance.baseVehicle != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(1);
			BufferStream.RangeHandle range28 = stream.GetRange(3);
			int position28 = stream.Position;
			BaseVehicle.Serialize(stream, instance.baseVehicle);
			int num31 = stream.Position - position28;
			if (num31 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseVehicle (ProtoBuf.BaseVehicle)");
			}
			Span<byte> span28 = range28.GetSpan();
			int num32 = ProtocolParser.WriteUInt32((uint)num31, span28, 0);
			if (num32 < 3)
			{
				span28[num32 - 1] |= 128;
				while (num32 < 2)
				{
					span28[num32++] = 128;
				}
				span28[2] = 0;
			}
		}
		if (instance.helicopter != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(1);
			BufferStream.RangeHandle range29 = stream.GetRange(3);
			int position29 = stream.Position;
			Helicopter.Serialize(stream, instance.helicopter);
			int num33 = stream.Position - position29;
			if (num33 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field helicopter (ProtoBuf.Helicopter)");
			}
			Span<byte> span29 = range29.GetSpan();
			int num34 = ProtocolParser.WriteUInt32((uint)num33, span29, 0);
			if (num34 < 3)
			{
				span29[num34 - 1] |= 128;
				while (num34 < 2)
				{
					span29[num34++] = 128;
				}
				span29[2] = 0;
			}
		}
		if (instance.landmine != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(1);
			BufferStream.RangeHandle range30 = stream.GetRange(1);
			int position30 = stream.Position;
			Landmine.Serialize(stream, instance.landmine);
			int num35 = stream.Position - position30;
			if (num35 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field landmine (ProtoBuf.Landmine)");
			}
			Span<byte> span30 = range30.GetSpan();
			ProtocolParser.WriteUInt32((uint)num35, span30, 0);
		}
		if (instance.autoturret != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(2);
			BufferStream.RangeHandle range31 = stream.GetRange(5);
			int position31 = stream.Position;
			AutoTurret.Serialize(stream, instance.autoturret);
			int val11 = stream.Position - position31;
			Span<byte> span31 = range31.GetSpan();
			int num36 = ProtocolParser.WriteUInt32((uint)val11, span31, 0);
			if (num36 < 5)
			{
				span31[num36 - 1] |= 128;
				while (num36 < 4)
				{
					span31[num36++] = 128;
				}
				span31[4] = 0;
			}
		}
		if (instance.sphereEntity != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(2);
			BufferStream.RangeHandle range32 = stream.GetRange(1);
			int position32 = stream.Position;
			SphereEntity.Serialize(stream, instance.sphereEntity);
			int num37 = stream.Position - position32;
			if (num37 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sphereEntity (ProtoBuf.SphereEntity)");
			}
			Span<byte> span32 = range32.GetSpan();
			ProtocolParser.WriteUInt32((uint)num37, span32, 0);
		}
		if (instance.stabilityEntity != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(2);
			BufferStream.RangeHandle range33 = stream.GetRange(1);
			int position33 = stream.Position;
			StabilityEntity.Serialize(stream, instance.stabilityEntity);
			int num38 = stream.Position - position33;
			if (num38 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field stabilityEntity (ProtoBuf.StabilityEntity)");
			}
			Span<byte> span33 = range33.GetSpan();
			ProtocolParser.WriteUInt32((uint)num38, span33, 0);
		}
		if (instance.ownerInfo != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(2);
			BufferStream.RangeHandle range34 = stream.GetRange(1);
			int position34 = stream.Position;
			OwnerInfo.Serialize(stream, instance.ownerInfo);
			int num39 = stream.Position - position34;
			if (num39 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ownerInfo (ProtoBuf.OwnerInfo)");
			}
			Span<byte> span34 = range34.GetSpan();
			ProtocolParser.WriteUInt32((uint)num39, span34, 0);
		}
		if (instance.decayEntity != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(2);
			BufferStream.RangeHandle range35 = stream.GetRange(1);
			int position35 = stream.Position;
			DecayEntity.Serialize(stream, instance.decayEntity);
			int num40 = stream.Position - position35;
			if (num40 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field decayEntity (ProtoBuf.DecayEntity)");
			}
			Span<byte> span35 = range35.GetSpan();
			ProtocolParser.WriteUInt32((uint)num40, span35, 0);
		}
		if (instance.spawnable != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(2);
			BufferStream.RangeHandle range36 = stream.GetRange(1);
			int position36 = stream.Position;
			Spawnable.Serialize(stream, instance.spawnable);
			int num41 = stream.Position - position36;
			if (num41 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field spawnable (ProtoBuf.Spawnable)");
			}
			Span<byte> span36 = range36.GetSpan();
			ProtocolParser.WriteUInt32((uint)num41, span36, 0);
		}
		if (instance.servergib != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(2);
			BufferStream.RangeHandle range37 = stream.GetRange(5);
			int position37 = stream.Position;
			ServerGib.Serialize(stream, instance.servergib);
			int val12 = stream.Position - position37;
			Span<byte> span37 = range37.GetSpan();
			int num42 = ProtocolParser.WriteUInt32((uint)val12, span37, 0);
			if (num42 < 5)
			{
				span37[num42 - 1] |= 128;
				while (num42 < 4)
				{
					span37[num42++] = 128;
				}
				span37[4] = 0;
			}
		}
		if (instance.vendingMachine != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(2);
			BufferStream.RangeHandle range38 = stream.GetRange(5);
			int position38 = stream.Position;
			VendingMachine.Serialize(stream, instance.vendingMachine);
			int val13 = stream.Position - position38;
			Span<byte> span38 = range38.GetSpan();
			int num43 = ProtocolParser.WriteUInt32((uint)val13, span38, 0);
			if (num43 < 5)
			{
				span38[num43 - 1] |= 128;
				while (num43 < 4)
				{
					span38[num43++] = 128;
				}
				span38[4] = 0;
			}
		}
		if (instance.spinnerWheel != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(2);
			BufferStream.RangeHandle range39 = stream.GetRange(1);
			int position39 = stream.Position;
			SpinnerWheel.Serialize(stream, instance.spinnerWheel);
			int num44 = stream.Position - position39;
			if (num44 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field spinnerWheel (ProtoBuf.SpinnerWheel)");
			}
			Span<byte> span39 = range39.GetSpan();
			ProtocolParser.WriteUInt32((uint)num44, span39, 0);
		}
		if (instance.lift != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(2);
			BufferStream.RangeHandle range40 = stream.GetRange(1);
			int position40 = stream.Position;
			Lift.Serialize(stream, instance.lift);
			int num45 = stream.Position - position40;
			if (num45 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lift (ProtoBuf.Lift)");
			}
			Span<byte> span40 = range40.GetSpan();
			ProtocolParser.WriteUInt32((uint)num45, span40, 0);
		}
		if (instance.bradley != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(2);
			BufferStream.RangeHandle range41 = stream.GetRange(2);
			int position41 = stream.Position;
			BradleyAPC.Serialize(stream, instance.bradley);
			int num46 = stream.Position - position41;
			if (num46 > 16383)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field bradley (ProtoBuf.BradleyAPC)");
			}
			Span<byte> span41 = range41.GetSpan();
			if (ProtocolParser.WriteUInt32((uint)num46, span41, 0) < 2)
			{
				span41[0] |= 128;
				span41[1] = 0;
			}
		}
		if (instance.waterwell != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(2);
			BufferStream.RangeHandle range42 = stream.GetRange(1);
			int position42 = stream.Position;
			WaterWell.Serialize(stream, instance.waterwell);
			int num47 = stream.Position - position42;
			if (num47 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field waterwell (ProtoBuf.WaterWell)");
			}
			Span<byte> span42 = range42.GetSpan();
			ProtocolParser.WriteUInt32((uint)num47, span42, 0);
		}
		if (instance.motorBoat != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(2);
			BufferStream.RangeHandle range43 = stream.GetRange(1);
			int position43 = stream.Position;
			Motorboat.Serialize(stream, instance.motorBoat);
			int num48 = stream.Position - position43;
			if (num48 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field motorBoat (ProtoBuf.Motorboat)");
			}
			Span<byte> span43 = range43.GetSpan();
			ProtocolParser.WriteUInt32((uint)num48, span43, 0);
		}
		if (instance.ioEntity != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(2);
			BufferStream.RangeHandle range44 = stream.GetRange(5);
			int position44 = stream.Position;
			IOEntity.Serialize(stream, instance.ioEntity);
			int val14 = stream.Position - position44;
			Span<byte> span44 = range44.GetSpan();
			int num49 = ProtocolParser.WriteUInt32((uint)val14, span44, 0);
			if (num49 < 5)
			{
				span44[num49 - 1] |= 128;
				while (num49 < 4)
				{
					span44[num49++] = 128;
				}
				span44[4] = 0;
			}
		}
		if (instance.puzzleReset != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(2);
			BufferStream.RangeHandle range45 = stream.GetRange(1);
			int position45 = stream.Position;
			PuzzleReset.Serialize(stream, instance.puzzleReset);
			int num50 = stream.Position - position45;
			if (num50 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field puzzleReset (ProtoBuf.PuzzleReset)");
			}
			Span<byte> span45 = range45.GetSpan();
			ProtocolParser.WriteUInt32((uint)num50, span45, 0);
		}
		if (instance.relationshipManager != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(2);
			BufferStream.RangeHandle range46 = stream.GetRange(5);
			int position46 = stream.Position;
			RelationshipManager.Serialize(stream, instance.relationshipManager);
			int val15 = stream.Position - position46;
			Span<byte> span46 = range46.GetSpan();
			int num51 = ProtocolParser.WriteUInt32((uint)val15, span46, 0);
			if (num51 < 5)
			{
				span46[num51 - 1] |= 128;
				while (num51 < 4)
				{
					span46[num51++] = 128;
				}
				span46[4] = 0;
			}
		}
		if (instance.hotAirBalloon != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(3);
			BufferStream.RangeHandle range47 = stream.GetRange(1);
			int position47 = stream.Position;
			HotAirBalloon.Serialize(stream, instance.hotAirBalloon);
			int num52 = stream.Position - position47;
			if (num52 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field hotAirBalloon (ProtoBuf.HotAirBalloon)");
			}
			Span<byte> span47 = range47.GetSpan();
			ProtocolParser.WriteUInt32((uint)num52, span47, 0);
		}
		if (instance.samSite != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(3);
			BufferStream.RangeHandle range48 = stream.GetRange(1);
			int position48 = stream.Position;
			SAMSite.Serialize(stream, instance.samSite);
			int num53 = stream.Position - position48;
			if (num53 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field samSite (ProtoBuf.SAMSite)");
			}
			Span<byte> span48 = range48.GetSpan();
			ProtocolParser.WriteUInt32((uint)num53, span48, 0);
		}
		if (instance.eggHunt != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(3);
			BufferStream.RangeHandle range49 = stream.GetRange(5);
			int position49 = stream.Position;
			EggHunt.Serialize(stream, instance.eggHunt);
			int val16 = stream.Position - position49;
			Span<byte> span49 = range49.GetSpan();
			int num54 = ProtocolParser.WriteUInt32((uint)val16, span49, 0);
			if (num54 < 5)
			{
				span49[num54 - 1] |= 128;
				while (num54 < 4)
				{
					span49[num54++] = 128;
				}
				span49[4] = 0;
			}
		}
		if (instance.arcadeMachine != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(3);
			BufferStream.RangeHandle range50 = stream.GetRange(5);
			int position50 = stream.Position;
			ArcadeMachine.Serialize(stream, instance.arcadeMachine);
			int val17 = stream.Position - position50;
			Span<byte> span50 = range50.GetSpan();
			int num55 = ProtocolParser.WriteUInt32((uint)val17, span50, 0);
			if (num55 < 5)
			{
				span50[num55 - 1] |= 128;
				while (num55 < 4)
				{
					span50[num55++] = 128;
				}
				span50[4] = 0;
			}
		}
		if (instance.miniCopter != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(3);
			BufferStream.RangeHandle range51 = stream.GetRange(1);
			int position51 = stream.Position;
			Minicopter.Serialize(stream, instance.miniCopter);
			int num56 = stream.Position - position51;
			if (num56 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field miniCopter (ProtoBuf.Minicopter)");
			}
			Span<byte> span51 = range51.GetSpan();
			ProtocolParser.WriteUInt32((uint)num56, span51, 0);
		}
		if (instance.horse != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(3);
			BufferStream.RangeHandle range52 = stream.GetRange(5);
			int position52 = stream.Position;
			Horse.Serialize(stream, instance.horse);
			int val18 = stream.Position - position52;
			Span<byte> span52 = range52.GetSpan();
			int num57 = ProtocolParser.WriteUInt32((uint)val18, span52, 0);
			if (num57 < 5)
			{
				span52[num57 - 1] |= 128;
				while (num57 < 4)
				{
					span52[num57++] = 128;
				}
				span52[4] = 0;
			}
		}
		if (instance.smartAlarm != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(3);
			BufferStream.RangeHandle range53 = stream.GetRange(5);
			int position53 = stream.Position;
			SmartAlarm.Serialize(stream, instance.smartAlarm);
			int val19 = stream.Position - position53;
			Span<byte> span53 = range53.GetSpan();
			int num58 = ProtocolParser.WriteUInt32((uint)val19, span53, 0);
			if (num58 < 5)
			{
				span53[num58 - 1] |= 128;
				while (num58 < 4)
				{
					span53[num58++] = 128;
				}
				span53[4] = 0;
			}
		}
		if (instance.lightString != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(3);
			BufferStream.RangeHandle range54 = stream.GetRange(3);
			int position54 = stream.Position;
			LightString.Serialize(stream, instance.lightString);
			int num59 = stream.Position - position54;
			if (num59 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lightString (ProtoBuf.LightString)");
			}
			Span<byte> span54 = range54.GetSpan();
			int num60 = ProtocolParser.WriteUInt32((uint)num59, span54, 0);
			if (num60 < 3)
			{
				span54[num60 - 1] |= 128;
				while (num60 < 2)
				{
					span54[num60++] = 128;
				}
				span54[2] = 0;
			}
		}
		if (instance.lightDeployer != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(3);
			BufferStream.RangeHandle range55 = stream.GetRange(1);
			int position55 = stream.Position;
			LightDeployer.Serialize(stream, instance.lightDeployer);
			int num61 = stream.Position - position55;
			if (num61 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field lightDeployer (ProtoBuf.LightDeployer)");
			}
			Span<byte> span55 = range55.GetSpan();
			ProtocolParser.WriteUInt32((uint)num61, span55, 0);
		}
		if (instance.rcEntity != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(3);
			BufferStream.RangeHandle range56 = stream.GetRange(5);
			int position56 = stream.Position;
			RCEntity.Serialize(stream, instance.rcEntity);
			int val20 = stream.Position - position56;
			Span<byte> span56 = range56.GetSpan();
			int num62 = ProtocolParser.WriteUInt32((uint)val20, span56, 0);
			if (num62 < 5)
			{
				span56[num62 - 1] |= 128;
				while (num62 < 4)
				{
					span56[num62++] = 128;
				}
				span56[4] = 0;
			}
		}
		if (instance.computerStation != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(3);
			BufferStream.RangeHandle range57 = stream.GetRange(5);
			int position57 = stream.Position;
			ComputerStation.Serialize(stream, instance.computerStation);
			int val21 = stream.Position - position57;
			Span<byte> span57 = range57.GetSpan();
			int num63 = ProtocolParser.WriteUInt32((uint)val21, span57, 0);
			if (num63 < 5)
			{
				span57[num63 - 1] |= 128;
				while (num63 < 4)
				{
					span57[num63++] = 128;
				}
				span57[4] = 0;
			}
		}
		if (instance.growableEntity != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(3);
			BufferStream.RangeHandle range58 = stream.GetRange(1);
			int position58 = stream.Position;
			GrowableEntity.Serialize(stream, instance.growableEntity);
			int num64 = stream.Position - position58;
			if (num64 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field growableEntity (ProtoBuf.GrowableEntity)");
			}
			Span<byte> span58 = range58.GetSpan();
			ProtocolParser.WriteUInt32((uint)num64, span58, 0);
		}
		if (instance.composter != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(3);
			BufferStream.RangeHandle range59 = stream.GetRange(1);
			int position59 = stream.Position;
			Composter.Serialize(stream, instance.composter);
			int num65 = stream.Position - position59;
			if (num65 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field composter (ProtoBuf.Composter)");
			}
			Span<byte> span59 = range59.GetSpan();
			ProtocolParser.WriteUInt32((uint)num65, span59, 0);
		}
		if (instance.modularVehicle != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(3);
			BufferStream.RangeHandle range60 = stream.GetRange(1);
			int position60 = stream.Position;
			ModularVehicle.Serialize(stream, instance.modularVehicle);
			int num66 = stream.Position - position60;
			if (num66 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field modularVehicle (ProtoBuf.ModularVehicle)");
			}
			Span<byte> span60 = range60.GetSpan();
			ProtocolParser.WriteUInt32((uint)num66, span60, 0);
		}
		if (instance.modularCar != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(3);
			BufferStream.RangeHandle range61 = stream.GetRange(5);
			int position61 = stream.Position;
			ModularCar.Serialize(stream, instance.modularCar);
			int val22 = stream.Position - position61;
			Span<byte> span61 = range61.GetSpan();
			int num67 = ProtocolParser.WriteUInt32((uint)val22, span61, 0);
			if (num67 < 5)
			{
				span61[num67 - 1] |= 128;
				while (num67 < 4)
				{
					span61[num67++] = 128;
				}
				span61[4] = 0;
			}
		}
		if (instance.simpleUID != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(3);
			BufferStream.RangeHandle range62 = stream.GetRange(1);
			int position62 = stream.Position;
			SimpleUID.Serialize(stream, instance.simpleUID);
			int num68 = stream.Position - position62;
			if (num68 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field simpleUID (ProtoBuf.SimpleUID)");
			}
			Span<byte> span62 = range62.GetSpan();
			ProtocolParser.WriteUInt32((uint)num68, span62, 0);
		}
		if (instance.vehicleLift != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(4);
			BufferStream.RangeHandle range63 = stream.GetRange(1);
			int position63 = stream.Position;
			VehicleLift.Serialize(stream, instance.vehicleLift);
			int num69 = stream.Position - position63;
			if (num69 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vehicleLift (ProtoBuf.VehicleLift)");
			}
			Span<byte> span63 = range63.GetSpan();
			ProtocolParser.WriteUInt32((uint)num69, span63, 0);
		}
		if (instance.engineStorage != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(4);
			BufferStream.RangeHandle range64 = stream.GetRange(1);
			int position64 = stream.Position;
			EngineStorage.Serialize(stream, instance.engineStorage);
			int num70 = stream.Position - position64;
			if (num70 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field engineStorage (ProtoBuf.EngineStorage)");
			}
			Span<byte> span64 = range64.GetSpan();
			ProtocolParser.WriteUInt32((uint)num70, span64, 0);
		}
		if (instance.vehicleVendor != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(4);
			BufferStream.RangeHandle range65 = stream.GetRange(5);
			int position65 = stream.Position;
			VehicleVendor.Serialize(stream, instance.vehicleVendor);
			int val23 = stream.Position - position65;
			Span<byte> span65 = range65.GetSpan();
			int num71 = ProtocolParser.WriteUInt32((uint)val23, span65, 0);
			if (num71 < 5)
			{
				span65[num71 - 1] |= 128;
				while (num71 < 4)
				{
					span65[num71++] = 128;
				}
				span65[4] = 0;
			}
		}
		if (instance.WaterPool != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(4);
			BufferStream.RangeHandle range66 = stream.GetRange(1);
			int position66 = stream.Position;
			WaterPool.Serialize(stream, instance.WaterPool);
			int num72 = stream.Position - position66;
			if (num72 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field WaterPool (ProtoBuf.WaterPool)");
			}
			Span<byte> span66 = range66.GetSpan();
			ProtocolParser.WriteUInt32((uint)num72, span66, 0);
		}
		if (instance.photo != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(4);
			BufferStream.RangeHandle range67 = stream.GetRange(1);
			int position67 = stream.Position;
			Photo.Serialize(stream, instance.photo);
			int num73 = stream.Position - position67;
			if (num73 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field photo (ProtoBuf.Photo)");
			}
			Span<byte> span67 = range67.GetSpan();
			ProtocolParser.WriteUInt32((uint)num73, span67, 0);
		}
		if (instance.photoFrame != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(4);
			BufferStream.RangeHandle range68 = stream.GetRange(3);
			int position68 = stream.Position;
			PhotoFrame.Serialize(stream, instance.photoFrame);
			int num74 = stream.Position - position68;
			if (num74 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field photoFrame (ProtoBuf.PhotoFrame)");
			}
			Span<byte> span68 = range68.GetSpan();
			int num75 = ProtocolParser.WriteUInt32((uint)num74, span68, 0);
			if (num75 < 3)
			{
				span68[num75 - 1] |= 128;
				while (num75 < 2)
				{
					span68[num75++] = 128;
				}
				span68[2] = 0;
			}
		}
		if (instance.vehicleModule != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(4);
			BufferStream.RangeHandle range69 = stream.GetRange(1);
			int position69 = stream.Position;
			VehicleModule.Serialize(stream, instance.vehicleModule);
			int num76 = stream.Position - position69;
			if (num76 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vehicleModule (ProtoBuf.VehicleModule)");
			}
			Span<byte> span69 = range69.GetSpan();
			ProtocolParser.WriteUInt32((uint)num76, span69, 0);
		}
		if (instance.mixingTable != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(4);
			BufferStream.RangeHandle range70 = stream.GetRange(1);
			int position70 = stream.Position;
			MixingTable.Serialize(stream, instance.mixingTable);
			int num77 = stream.Position - position70;
			if (num77 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mixingTable (ProtoBuf.MixingTable)");
			}
			Span<byte> span70 = range70.GetSpan();
			ProtocolParser.WriteUInt32((uint)num77, span70, 0);
		}
		if (instance.shopKeeper != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(4);
			BufferStream.RangeHandle range71 = stream.GetRange(1);
			int position71 = stream.Position;
			ShopKeeper.Serialize(stream, instance.shopKeeper);
			int num78 = stream.Position - position71;
			if (num78 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field shopKeeper (ProtoBuf.ShopKeeper)");
			}
			Span<byte> span71 = range71.GetSpan();
			ProtocolParser.WriteUInt32((uint)num78, span71, 0);
		}
		if (instance.elevator != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(4);
			BufferStream.RangeHandle range72 = stream.GetRange(1);
			int position72 = stream.Position;
			Elevator.Serialize(stream, instance.elevator);
			int num79 = stream.Position - position72;
			if (num79 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field elevator (ProtoBuf.Elevator)");
			}
			Span<byte> span72 = range72.GetSpan();
			ProtocolParser.WriteUInt32((uint)num79, span72, 0);
		}
		if (instance.skullTrophy != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(4);
			BufferStream.RangeHandle range73 = stream.GetRange(5);
			int position73 = stream.Position;
			SkullTrophy.Serialize(stream, instance.skullTrophy);
			int val24 = stream.Position - position73;
			Span<byte> span73 = range73.GetSpan();
			int num80 = ProtocolParser.WriteUInt32((uint)val24, span73, 0);
			if (num80 < 5)
			{
				span73[num80 - 1] |= 128;
				while (num80 < 4)
				{
					span73[num80++] = 128;
				}
				span73[4] = 0;
			}
		}
		if (instance.cassette != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(4);
			BufferStream.RangeHandle range74 = stream.GetRange(1);
			int position74 = stream.Position;
			Cassette.Serialize(stream, instance.cassette);
			int num81 = stream.Position - position74;
			if (num81 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cassette (ProtoBuf.Cassette)");
			}
			Span<byte> span74 = range74.GetSpan();
			ProtocolParser.WriteUInt32((uint)num81, span74, 0);
		}
		if (instance.telephone != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(4);
			BufferStream.RangeHandle range75 = stream.GetRange(5);
			int position75 = stream.Position;
			Telephone.Serialize(stream, instance.telephone);
			int val25 = stream.Position - position75;
			Span<byte> span75 = range75.GetSpan();
			int num82 = ProtocolParser.WriteUInt32((uint)val25, span75, 0);
			if (num82 < 5)
			{
				span75[num82 - 1] |= 128;
				while (num82 < 4)
				{
					span75[num82++] = 128;
				}
				span75[4] = 0;
			}
		}
		if (instance.boomBox != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(4);
			BufferStream.RangeHandle range76 = stream.GetRange(5);
			int position76 = stream.Position;
			BoomBox.Serialize(stream, instance.boomBox);
			int val26 = stream.Position - position76;
			Span<byte> span76 = range76.GetSpan();
			int num83 = ProtocolParser.WriteUInt32((uint)val26, span76, 0);
			if (num83 < 5)
			{
				span76[num83 - 1] |= 128;
				while (num83 < 4)
				{
					span76[num83++] = 128;
				}
				span76[4] = 0;
			}
		}
		if (instance.neonSign != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(4);
			BufferStream.RangeHandle range77 = stream.GetRange(3);
			int position77 = stream.Position;
			NeonSign.Serialize(stream, instance.neonSign);
			int num84 = stream.Position - position77;
			if (num84 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field neonSign (ProtoBuf.NeonSign)");
			}
			Span<byte> span77 = range77.GetSpan();
			int num85 = ProtocolParser.WriteUInt32((uint)num84, span77, 0);
			if (num85 < 3)
			{
				span77[num85 - 1] |= 128;
				while (num85 < 2)
				{
					span77[num85++] = 128;
				}
				span77[2] = 0;
			}
		}
		if (instance.subEntityList != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(4);
			BufferStream.RangeHandle range78 = stream.GetRange(3);
			int position78 = stream.Position;
			SubEntityList.Serialize(stream, instance.subEntityList);
			int num86 = stream.Position - position78;
			if (num86 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field subEntityList (ProtoBuf.SubEntityList)");
			}
			Span<byte> span78 = range78.GetSpan();
			int num87 = ProtocolParser.WriteUInt32((uint)num86, span78, 0);
			if (num87 < 3)
			{
				span78[num87 - 1] |= 128;
				while (num87 < 2)
				{
					span78[num87++] = 128;
				}
				span78[2] = 0;
			}
		}
		if (instance.marketTerminal != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(5);
			BufferStream.RangeHandle range79 = stream.GetRange(5);
			int position79 = stream.Position;
			MarketTerminal.Serialize(stream, instance.marketTerminal);
			int val27 = stream.Position - position79;
			Span<byte> span79 = range79.GetSpan();
			int num88 = ProtocolParser.WriteUInt32((uint)val27, span79, 0);
			if (num88 < 5)
			{
				span79[num88 - 1] |= 128;
				while (num88 < 4)
				{
					span79[num88++] = 128;
				}
				span79[4] = 0;
			}
		}
		if (instance.deliveryDrone != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(5);
			BufferStream.RangeHandle range80 = stream.GetRange(1);
			int position80 = stream.Position;
			DeliveryDrone.Serialize(stream, instance.deliveryDrone);
			int num89 = stream.Position - position80;
			if (num89 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field deliveryDrone (ProtoBuf.DeliveryDrone)");
			}
			Span<byte> span80 = range80.GetSpan();
			ProtocolParser.WriteUInt32((uint)num89, span80, 0);
		}
		if (instance.reclaimTerminal != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(5);
			BufferStream.RangeHandle range81 = stream.GetRange(1);
			int position81 = stream.Position;
			ReclaimTerminal.Serialize(stream, instance.reclaimTerminal);
			int num90 = stream.Position - position81;
			if (num90 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field reclaimTerminal (ProtoBuf.ReclaimTerminal)");
			}
			Span<byte> span81 = range81.GetSpan();
			ProtocolParser.WriteUInt32((uint)num90, span81, 0);
		}
		if (instance.slotMachine != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(5);
			BufferStream.RangeHandle range82 = stream.GetRange(1);
			int position82 = stream.Position;
			SlotMachine.Serialize(stream, instance.slotMachine);
			int num91 = stream.Position - position82;
			if (num91 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field slotMachine (ProtoBuf.SlotMachine)");
			}
			Span<byte> span82 = range82.GetSpan();
			ProtocolParser.WriteUInt32((uint)num91, span82, 0);
		}
		if (instance.trainEngine != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(5);
			BufferStream.RangeHandle range83 = stream.GetRange(1);
			int position83 = stream.Position;
			TrainEngine.Serialize(stream, instance.trainEngine);
			int num92 = stream.Position - position83;
			if (num92 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field trainEngine (ProtoBuf.TrainEngine)");
			}
			Span<byte> span83 = range83.GetSpan();
			ProtocolParser.WriteUInt32((uint)num92, span83, 0);
		}
		if (instance.cardGame != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(5);
			BufferStream.RangeHandle range84 = stream.GetRange(5);
			int position84 = stream.Position;
			CardGame.Serialize(stream, instance.cardGame);
			int num93 = stream.Position - position84;
			if (num93 > int.MaxValue)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cardGame (ProtoBuf.CardGame)");
			}
			Span<byte> span84 = range84.GetSpan();
			int num94 = ProtocolParser.WriteUInt32((uint)num93, span84, 0);
			if (num94 < 5)
			{
				span84[num94 - 1] |= 128;
				while (num94 < 4)
				{
					span84[num94++] = 128;
				}
				span84[4] = 0;
			}
		}
		if (instance.crane != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(5);
			BufferStream.RangeHandle range85 = stream.GetRange(1);
			int position85 = stream.Position;
			Crane.Serialize(stream, instance.crane);
			int num95 = stream.Position - position85;
			if (num95 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field crane (ProtoBuf.Crane)");
			}
			Span<byte> span85 = range85.GetSpan();
			ProtocolParser.WriteUInt32((uint)num95, span85, 0);
		}
		if (instance.connectedSpeaker != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(5);
			BufferStream.RangeHandle range86 = stream.GetRange(1);
			int position86 = stream.Position;
			ConnectedSpeaker.Serialize(stream, instance.connectedSpeaker);
			int num96 = stream.Position - position86;
			if (num96 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field connectedSpeaker (ProtoBuf.ConnectedSpeaker)");
			}
			Span<byte> span86 = range86.GetSpan();
			ProtocolParser.WriteUInt32((uint)num96, span86, 0);
		}
		if (instance.audioEntity != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(5);
			BufferStream.RangeHandle range87 = stream.GetRange(1);
			int position87 = stream.Position;
			AudioEntity.Serialize(stream, instance.audioEntity);
			int num97 = stream.Position - position87;
			if (num97 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field audioEntity (ProtoBuf.AudioEntity)");
			}
			Span<byte> span87 = range87.GetSpan();
			ProtocolParser.WriteUInt32((uint)num97, span87, 0);
		}
		if (instance.microphoneStand != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(5);
			BufferStream.RangeHandle range88 = stream.GetRange(1);
			int position88 = stream.Position;
			MicrophoneStand.Serialize(stream, instance.microphoneStand);
			int num98 = stream.Position - position88;
			if (num98 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field microphoneStand (ProtoBuf.MicrophoneStand)");
			}
			Span<byte> span88 = range88.GetSpan();
			ProtocolParser.WriteUInt32((uint)num98, span88, 0);
		}
		if (instance.submarine != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(5);
			BufferStream.RangeHandle range89 = stream.GetRange(1);
			int position89 = stream.Position;
			Submarine.Serialize(stream, instance.submarine);
			int num99 = stream.Position - position89;
			if (num99 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field submarine (ProtoBuf.Submarine)");
			}
			Span<byte> span89 = range89.GetSpan();
			ProtocolParser.WriteUInt32((uint)num99, span89, 0);
		}
		if (instance.sleepingBagCamper != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(5);
			BufferStream.RangeHandle range90 = stream.GetRange(1);
			int position90 = stream.Position;
			SleepingBagCamper.Serialize(stream, instance.sleepingBagCamper);
			int num100 = stream.Position - position90;
			if (num100 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sleepingBagCamper (ProtoBuf.SleepingBagCamper)");
			}
			Span<byte> span90 = range90.GetSpan();
			ProtocolParser.WriteUInt32((uint)num100, span90, 0);
		}
		if (instance.camperModule != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(5);
			BufferStream.RangeHandle range91 = stream.GetRange(1);
			int position91 = stream.Position;
			CamperModule.Serialize(stream, instance.camperModule);
			int num101 = stream.Position - position91;
			if (num101 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field camperModule (ProtoBuf.CamperModule)");
			}
			Span<byte> span91 = range91.GetSpan();
			ProtocolParser.WriteUInt32((uint)num101, span91, 0);
		}
		if (instance.paintableSign != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(5);
			BufferStream.RangeHandle range92 = stream.GetRange(3);
			int position92 = stream.Position;
			PaintableSign.Serialize(stream, instance.paintableSign);
			int num102 = stream.Position - position92;
			if (num102 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field paintableSign (ProtoBuf.PaintableSign)");
			}
			Span<byte> span92 = range92.GetSpan();
			int num103 = ProtocolParser.WriteUInt32((uint)num102, span92, 0);
			if (num103 < 3)
			{
				span92[num103 - 1] |= 128;
				while (num103 < 2)
				{
					span92[num103++] = 128;
				}
				span92[2] = 0;
			}
		}
		if (instance.whitelist != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(5);
			BufferStream.RangeHandle range93 = stream.GetRange(3);
			int position93 = stream.Position;
			Whitelist.Serialize(stream, instance.whitelist);
			int num104 = stream.Position - position93;
			if (num104 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field whitelist (ProtoBuf.Whitelist)");
			}
			Span<byte> span93 = range93.GetSpan();
			int num105 = ProtocolParser.WriteUInt32((uint)num104, span93, 0);
			if (num105 < 3)
			{
				span93[num105 - 1] |= 128;
				while (num105 < 2)
				{
					span93[num105++] = 128;
				}
				span93[2] = 0;
			}
		}
		if (instance.FrankensteinTable != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(5);
			BufferStream.RangeHandle range94 = stream.GetRange(3);
			int position94 = stream.Position;
			FrankensteinTable.Serialize(stream, instance.FrankensteinTable);
			int num106 = stream.Position - position94;
			if (num106 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field FrankensteinTable (ProtoBuf.FrankensteinTable)");
			}
			Span<byte> span94 = range94.GetSpan();
			int num107 = ProtocolParser.WriteUInt32((uint)num106, span94, 0);
			if (num107 < 3)
			{
				span94[num107 - 1] |= 128;
				while (num107 < 2)
				{
					span94[num107++] = 128;
				}
				span94[2] = 0;
			}
		}
		if (instance.mlrs != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(6);
			BufferStream.RangeHandle range95 = stream.GetRange(1);
			int position95 = stream.Position;
			MLRS.Serialize(stream, instance.mlrs);
			int num108 = stream.Position - position95;
			if (num108 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field mlrs (ProtoBuf.MLRS)");
			}
			Span<byte> span95 = range95.GetSpan();
			ProtocolParser.WriteUInt32((uint)num108, span95, 0);
		}
		if (instance.reclaimManager != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(6);
			BufferStream.RangeHandle range96 = stream.GetRange(5);
			int position96 = stream.Position;
			ReclaimManager.Serialize(stream, instance.reclaimManager);
			int val28 = stream.Position - position96;
			Span<byte> span96 = range96.GetSpan();
			int num109 = ProtocolParser.WriteUInt32((uint)val28, span96, 0);
			if (num109 < 5)
			{
				span96[num109 - 1] |= 128;
				while (num109 < 4)
				{
					span96[num109++] = 128;
				}
				span96[4] = 0;
			}
		}
		if (instance.gameMode != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(6);
			BufferStream.RangeHandle range97 = stream.GetRange(5);
			int position97 = stream.Position;
			GameMode.Serialize(stream, instance.gameMode);
			int val29 = stream.Position - position97;
			Span<byte> span97 = range97.GetSpan();
			int num110 = ProtocolParser.WriteUInt32((uint)val29, span97, 0);
			if (num110 < 5)
			{
				span97[num110 - 1] |= 128;
				while (num110 < 4)
				{
					span97[num110++] = 128;
				}
				span97[4] = 0;
			}
		}
		if (instance.snowmobile != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(6);
			BufferStream.RangeHandle range98 = stream.GetRange(1);
			int position98 = stream.Position;
			Snowmobile.Serialize(stream, instance.snowmobile);
			int num111 = stream.Position - position98;
			if (num111 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field snowmobile (ProtoBuf.Snowmobile)");
			}
			Span<byte> span98 = range98.GetSpan();
			ProtocolParser.WriteUInt32((uint)num111, span98, 0);
		}
		if (instance.createdThisFrame)
		{
			stream.WriteByte(160);
			stream.WriteByte(6);
			ProtocolParser.WriteBool(stream, instance.createdThisFrame);
		}
		if (instance.patternFirework != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(6);
			BufferStream.RangeHandle range99 = stream.GetRange(3);
			int position99 = stream.Position;
			PatternFirework.Serialize(stream, instance.patternFirework);
			int num112 = stream.Position - position99;
			if (num112 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field patternFirework (ProtoBuf.PatternFirework)");
			}
			Span<byte> span99 = range99.GetSpan();
			int num113 = ProtocolParser.WriteUInt32((uint)num112, span99, 0);
			if (num113 < 3)
			{
				span99[num113 - 1] |= 128;
				while (num113 < 2)
				{
					span99[num113++] = 128;
				}
				span99[2] = 0;
			}
		}
		if (instance.cargoPlane != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(6);
			BufferStream.RangeHandle range100 = stream.GetRange(1);
			int position100 = stream.Position;
			CargoPlane.Serialize(stream, instance.cargoPlane);
			int num114 = stream.Position - position100;
			if (num114 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cargoPlane (ProtoBuf.CargoPlane)");
			}
			Span<byte> span100 = range100.GetSpan();
			ProtocolParser.WriteUInt32((uint)num114, span100, 0);
		}
		if (instance.paintedItem != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(6);
			BufferStream.RangeHandle range101 = stream.GetRange(1);
			int position101 = stream.Position;
			PaintedItem.Serialize(stream, instance.paintedItem);
			int num115 = stream.Position - position101;
			if (num115 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field paintedItem (ProtoBuf.PaintedItem)");
			}
			Span<byte> span101 = range101.GetSpan();
			ProtocolParser.WriteUInt32((uint)num115, span101, 0);
		}
		if (instance.clanManager != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(6);
			BufferStream.RangeHandle range102 = stream.GetRange(5);
			int position102 = stream.Position;
			ClanManager.Serialize(stream, instance.clanManager);
			int val30 = stream.Position - position102;
			Span<byte> span102 = range102.GetSpan();
			int num116 = ProtocolParser.WriteUInt32((uint)val30, span102, 0);
			if (num116 < 5)
			{
				span102[num116 - 1] |= 128;
				while (num116 < 4)
				{
					span102[num116++] = 128;
				}
				span102[4] = 0;
			}
		}
		if (instance.spray != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(6);
			BufferStream.RangeHandle range103 = stream.GetRange(1);
			int position103 = stream.Position;
			Spray.Serialize(stream, instance.spray);
			int num117 = stream.Position - position103;
			if (num117 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field spray (ProtoBuf.Spray)");
			}
			Span<byte> span103 = range103.GetSpan();
			ProtocolParser.WriteUInt32((uint)num117, span103, 0);
		}
		if (instance.baseTrain != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(6);
			BufferStream.RangeHandle range104 = stream.GetRange(1);
			int position104 = stream.Position;
			BaseTrain.Serialize(stream, instance.baseTrain);
			int num118 = stream.Position - position104;
			if (num118 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseTrain (ProtoBuf.BaseTrain)");
			}
			Span<byte> span104 = range104.GetSpan();
			ProtocolParser.WriteUInt32((uint)num118, span104, 0);
		}
		if (instance.zipline != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(6);
			BufferStream.RangeHandle range105 = stream.GetRange(3);
			int position105 = stream.Position;
			Zipline.Serialize(stream, instance.zipline);
			int num119 = stream.Position - position105;
			if (num119 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field zipline (ProtoBuf.Zipline)");
			}
			Span<byte> span105 = range105.GetSpan();
			int num120 = ProtocolParser.WriteUInt32((uint)num119, span105, 0);
			if (num120 < 3)
			{
				span105[num120 - 1] |= 128;
				while (num120 < 2)
				{
					span105[num120++] = 128;
				}
				span105[2] = 0;
			}
		}
		if (instance.ziplineMountable != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(6);
			BufferStream.RangeHandle range106 = stream.GetRange(3);
			int position106 = stream.Position;
			ZiplineMountable.Serialize(stream, instance.ziplineMountable);
			int num121 = stream.Position - position106;
			if (num121 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ziplineMountable (ProtoBuf.ZiplineMountable)");
			}
			Span<byte> span106 = range106.GetSpan();
			int num122 = ProtocolParser.WriteUInt32((uint)num121, span106, 0);
			if (num122 < 3)
			{
				span106[num122 - 1] |= 128;
				while (num122 < 2)
				{
					span106[num122++] = 128;
				}
				span106[2] = 0;
			}
		}
		if (instance.ZiplineArrival != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(6);
			BufferStream.RangeHandle range107 = stream.GetRange(3);
			int position107 = stream.Position;
			ZiplineArrivalPoint.Serialize(stream, instance.ZiplineArrival);
			int num123 = stream.Position - position107;
			if (num123 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ZiplineArrival (ProtoBuf.ZiplineArrivalPoint)");
			}
			Span<byte> span107 = range107.GetSpan();
			int num124 = ProtocolParser.WriteUInt32((uint)num123, span107, 0);
			if (num124 < 3)
			{
				span107[num124 - 1] |= 128;
				while (num124 < 2)
				{
					span107[num124++] = 128;
				}
				span107[2] = 0;
			}
		}
		if (instance.sprayLine != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(6);
			BufferStream.RangeHandle range108 = stream.GetRange(3);
			int position108 = stream.Position;
			SprayLine.Serialize(stream, instance.sprayLine);
			int num125 = stream.Position - position108;
			if (num125 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field sprayLine (ProtoBuf.SprayLine)");
			}
			Span<byte> span108 = range108.GetSpan();
			int num126 = ProtocolParser.WriteUInt32((uint)num125, span108, 0);
			if (num126 < 3)
			{
				span108[num126 - 1] |= 128;
				while (num126 < 2)
				{
					span108[num126++] = 128;
				}
				span108[2] = 0;
			}
		}
		if (instance.coalingTower != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(6);
			BufferStream.RangeHandle range109 = stream.GetRange(1);
			int position109 = stream.Position;
			CoalingTower.Serialize(stream, instance.coalingTower);
			int num127 = stream.Position - position109;
			if (num127 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field coalingTower (ProtoBuf.CoalingTower)");
			}
			Span<byte> span109 = range109.GetSpan();
			ProtocolParser.WriteUInt32((uint)num127, span109, 0);
		}
		if (instance.simpleInt != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(7);
			BufferStream.RangeHandle range110 = stream.GetRange(1);
			int position110 = stream.Position;
			SimpleInt.Serialize(stream, instance.simpleInt);
			int num128 = stream.Position - position110;
			if (num128 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field simpleInt (ProtoBuf.SimpleInt)");
			}
			Span<byte> span110 = range110.GetSpan();
			ProtocolParser.WriteUInt32((uint)num128, span110, 0);
		}
		if (instance.baseOven != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(7);
			BufferStream.RangeHandle range111 = stream.GetRange(3);
			int position111 = stream.Position;
			BaseOven.Serialize(stream, instance.baseOven);
			int num129 = stream.Position - position111;
			if (num129 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseOven (ProtoBuf.BaseOven)");
			}
			Span<byte> span111 = range111.GetSpan();
			int num130 = ProtocolParser.WriteUInt32((uint)num129, span111, 0);
			if (num130 < 3)
			{
				span111[num130 - 1] |= 128;
				while (num130 < 2)
				{
					span111[num130++] = 128;
				}
				span111[2] = 0;
			}
		}
		if (instance.brainComponent != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(7);
			BufferStream.RangeHandle range112 = stream.GetRange(1);
			int position112 = stream.Position;
			BrainComponent.Serialize(stream, instance.brainComponent);
			int num131 = stream.Position - position112;
			if (num131 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field brainComponent (ProtoBuf.BrainComponent)");
			}
			Span<byte> span112 = range112.GetSpan();
			ProtocolParser.WriteUInt32((uint)num131, span112, 0);
		}
		if (instance.proceduralDungeon != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(7);
			BufferStream.RangeHandle range113 = stream.GetRange(1);
			int position113 = stream.Position;
			ProceduralDungeon.Serialize(stream, instance.proceduralDungeon);
			int num132 = stream.Position - position113;
			if (num132 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field proceduralDungeon (ProtoBuf.ProceduralDungeon)");
			}
			Span<byte> span113 = range113.GetSpan();
			ProtocolParser.WriteUInt32((uint)num132, span113, 0);
		}
		if (instance.industrialConveyor != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(7);
			BufferStream.RangeHandle range114 = stream.GetRange(3);
			int position114 = stream.Position;
			IndustrialConveyor.Serialize(stream, instance.industrialConveyor);
			int num133 = stream.Position - position114;
			if (num133 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field industrialConveyor (ProtoBuf.IndustrialConveyor)");
			}
			Span<byte> span114 = range114.GetSpan();
			int num134 = ProtocolParser.WriteUInt32((uint)num133, span114, 0);
			if (num134 < 3)
			{
				span114[num134 - 1] |= 128;
				while (num134 < 2)
				{
					span114[num134++] = 128;
				}
				span114[2] = 0;
			}
		}
		if (instance.industrialCrafter != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(7);
			BufferStream.RangeHandle range115 = stream.GetRange(1);
			int position115 = stream.Position;
			IndustrialCrafter.Serialize(stream, instance.industrialCrafter);
			int num135 = stream.Position - position115;
			if (num135 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field industrialCrafter (ProtoBuf.IndustrialCrafter)");
			}
			Span<byte> span115 = range115.GetSpan();
			ProtocolParser.WriteUInt32((uint)num135, span115, 0);
		}
		if (instance.drone != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(7);
			BufferStream.RangeHandle range116 = stream.GetRange(1);
			int position116 = stream.Position;
			Drone.Serialize(stream, instance.drone);
			int num136 = stream.Position - position116;
			if (num136 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field drone (ProtoBuf.Drone)");
			}
			Span<byte> span116 = range116.GetSpan();
			ProtocolParser.WriteUInt32((uint)num136, span116, 0);
		}
		if (instance.explosive != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(7);
			BufferStream.RangeHandle range117 = stream.GetRange(1);
			int position117 = stream.Position;
			TimedExplosive.Serialize(stream, instance.explosive);
			int num137 = stream.Position - position117;
			if (num137 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field explosive (ProtoBuf.TimedExplosive)");
			}
			Span<byte> span117 = range117.GetSpan();
			ProtocolParser.WriteUInt32((uint)num137, span117, 0);
		}
		if (instance.simpleUint != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(7);
			BufferStream.RangeHandle range118 = stream.GetRange(1);
			int position118 = stream.Position;
			SimpleUInt.Serialize(stream, instance.simpleUint);
			int num138 = stream.Position - position118;
			if (num138 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field simpleUint (ProtoBuf.SimpleUInt)");
			}
			Span<byte> span118 = range118.GetSpan();
			ProtocolParser.WriteUInt32((uint)num138, span118, 0);
		}
		if (instance.weaponRack != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(7);
			BufferStream.RangeHandle range119 = stream.GetRange(3);
			int position119 = stream.Position;
			WeaponRack.Serialize(stream, instance.weaponRack);
			int num139 = stream.Position - position119;
			if (num139 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field weaponRack (ProtoBuf.WeaponRack)");
			}
			Span<byte> span119 = range119.GetSpan();
			int num140 = ProtocolParser.WriteUInt32((uint)num139, span119, 0);
			if (num140 < 3)
			{
				span119[num140 - 1] |= 128;
				while (num140 < 2)
				{
					span119[num140++] = 128;
				}
				span119[2] = 0;
			}
		}
		if (instance.attackHeli != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(7);
			BufferStream.RangeHandle range120 = stream.GetRange(1);
			int position120 = stream.Position;
			AttackHeli.Serialize(stream, instance.attackHeli);
			int num141 = stream.Position - position120;
			if (num141 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field attackHeli (ProtoBuf.AttackHeli)");
			}
			Span<byte> span120 = range120.GetSpan();
			ProtocolParser.WriteUInt32((uint)num141, span120, 0);
		}
		if (instance.attackHeliTurret != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(7);
			BufferStream.RangeHandle range121 = stream.GetRange(1);
			int position121 = stream.Position;
			AttackHeliTurret.Serialize(stream, instance.attackHeliTurret);
			int num142 = stream.Position - position121;
			if (num142 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field attackHeliTurret (ProtoBuf.AttackHeliTurret)");
			}
			Span<byte> span121 = range121.GetSpan();
			ProtocolParser.WriteUInt32((uint)num142, span121, 0);
		}
		if (instance.attackHeliRockets != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(7);
			BufferStream.RangeHandle range122 = stream.GetRange(1);
			int position122 = stream.Position;
			AttackHeliRockets.Serialize(stream, instance.attackHeliRockets);
			int num143 = stream.Position - position122;
			if (num143 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field attackHeliRockets (ProtoBuf.AttackHeliRockets)");
			}
			Span<byte> span122 = range122.GetSpan();
			ProtocolParser.WriteUInt32((uint)num143, span122, 0);
		}
		if (instance.baseBoat != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(7);
			BufferStream.RangeHandle range123 = stream.GetRange(1);
			int position123 = stream.Position;
			BaseBoat.Serialize(stream, instance.baseBoat);
			int num144 = stream.Position - position123;
			if (num144 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseBoat (ProtoBuf.BaseBoat)");
			}
			Span<byte> span123 = range123.GetSpan();
			ProtocolParser.WriteUInt32((uint)num144, span123, 0);
		}
		if (instance.ragdoll != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(7);
			BufferStream.RangeHandle range124 = stream.GetRange(3);
			int position124 = stream.Position;
			Ragdoll.Serialize(stream, instance.ragdoll);
			int num145 = stream.Position - position124;
			if (num145 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ragdoll (ProtoBuf.Ragdoll)");
			}
			Span<byte> span124 = range124.GetSpan();
			int num146 = ProtocolParser.WriteUInt32((uint)num145, span124, 0);
			if (num146 < 3)
			{
				span124[num146 - 1] |= 128;
				while (num146 < 2)
				{
					span124[num146++] = 128;
				}
				span124[2] = 0;
			}
		}
		if (instance.dieselEngine != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(7);
			BufferStream.RangeHandle range125 = stream.GetRange(1);
			int position125 = stream.Position;
			DieselEngine.Serialize(stream, instance.dieselEngine);
			int num147 = stream.Position - position125;
			if (num147 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field dieselEngine (ProtoBuf.DieselEngine)");
			}
			Span<byte> span125 = range125.GetSpan();
			ProtocolParser.WriteUInt32((uint)num147, span125, 0);
		}
		if (instance.associatedFiles != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(9);
			BufferStream.RangeHandle range126 = stream.GetRange(5);
			int position126 = stream.Position;
			AssociatedFiles.Serialize(stream, instance.associatedFiles);
			int val31 = stream.Position - position126;
			Span<byte> span126 = range126.GetSpan();
			int num148 = ProtocolParser.WriteUInt32((uint)val31, span126, 0);
			if (num148 < 5)
			{
				span126[num148 - 1] |= 128;
				while (num148 < 4)
				{
					span126[num148++] = 128;
				}
				span126[4] = 0;
			}
		}
		if (instance.nexusFerry != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(9);
			BufferStream.RangeHandle range127 = stream.GetRange(5);
			int position127 = stream.Position;
			NexusFerry.Serialize(stream, instance.nexusFerry);
			int val32 = stream.Position - position127;
			Span<byte> span127 = range127.GetSpan();
			int num149 = ProtocolParser.WriteUInt32((uint)val32, span127, 0);
			if (num149 < 5)
			{
				span127[num149 - 1] |= 128;
				while (num149 < 4)
				{
					span127[num149++] = 128;
				}
				span127[4] = 0;
			}
		}
		if (instance.nexusIsland != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(9);
			BufferStream.RangeHandle range128 = stream.GetRange(5);
			int position128 = stream.Position;
			NexusIsland.Serialize(stream, instance.nexusIsland);
			int val33 = stream.Position - position128;
			Span<byte> span128 = range128.GetSpan();
			int num150 = ProtocolParser.WriteUInt32((uint)val33, span128, 0);
			if (num150 < 5)
			{
				span128[num150 - 1] |= 128;
				while (num150 < 4)
				{
					span128[num150++] = 128;
				}
				span128[4] = 0;
			}
		}
		if (instance.nexusDockTerminal != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(9);
			BufferStream.RangeHandle range129 = stream.GetRange(3);
			int position129 = stream.Position;
			NexusDockTerminal.Serialize(stream, instance.nexusDockTerminal);
			int num151 = stream.Position - position129;
			if (num151 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field nexusDockTerminal (ProtoBuf.NexusDockTerminal)");
			}
			Span<byte> span129 = range129.GetSpan();
			int num152 = ProtocolParser.WriteUInt32((uint)num151, span129, 0);
			if (num152 < 3)
			{
				span129[num152 - 1] |= 128;
				while (num152 < 2)
				{
					span129[num152++] = 128;
				}
				span129[2] = 0;
			}
		}
		if (instance.rockingChair != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(9);
			BufferStream.RangeHandle range130 = stream.GetRange(1);
			int position130 = stream.Position;
			RockingChair.Serialize(stream, instance.rockingChair);
			int num153 = stream.Position - position130;
			if (num153 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field rockingChair (ProtoBuf.RockingChair)");
			}
			Span<byte> span130 = range130.GetSpan();
			ProtocolParser.WriteUInt32((uint)num153, span130, 0);
		}
		if (instance.headData != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(9);
			BufferStream.RangeHandle range131 = stream.GetRange(5);
			int position131 = stream.Position;
			HeadData.Serialize(stream, instance.headData);
			int val34 = stream.Position - position131;
			Span<byte> span131 = range131.GetSpan();
			int num154 = ProtocolParser.WriteUInt32((uint)val34, span131, 0);
			if (num154 < 5)
			{
				span131[num154 - 1] |= 128;
				while (num154 < 4)
				{
					span131[num154++] = 128;
				}
				span131[4] = 0;
			}
		}
		if (instance.wantedPoster != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(9);
			BufferStream.RangeHandle range132 = stream.GetRange(5);
			int position132 = stream.Position;
			WantedPoster.Serialize(stream, instance.wantedPoster);
			int val35 = stream.Position - position132;
			Span<byte> span132 = range132.GetSpan();
			int num155 = ProtocolParser.WriteUInt32((uint)val35, span132, 0);
			if (num155 < 5)
			{
				span132[num155 - 1] |= 128;
				while (num155 < 4)
				{
					span132[num155++] = 128;
				}
				span132[4] = 0;
			}
		}
		if (instance.waypointRace != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(9);
			BufferStream.RangeHandle range133 = stream.GetRange(3);
			int position133 = stream.Position;
			WaypointRace.Serialize(stream, instance.waypointRace);
			int num156 = stream.Position - position133;
			if (num156 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field waypointRace (ProtoBuf.WaypointRace)");
			}
			Span<byte> span133 = range133.GetSpan();
			int num157 = ProtocolParser.WriteUInt32((uint)num156, span133, 0);
			if (num157 < 3)
			{
				span133[num157 - 1] |= 128;
				while (num157 < 2)
				{
					span133[num157++] = 128;
				}
				span133[2] = 0;
			}
		}
		if (instance.legacyShelter != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(9);
			BufferStream.RangeHandle range134 = stream.GetRange(1);
			int position134 = stream.Position;
			LegacyShelter.Serialize(stream, instance.legacyShelter);
			int num158 = stream.Position - position134;
			if (num158 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field legacyShelter (ProtoBuf.LegacyShelter)");
			}
			Span<byte> span134 = range134.GetSpan();
			ProtocolParser.WriteUInt32((uint)num158, span134, 0);
		}
		if (instance.metalDetectorSource != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(10);
			BufferStream.RangeHandle range135 = stream.GetRange(3);
			int position135 = stream.Position;
			MetalDetectorSource.Serialize(stream, instance.metalDetectorSource);
			int num159 = stream.Position - position135;
			if (num159 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field metalDetectorSource (ProtoBuf.MetalDetectorSource)");
			}
			Span<byte> span135 = range135.GetSpan();
			int num160 = ProtocolParser.WriteUInt32((uint)num159, span135, 0);
			if (num160 < 3)
			{
				span135[num160 - 1] |= 128;
				while (num160 < 2)
				{
					span135[num160++] = 128;
				}
				span135[2] = 0;
			}
		}
		if (instance.tutorialIsland != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(10);
			BufferStream.RangeHandle range136 = stream.GetRange(1);
			int position136 = stream.Position;
			TutorialIsland.Serialize(stream, instance.tutorialIsland);
			int num161 = stream.Position - position136;
			if (num161 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field tutorialIsland (ProtoBuf.TutorialIsland)");
			}
			Span<byte> span136 = range136.GetSpan();
			ProtocolParser.WriteUInt32((uint)num161, span136, 0);
		}
		if (instance.cinematicEntity != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(10);
			BufferStream.RangeHandle range137 = stream.GetRange(1);
			int position137 = stream.Position;
			CinematicEntity.Serialize(stream, instance.cinematicEntity);
			int num162 = stream.Position - position137;
			if (num162 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cinematicEntity (ProtoBuf.CinematicEntity)");
			}
			Span<byte> span137 = range137.GetSpan();
			ProtocolParser.WriteUInt32((uint)num162, span137, 0);
		}
		if (instance.buildingPrivilegeRetro != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(10);
			BufferStream.RangeHandle range138 = stream.GetRange(3);
			int position138 = stream.Position;
			BuildingPrivilegeRetro.Serialize(stream, instance.buildingPrivilegeRetro);
			int num163 = stream.Position - position138;
			if (num163 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field buildingPrivilegeRetro (ProtoBuf.BuildingPrivilegeRetro)");
			}
			Span<byte> span138 = range138.GetSpan();
			int num164 = ProtocolParser.WriteUInt32((uint)num163, span138, 0);
			if (num164 < 3)
			{
				span138[num164 - 1] |= 128;
				while (num164 < 2)
				{
					span138[num164++] = 128;
				}
				span138[2] = 0;
			}
		}
		if (instance.harborCrane != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(10);
			BufferStream.RangeHandle range139 = stream.GetRange(3);
			int position139 = stream.Position;
			HarborCrane.Serialize(stream, instance.harborCrane);
			int num165 = stream.Position - position139;
			if (num165 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field harborCrane (ProtoBuf.HarborCrane)");
			}
			Span<byte> span139 = range139.GetSpan();
			int num166 = ProtocolParser.WriteUInt32((uint)num165, span139, 0);
			if (num166 < 3)
			{
				span139[num166 - 1] |= 128;
				while (num166 < 2)
				{
					span139[num166++] = 128;
				}
				span139[2] = 0;
			}
		}
		if (instance.cargoShip != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(10);
			BufferStream.RangeHandle range140 = stream.GetRange(3);
			int position140 = stream.Position;
			CargoShip.Serialize(stream, instance.cargoShip);
			int num167 = stream.Position - position140;
			if (num167 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cargoShip (ProtoBuf.CargoShip)");
			}
			Span<byte> span140 = range140.GetSpan();
			int num168 = ProtocolParser.WriteUInt32((uint)num167, span140, 0);
			if (num168 < 3)
			{
				span140[num168 - 1] |= 128;
				while (num168 < 2)
				{
					span140[num168++] = 128;
				}
				span140[2] = 0;
			}
		}
		if (instance.cargoShipContainer != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(10);
			BufferStream.RangeHandle range141 = stream.GetRange(1);
			int position141 = stream.Position;
			CargoShipContainer.Serialize(stream, instance.cargoShipContainer);
			int num169 = stream.Position - position141;
			if (num169 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field cargoShipContainer (ProtoBuf.CargoShipContainer)");
			}
			Span<byte> span141 = range141.GetSpan();
			ProtocolParser.WriteUInt32((uint)num169, span141, 0);
		}
		if (instance.missionMapMarker != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(10);
			BufferStream.RangeHandle range142 = stream.GetRange(5);
			int position142 = stream.Position;
			MissionMapMarker.Serialize(stream, instance.missionMapMarker);
			int val36 = stream.Position - position142;
			Span<byte> span142 = range142.GetSpan();
			int num170 = ProtocolParser.WriteUInt32((uint)val36, span142, 0);
			if (num170 < 5)
			{
				span142[num170 - 1] |= 128;
				while (num170 < 4)
				{
					span142[num170++] = 128;
				}
				span142[4] = 0;
			}
		}
		if (instance.bike != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(10);
			BufferStream.RangeHandle range143 = stream.GetRange(1);
			int position143 = stream.Position;
			Bike.Serialize(stream, instance.bike);
			int num171 = stream.Position - position143;
			if (num171 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field bike (ProtoBuf.Bike)");
			}
			Span<byte> span143 = range143.GetSpan();
			ProtocolParser.WriteUInt32((uint)num171, span143, 0);
		}
		if (instance.diverPropulsionVehicle != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(10);
			BufferStream.RangeHandle range144 = stream.GetRange(1);
			int position144 = stream.Position;
			DiverPropulsionVehicle.Serialize(stream, instance.diverPropulsionVehicle);
			int num172 = stream.Position - position144;
			if (num172 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field diverPropulsionVehicle (ProtoBuf.DiverPropulsionVehicle)");
			}
			Span<byte> span144 = range144.GetSpan();
			ProtocolParser.WriteUInt32((uint)num172, span144, 0);
		}
		if (instance.travellingVendor != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(10);
			BufferStream.RangeHandle range145 = stream.GetRange(1);
			int position145 = stream.Position;
			TravellingVendor.Serialize(stream, instance.travellingVendor);
			int num173 = stream.Position - position145;
			if (num173 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field travellingVendor (ProtoBuf.TravellingVendor)");
			}
			Span<byte> span145 = range145.GetSpan();
			ProtocolParser.WriteUInt32((uint)num173, span145, 0);
		}
		if (instance.vendingDynamicPricing != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(10);
			BufferStream.RangeHandle range146 = stream.GetRange(3);
			int position146 = stream.Position;
			VendingDynamicPricing.Serialize(stream, instance.vendingDynamicPricing);
			int num174 = stream.Position - position146;
			if (num174 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vendingDynamicPricing (ProtoBuf.VendingDynamicPricing)");
			}
			Span<byte> span146 = range146.GetSpan();
			int num175 = ProtocolParser.WriteUInt32((uint)num174, span146, 0);
			if (num175 < 3)
			{
				span146[num175 - 1] |= 128;
				while (num175 < 2)
				{
					span146[num175++] = 128;
				}
				span146[2] = 0;
			}
		}
		if (instance.tinCanAlarm != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(11);
			BufferStream.RangeHandle range147 = stream.GetRange(1);
			int position147 = stream.Position;
			TinCanAlarm.Serialize(stream, instance.tinCanAlarm);
			int num176 = stream.Position - position147;
			if (num176 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field tinCanAlarm (ProtoBuf.TinCanAlarm)");
			}
			Span<byte> span147 = range147.GetSpan();
			ProtocolParser.WriteUInt32((uint)num176, span147, 0);
		}
		if (instance.digitalClock != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(11);
			BufferStream.RangeHandle range148 = stream.GetRange(3);
			int position148 = stream.Position;
			DigitalClock.Serialize(stream, instance.digitalClock);
			int num177 = stream.Position - position148;
			if (num177 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field digitalClock (ProtoBuf.DigitalClock)");
			}
			Span<byte> span148 = range148.GetSpan();
			int num178 = ProtocolParser.WriteUInt32((uint)num177, span148, 0);
			if (num178 < 3)
			{
				span148[num178 - 1] |= 128;
				while (num178 < 2)
				{
					span148[num178++] = 128;
				}
				span148[2] = 0;
			}
		}
		if (instance.elevatorLift != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(11);
			BufferStream.RangeHandle range149 = stream.GetRange(1);
			int position149 = stream.Position;
			ElevatorLift.Serialize(stream, instance.elevatorLift);
			int num179 = stream.Position - position149;
			if (num179 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field elevatorLift (ProtoBuf.ElevatorLift)");
			}
			Span<byte> span149 = range149.GetSpan();
			ProtocolParser.WriteUInt32((uint)num179, span149, 0);
		}
		if (instance.npcVendingMachine != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(11);
			BufferStream.RangeHandle range150 = stream.GetRange(1);
			int position150 = stream.Position;
			NPCVendingMachine.Serialize(stream, instance.npcVendingMachine);
			int num180 = stream.Position - position150;
			if (num180 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field npcVendingMachine (ProtoBuf.NPCVendingMachine)");
			}
			Span<byte> span150 = range150.GetSpan();
			ProtocolParser.WriteUInt32((uint)num180, span150, 0);
		}
		if (instance.mailbox != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(11);
			BufferStream.RangeHandle range151 = stream.GetRange(5);
			int position151 = stream.Position;
			Mailbox.Serialize(stream, instance.mailbox);
			int val37 = stream.Position - position151;
			Span<byte> span151 = range151.GetSpan();
			int num181 = ProtocolParser.WriteUInt32((uint)val37, span151, 0);
			if (num181 < 5)
			{
				span151[num181 - 1] |= 128;
				while (num181 < 4)
				{
					span151[num181++] = 128;
				}
				span151[4] = 0;
			}
		}
		if (instance.projectileWeaponMod != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(11);
			BufferStream.RangeHandle range152 = stream.GetRange(1);
			int position152 = stream.Position;
			GunWeaponMod.Serialize(stream, instance.projectileWeaponMod);
			int num182 = stream.Position - position152;
			if (num182 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field projectileWeaponMod (ProtoBuf.GunWeaponMod)");
			}
			Span<byte> span152 = range152.GetSpan();
			ProtocolParser.WriteUInt32((uint)num182, span152, 0);
		}
		if (instance.baseSculpture != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(11);
			BufferStream.RangeHandle range153 = stream.GetRange(1);
			int position153 = stream.Position;
			BaseSculpture.Serialize(stream, instance.baseSculpture);
			int num183 = stream.Position - position153;
			if (num183 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field baseSculpture (ProtoBuf.BaseSculpture)");
			}
			Span<byte> span153 = range153.GetSpan();
			ProtocolParser.WriteUInt32((uint)num183, span153, 0);
		}
		if (instance.vendingMachineStats != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(11);
			BufferStream.RangeHandle range154 = stream.GetRange(3);
			int position154 = stream.Position;
			VendingMachineStats.Serialize(stream, instance.vendingMachineStats);
			int num184 = stream.Position - position154;
			if (num184 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vendingMachineStats (ProtoBuf.VendingMachineStats)");
			}
			Span<byte> span154 = range154.GetSpan();
			int num185 = ProtocolParser.WriteUInt32((uint)num184, span154, 0);
			if (num185 < 3)
			{
				span154[num185 - 1] |= 128;
				while (num185 < 2)
				{
					span154[num185++] = 128;
				}
				span154[2] = 0;
			}
		}
		if (instance.catapult != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(11);
			BufferStream.RangeHandle range155 = stream.GetRange(1);
			int position155 = stream.Position;
			Catapult.Serialize(stream, instance.catapult);
			int num186 = stream.Position - position155;
			if (num186 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field catapult (ProtoBuf.Catapult)");
			}
			Span<byte> span155 = range155.GetSpan();
			ProtocolParser.WriteUInt32((uint)num186, span155, 0);
		}
		if (instance.siegeTower != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(11);
			BufferStream.RangeHandle range156 = stream.GetRange(1);
			int position156 = stream.Position;
			SiegeTower.Serialize(stream, instance.siegeTower);
			int num187 = stream.Position - position156;
			if (num187 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field siegeTower (ProtoBuf.SiegeTower)");
			}
			Span<byte> span156 = range156.GetSpan();
			ProtocolParser.WriteUInt32((uint)num187, span156, 0);
		}
		if (instance.ballista != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(11);
			BufferStream.RangeHandle range157 = stream.GetRange(1);
			int position157 = stream.Position;
			Ballista.Serialize(stream, instance.ballista);
			int num188 = stream.Position - position157;
			if (num188 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ballista (ProtoBuf.Ballista)");
			}
			Span<byte> span157 = range157.GetSpan();
			ProtocolParser.WriteUInt32((uint)num188, span157, 0);
		}
		if (instance.ballistaGun != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(11);
			BufferStream.RangeHandle range158 = stream.GetRange(1);
			int position158 = stream.Position;
			BallistaGun.Serialize(stream, instance.ballistaGun);
			int num189 = stream.Position - position158;
			if (num189 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ballistaGun (ProtoBuf.BallistaGun)");
			}
			Span<byte> span158 = range158.GetSpan();
			ProtocolParser.WriteUInt32((uint)num189, span158, 0);
		}
		if (instance.batteringRam != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(11);
			BufferStream.RangeHandle range159 = stream.GetRange(1);
			int position159 = stream.Position;
			BatteringRam.Serialize(stream, instance.batteringRam);
			int num190 = stream.Position - position159;
			if (num190 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field batteringRam (ProtoBuf.BatteringRam)");
			}
			Span<byte> span159 = range159.GetSpan();
			ProtocolParser.WriteUInt32((uint)num190, span159, 0);
		}
		if (instance.temporaryRagdoll != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(11);
			BufferStream.RangeHandle range160 = stream.GetRange(1);
			int position160 = stream.Position;
			TemporaryRagdoll.Serialize(stream, instance.temporaryRagdoll);
			int num191 = stream.Position - position160;
			if (num191 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field temporaryRagdoll (ProtoBuf.TemporaryRagdoll)");
			}
			Span<byte> span160 = range160.GetSpan();
			ProtocolParser.WriteUInt32((uint)num191, span160, 0);
		}
		if (instance.constructableEntity != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(11);
			BufferStream.RangeHandle range161 = stream.GetRange(3);
			int position161 = stream.Position;
			ConstructableEntity.Serialize(stream, instance.constructableEntity);
			int num192 = stream.Position - position161;
			if (num192 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field constructableEntity (ProtoBuf.ConstructableEntity)");
			}
			Span<byte> span161 = range161.GetSpan();
			int num193 = ProtocolParser.WriteUInt32((uint)num192, span161, 0);
			if (num193 < 3)
			{
				span161[num193 - 1] |= 128;
				while (num193 < 2)
				{
					span161[num193++] = 128;
				}
				span161[2] = 0;
			}
		}
		if (instance.chickenCoop != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(12);
			BufferStream.RangeHandle range162 = stream.GetRange(3);
			int position162 = stream.Position;
			ChickenCoop.Serialize(stream, instance.chickenCoop);
			int num194 = stream.Position - position162;
			if (num194 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field chickenCoop (ProtoBuf.ChickenCoop)");
			}
			Span<byte> span162 = range162.GetSpan();
			int num195 = ProtocolParser.WriteUInt32((uint)num194, span162, 0);
			if (num195 < 3)
			{
				span162[num195 - 1] |= 128;
				while (num195 < 2)
				{
					span162[num195++] = 128;
				}
				span162[2] = 0;
			}
		}
		if (instance.farmableAnimal != null)
		{
			stream.WriteByte(138);
			stream.WriteByte(12);
			BufferStream.RangeHandle range163 = stream.GetRange(5);
			int position163 = stream.Position;
			FarmableAnimal.Serialize(stream, instance.farmableAnimal);
			int val38 = stream.Position - position163;
			Span<byte> span163 = range163.GetSpan();
			int num196 = ProtocolParser.WriteUInt32((uint)val38, span163, 0);
			if (num196 < 5)
			{
				span163[num196 - 1] |= 128;
				while (num196 < 4)
				{
					span163[num196++] = 128;
				}
				span163[4] = 0;
			}
		}
		if (instance.ownership != null)
		{
			stream.WriteByte(146);
			stream.WriteByte(12);
			BufferStream.RangeHandle range164 = stream.GetRange(5);
			int position164 = stream.Position;
			ItemOwnershipAmount.Serialize(stream, instance.ownership);
			int val39 = stream.Position - position164;
			Span<byte> span164 = range164.GetSpan();
			int num197 = ProtocolParser.WriteUInt32((uint)val39, span164, 0);
			if (num197 < 5)
			{
				span164[num197 - 1] |= 128;
				while (num197 < 4)
				{
					span164[num197++] = 128;
				}
				span164[4] = 0;
			}
		}
		if (instance.beehive != null)
		{
			stream.WriteByte(154);
			stream.WriteByte(12);
			BufferStream.RangeHandle range165 = stream.GetRange(1);
			int position165 = stream.Position;
			Beehive.Serialize(stream, instance.beehive);
			int num198 = stream.Position - position165;
			if (num198 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field beehive (ProtoBuf.Beehive)");
			}
			Span<byte> span165 = range165.GetSpan();
			ProtocolParser.WriteUInt32((uint)num198, span165, 0);
		}
		if (instance.beeMasterSwarm != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(12);
			BufferStream.RangeHandle range166 = stream.GetRange(1);
			int position166 = stream.Position;
			BeeMasterSwarm.Serialize(stream, instance.beeMasterSwarm);
			int num199 = stream.Position - position166;
			if (num199 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field beeMasterSwarm (ProtoBuf.BeeMasterSwarm)");
			}
			Span<byte> span166 = range166.GetSpan();
			ProtocolParser.WriteUInt32((uint)num199, span166, 0);
		}
		if (instance.containerCorpse != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(12);
			BufferStream.RangeHandle range167 = stream.GetRange(5);
			int position167 = stream.Position;
			ContainerCorpseData.Serialize(stream, instance.containerCorpse);
			int val40 = stream.Position - position167;
			Span<byte> span167 = range167.GetSpan();
			int num200 = ProtocolParser.WriteUInt32((uint)val40, span167, 0);
			if (num200 < 5)
			{
				span167[num200 - 1] |= 128;
				while (num200 < 4)
				{
					span167[num200++] = 128;
				}
				span167[4] = 0;
			}
		}
		if (instance.npcSensesState != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(12);
			BufferStream.RangeHandle range168 = stream.GetRange(1);
			int position168 = stream.Position;
			NPCSensesState.Serialize(stream, instance.npcSensesState);
			int num201 = stream.Position - position168;
			if (num201 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field npcSensesState (ProtoBuf.NPCSensesState)");
			}
			Span<byte> span168 = range168.GetSpan();
			ProtocolParser.WriteUInt32((uint)num201, span168, 0);
		}
		if (instance.vineMountable != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(12);
			BufferStream.RangeHandle range169 = stream.GetRange(3);
			int position169 = stream.Position;
			VineMountable.Serialize(stream, instance.vineMountable);
			int num202 = stream.Position - position169;
			if (num202 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vineMountable (ProtoBuf.VineMountable)");
			}
			Span<byte> span169 = range169.GetSpan();
			int num203 = ProtocolParser.WriteUInt32((uint)num202, span169, 0);
			if (num203 < 3)
			{
				span169[num203 - 1] |= 128;
				while (num203 < 2)
				{
					span169[num203++] = 128;
				}
				span169[2] = 0;
			}
		}
		if (instance.vineTree != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(12);
			BufferStream.RangeHandle range170 = stream.GetRange(3);
			int position170 = stream.Position;
			VineTree.Serialize(stream, instance.vineTree);
			int num204 = stream.Position - position170;
			if (num204 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field vineTree (ProtoBuf.VineTree)");
			}
			Span<byte> span170 = range170.GetSpan();
			int num205 = ProtocolParser.WriteUInt32((uint)num204, span170, 0);
			if (num205 < 3)
			{
				span170[num205 - 1] |= 128;
				while (num205 < 2)
				{
					span170[num205++] = 128;
				}
				span170[2] = 0;
			}
		}
		if (instance.treeRespawn != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(12);
			BufferStream.RangeHandle range171 = stream.GetRange(1);
			int position171 = stream.Position;
			TreeRespawn.Serialize(stream, instance.treeRespawn);
			int num206 = stream.Position - position171;
			if (num206 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field treeRespawn (ProtoBuf.TreeRespawn)");
			}
			Span<byte> span171 = range171.GetSpan();
			ProtocolParser.WriteUInt32((uint)num206, span171, 0);
		}
		if (instance.wallpaperTool != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(12);
			BufferStream.RangeHandle range172 = stream.GetRange(1);
			int position172 = stream.Position;
			WallpaperTool.Serialize(stream, instance.wallpaperTool);
			int num207 = stream.Position - position172;
			if (num207 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field wallpaperTool (ProtoBuf.WallpaperTool)");
			}
			Span<byte> span172 = range172.GetSpan();
			ProtocolParser.WriteUInt32((uint)num207, span172, 0);
		}
		if (instance.commandBlock != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(12);
			BufferStream.RangeHandle range173 = stream.GetRange(5);
			int position173 = stream.Position;
			CommandBlock.Serialize(stream, instance.commandBlock);
			int val41 = stream.Position - position173;
			Span<byte> span173 = range173.GetSpan();
			int num208 = ProtocolParser.WriteUInt32((uint)val41, span173, 0);
			if (num208 < 5)
			{
				span173[num208 - 1] |= 128;
				while (num208 < 4)
				{
					span173[num208++] = 128;
				}
				span173[4] = 0;
			}
		}
		if (instance.staticRespawn != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(12);
			BufferStream.RangeHandle range174 = stream.GetRange(3);
			int position174 = stream.Position;
			StaticRespawnAreaData.Serialize(stream, instance.staticRespawn);
			int num209 = stream.Position - position174;
			if (num209 > 2097151)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field staticRespawn (ProtoBuf.StaticRespawnAreaData)");
			}
			Span<byte> span174 = range174.GetSpan();
			int num210 = ProtocolParser.WriteUInt32((uint)num209, span174, 0);
			if (num210 < 3)
			{
				span174[num210 - 1] |= 128;
				while (num210 < 2)
				{
					span174[num210++] = 128;
				}
				span174[2] = 0;
			}
		}
		if (instance.buriedItemStorage == null)
		{
			return;
		}
		stream.WriteByte(234);
		stream.WriteByte(12);
		BufferStream.RangeHandle range175 = stream.GetRange(5);
		int position175 = stream.Position;
		BuriedItems.Serialize(stream, instance.buriedItemStorage);
		int val42 = stream.Position - position175;
		Span<byte> span175 = range175.GetSpan();
		int num211 = ProtocolParser.WriteUInt32((uint)val42, span175, 0);
		if (num211 < 5)
		{
			span175[num211 - 1] |= 128;
			while (num211 < 4)
			{
				span175[num211++] = 128;
			}
			span175[4] = 0;
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		baseNetworkable?.InspectUids(action);
		baseEntity?.InspectUids(action);
		basePlayer?.InspectUids(action);
		worldItem?.InspectUids(action);
		resource?.InspectUids(action);
		buildingBlock?.InspectUids(action);
		environment?.InspectUids(action);
		corpse?.InspectUids(action);
		parent?.InspectUids(action);
		keyLock?.InspectUids(action);
		codeLock?.InspectUids(action);
		entitySlots?.InspectUids(action);
		buildingPrivilege?.InspectUids(action);
		storageBox?.InspectUids(action);
		heldEntity?.InspectUids(action);
		baseProjectile?.InspectUids(action);
		baseNPC?.InspectUids(action);
		loot?.InspectUids(action);
		genericSpawner?.InspectUids(action);
		sleepingBag?.InspectUids(action);
		lootableCorpse?.InspectUids(action);
		sign?.InspectUids(action);
		baseCombat?.InspectUids(action);
		mapEntity?.InspectUids(action);
		researchTable?.InspectUids(action);
		dudExplosive?.InspectUids(action);
		miningQuarry?.InspectUids(action);
		baseVehicle?.InspectUids(action);
		helicopter?.InspectUids(action);
		landmine?.InspectUids(action);
		autoturret?.InspectUids(action);
		sphereEntity?.InspectUids(action);
		stabilityEntity?.InspectUids(action);
		ownerInfo?.InspectUids(action);
		decayEntity?.InspectUids(action);
		spawnable?.InspectUids(action);
		servergib?.InspectUids(action);
		vendingMachine?.InspectUids(action);
		spinnerWheel?.InspectUids(action);
		lift?.InspectUids(action);
		bradley?.InspectUids(action);
		waterwell?.InspectUids(action);
		motorBoat?.InspectUids(action);
		ioEntity?.InspectUids(action);
		puzzleReset?.InspectUids(action);
		relationshipManager?.InspectUids(action);
		hotAirBalloon?.InspectUids(action);
		samSite?.InspectUids(action);
		eggHunt?.InspectUids(action);
		arcadeMachine?.InspectUids(action);
		miniCopter?.InspectUids(action);
		horse?.InspectUids(action);
		smartAlarm?.InspectUids(action);
		lightString?.InspectUids(action);
		lightDeployer?.InspectUids(action);
		rcEntity?.InspectUids(action);
		computerStation?.InspectUids(action);
		growableEntity?.InspectUids(action);
		composter?.InspectUids(action);
		modularVehicle?.InspectUids(action);
		modularCar?.InspectUids(action);
		simpleUID?.InspectUids(action);
		vehicleLift?.InspectUids(action);
		engineStorage?.InspectUids(action);
		vehicleVendor?.InspectUids(action);
		WaterPool?.InspectUids(action);
		photo?.InspectUids(action);
		photoFrame?.InspectUids(action);
		vehicleModule?.InspectUids(action);
		mixingTable?.InspectUids(action);
		shopKeeper?.InspectUids(action);
		elevator?.InspectUids(action);
		skullTrophy?.InspectUids(action);
		cassette?.InspectUids(action);
		telephone?.InspectUids(action);
		boomBox?.InspectUids(action);
		neonSign?.InspectUids(action);
		subEntityList?.InspectUids(action);
		marketTerminal?.InspectUids(action);
		deliveryDrone?.InspectUids(action);
		reclaimTerminal?.InspectUids(action);
		slotMachine?.InspectUids(action);
		trainEngine?.InspectUids(action);
		cardGame?.InspectUids(action);
		crane?.InspectUids(action);
		connectedSpeaker?.InspectUids(action);
		audioEntity?.InspectUids(action);
		microphoneStand?.InspectUids(action);
		submarine?.InspectUids(action);
		sleepingBagCamper?.InspectUids(action);
		camperModule?.InspectUids(action);
		paintableSign?.InspectUids(action);
		whitelist?.InspectUids(action);
		FrankensteinTable?.InspectUids(action);
		mlrs?.InspectUids(action);
		reclaimManager?.InspectUids(action);
		gameMode?.InspectUids(action);
		snowmobile?.InspectUids(action);
		patternFirework?.InspectUids(action);
		cargoPlane?.InspectUids(action);
		paintedItem?.InspectUids(action);
		clanManager?.InspectUids(action);
		spray?.InspectUids(action);
		baseTrain?.InspectUids(action);
		zipline?.InspectUids(action);
		ziplineMountable?.InspectUids(action);
		ZiplineArrival?.InspectUids(action);
		sprayLine?.InspectUids(action);
		coalingTower?.InspectUids(action);
		simpleInt?.InspectUids(action);
		baseOven?.InspectUids(action);
		brainComponent?.InspectUids(action);
		proceduralDungeon?.InspectUids(action);
		industrialConveyor?.InspectUids(action);
		industrialCrafter?.InspectUids(action);
		drone?.InspectUids(action);
		explosive?.InspectUids(action);
		simpleUint?.InspectUids(action);
		weaponRack?.InspectUids(action);
		attackHeli?.InspectUids(action);
		attackHeliTurret?.InspectUids(action);
		attackHeliRockets?.InspectUids(action);
		baseBoat?.InspectUids(action);
		ragdoll?.InspectUids(action);
		dieselEngine?.InspectUids(action);
		associatedFiles?.InspectUids(action);
		nexusFerry?.InspectUids(action);
		nexusIsland?.InspectUids(action);
		nexusDockTerminal?.InspectUids(action);
		rockingChair?.InspectUids(action);
		headData?.InspectUids(action);
		wantedPoster?.InspectUids(action);
		waypointRace?.InspectUids(action);
		legacyShelter?.InspectUids(action);
		metalDetectorSource?.InspectUids(action);
		tutorialIsland?.InspectUids(action);
		cinematicEntity?.InspectUids(action);
		buildingPrivilegeRetro?.InspectUids(action);
		harborCrane?.InspectUids(action);
		cargoShip?.InspectUids(action);
		cargoShipContainer?.InspectUids(action);
		missionMapMarker?.InspectUids(action);
		bike?.InspectUids(action);
		diverPropulsionVehicle?.InspectUids(action);
		travellingVendor?.InspectUids(action);
		vendingDynamicPricing?.InspectUids(action);
		tinCanAlarm?.InspectUids(action);
		digitalClock?.InspectUids(action);
		elevatorLift?.InspectUids(action);
		npcVendingMachine?.InspectUids(action);
		mailbox?.InspectUids(action);
		projectileWeaponMod?.InspectUids(action);
		baseSculpture?.InspectUids(action);
		vendingMachineStats?.InspectUids(action);
		catapult?.InspectUids(action);
		siegeTower?.InspectUids(action);
		ballista?.InspectUids(action);
		ballistaGun?.InspectUids(action);
		batteringRam?.InspectUids(action);
		temporaryRagdoll?.InspectUids(action);
		constructableEntity?.InspectUids(action);
		chickenCoop?.InspectUids(action);
		farmableAnimal?.InspectUids(action);
		ownership?.InspectUids(action);
		beehive?.InspectUids(action);
		beeMasterSwarm?.InspectUids(action);
		containerCorpse?.InspectUids(action);
		npcSensesState?.InspectUids(action);
		vineMountable?.InspectUids(action);
		vineTree?.InspectUids(action);
		treeRespawn?.InspectUids(action);
		wallpaperTool?.InspectUids(action);
		commandBlock?.InspectUids(action);
		staticRespawn?.InspectUids(action);
		buriedItemStorage?.InspectUids(action);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class BuriedItems : IDisposable, IPooled, IProto<BuriedItems>, IProto
{
	public class StoredBuriedItem : IDisposable, IPooled, IProto<StoredBuriedItem>, IProto
	{
		[NonSerialized]
		public int itemId;

		[NonSerialized]
		public ItemOwnershipAmount ownership;

		[NonSerialized]
		public ulong skinId;

		[NonSerialized]
		public long expiryTimeDiff;

		[NonSerialized]
		public Vector2 location;

		[NonSerialized]
		public float condition;

		[NonSerialized]
		public ulong uid;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(StoredBuriedItem instance)
		{
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			if (instance.ShouldPool)
			{
				instance.itemId = 0;
				if (instance.ownership != null)
				{
					instance.ownership.ResetToPool();
					instance.ownership = null;
				}
				instance.skinId = 0uL;
				instance.expiryTimeDiff = 0L;
				instance.location = default(Vector2);
				instance.condition = 0f;
				instance.uid = 0uL;
				Pool.Free<StoredBuriedItem>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose StoredBuriedItem with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(StoredBuriedItem instance)
		{
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			instance.itemId = itemId;
			if (ownership != null)
			{
				if (instance.ownership == null)
				{
					instance.ownership = ownership.Copy();
				}
				else
				{
					ownership.CopyTo(instance.ownership);
				}
			}
			else
			{
				instance.ownership = null;
			}
			instance.skinId = skinId;
			instance.expiryTimeDiff = expiryTimeDiff;
			instance.location = location;
			instance.condition = condition;
			instance.uid = uid;
		}

		public StoredBuriedItem Copy()
		{
			StoredBuriedItem storedBuriedItem = Pool.Get<StoredBuriedItem>();
			CopyTo(storedBuriedItem);
			return storedBuriedItem;
		}

		public static StoredBuriedItem Deserialize(BufferStream stream)
		{
			StoredBuriedItem storedBuriedItem = Pool.Get<StoredBuriedItem>();
			Deserialize(stream, storedBuriedItem, isDelta: false);
			return storedBuriedItem;
		}

		public static StoredBuriedItem DeserializeLengthDelimited(BufferStream stream)
		{
			StoredBuriedItem storedBuriedItem = Pool.Get<StoredBuriedItem>();
			DeserializeLengthDelimited(stream, storedBuriedItem, isDelta: false);
			return storedBuriedItem;
		}

		public static StoredBuriedItem DeserializeLength(BufferStream stream, int length)
		{
			StoredBuriedItem storedBuriedItem = Pool.Get<StoredBuriedItem>();
			DeserializeLength(stream, length, storedBuriedItem, isDelta: false);
			return storedBuriedItem;
		}

		public static StoredBuriedItem Deserialize(byte[] buffer)
		{
			StoredBuriedItem storedBuriedItem = Pool.Get<StoredBuriedItem>();
			using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
			Deserialize(stream, storedBuriedItem, isDelta: false);
			return storedBuriedItem;
		}

		public void FromProto(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(BufferStream stream, StoredBuriedItem previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static StoredBuriedItem Deserialize(BufferStream stream, StoredBuriedItem instance, bool isDelta)
		{
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					break;
				case 18:
					if (instance.ownership == null)
					{
						instance.ownership = ItemOwnershipAmount.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemOwnershipAmount.DeserializeLengthDelimited(stream, instance.ownership, isDelta);
					}
					break;
				case 24:
					instance.skinId = ProtocolParser.ReadUInt64(stream);
					break;
				case 32:
					instance.expiryTimeDiff = (long)ProtocolParser.ReadUInt64(stream);
					break;
				case 42:
					Vector2Serialized.DeserializeLengthDelimited(stream, ref instance.location, isDelta);
					break;
				case 53:
					instance.condition = ProtocolParser.ReadSingle(stream);
					break;
				case 56:
					instance.uid = ProtocolParser.ReadUInt64(stream);
					break;
				default:
				{
					Key key = ProtocolParser.ReadKey((byte)num, stream);
					_ = key.Field;
					ProtocolParser.SkipKey(stream, key);
					break;
				}
				case -1:
					return instance;
				}
			}
		}

		public static StoredBuriedItem DeserializeLengthDelimited(BufferStream stream, StoredBuriedItem instance, bool isDelta)
		{
			//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					break;
				case 18:
					if (instance.ownership == null)
					{
						instance.ownership = ItemOwnershipAmount.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemOwnershipAmount.DeserializeLengthDelimited(stream, instance.ownership, isDelta);
					}
					break;
				case 24:
					instance.skinId = ProtocolParser.ReadUInt64(stream);
					break;
				case 32:
					instance.expiryTimeDiff = (long)ProtocolParser.ReadUInt64(stream);
					break;
				case 42:
					Vector2Serialized.DeserializeLengthDelimited(stream, ref instance.location, isDelta);
					break;
				case 53:
					instance.condition = ProtocolParser.ReadSingle(stream);
					break;
				case 56:
					instance.uid = ProtocolParser.ReadUInt64(stream);
					break;
				default:
				{
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					_ = key.Field;
					ProtocolParser.SkipKey(stream, key);
					break;
				}
				}
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static StoredBuriedItem DeserializeLength(BufferStream stream, int length, StoredBuriedItem instance, bool isDelta)
		{
			//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					break;
				case 18:
					if (instance.ownership == null)
					{
						instance.ownership = ItemOwnershipAmount.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemOwnershipAmount.DeserializeLengthDelimited(stream, instance.ownership, isDelta);
					}
					break;
				case 24:
					instance.skinId = ProtocolParser.ReadUInt64(stream);
					break;
				case 32:
					instance.expiryTimeDiff = (long)ProtocolParser.ReadUInt64(stream);
					break;
				case 42:
					Vector2Serialized.DeserializeLengthDelimited(stream, ref instance.location, isDelta);
					break;
				case 53:
					instance.condition = ProtocolParser.ReadSingle(stream);
					break;
				case 56:
					instance.uid = ProtocolParser.ReadUInt64(stream);
					break;
				default:
				{
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					_ = key.Field;
					ProtocolParser.SkipKey(stream, key);
					break;
				}
				}
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(BufferStream stream, StoredBuriedItem instance, StoredBuriedItem previous)
		{
			//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0109: Unknown result type (might be due to invalid IL or missing references)
			//IL_010f: Unknown result type (might be due to invalid IL or missing references)
			if (instance.itemId != previous.itemId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemId);
			}
			if (instance.ownership != null)
			{
				stream.WriteByte(18);
				BufferStream.RangeHandle range = stream.GetRange(5);
				int position = stream.Position;
				ItemOwnershipAmount.SerializeDelta(stream, instance.ownership, previous.ownership);
				int val = stream.Position - position;
				Span<byte> span = range.GetSpan();
				int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
				if (num < 5)
				{
					span[num - 1] |= 128;
					while (num < 4)
					{
						span[num++] = 128;
					}
					span[4] = 0;
				}
			}
			if (instance.skinId != previous.skinId)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, instance.skinId);
			}
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.expiryTimeDiff);
			if (instance.location != previous.location)
			{
				stream.WriteByte(42);
				BufferStream.RangeHandle range2 = stream.GetRange(1);
				int position2 = stream.Position;
				Vector2Serialized.SerializeDelta(stream, instance.location, previous.location);
				int num2 = stream.Position - position2;
				if (num2 > 127)
				{
					throw new InvalidOperationException("Not enough space was reserved for the length prefix of field location (UnityEngine.Vector2)");
				}
				Span<byte> span2 = range2.GetSpan();
				ProtocolParser.WriteUInt32((uint)num2, span2, 0);
			}
			if (instance.condition != previous.condition)
			{
				stream.WriteByte(53);
				ProtocolParser.WriteSingle(stream, instance.condition);
			}
			if (instance.uid != previous.uid)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, instance.uid);
			}
		}

		public static void Serialize(BufferStream stream, StoredBuriedItem instance)
		{
			//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00df: Unknown result type (might be due to invalid IL or missing references)
			//IL_0103: Unknown result type (might be due to invalid IL or missing references)
			if (instance.itemId != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemId);
			}
			if (instance.ownership != null)
			{
				stream.WriteByte(18);
				BufferStream.RangeHandle range = stream.GetRange(5);
				int position = stream.Position;
				ItemOwnershipAmount.Serialize(stream, instance.ownership);
				int val = stream.Position - position;
				Span<byte> span = range.GetSpan();
				int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
				if (num < 5)
				{
					span[num - 1] |= 128;
					while (num < 4)
					{
						span[num++] = 128;
					}
					span[4] = 0;
				}
			}
			if (instance.skinId != 0L)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, instance.skinId);
			}
			if (instance.expiryTimeDiff != 0L)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.expiryTimeDiff);
			}
			if (instance.location != default(Vector2))
			{
				stream.WriteByte(42);
				BufferStream.RangeHandle range2 = stream.GetRange(1);
				int position2 = stream.Position;
				Vector2Serialized.Serialize(stream, instance.location);
				int num2 = stream.Position - position2;
				if (num2 > 127)
				{
					throw new InvalidOperationException("Not enough space was reserved for the length prefix of field location (UnityEngine.Vector2)");
				}
				Span<byte> span2 = range2.GetSpan();
				ProtocolParser.WriteUInt32((uint)num2, span2, 0);
			}
			if (instance.condition != 0f)
			{
				stream.WriteByte(53);
				ProtocolParser.WriteSingle(stream, instance.condition);
			}
			if (instance.uid != 0L)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, instance.uid);
			}
		}

		public void ToProto(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			ownership?.InspectUids(action);
		}
	}

	[NonSerialized]
	public List<StoredBuriedItem> buriedItems;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuriedItems instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.buriedItems != null)
		{
			for (int i = 0; i < instance.buriedItems.Count; i++)
			{
				if (instance.buriedItems[i] != null)
				{
					instance.buriedItems[i].ResetToPool();
					instance.buriedItems[i] = null;
				}
			}
			List<StoredBuriedItem> list = instance.buriedItems;
			Pool.Free<StoredBuriedItem>(ref list, false);
			instance.buriedItems = list;
		}
		Pool.Free<BuriedItems>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuriedItems with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuriedItems instance)
	{
		if (buriedItems != null)
		{
			instance.buriedItems = Pool.Get<List<StoredBuriedItem>>();
			for (int i = 0; i < buriedItems.Count; i++)
			{
				StoredBuriedItem item = buriedItems[i].Copy();
				instance.buriedItems.Add(item);
			}
		}
		else
		{
			instance.buriedItems = null;
		}
	}

	public BuriedItems Copy()
	{
		BuriedItems buriedItems = Pool.Get<BuriedItems>();
		CopyTo(buriedItems);
		return buriedItems;
	}

	public static BuriedItems Deserialize(BufferStream stream)
	{
		BuriedItems buriedItems = Pool.Get<BuriedItems>();
		Deserialize(stream, buriedItems, isDelta: false);
		return buriedItems;
	}

	public static BuriedItems DeserializeLengthDelimited(BufferStream stream)
	{
		BuriedItems buriedItems = Pool.Get<BuriedItems>();
		DeserializeLengthDelimited(stream, buriedItems, isDelta: false);
		return buriedItems;
	}

	public static BuriedItems DeserializeLength(BufferStream stream, int length)
	{
		BuriedItems buriedItems = Pool.Get<BuriedItems>();
		DeserializeLength(stream, length, buriedItems, isDelta: false);
		return buriedItems;
	}

	public static BuriedItems Deserialize(byte[] buffer)
	{
		BuriedItems buriedItems = Pool.Get<BuriedItems>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, buriedItems, isDelta: false);
		return buriedItems;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BuriedItems previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuriedItems Deserialize(BufferStream stream, BuriedItems instance, bool isDelta)
	{
		if (!isDelta && instance.buriedItems == null)
		{
			instance.buriedItems = Pool.Get<List<StoredBuriedItem>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.buriedItems.Add(StoredBuriedItem.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuriedItems DeserializeLengthDelimited(BufferStream stream, BuriedItems instance, bool isDelta)
	{
		if (!isDelta && instance.buriedItems == null)
		{
			instance.buriedItems = Pool.Get<List<StoredBuriedItem>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.buriedItems.Add(StoredBuriedItem.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuriedItems DeserializeLength(BufferStream stream, int length, BuriedItems instance, bool isDelta)
	{
		if (!isDelta && instance.buriedItems == null)
		{
			instance.buriedItems = Pool.Get<List<StoredBuriedItem>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.buriedItems.Add(StoredBuriedItem.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BuriedItems instance, BuriedItems previous)
	{
		if (instance.buriedItems == null)
		{
			return;
		}
		for (int i = 0; i < instance.buriedItems.Count; i++)
		{
			StoredBuriedItem storedBuriedItem = instance.buriedItems[i];
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(5);
			int position = stream.Position;
			StoredBuriedItem.SerializeDelta(stream, storedBuriedItem, storedBuriedItem);
			int val = stream.Position - position;
			Span<byte> span = range.GetSpan();
			int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
			if (num < 5)
			{
				span[num - 1] |= 128;
				while (num < 4)
				{
					span[num++] = 128;
				}
				span[4] = 0;
			}
		}
	}

	public static void Serialize(BufferStream stream, BuriedItems instance)
	{
		if (instance.buriedItems == null)
		{
			return;
		}
		for (int i = 0; i < instance.buriedItems.Count; i++)
		{
			StoredBuriedItem instance2 = instance.buriedItems[i];
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(5);
			int position = stream.Position;
			StoredBuriedItem.Serialize(stream, instance2);
			int val = stream.Position - position;
			Span<byte> span = range.GetSpan();
			int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
			if (num < 5)
			{
				span[num - 1] |= 128;
				while (num < 4)
				{
					span[num++] = 128;
				}
				span[4] = 0;
			}
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (buriedItems != null)
		{
			for (int i = 0; i < buriedItems.Count; i++)
			{
				buriedItems[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BaseNetworkable : IDisposable, IPooled, IProto<BaseNetworkable>, IProto
{
	[NonSerialized]
	public NetworkableId uid;

	[NonSerialized]
	public uint group;

	[NonSerialized]
	public uint prefabID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BaseNetworkable instance)
	{
		if (instance.ShouldPool)
		{
			instance.uid = default(NetworkableId);
			instance.group = 0u;
			instance.prefabID = 0u;
			Pool.Free<BaseNetworkable>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BaseNetworkable with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BaseNetworkable instance)
	{
		instance.uid = uid;
		instance.group = group;
		instance.prefabID = prefabID;
	}

	public BaseNetworkable Copy()
	{
		BaseNetworkable baseNetworkable = Pool.Get<BaseNetworkable>();
		CopyTo(baseNetworkable);
		return baseNetworkable;
	}

	public static BaseNetworkable Deserialize(BufferStream stream)
	{
		BaseNetworkable baseNetworkable = Pool.Get<BaseNetworkable>();
		Deserialize(stream, baseNetworkable, isDelta: false);
		return baseNetworkable;
	}

	public static BaseNetworkable DeserializeLengthDelimited(BufferStream stream)
	{
		BaseNetworkable baseNetworkable = Pool.Get<BaseNetworkable>();
		DeserializeLengthDelimited(stream, baseNetworkable, isDelta: false);
		return baseNetworkable;
	}

	public static BaseNetworkable DeserializeLength(BufferStream stream, int length)
	{
		BaseNetworkable baseNetworkable = Pool.Get<BaseNetworkable>();
		DeserializeLength(stream, length, baseNetworkable, isDelta: false);
		return baseNetworkable;
	}

	public static BaseNetworkable Deserialize(byte[] buffer)
	{
		BaseNetworkable baseNetworkable = Pool.Get<BaseNetworkable>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, baseNetworkable, isDelta: false);
		return baseNetworkable;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BaseNetworkable previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BaseNetworkable Deserialize(BufferStream stream, BaseNetworkable instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.group = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.prefabID = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BaseNetworkable DeserializeLengthDelimited(BufferStream stream, BaseNetworkable instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.group = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.prefabID = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BaseNetworkable DeserializeLength(BufferStream stream, int length, BaseNetworkable instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.group = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.prefabID = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BaseNetworkable instance, BaseNetworkable previous)
	{
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.uid.Value);
		if (instance.group != previous.group)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.group);
		}
		if (instance.prefabID != previous.prefabID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.prefabID);
		}
	}

	public static void Serialize(BufferStream stream, BaseNetworkable instance)
	{
		if (instance.uid != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.uid.Value);
		}
		if (instance.group != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.group);
		}
		if (instance.prefabID != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.prefabID);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref uid.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class BaseEntity : IDisposable, IPooled, IProto<BaseEntity>, IProto
{
	[NonSerialized]
	public Vector3 pos;

	[NonSerialized]
	public Vector3 rot;

	[NonSerialized]
	public int flags;

	[NonSerialized]
	public float time;

	[NonSerialized]
	public ulong skinid;

	[NonSerialized]
	public float protection;

	[NonSerialized]
	public byte[] syncVars;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BaseEntity instance)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.pos = default(Vector3);
			instance.rot = default(Vector3);
			instance.flags = 0;
			instance.time = 0f;
			instance.skinid = 0uL;
			instance.protection = 0f;
			instance.syncVars = null;
			Pool.Free<BaseEntity>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BaseEntity with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BaseEntity instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		instance.pos = pos;
		instance.rot = rot;
		instance.flags = flags;
		instance.time = time;
		instance.skinid = skinid;
		instance.protection = protection;
		if (syncVars == null)
		{
			instance.syncVars = null;
			return;
		}
		instance.syncVars = new byte[syncVars.Length];
		Array.Copy(syncVars, instance.syncVars, instance.syncVars.Length);
	}

	public BaseEntity Copy()
	{
		BaseEntity baseEntity = Pool.Get<BaseEntity>();
		CopyTo(baseEntity);
		return baseEntity;
	}

	public static BaseEntity Deserialize(BufferStream stream)
	{
		BaseEntity baseEntity = Pool.Get<BaseEntity>();
		Deserialize(stream, baseEntity, isDelta: false);
		return baseEntity;
	}

	public static BaseEntity DeserializeLengthDelimited(BufferStream stream)
	{
		BaseEntity baseEntity = Pool.Get<BaseEntity>();
		DeserializeLengthDelimited(stream, baseEntity, isDelta: false);
		return baseEntity;
	}

	public static BaseEntity DeserializeLength(BufferStream stream, int length)
	{
		BaseEntity baseEntity = Pool.Get<BaseEntity>();
		DeserializeLength(stream, length, baseEntity, isDelta: false);
		return baseEntity;
	}

	public static BaseEntity Deserialize(byte[] buffer)
	{
		BaseEntity baseEntity = Pool.Get<BaseEntity>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, baseEntity, isDelta: false);
		return baseEntity;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BaseEntity previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BaseEntity Deserialize(BufferStream stream, BaseEntity instance, bool isDelta)
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pos, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rot, isDelta);
				continue;
			case 24:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 37:
				instance.time = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.protection = ProtocolParser.ReadSingle(stream);
				continue;
			case 58:
				instance.syncVars = ProtocolParser.ReadBytes(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BaseEntity DeserializeLengthDelimited(BufferStream stream, BaseEntity instance, bool isDelta)
	{
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pos, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rot, isDelta);
				continue;
			case 24:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 37:
				instance.time = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.protection = ProtocolParser.ReadSingle(stream);
				continue;
			case 58:
				instance.syncVars = ProtocolParser.ReadBytes(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BaseEntity DeserializeLength(BufferStream stream, int length, BaseEntity instance, bool isDelta)
	{
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pos, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rot, isDelta);
				continue;
			case 24:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 37:
				instance.time = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.protection = ProtocolParser.ReadSingle(stream);
				continue;
			case 58:
				instance.syncVars = ProtocolParser.ReadBytes(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BaseEntity instance, BaseEntity previous)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		if (instance.pos != previous.pos)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.pos, previous.pos);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field pos (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.rot != previous.rot)
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.SerializeDelta(stream, instance.rot, previous.rot);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field rot (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
		if (instance.flags != previous.flags)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
		if (instance.time != previous.time)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.time);
		}
		if (instance.skinid != previous.skinid)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.skinid);
		}
		if (instance.protection != previous.protection)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.protection);
		}
		if (instance.syncVars != null)
		{
			stream.WriteByte(58);
			ProtocolParser.WriteBytes(stream, instance.syncVars);
		}
	}

	public static void Serialize(BufferStream stream, BaseEntity instance)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		if (instance.pos != default(Vector3))
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			Vector3Serialized.Serialize(stream, instance.pos);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field pos (UnityEngine.Vector3)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
		if (instance.rot != default(Vector3))
		{
			stream.WriteByte(18);
			BufferStream.RangeHandle range2 = stream.GetRange(1);
			int position2 = stream.Position;
			Vector3Serialized.Serialize(stream, instance.rot);
			int num2 = stream.Position - position2;
			if (num2 > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field rot (UnityEngine.Vector3)");
			}
			Span<byte> span2 = range2.GetSpan();
			ProtocolParser.WriteUInt32((uint)num2, span2, 0);
		}
		if (instance.flags != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
		if (instance.time != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.time);
		}
		if (instance.skinid != 0L)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.skinid);
		}
		if (instance.protection != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.protection);
		}
		if (instance.syncVars != null)
		{
			stream.WriteByte(58);
			ProtocolParser.WriteBytes(stream, instance.syncVars);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BaseCombat : IDisposable, IPooled, IProto<BaseCombat>, IProto
{
	[NonSerialized]
	public int state;

	[NonSerialized]
	public float health;

	[NonSerialized]
	public float maxHealth;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BaseCombat instance)
	{
		if (instance.ShouldPool)
		{
			instance.state = 0;
			instance.health = 0f;
			instance.maxHealth = 0f;
			Pool.Free<BaseCombat>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BaseCombat with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BaseCombat instance)
	{
		instance.state = state;
		instance.health = health;
		instance.maxHealth = maxHealth;
	}

	public BaseCombat Copy()
	{
		BaseCombat baseCombat = Pool.Get<BaseCombat>();
		CopyTo(baseCombat);
		return baseCombat;
	}

	public static BaseCombat Deserialize(BufferStream stream)
	{
		BaseCombat baseCombat = Pool.Get<BaseCombat>();
		Deserialize(stream, baseCombat, isDelta: false);
		return baseCombat;
	}

	public static BaseCombat DeserializeLengthDelimited(BufferStream stream)
	{
		BaseCombat baseCombat = Pool.Get<BaseCombat>();
		DeserializeLengthDelimited(stream, baseCombat, isDelta: false);
		return baseCombat;
	}

	public static BaseCombat DeserializeLength(BufferStream stream, int length)
	{
		BaseCombat baseCombat = Pool.Get<BaseCombat>();
		DeserializeLength(stream, length, baseCombat, isDelta: false);
		return baseCombat;
	}

	public static BaseCombat Deserialize(byte[] buffer)
	{
		BaseCombat baseCombat = Pool.Get<BaseCombat>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, baseCombat, isDelta: false);
		return baseCombat;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BaseCombat previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BaseCombat Deserialize(BufferStream stream, BaseCombat instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.maxHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BaseCombat DeserializeLengthDelimited(BufferStream stream, BaseCombat instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.maxHealth = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BaseCombat DeserializeLength(BufferStream stream, int length, BaseCombat instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.maxHealth = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BaseCombat instance, BaseCombat previous)
	{
		if (instance.state != previous.state)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.health != previous.health)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.health);
		}
		if (instance.maxHealth != previous.maxHealth)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.maxHealth);
		}
	}

	public static void Serialize(BufferStream stream, BaseCombat instance)
	{
		if (instance.state != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.health != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.health);
		}
		if (instance.maxHealth != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.maxHealth);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BaseNPC : IDisposable, IPooled, IProto<BaseNPC>, IProto
{
	[NonSerialized]
	public int flags;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BaseNPC instance)
	{
		if (instance.ShouldPool)
		{
			instance.flags = 0;
			Pool.Free<BaseNPC>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BaseNPC with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BaseNPC instance)
	{
		instance.flags = flags;
	}

	public BaseNPC Copy()
	{
		BaseNPC baseNPC = Pool.Get<BaseNPC>();
		CopyTo(baseNPC);
		return baseNPC;
	}

	public static BaseNPC Deserialize(BufferStream stream)
	{
		BaseNPC baseNPC = Pool.Get<BaseNPC>();
		Deserialize(stream, baseNPC, isDelta: false);
		return baseNPC;
	}

	public static BaseNPC DeserializeLengthDelimited(BufferStream stream)
	{
		BaseNPC baseNPC = Pool.Get<BaseNPC>();
		DeserializeLengthDelimited(stream, baseNPC, isDelta: false);
		return baseNPC;
	}

	public static BaseNPC DeserializeLength(BufferStream stream, int length)
	{
		BaseNPC baseNPC = Pool.Get<BaseNPC>();
		DeserializeLength(stream, length, baseNPC, isDelta: false);
		return baseNPC;
	}

	public static BaseNPC Deserialize(byte[] buffer)
	{
		BaseNPC baseNPC = Pool.Get<BaseNPC>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, baseNPC, isDelta: false);
		return baseNPC;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BaseNPC previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BaseNPC Deserialize(BufferStream stream, BaseNPC instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 16:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BaseNPC DeserializeLengthDelimited(BufferStream stream, BaseNPC instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 16:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BaseNPC DeserializeLength(BufferStream stream, int length, BaseNPC instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 16:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BaseNPC instance, BaseNPC previous)
	{
		if (instance.flags != previous.flags)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
	}

	public static void Serialize(BufferStream stream, BaseNPC instance)
	{
		if (instance.flags != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class EntitySlots : IDisposable, IPooled, IProto<EntitySlots>, IProto
{
	[NonSerialized]
	public NetworkableId slotLock;

	[NonSerialized]
	public NetworkableId slotFireMod;

	[NonSerialized]
	public NetworkableId slotUpperModification;

	[NonSerialized]
	public NetworkableId centerDecoration;

	[NonSerialized]
	public NetworkableId lowerCenterDecoration;

	[NonSerialized]
	public NetworkableId storageMonitor;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(EntitySlots instance)
	{
		if (instance.ShouldPool)
		{
			instance.slotLock = default(NetworkableId);
			instance.slotFireMod = default(NetworkableId);
			instance.slotUpperModification = default(NetworkableId);
			instance.centerDecoration = default(NetworkableId);
			instance.lowerCenterDecoration = default(NetworkableId);
			instance.storageMonitor = default(NetworkableId);
			Pool.Free<EntitySlots>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose EntitySlots with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(EntitySlots instance)
	{
		instance.slotLock = slotLock;
		instance.slotFireMod = slotFireMod;
		instance.slotUpperModification = slotUpperModification;
		instance.centerDecoration = centerDecoration;
		instance.lowerCenterDecoration = lowerCenterDecoration;
		instance.storageMonitor = storageMonitor;
	}

	public EntitySlots Copy()
	{
		EntitySlots entitySlots = Pool.Get<EntitySlots>();
		CopyTo(entitySlots);
		return entitySlots;
	}

	public static EntitySlots Deserialize(BufferStream stream)
	{
		EntitySlots entitySlots = Pool.Get<EntitySlots>();
		Deserialize(stream, entitySlots, isDelta: false);
		return entitySlots;
	}

	public static EntitySlots DeserializeLengthDelimited(BufferStream stream)
	{
		EntitySlots entitySlots = Pool.Get<EntitySlots>();
		DeserializeLengthDelimited(stream, entitySlots, isDelta: false);
		return entitySlots;
	}

	public static EntitySlots DeserializeLength(BufferStream stream, int length)
	{
		EntitySlots entitySlots = Pool.Get<EntitySlots>();
		DeserializeLength(stream, length, entitySlots, isDelta: false);
		return entitySlots;
	}

	public static EntitySlots Deserialize(byte[] buffer)
	{
		EntitySlots entitySlots = Pool.Get<EntitySlots>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, entitySlots, isDelta: false);
		return entitySlots;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, EntitySlots previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static EntitySlots Deserialize(BufferStream stream, EntitySlots instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.slotLock = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.slotFireMod = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.slotUpperModification = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.centerDecoration = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 40:
				instance.lowerCenterDecoration = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 48:
				instance.storageMonitor = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static EntitySlots DeserializeLengthDelimited(BufferStream stream, EntitySlots instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.slotLock = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.slotFireMod = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.slotUpperModification = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.centerDecoration = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 40:
				instance.lowerCenterDecoration = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 48:
				instance.storageMonitor = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static EntitySlots DeserializeLength(BufferStream stream, int length, EntitySlots instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.slotLock = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.slotFireMod = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.slotUpperModification = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.centerDecoration = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 40:
				instance.lowerCenterDecoration = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 48:
				instance.storageMonitor = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, EntitySlots instance, EntitySlots previous)
	{
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.slotLock.Value);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, instance.slotFireMod.Value);
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, instance.slotUpperModification.Value);
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, instance.centerDecoration.Value);
		stream.WriteByte(40);
		ProtocolParser.WriteUInt64(stream, instance.lowerCenterDecoration.Value);
		stream.WriteByte(48);
		ProtocolParser.WriteUInt64(stream, instance.storageMonitor.Value);
	}

	public static void Serialize(BufferStream stream, EntitySlots instance)
	{
		if (instance.slotLock != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.slotLock.Value);
		}
		if (instance.slotFireMod != default(NetworkableId))
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.slotFireMod.Value);
		}
		if (instance.slotUpperModification != default(NetworkableId))
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.slotUpperModification.Value);
		}
		if (instance.centerDecoration != default(NetworkableId))
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.centerDecoration.Value);
		}
		if (instance.lowerCenterDecoration != default(NetworkableId))
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.lowerCenterDecoration.Value);
		}
		if (instance.storageMonitor != default(NetworkableId))
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.storageMonitor.Value);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref slotLock.Value);
		action(UidType.NetworkableId, ref slotFireMod.Value);
		action(UidType.NetworkableId, ref slotUpperModification.Value);
		action(UidType.NetworkableId, ref centerDecoration.Value);
		action(UidType.NetworkableId, ref lowerCenterDecoration.Value);
		action(UidType.NetworkableId, ref storageMonitor.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BaseResource : IDisposable, IPooled, IProto<BaseResource>, IProto
{
	[NonSerialized]
	public int stage;

	[NonSerialized]
	public float health;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BaseResource instance)
	{
		if (instance.ShouldPool)
		{
			instance.stage = 0;
			instance.health = 0f;
			Pool.Free<BaseResource>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BaseResource with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BaseResource instance)
	{
		instance.stage = stage;
		instance.health = health;
	}

	public BaseResource Copy()
	{
		BaseResource baseResource = Pool.Get<BaseResource>();
		CopyTo(baseResource);
		return baseResource;
	}

	public static BaseResource Deserialize(BufferStream stream)
	{
		BaseResource baseResource = Pool.Get<BaseResource>();
		Deserialize(stream, baseResource, isDelta: false);
		return baseResource;
	}

	public static BaseResource DeserializeLengthDelimited(BufferStream stream)
	{
		BaseResource baseResource = Pool.Get<BaseResource>();
		DeserializeLengthDelimited(stream, baseResource, isDelta: false);
		return baseResource;
	}

	public static BaseResource DeserializeLength(BufferStream stream, int length)
	{
		BaseResource baseResource = Pool.Get<BaseResource>();
		DeserializeLength(stream, length, baseResource, isDelta: false);
		return baseResource;
	}

	public static BaseResource Deserialize(byte[] buffer)
	{
		BaseResource baseResource = Pool.Get<BaseResource>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, baseResource, isDelta: false);
		return baseResource;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BaseResource previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BaseResource Deserialize(BufferStream stream, BaseResource instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.stage = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BaseResource DeserializeLengthDelimited(BufferStream stream, BaseResource instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.stage = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BaseResource DeserializeLength(BufferStream stream, int length, BaseResource instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.stage = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BaseResource instance, BaseResource previous)
	{
		if (instance.stage != previous.stage)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.stage);
		}
		if (instance.health != previous.health)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.health);
		}
	}

	public static void Serialize(BufferStream stream, BaseResource instance)
	{
		if (instance.stage != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.stage);
		}
		if (instance.health != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.health);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Environment : IDisposable, IPooled, IProto<ProtoBuf.Environment>, IProto
{
	[NonSerialized]
	public long dateTime;

	[NonSerialized]
	public float clouds;

	[NonSerialized]
	public float fog;

	[NonSerialized]
	public float wind;

	[NonSerialized]
	public float rain;

	[NonSerialized]
	public float engineTime;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ProtoBuf.Environment instance)
	{
		if (instance.ShouldPool)
		{
			instance.dateTime = 0L;
			instance.clouds = 0f;
			instance.fog = 0f;
			instance.wind = 0f;
			instance.rain = 0f;
			instance.engineTime = 0f;
			Pool.Free<ProtoBuf.Environment>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Environment with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ProtoBuf.Environment instance)
	{
		instance.dateTime = dateTime;
		instance.clouds = clouds;
		instance.fog = fog;
		instance.wind = wind;
		instance.rain = rain;
		instance.engineTime = engineTime;
	}

	public ProtoBuf.Environment Copy()
	{
		ProtoBuf.Environment environment = Pool.Get<ProtoBuf.Environment>();
		CopyTo(environment);
		return environment;
	}

	public static ProtoBuf.Environment Deserialize(BufferStream stream)
	{
		ProtoBuf.Environment environment = Pool.Get<ProtoBuf.Environment>();
		Deserialize(stream, environment, isDelta: false);
		return environment;
	}

	public static ProtoBuf.Environment DeserializeLengthDelimited(BufferStream stream)
	{
		ProtoBuf.Environment environment = Pool.Get<ProtoBuf.Environment>();
		DeserializeLengthDelimited(stream, environment, isDelta: false);
		return environment;
	}

	public static ProtoBuf.Environment DeserializeLength(BufferStream stream, int length)
	{
		ProtoBuf.Environment environment = Pool.Get<ProtoBuf.Environment>();
		DeserializeLength(stream, length, environment, isDelta: false);
		return environment;
	}

	public static ProtoBuf.Environment Deserialize(byte[] buffer)
	{
		ProtoBuf.Environment environment = Pool.Get<ProtoBuf.Environment>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, environment, isDelta: false);
		return environment;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, ProtoBuf.Environment previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ProtoBuf.Environment Deserialize(BufferStream stream, ProtoBuf.Environment instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.dateTime = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.clouds = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.fog = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.wind = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.rain = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.engineTime = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ProtoBuf.Environment DeserializeLengthDelimited(BufferStream stream, ProtoBuf.Environment instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dateTime = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.clouds = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.fog = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.wind = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.rain = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.engineTime = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ProtoBuf.Environment DeserializeLength(BufferStream stream, int length, ProtoBuf.Environment instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dateTime = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.clouds = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.fog = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.wind = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.rain = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.engineTime = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, ProtoBuf.Environment instance, ProtoBuf.Environment previous)
	{
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.dateTime);
		if (instance.clouds != previous.clouds)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.clouds);
		}
		if (instance.fog != previous.fog)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.fog);
		}
		if (instance.wind != previous.wind)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.wind);
		}
		if (instance.rain != previous.rain)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.rain);
		}
		if (instance.engineTime != previous.engineTime)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.engineTime);
		}
	}

	public static void Serialize(BufferStream stream, ProtoBuf.Environment instance)
	{
		if (instance.dateTime != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.dateTime);
		}
		if (instance.clouds != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.clouds);
		}
		if (instance.fog != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.fog);
		}
		if (instance.wind != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.wind);
		}
		if (instance.rain != 0f)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.rain);
		}
		if (instance.engineTime != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.engineTime);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Corpse : IDisposable, IPooled, IProto<Corpse>, IProto
{
	[NonSerialized]
	public NetworkableId parentID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Corpse instance)
	{
		if (instance.ShouldPool)
		{
			instance.parentID = default(NetworkableId);
			Pool.Free<Corpse>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Corpse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Corpse instance)
	{
		instance.parentID = parentID;
	}

	public Corpse Copy()
	{
		Corpse corpse = Pool.Get<Corpse>();
		CopyTo(corpse);
		return corpse;
	}

	public static Corpse Deserialize(BufferStream stream)
	{
		Corpse corpse = Pool.Get<Corpse>();
		Deserialize(stream, corpse, isDelta: false);
		return corpse;
	}

	public static Corpse DeserializeLengthDelimited(BufferStream stream)
	{
		Corpse corpse = Pool.Get<Corpse>();
		DeserializeLengthDelimited(stream, corpse, isDelta: false);
		return corpse;
	}

	public static Corpse DeserializeLength(BufferStream stream, int length)
	{
		Corpse corpse = Pool.Get<Corpse>();
		DeserializeLength(stream, length, corpse, isDelta: false);
		return corpse;
	}

	public static Corpse Deserialize(byte[] buffer)
	{
		Corpse corpse = Pool.Get<Corpse>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, corpse, isDelta: false);
		return corpse;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, Corpse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Corpse Deserialize(BufferStream stream, Corpse instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Corpse DeserializeLengthDelimited(BufferStream stream, Corpse instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Corpse DeserializeLength(BufferStream stream, int length, Corpse instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Corpse instance, Corpse previous)
	{
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.parentID.Value);
	}

	public static void Serialize(BufferStream stream, Corpse instance)
	{
		if (instance.parentID != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.parentID.Value);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref parentID.Value);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class LootableCorpse : IDisposable, IPooled, IProto<LootableCorpse>, IProto
{
	public class Private : IDisposable, IPooled, IProto<Private>, IProto
	{
		[NonSerialized]
		public List<ItemContainer> container;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Private instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.container != null)
			{
				for (int i = 0; i < instance.container.Count; i++)
				{
					if (instance.container[i] != null)
					{
						instance.container[i].ResetToPool();
						instance.container[i] = null;
					}
				}
				List<ItemContainer> list = instance.container;
				Pool.Free<ItemContainer>(ref list, false);
				instance.container = list;
			}
			Pool.Free<Private>(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Private with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Private instance)
		{
			if (container != null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
				for (int i = 0; i < container.Count; i++)
				{
					ItemContainer item = container[i].Copy();
					instance.container.Add(item);
				}
			}
			else
			{
				instance.container = null;
			}
		}

		public Private Copy()
		{
			Private @private = Pool.Get<Private>();
			CopyTo(@private);
			return @private;
		}

		public static Private Deserialize(BufferStream stream)
		{
			Private @private = Pool.Get<Private>();
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLengthDelimited(BufferStream stream)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLengthDelimited(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLength(BufferStream stream, int length)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLength(stream, length, @private, isDelta: false);
			return @private;
		}

		public static Private Deserialize(byte[] buffer)
		{
			Private @private = Pool.Get<Private>();
			using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public void FromProto(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(BufferStream stream, Private previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Private Deserialize(BufferStream stream, Private instance, bool isDelta)
		{
			if (!isDelta && instance.container == null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Private DeserializeLengthDelimited(BufferStream stream, Private instance, bool isDelta)
		{
			if (!isDelta && instance.container == null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Private DeserializeLength(BufferStream stream, int length, Private instance, bool isDelta)
		{
			if (!isDelta && instance.container == null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(BufferStream stream, Private instance, Private previous)
		{
			if (instance.container == null)
			{
				return;
			}
			for (int i = 0; i < instance.container.Count; i++)
			{
				ItemContainer itemContainer = instance.container[i];
				stream.WriteByte(10);
				BufferStream.RangeHandle range = stream.GetRange(5);
				int position = stream.Position;
				ItemContainer.SerializeDelta(stream, itemContainer, itemContainer);
				int val = stream.Position - position;
				Span<byte> span = range.GetSpan();
				int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
				if (num < 5)
				{
					span[num - 1] |= 128;
					while (num < 4)
					{
						span[num++] = 128;
					}
					span[4] = 0;
				}
			}
		}

		public static void Serialize(BufferStream stream, Private instance)
		{
			if (instance.container == null)
			{
				return;
			}
			for (int i = 0; i < instance.container.Count; i++)
			{
				ItemContainer instance2 = instance.container[i];
				stream.WriteByte(10);
				BufferStream.RangeHandle range = stream.GetRange(5);
				int position = stream.Position;
				ItemContainer.Serialize(stream, instance2);
				int val = stream.Position - position;
				Span<byte> span = range.GetSpan();
				int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
				if (num < 5)
				{
					span[num - 1] |= 128;
					while (num < 4)
					{
						span[num++] = 128;
					}
					span[4] = 0;
				}
			}
		}

		public void ToProto(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			if (container != null)
			{
				for (int i = 0; i < container.Count; i++)
				{
					container[i]?.InspectUids(action);
				}
			}
		}
	}

	[NonSerialized]
	public Private privateData;

	[NonSerialized]
	public ulong playerID;

	[NonSerialized]
	public string playerName;

	[NonSerialized]
	public uint underwearSkin;

	[NonSerialized]
	public string streamerName;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(LootableCorpse instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.privateData != null)
			{
				instance.privateData.ResetToPool();
				instance.privateData = null;
			}
			instance.playerID = 0uL;
			instance.playerName = string.Empty;
			instance.underwearSkin = 0u;
			instance.streamerName = string.Empty;
			Pool.Free<LootableCorpse>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose LootableCorpse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(LootableCorpse instance)
	{
		if (privateData != null)
		{
			if (instance.privateData == null)
			{
				instance.privateData = privateData.Copy();
			}
			else
			{
				privateData.CopyTo(instance.privateData);
			}
		}
		else
		{
			instance.privateData = null;
		}
		instance.playerID = playerID;
		instance.playerName = playerName;
		instance.underwearSkin = underwearSkin;
		instance.streamerName = streamerName;
	}

	public LootableCorpse Copy()
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		CopyTo(lootableCorpse);
		return lootableCorpse;
	}

	public static LootableCorpse Deserialize(BufferStream stream)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		Deserialize(stream, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public static LootableCorpse DeserializeLengthDelimited(BufferStream stream)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		DeserializeLengthDelimited(stream, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public static LootableCorpse DeserializeLength(BufferStream stream, int length)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		DeserializeLength(stream, length, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public static LootableCorpse Deserialize(byte[] buffer)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, LootableCorpse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static LootableCorpse Deserialize(BufferStream stream, LootableCorpse instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.privateData == null)
				{
					instance.privateData = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.privateData, isDelta);
				}
				break;
			case 16:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				break;
			case 26:
				instance.playerName = ProtocolParser.ReadString(stream);
				break;
			case 32:
				instance.underwearSkin = ProtocolParser.ReadUInt32(stream);
				break;
			case 42:
				instance.streamerName = ProtocolParser.ReadString(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static LootableCorpse DeserializeLengthDelimited(BufferStream stream, LootableCorpse instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.privateData == null)
				{
					instance.privateData = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.privateData, isDelta);
				}
				break;
			case 16:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				break;
			case 26:
				instance.playerName = ProtocolParser.ReadString(stream);
				break;
			case 32:
				instance.underwearSkin = ProtocolParser.ReadUInt32(stream);
				break;
			case 42:
				instance.streamerName = ProtocolParser.ReadString(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static LootableCorpse DeserializeLength(BufferStream stream, int length, LootableCorpse instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.privateData == null)
				{
					instance.privateData = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.privateData, isDelta);
				}
				break;
			case 16:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				break;
			case 26:
				instance.playerName = ProtocolParser.ReadString(stream);
				break;
			case 32:
				instance.underwearSkin = ProtocolParser.ReadUInt32(stream);
				break;
			case 42:
				instance.streamerName = ProtocolParser.ReadString(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, LootableCorpse instance, LootableCorpse previous)
	{
		if (instance.privateData != null)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(5);
			int position = stream.Position;
			Private.SerializeDelta(stream, instance.privateData, previous.privateData);
			int val = stream.Position - position;
			Span<byte> span = range.GetSpan();
			int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
			if (num < 5)
			{
				span[num - 1] |= 128;
				while (num < 4)
				{
					span[num++] = 128;
				}
				span[4] = 0;
			}
		}
		if (instance.playerID != previous.playerID)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.playerName != null && instance.playerName != previous.playerName)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.playerName);
		}
		if (instance.underwearSkin != previous.underwearSkin)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.underwearSkin);
		}
		if (instance.streamerName != null && instance.streamerName != previous.streamerName)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.streamerName);
		}
	}

	public static void Serialize(BufferStream stream, LootableCorpse instance)
	{
		if (instance.privateData != null)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(5);
			int position = stream.Position;
			Private.Serialize(stream, instance.privateData);
			int val = stream.Position - position;
			Span<byte> span = range.GetSpan();
			int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
			if (num < 5)
			{
				span[num - 1] |= 128;
				while (num < 4)
				{
					span[num++] = 128;
				}
				span[4] = 0;
			}
		}
		if (instance.playerID != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.playerName != null)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.playerName);
		}
		if (instance.underwearSkin != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.underwearSkin);
		}
		if (instance.streamerName != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.streamerName);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		privateData?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ParentInfo : IDisposable, IPooled, IProto<ParentInfo>, IProto
{
	[NonSerialized]
	public NetworkableId uid;

	[NonSerialized]
	public uint bone;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ParentInfo instance)
	{
		if (instance.ShouldPool)
		{
			instance.uid = default(NetworkableId);
			instance.bone = 0u;
			Pool.Free<ParentInfo>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ParentInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ParentInfo instance)
	{
		instance.uid = uid;
		instance.bone = bone;
	}

	public ParentInfo Copy()
	{
		ParentInfo parentInfo = Pool.Get<ParentInfo>();
		CopyTo(parentInfo);
		return parentInfo;
	}

	public static ParentInfo Deserialize(BufferStream stream)
	{
		ParentInfo parentInfo = Pool.Get<ParentInfo>();
		Deserialize(stream, parentInfo, isDelta: false);
		return parentInfo;
	}

	public static ParentInfo DeserializeLengthDelimited(BufferStream stream)
	{
		ParentInfo parentInfo = Pool.Get<ParentInfo>();
		DeserializeLengthDelimited(stream, parentInfo, isDelta: false);
		return parentInfo;
	}

	public static ParentInfo DeserializeLength(BufferStream stream, int length)
	{
		ParentInfo parentInfo = Pool.Get<ParentInfo>();
		DeserializeLength(stream, length, parentInfo, isDelta: false);
		return parentInfo;
	}

	public static ParentInfo Deserialize(byte[] buffer)
	{
		ParentInfo parentInfo = Pool.Get<ParentInfo>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, parentInfo, isDelta: false);
		return parentInfo;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, ParentInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ParentInfo Deserialize(BufferStream stream, ParentInfo instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.bone = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ParentInfo DeserializeLengthDelimited(BufferStream stream, ParentInfo instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.bone = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ParentInfo DeserializeLength(BufferStream stream, int length, ParentInfo instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.bone = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, ParentInfo instance, ParentInfo previous)
	{
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.uid.Value);
		if (instance.bone != previous.bone)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.bone);
		}
	}

	public static void Serialize(BufferStream stream, ParentInfo instance)
	{
		if (instance.uid != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.uid.Value);
		}
		if (instance.bone != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.bone);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref uid.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BuildingBlock : IDisposable, IPooled, IProto<BuildingBlock>, IProto
{
	[NonSerialized]
	public ulong model;

	[NonSerialized]
	public int grade;

	[NonSerialized]
	public bool beingDemolished;

	[NonSerialized]
	public ulong wallpaperID;

	[NonSerialized]
	public float wallpaperHealth;

	[NonSerialized]
	public ulong wallpaperID2;

	[NonSerialized]
	public float wallpaperHealth2;

	[NonSerialized]
	public float wallpaperRotation;

	[NonSerialized]
	public float wallpaperRotation2;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuildingBlock instance)
	{
		if (instance.ShouldPool)
		{
			instance.model = 0uL;
			instance.grade = 0;
			instance.beingDemolished = false;
			instance.wallpaperID = 0uL;
			instance.wallpaperHealth = 0f;
			instance.wallpaperID2 = 0uL;
			instance.wallpaperHealth2 = 0f;
			instance.wallpaperRotation = 0f;
			instance.wallpaperRotation2 = 0f;
			Pool.Free<BuildingBlock>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuildingBlock with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuildingBlock instance)
	{
		instance.model = model;
		instance.grade = grade;
		instance.beingDemolished = beingDemolished;
		instance.wallpaperID = wallpaperID;
		instance.wallpaperHealth = wallpaperHealth;
		instance.wallpaperID2 = wallpaperID2;
		instance.wallpaperHealth2 = wallpaperHealth2;
		instance.wallpaperRotation = wallpaperRotation;
		instance.wallpaperRotation2 = wallpaperRotation2;
	}

	public BuildingBlock Copy()
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		CopyTo(buildingBlock);
		return buildingBlock;
	}

	public static BuildingBlock Deserialize(BufferStream stream)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		Deserialize(stream, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public static BuildingBlock DeserializeLengthDelimited(BufferStream stream)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		DeserializeLengthDelimited(stream, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public static BuildingBlock DeserializeLength(BufferStream stream, int length)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		DeserializeLength(stream, length, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public static BuildingBlock Deserialize(byte[] buffer)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BuildingBlock previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuildingBlock Deserialize(BufferStream stream, BuildingBlock instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.model = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.beingDemolished = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.wallpaperID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 45:
				instance.wallpaperHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case 48:
				instance.wallpaperID2 = ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.wallpaperHealth2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.wallpaperRotation = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.wallpaperRotation2 = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuildingBlock DeserializeLengthDelimited(BufferStream stream, BuildingBlock instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.model = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.beingDemolished = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.wallpaperID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 45:
				instance.wallpaperHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case 48:
				instance.wallpaperID2 = ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.wallpaperHealth2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.wallpaperRotation = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.wallpaperRotation2 = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuildingBlock DeserializeLength(BufferStream stream, int length, BuildingBlock instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.model = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.beingDemolished = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.wallpaperID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 45:
				instance.wallpaperHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case 48:
				instance.wallpaperID2 = ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.wallpaperHealth2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.wallpaperRotation = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.wallpaperRotation2 = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BuildingBlock instance, BuildingBlock previous)
	{
		if (instance.model != previous.model)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.model);
		}
		if (instance.grade != previous.grade)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.grade);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.beingDemolished);
		if (instance.wallpaperID != previous.wallpaperID)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID);
		}
		if (instance.wallpaperHealth != previous.wallpaperHealth)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth);
		}
		if (instance.wallpaperID2 != previous.wallpaperID2)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID2);
		}
		if (instance.wallpaperHealth2 != previous.wallpaperHealth2)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth2);
		}
		if (instance.wallpaperRotation != previous.wallpaperRotation)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.wallpaperRotation);
		}
		if (instance.wallpaperRotation2 != previous.wallpaperRotation2)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.wallpaperRotation2);
		}
	}

	public static void Serialize(BufferStream stream, BuildingBlock instance)
	{
		if (instance.model != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.model);
		}
		if (instance.grade != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.grade);
		}
		if (instance.beingDemolished)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.beingDemolished);
		}
		if (instance.wallpaperID != 0L)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID);
		}
		if (instance.wallpaperHealth != 0f)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth);
		}
		if (instance.wallpaperID2 != 0L)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID2);
		}
		if (instance.wallpaperHealth2 != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth2);
		}
		if (instance.wallpaperRotation != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.wallpaperRotation);
		}
		if (instance.wallpaperRotation2 != 0f)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.wallpaperRotation2);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class WallpaperTool : IDisposable, IPooled, IProto<WallpaperTool>, IProto
{
	[NonSerialized]
	public ulong wallSkinID;

	[NonSerialized]
	public ulong flooringSkinID;

	[NonSerialized]
	public ulong ceilingSkinID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(WallpaperTool instance)
	{
		if (instance.ShouldPool)
		{
			instance.wallSkinID = 0uL;
			instance.flooringSkinID = 0uL;
			instance.ceilingSkinID = 0uL;
			Pool.Free<WallpaperTool>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose WallpaperTool with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(WallpaperTool instance)
	{
		instance.wallSkinID = wallSkinID;
		instance.flooringSkinID = flooringSkinID;
		instance.ceilingSkinID = ceilingSkinID;
	}

	public WallpaperTool Copy()
	{
		WallpaperTool wallpaperTool = Pool.Get<WallpaperTool>();
		CopyTo(wallpaperTool);
		return wallpaperTool;
	}

	public static WallpaperTool Deserialize(BufferStream stream)
	{
		WallpaperTool wallpaperTool = Pool.Get<WallpaperTool>();
		Deserialize(stream, wallpaperTool, isDelta: false);
		return wallpaperTool;
	}

	public static WallpaperTool DeserializeLengthDelimited(BufferStream stream)
	{
		WallpaperTool wallpaperTool = Pool.Get<WallpaperTool>();
		DeserializeLengthDelimited(stream, wallpaperTool, isDelta: false);
		return wallpaperTool;
	}

	public static WallpaperTool DeserializeLength(BufferStream stream, int length)
	{
		WallpaperTool wallpaperTool = Pool.Get<WallpaperTool>();
		DeserializeLength(stream, length, wallpaperTool, isDelta: false);
		return wallpaperTool;
	}

	public static WallpaperTool Deserialize(byte[] buffer)
	{
		WallpaperTool wallpaperTool = Pool.Get<WallpaperTool>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, wallpaperTool, isDelta: false);
		return wallpaperTool;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, WallpaperTool previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static WallpaperTool Deserialize(BufferStream stream, WallpaperTool instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.wallSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.flooringSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.ceilingSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static WallpaperTool DeserializeLengthDelimited(BufferStream stream, WallpaperTool instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.wallSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.flooringSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.ceilingSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static WallpaperTool DeserializeLength(BufferStream stream, int length, WallpaperTool instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.wallSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.flooringSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.ceilingSkinID = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, WallpaperTool instance, WallpaperTool previous)
	{
		if (instance.wallSkinID != previous.wallSkinID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.wallSkinID);
		}
		if (instance.flooringSkinID != previous.flooringSkinID)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.flooringSkinID);
		}
		if (instance.ceilingSkinID != previous.ceilingSkinID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.ceilingSkinID);
		}
	}

	public static void Serialize(BufferStream stream, WallpaperTool instance)
	{
		if (instance.wallSkinID != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.wallSkinID);
		}
		if (instance.flooringSkinID != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.flooringSkinID);
		}
		if (instance.ceilingSkinID != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.ceilingSkinID);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class WorldItem : IDisposable, IPooled, IProto<WorldItem>, IProto
{
	[NonSerialized]
	public Item item;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(WorldItem instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.item != null)
			{
				instance.item.ResetToPool();
				instance.item = null;
			}
			Pool.Free<WorldItem>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose WorldItem with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(WorldItem instance)
	{
		if (item != null)
		{
			if (instance.item == null)
			{
				instance.item = item.Copy();
			}
			else
			{
				item.CopyTo(instance.item);
			}
		}
		else
		{
			instance.item = null;
		}
	}

	public WorldItem Copy()
	{
		WorldItem worldItem = Pool.Get<WorldItem>();
		CopyTo(worldItem);
		return worldItem;
	}

	public static WorldItem Deserialize(BufferStream stream)
	{
		WorldItem worldItem = Pool.Get<WorldItem>();
		Deserialize(stream, worldItem, isDelta: false);
		return worldItem;
	}

	public static WorldItem DeserializeLengthDelimited(BufferStream stream)
	{
		WorldItem worldItem = Pool.Get<WorldItem>();
		DeserializeLengthDelimited(stream, worldItem, isDelta: false);
		return worldItem;
	}

	public static WorldItem DeserializeLength(BufferStream stream, int length)
	{
		WorldItem worldItem = Pool.Get<WorldItem>();
		DeserializeLength(stream, length, worldItem, isDelta: false);
		return worldItem;
	}

	public static WorldItem Deserialize(byte[] buffer)
	{
		WorldItem worldItem = Pool.Get<WorldItem>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, worldItem, isDelta: false);
		return worldItem;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, WorldItem previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static WorldItem Deserialize(BufferStream stream, WorldItem instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.item == null)
				{
					instance.item = Item.DeserializeLengthDelimited(stream);
				}
				else
				{
					Item.DeserializeLengthDelimited(stream, instance.item, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static WorldItem DeserializeLengthDelimited(BufferStream stream, WorldItem instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.item == null)
				{
					instance.item = Item.DeserializeLengthDelimited(stream);
				}
				else
				{
					Item.DeserializeLengthDelimited(stream, instance.item, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static WorldItem DeserializeLength(BufferStream stream, int length, WorldItem instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.item == null)
				{
					instance.item = Item.DeserializeLengthDelimited(stream);
				}
				else
				{
					Item.DeserializeLengthDelimited(stream, instance.item, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, WorldItem instance, WorldItem previous)
	{
		if (instance.item == null)
		{
			return;
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(5);
		int position = stream.Position;
		Item.SerializeDelta(stream, instance.item, previous.item);
		int val = stream.Position - position;
		Span<byte> span = range.GetSpan();
		int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
		if (num < 5)
		{
			span[num - 1] |= 128;
			while (num < 4)
			{
				span[num++] = 128;
			}
			span[4] = 0;
		}
	}

	public static void Serialize(BufferStream stream, WorldItem instance)
	{
		if (instance.item == null)
		{
			return;
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(5);
		int position = stream.Position;
		Item.Serialize(stream, instance.item);
		int val = stream.Position - position;
		Span<byte> span = range.GetSpan();
		int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
		if (num < 5)
		{
			span[num - 1] |= 128;
			while (num < 4)
			{
				span[num++] = 128;
			}
			span[4] = 0;
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		item?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class KeyLock : IDisposable, IPooled, IProto<KeyLock>, IProto
{
	[NonSerialized]
	public int code;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(KeyLock instance)
	{
		if (instance.ShouldPool)
		{
			instance.code = 0;
			Pool.Free<KeyLock>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose KeyLock with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(KeyLock instance)
	{
		instance.code = code;
	}

	public KeyLock Copy()
	{
		KeyLock keyLock = Pool.Get<KeyLock>();
		CopyTo(keyLock);
		return keyLock;
	}

	public static KeyLock Deserialize(BufferStream stream)
	{
		KeyLock keyLock = Pool.Get<KeyLock>();
		Deserialize(stream, keyLock, isDelta: false);
		return keyLock;
	}

	public static KeyLock DeserializeLengthDelimited(BufferStream stream)
	{
		KeyLock keyLock = Pool.Get<KeyLock>();
		DeserializeLengthDelimited(stream, keyLock, isDelta: false);
		return keyLock;
	}

	public static KeyLock DeserializeLength(BufferStream stream, int length)
	{
		KeyLock keyLock = Pool.Get<KeyLock>();
		DeserializeLength(stream, length, keyLock, isDelta: false);
		return keyLock;
	}

	public static KeyLock Deserialize(byte[] buffer)
	{
		KeyLock keyLock = Pool.Get<KeyLock>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, keyLock, isDelta: false);
		return keyLock;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, KeyLock previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static KeyLock Deserialize(BufferStream stream, KeyLock instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.code = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static KeyLock DeserializeLengthDelimited(BufferStream stream, KeyLock instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.code = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static KeyLock DeserializeLength(BufferStream stream, int length, KeyLock instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.code = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, KeyLock instance, KeyLock previous)
	{
		if (instance.code != previous.code)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.code);
		}
	}

	public static void Serialize(BufferStream stream, KeyLock instance)
	{
		if (instance.code != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.code);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class CodeLock : IDisposable, IPooled, IProto<CodeLock>, IProto
{
	public class Private : IDisposable, IPooled, IProto<Private>, IProto
	{
		[NonSerialized]
		public string code;

		[NonSerialized]
		public List<ulong> users;

		[NonSerialized]
		public string guestCode;

		[NonSerialized]
		public List<ulong> guestUsers;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Private instance)
		{
			if (instance.ShouldPool)
			{
				instance.code = string.Empty;
				if (instance.users != null)
				{
					List<ulong> list = instance.users;
					Pool.FreeUnmanaged<ulong>(ref list);
					instance.users = list;
				}
				instance.guestCode = string.Empty;
				if (instance.guestUsers != null)
				{
					List<ulong> list2 = instance.guestUsers;
					Pool.FreeUnmanaged<ulong>(ref list2);
					instance.guestUsers = list2;
				}
				Pool.Free<Private>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Private with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Private instance)
		{
			instance.code = code;
			if (users != null)
			{
				instance.users = Pool.Get<List<ulong>>();
				for (int i = 0; i < users.Count; i++)
				{
					ulong item = users[i];
					instance.users.Add(item);
				}
			}
			else
			{
				instance.users = null;
			}
			instance.guestCode = guestCode;
			if (guestUsers != null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
				for (int j = 0; j < guestUsers.Count; j++)
				{
					ulong item2 = guestUsers[j];
					instance.guestUsers.Add(item2);
				}
			}
			else
			{
				instance.guestUsers = null;
			}
		}

		public Private Copy()
		{
			Private @private = Pool.Get<Private>();
			CopyTo(@private);
			return @private;
		}

		public static Private Deserialize(BufferStream stream)
		{
			Private @private = Pool.Get<Private>();
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLengthDelimited(BufferStream stream)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLengthDelimited(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLength(BufferStream stream, int length)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLength(stream, length, @private, isDelta: false);
			return @private;
		}

		public static Private Deserialize(byte[] buffer)
		{
			Private @private = Pool.Get<Private>();
			using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public void FromProto(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(BufferStream stream, Private previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Private Deserialize(BufferStream stream, Private instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.users == null)
				{
					instance.users = Pool.Get<List<ulong>>();
				}
				if (instance.guestUsers == null)
				{
					instance.guestUsers = Pool.Get<List<ulong>>();
				}
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.code = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.users.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 34:
					instance.guestCode = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Private DeserializeLengthDelimited(BufferStream stream, Private instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.users == null)
				{
					instance.users = Pool.Get<List<ulong>>();
				}
				if (instance.guestUsers == null)
				{
					instance.guestUsers = Pool.Get<List<ulong>>();
				}
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.code = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.users.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 34:
					instance.guestCode = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Private DeserializeLength(BufferStream stream, int length, Private instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.users == null)
				{
					instance.users = Pool.Get<List<ulong>>();
				}
				if (instance.guestUsers == null)
				{
					instance.guestUsers = Pool.Get<List<ulong>>();
				}
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.code = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.users.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 34:
					instance.guestCode = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(BufferStream stream, Private instance, Private previous)
		{
			if (instance.code != null && instance.code != previous.code)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.code);
			}
			if (instance.users != null)
			{
				for (int i = 0; i < instance.users.Count; i++)
				{
					ulong val = instance.users[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, val);
				}
			}
			if (instance.guestCode != null && instance.guestCode != previous.guestCode)
			{
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.guestCode);
			}
			if (instance.guestUsers != null)
			{
				for (int j = 0; j < instance.guestUsers.Count; j++)
				{
					ulong val2 = instance.guestUsers[j];
					stream.WriteByte(40);
					ProtocolParser.WriteUInt64(stream, val2);
				}
			}
		}

		public static void Serialize(BufferStream stream, Private instance)
		{
			if (instance.code != null)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.code);
			}
			if (instance.users != null)
			{
				for (int i = 0; i < instance.users.Count; i++)
				{
					ulong val = instance.users[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, val);
				}
			}
			if (instance.guestCode != null)
			{
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.guestCode);
			}
			if (instance.guestUsers != null)
			{
				for (int j = 0; j < instance.guestUsers.Count; j++)
				{
					ulong val2 = instance.guestUsers[j];
					stream.WriteByte(40);
					ProtocolParser.WriteUInt64(stream, val2);
				}
			}
		}

		public void ToProto(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public Private pv;

	[NonSerialized]
	public bool hasCode;

	[NonSerialized]
	public bool hasGuestCode;

	[NonSerialized]
	public bool hasAuth;

	[NonSerialized]
	public bool hasGuestAuth;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(CodeLock instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.pv != null)
			{
				instance.pv.ResetToPool();
				instance.pv = null;
			}
			instance.hasCode = false;
			instance.hasGuestCode = false;
			instance.hasAuth = false;
			instance.hasGuestAuth = false;
			Pool.Free<CodeLock>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose CodeLock with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(CodeLock instance)
	{
		if (pv != null)
		{
			if (instance.pv == null)
			{
				instance.pv = pv.Copy();
			}
			else
			{
				pv.CopyTo(instance.pv);
			}
		}
		else
		{
			instance.pv = null;
		}
		instance.hasCode = hasCode;
		instance.hasGuestCode = hasGuestCode;
		instance.hasAuth = hasAuth;
		instance.hasGuestAuth = hasGuestAuth;
	}

	public CodeLock Copy()
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		CopyTo(codeLock);
		return codeLock;
	}

	public static CodeLock Deserialize(BufferStream stream)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		Deserialize(stream, codeLock, isDelta: false);
		return codeLock;
	}

	public static CodeLock DeserializeLengthDelimited(BufferStream stream)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		DeserializeLengthDelimited(stream, codeLock, isDelta: false);
		return codeLock;
	}

	public static CodeLock DeserializeLength(BufferStream stream, int length)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		DeserializeLength(stream, length, codeLock, isDelta: false);
		return codeLock;
	}

	public static CodeLock Deserialize(byte[] buffer)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, codeLock, isDelta: false);
		return codeLock;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, CodeLock previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static CodeLock Deserialize(BufferStream stream, CodeLock instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.pv == null)
				{
					instance.pv = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.pv, isDelta);
				}
				break;
			case 16:
				instance.hasCode = ProtocolParser.ReadBool(stream);
				break;
			case 24:
				instance.hasGuestCode = ProtocolParser.ReadBool(stream);
				break;
			case 32:
				instance.hasAuth = ProtocolParser.ReadBool(stream);
				break;
			case 40:
				instance.hasGuestAuth = ProtocolParser.ReadBool(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static CodeLock DeserializeLengthDelimited(BufferStream stream, CodeLock instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.pv == null)
				{
					instance.pv = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.pv, isDelta);
				}
				break;
			case 16:
				instance.hasCode = ProtocolParser.ReadBool(stream);
				break;
			case 24:
				instance.hasGuestCode = ProtocolParser.ReadBool(stream);
				break;
			case 32:
				instance.hasAuth = ProtocolParser.ReadBool(stream);
				break;
			case 40:
				instance.hasGuestAuth = ProtocolParser.ReadBool(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static CodeLock DeserializeLength(BufferStream stream, int length, CodeLock instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.pv == null)
				{
					instance.pv = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.pv, isDelta);
				}
				break;
			case 16:
				instance.hasCode = ProtocolParser.ReadBool(stream);
				break;
			case 24:
				instance.hasGuestCode = ProtocolParser.ReadBool(stream);
				break;
			case 32:
				instance.hasAuth = ProtocolParser.ReadBool(stream);
				break;
			case 40:
				instance.hasGuestAuth = ProtocolParser.ReadBool(stream);
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, CodeLock instance, CodeLock previous)
	{
		if (instance.pv != null)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(5);
			int position = stream.Position;
			Private.SerializeDelta(stream, instance.pv, previous.pv);
			int val = stream.Position - position;
			Span<byte> span = range.GetSpan();
			int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
			if (num < 5)
			{
				span[num - 1] |= 128;
				while (num < 4)
				{
					span[num++] = 128;
				}
				span[4] = 0;
			}
		}
		stream.WriteByte(16);
		ProtocolParser.WriteBool(stream, instance.hasCode);
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.hasGuestCode);
		stream.WriteByte(32);
		ProtocolParser.WriteBool(stream, instance.hasAuth);
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.hasGuestAuth);
	}

	public static void Serialize(BufferStream stream, CodeLock instance)
	{
		if (instance.pv != null)
		{
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(5);
			int position = stream.Position;
			Private.Serialize(stream, instance.pv);
			int val = stream.Position - position;
			Span<byte> span = range.GetSpan();
			int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
			if (num < 5)
			{
				span[num - 1] |= 128;
				while (num < 4)
				{
					span[num++] = 128;
				}
				span[4] = 0;
			}
		}
		if (instance.hasCode)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteBool(stream, instance.hasCode);
		}
		if (instance.hasGuestCode)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.hasGuestCode);
		}
		if (instance.hasAuth)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteBool(stream, instance.hasAuth);
		}
		if (instance.hasGuestAuth)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.hasGuestAuth);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		pv?.InspectUids(action);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Whitelist : IDisposable, IPooled, IProto<Whitelist>, IProto
{
	[NonSerialized]
	public List<ulong> users;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Whitelist instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.users != null)
			{
				List<ulong> list = instance.users;
				Pool.FreeUnmanaged<ulong>(ref list);
				instance.users = list;
			}
			Pool.Free<Whitelist>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Whitelist with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Whitelist instance)
	{
		if (users != null)
		{
			instance.users = Pool.Get<List<ulong>>();
			for (int i = 0; i < users.Count; i++)
			{
				ulong item = users[i];
				instance.users.Add(item);
			}
		}
		else
		{
			instance.users = null;
		}
	}

	public Whitelist Copy()
	{
		Whitelist whitelist = Pool.Get<Whitelist>();
		CopyTo(whitelist);
		return whitelist;
	}

	public static Whitelist Deserialize(BufferStream stream)
	{
		Whitelist whitelist = Pool.Get<Whitelist>();
		Deserialize(stream, whitelist, isDelta: false);
		return whitelist;
	}

	public static Whitelist DeserializeLengthDelimited(BufferStream stream)
	{
		Whitelist whitelist = Pool.Get<Whitelist>();
		DeserializeLengthDelimited(stream, whitelist, isDelta: false);
		return whitelist;
	}

	public static Whitelist DeserializeLength(BufferStream stream, int length)
	{
		Whitelist whitelist = Pool.Get<Whitelist>();
		DeserializeLength(stream, length, whitelist, isDelta: false);
		return whitelist;
	}

	public static Whitelist Deserialize(byte[] buffer)
	{
		Whitelist whitelist = Pool.Get<Whitelist>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, whitelist, isDelta: false);
		return whitelist;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, Whitelist previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Whitelist Deserialize(BufferStream stream, Whitelist instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<ulong>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Whitelist DeserializeLengthDelimited(BufferStream stream, Whitelist instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<ulong>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Whitelist DeserializeLength(BufferStream stream, int length, Whitelist instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<ulong>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Whitelist instance, Whitelist previous)
	{
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				ulong val = instance.users[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
	}

	public static void Serialize(BufferStream stream, Whitelist instance)
	{
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				ulong val = instance.users[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class WeaponRackItem : IDisposable, IPooled, IProto<WeaponRackItem>, IProto
{
	[NonSerialized]
	public int itemID;

	[NonSerialized]
	public ulong skinid;

	[NonSerialized]
	public int gridSlotIndex;

	[NonSerialized]
	public int inventorySlot;

	[NonSerialized]
	public int ammoCount;

	[NonSerialized]
	public int ammoMax;

	[NonSerialized]
	public int ammoID;

	[NonSerialized]
	public float condition;

	[NonSerialized]
	public int rotation;

	[NonSerialized]
	public int ammoTypes;

	[NonSerialized]
	public float reloadTime;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(WeaponRackItem instance)
	{
		if (instance.ShouldPool)
		{
			instance.itemID = 0;
			instance.skinid = 0uL;
			instance.gridSlotIndex = 0;
			instance.inventorySlot = 0;
			instance.ammoCount = 0;
			instance.ammoMax = 0;
			instance.ammoID = 0;
			instance.condition = 0f;
			instance.rotation = 0;
			instance.ammoTypes = 0;
			instance.reloadTime = 0f;
			Pool.Free<WeaponRackItem>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose WeaponRackItem with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(WeaponRackItem instance)
	{
		instance.itemID = itemID;
		instance.skinid = skinid;
		instance.gridSlotIndex = gridSlotIndex;
		instance.inventorySlot = inventorySlot;
		instance.ammoCount = ammoCount;
		instance.ammoMax = ammoMax;
		instance.ammoID = ammoID;
		instance.condition = condition;
		instance.rotation = rotation;
		instance.ammoTypes = ammoTypes;
		instance.reloadTime = reloadTime;
	}

	public WeaponRackItem Copy()
	{
		WeaponRackItem weaponRackItem = Pool.Get<WeaponRackItem>();
		CopyTo(weaponRackItem);
		return weaponRackItem;
	}

	public static WeaponRackItem Deserialize(BufferStream stream)
	{
		WeaponRackItem weaponRackItem = Pool.Get<WeaponRackItem>();
		Deserialize(stream, weaponRackItem, isDelta: false);
		return weaponRackItem;
	}

	public static WeaponRackItem DeserializeLengthDelimited(BufferStream stream)
	{
		WeaponRackItem weaponRackItem = Pool.Get<WeaponRackItem>();
		DeserializeLengthDelimited(stream, weaponRackItem, isDelta: false);
		return weaponRackItem;
	}

	public static WeaponRackItem DeserializeLength(BufferStream stream, int length)
	{
		WeaponRackItem weaponRackItem = Pool.Get<WeaponRackItem>();
		DeserializeLength(stream, length, weaponRackItem, isDelta: false);
		return weaponRackItem;
	}

	public static WeaponRackItem Deserialize(byte[] buffer)
	{
		WeaponRackItem weaponRackItem = Pool.Get<WeaponRackItem>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, weaponRackItem, isDelta: false);
		return weaponRackItem;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, WeaponRackItem previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static WeaponRackItem Deserialize(BufferStream stream, WeaponRackItem instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.itemID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.gridSlotIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.inventorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.ammoMax = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.ammoID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 69:
				instance.condition = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.rotation = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 80:
				instance.ammoTypes = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 93:
				instance.reloadTime = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static WeaponRackItem DeserializeLengthDelimited(BufferStream stream, WeaponRackItem instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.gridSlotIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.inventorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.ammoMax = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.ammoID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 69:
				instance.condition = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.rotation = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 80:
				instance.ammoTypes = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 93:
				instance.reloadTime = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static WeaponRackItem DeserializeLength(BufferStream stream, int length, WeaponRackItem instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.gridSlotIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.inventorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.ammoMax = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.ammoID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 69:
				instance.condition = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.rotation = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 80:
				instance.ammoTypes = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 93:
				instance.reloadTime = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, WeaponRackItem instance, WeaponRackItem previous)
	{
		if (instance.itemID != previous.itemID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemID);
		}
		if (instance.skinid != previous.skinid)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.skinid);
		}
		if (instance.gridSlotIndex != previous.gridSlotIndex)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.gridSlotIndex);
		}
		if (instance.inventorySlot != previous.inventorySlot)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inventorySlot);
		}
		if (instance.ammoCount != previous.ammoCount)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoCount);
		}
		if (instance.ammoMax != previous.ammoMax)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoMax);
		}
		if (instance.ammoID != previous.ammoID)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoID);
		}
		if (instance.condition != previous.condition)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.condition);
		}
		if (instance.rotation != previous.rotation)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.rotation);
		}
		if (instance.ammoTypes != previous.ammoTypes)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoTypes);
		}
		if (instance.reloadTime != previous.reloadTime)
		{
			stream.WriteByte(93);
			ProtocolParser.WriteSingle(stream, instance.reloadTime);
		}
	}

	public static void Serialize(BufferStream stream, WeaponRackItem instance)
	{
		if (instance.itemID != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemID);
		}
		if (instance.skinid != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.skinid);
		}
		if (instance.gridSlotIndex != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.gridSlotIndex);
		}
		if (instance.inventorySlot != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inventorySlot);
		}
		if (instance.ammoCount != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoCount);
		}
		if (instance.ammoMax != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoMax);
		}
		if (instance.ammoID != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoID);
		}
		if (instance.condition != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.condition);
		}
		if (instance.rotation != 0)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.rotation);
		}
		if (instance.ammoTypes != 0)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoTypes);
		}
		if (instance.reloadTime != 0f)
		{
			stream.WriteByte(93);
			ProtocolParser.WriteSingle(stream, instance.reloadTime);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class WeaponRack : IDisposable, IPooled, IProto<WeaponRack>, IProto
{
	[NonSerialized]
	public List<WeaponRackItem> items;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(WeaponRack instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.items != null)
		{
			for (int i = 0; i < instance.items.Count; i++)
			{
				if (instance.items[i] != null)
				{
					instance.items[i].ResetToPool();
					instance.items[i] = null;
				}
			}
			List<WeaponRackItem> list = instance.items;
			Pool.Free<WeaponRackItem>(ref list, false);
			instance.items = list;
		}
		Pool.Free<WeaponRack>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose WeaponRack with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(WeaponRack instance)
	{
		if (items != null)
		{
			instance.items = Pool.Get<List<WeaponRackItem>>();
			for (int i = 0; i < items.Count; i++)
			{
				WeaponRackItem item = items[i].Copy();
				instance.items.Add(item);
			}
		}
		else
		{
			instance.items = null;
		}
	}

	public WeaponRack Copy()
	{
		WeaponRack weaponRack = Pool.Get<WeaponRack>();
		CopyTo(weaponRack);
		return weaponRack;
	}

	public static WeaponRack Deserialize(BufferStream stream)
	{
		WeaponRack weaponRack = Pool.Get<WeaponRack>();
		Deserialize(stream, weaponRack, isDelta: false);
		return weaponRack;
	}

	public static WeaponRack DeserializeLengthDelimited(BufferStream stream)
	{
		WeaponRack weaponRack = Pool.Get<WeaponRack>();
		DeserializeLengthDelimited(stream, weaponRack, isDelta: false);
		return weaponRack;
	}

	public static WeaponRack DeserializeLength(BufferStream stream, int length)
	{
		WeaponRack weaponRack = Pool.Get<WeaponRack>();
		DeserializeLength(stream, length, weaponRack, isDelta: false);
		return weaponRack;
	}

	public static WeaponRack Deserialize(byte[] buffer)
	{
		WeaponRack weaponRack = Pool.Get<WeaponRack>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, weaponRack, isDelta: false);
		return weaponRack;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, WeaponRack previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static WeaponRack Deserialize(BufferStream stream, WeaponRack instance, bool isDelta)
	{
		if (!isDelta && instance.items == null)
		{
			instance.items = Pool.Get<List<WeaponRackItem>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.items.Add(WeaponRackItem.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static WeaponRack DeserializeLengthDelimited(BufferStream stream, WeaponRack instance, bool isDelta)
	{
		if (!isDelta && instance.items == null)
		{
			instance.items = Pool.Get<List<WeaponRackItem>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.items.Add(WeaponRackItem.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static WeaponRack DeserializeLength(BufferStream stream, int length, WeaponRack instance, bool isDelta)
	{
		if (!isDelta && instance.items == null)
		{
			instance.items = Pool.Get<List<WeaponRackItem>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.items.Add(WeaponRackItem.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, WeaponRack instance, WeaponRack previous)
	{
		if (instance.items == null)
		{
			return;
		}
		for (int i = 0; i < instance.items.Count; i++)
		{
			WeaponRackItem weaponRackItem = instance.items[i];
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			WeaponRackItem.SerializeDelta(stream, weaponRackItem, weaponRackItem);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field items (ProtoBuf.WeaponRackItem)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
	}

	public static void Serialize(BufferStream stream, WeaponRack instance)
	{
		if (instance.items == null)
		{
			return;
		}
		for (int i = 0; i < instance.items.Count; i++)
		{
			WeaponRackItem instance2 = instance.items[i];
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			WeaponRackItem.Serialize(stream, instance2);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field items (ProtoBuf.WeaponRackItem)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (items != null)
		{
			for (int i = 0; i < items.Count; i++)
			{
				items[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class FrankensteinTable : IDisposable, IPooled, IProto<FrankensteinTable>, IProto
{
	[NonSerialized]
	public List<int> itemIds;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FrankensteinTable instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.itemIds != null)
			{
				List<int> list = instance.itemIds;
				Pool.FreeUnmanaged<int>(ref list);
				instance.itemIds = list;
			}
			Pool.Free<FrankensteinTable>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FrankensteinTable with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FrankensteinTable instance)
	{
		if (itemIds != null)
		{
			instance.itemIds = Pool.Get<List<int>>();
			for (int i = 0; i < itemIds.Count; i++)
			{
				int item = itemIds[i];
				instance.itemIds.Add(item);
			}
		}
		else
		{
			instance.itemIds = null;
		}
	}

	public FrankensteinTable Copy()
	{
		FrankensteinTable frankensteinTable = Pool.Get<FrankensteinTable>();
		CopyTo(frankensteinTable);
		return frankensteinTable;
	}

	public static FrankensteinTable Deserialize(BufferStream stream)
	{
		FrankensteinTable frankensteinTable = Pool.Get<FrankensteinTable>();
		Deserialize(stream, frankensteinTable, isDelta: false);
		return frankensteinTable;
	}

	public static FrankensteinTable DeserializeLengthDelimited(BufferStream stream)
	{
		FrankensteinTable frankensteinTable = Pool.Get<FrankensteinTable>();
		DeserializeLengthDelimited(stream, frankensteinTable, isDelta: false);
		return frankensteinTable;
	}

	public static FrankensteinTable DeserializeLength(BufferStream stream, int length)
	{
		FrankensteinTable frankensteinTable = Pool.Get<FrankensteinTable>();
		DeserializeLength(stream, length, frankensteinTable, isDelta: false);
		return frankensteinTable;
	}

	public static FrankensteinTable Deserialize(byte[] buffer)
	{
		FrankensteinTable frankensteinTable = Pool.Get<FrankensteinTable>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, frankensteinTable, isDelta: false);
		return frankensteinTable;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, FrankensteinTable previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FrankensteinTable Deserialize(BufferStream stream, FrankensteinTable instance, bool isDelta)
	{
		if (!isDelta && instance.itemIds == null)
		{
			instance.itemIds = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.itemIds.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static FrankensteinTable DeserializeLengthDelimited(BufferStream stream, FrankensteinTable instance, bool isDelta)
	{
		if (!isDelta && instance.itemIds == null)
		{
			instance.itemIds = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemIds.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static FrankensteinTable DeserializeLength(BufferStream stream, int length, FrankensteinTable instance, bool isDelta)
	{
		if (!isDelta && instance.itemIds == null)
		{
			instance.itemIds = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemIds.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, FrankensteinTable instance, FrankensteinTable previous)
	{
		if (instance.itemIds != null)
		{
			for (int i = 0; i < instance.itemIds.Count; i++)
			{
				int num = instance.itemIds[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
	}

	public static void Serialize(BufferStream stream, FrankensteinTable instance)
	{
		if (instance.itemIds != null)
		{
			for (int i = 0; i < instance.itemIds.Count; i++)
			{
				int num = instance.itemIds[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BuildingPrivilege : IDisposable, IPooled, IProto<BuildingPrivilege>, IProto
{
	[NonSerialized]
	public List<PlayerNameID> users;

	[NonSerialized]
	public float upkeepPeriodMinutes;

	[NonSerialized]
	public float costFraction;

	[NonSerialized]
	public float protectedMinutes;

	[NonSerialized]
	public bool clientAuthed;

	[NonSerialized]
	public bool clientAnyAuthed;

	[NonSerialized]
	public float doorCostFraction;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuildingPrivilege instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				if (instance.users[i] != null)
				{
					instance.users[i].ResetToPool();
					instance.users[i] = null;
				}
			}
			List<PlayerNameID> list = instance.users;
			Pool.Free<PlayerNameID>(ref list, false);
			instance.users = list;
		}
		instance.upkeepPeriodMinutes = 0f;
		instance.costFraction = 0f;
		instance.protectedMinutes = 0f;
		instance.clientAuthed = false;
		instance.clientAnyAuthed = false;
		instance.doorCostFraction = 0f;
		Pool.Free<BuildingPrivilege>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuildingPrivilege with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuildingPrivilege instance)
	{
		if (users != null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
			for (int i = 0; i < users.Count; i++)
			{
				PlayerNameID item = users[i].Copy();
				instance.users.Add(item);
			}
		}
		else
		{
			instance.users = null;
		}
		instance.upkeepPeriodMinutes = upkeepPeriodMinutes;
		instance.costFraction = costFraction;
		instance.protectedMinutes = protectedMinutes;
		instance.clientAuthed = clientAuthed;
		instance.clientAnyAuthed = clientAnyAuthed;
		instance.doorCostFraction = doorCostFraction;
	}

	public BuildingPrivilege Copy()
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		CopyTo(buildingPrivilege);
		return buildingPrivilege;
	}

	public static BuildingPrivilege Deserialize(BufferStream stream)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		Deserialize(stream, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public static BuildingPrivilege DeserializeLengthDelimited(BufferStream stream)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		DeserializeLengthDelimited(stream, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public static BuildingPrivilege DeserializeLength(BufferStream stream, int length)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		DeserializeLength(stream, length, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public static BuildingPrivilege Deserialize(byte[] buffer)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BuildingPrivilege previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuildingPrivilege Deserialize(BufferStream stream, BuildingPrivilege instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.users.Add(PlayerNameID.DeserializeLengthDelimited(stream));
				continue;
			case 21:
				instance.upkeepPeriodMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.costFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.protectedMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.clientAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.clientAnyAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 61:
				instance.doorCostFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuildingPrivilege DeserializeLengthDelimited(BufferStream stream, BuildingPrivilege instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.users.Add(PlayerNameID.DeserializeLengthDelimited(stream));
				continue;
			case 21:
				instance.upkeepPeriodMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.costFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.protectedMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.clientAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.clientAnyAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 61:
				instance.doorCostFraction = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuildingPrivilege DeserializeLength(BufferStream stream, int length, BuildingPrivilege instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.users.Add(PlayerNameID.DeserializeLengthDelimited(stream));
				continue;
			case 21:
				instance.upkeepPeriodMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.costFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.protectedMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.clientAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.clientAnyAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 61:
				instance.doorCostFraction = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BuildingPrivilege instance, BuildingPrivilege previous)
	{
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				PlayerNameID playerNameID = instance.users[i];
				stream.WriteByte(10);
				BufferStream.RangeHandle range = stream.GetRange(5);
				int position = stream.Position;
				PlayerNameID.SerializeDelta(stream, playerNameID, playerNameID);
				int val = stream.Position - position;
				Span<byte> span = range.GetSpan();
				int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
				if (num < 5)
				{
					span[num - 1] |= 128;
					while (num < 4)
					{
						span[num++] = 128;
					}
					span[4] = 0;
				}
			}
		}
		if (instance.upkeepPeriodMinutes != previous.upkeepPeriodMinutes)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.upkeepPeriodMinutes);
		}
		if (instance.costFraction != previous.costFraction)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.costFraction);
		}
		if (instance.protectedMinutes != previous.protectedMinutes)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.protectedMinutes);
		}
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.clientAuthed);
		stream.WriteByte(48);
		ProtocolParser.WriteBool(stream, instance.clientAnyAuthed);
		if (instance.doorCostFraction != previous.doorCostFraction)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.doorCostFraction);
		}
	}

	public static void Serialize(BufferStream stream, BuildingPrivilege instance)
	{
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				PlayerNameID instance2 = instance.users[i];
				stream.WriteByte(10);
				BufferStream.RangeHandle range = stream.GetRange(5);
				int position = stream.Position;
				PlayerNameID.Serialize(stream, instance2);
				int val = stream.Position - position;
				Span<byte> span = range.GetSpan();
				int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
				if (num < 5)
				{
					span[num - 1] |= 128;
					while (num < 4)
					{
						span[num++] = 128;
					}
					span[4] = 0;
				}
			}
		}
		if (instance.upkeepPeriodMinutes != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.upkeepPeriodMinutes);
		}
		if (instance.costFraction != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.costFraction);
		}
		if (instance.protectedMinutes != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.protectedMinutes);
		}
		if (instance.clientAuthed)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.clientAuthed);
		}
		if (instance.clientAnyAuthed)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.clientAnyAuthed);
		}
		if (instance.doorCostFraction != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.doorCostFraction);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (users != null)
		{
			for (int i = 0; i < users.Count; i++)
			{
				users[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BuildingPrivilegeRetro : IDisposable, IPooled, IProto<BuildingPrivilegeRetro>, IProto
{
	[NonSerialized]
	public List<float> resources;

	[NonSerialized]
	public List<BuildingPrivilegeRetroTool> tools;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuildingPrivilegeRetro instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.resources != null)
		{
			List<float> list = instance.resources;
			Pool.FreeUnmanaged<float>(ref list);
			instance.resources = list;
		}
		if (instance.tools != null)
		{
			for (int i = 0; i < instance.tools.Count; i++)
			{
				if (instance.tools[i] != null)
				{
					instance.tools[i].ResetToPool();
					instance.tools[i] = null;
				}
			}
			List<BuildingPrivilegeRetroTool> list2 = instance.tools;
			Pool.Free<BuildingPrivilegeRetroTool>(ref list2, false);
			instance.tools = list2;
		}
		Pool.Free<BuildingPrivilegeRetro>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuildingPrivilegeRetro with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuildingPrivilegeRetro instance)
	{
		if (resources != null)
		{
			instance.resources = Pool.Get<List<float>>();
			for (int i = 0; i < resources.Count; i++)
			{
				float item = resources[i];
				instance.resources.Add(item);
			}
		}
		else
		{
			instance.resources = null;
		}
		if (tools != null)
		{
			instance.tools = Pool.Get<List<BuildingPrivilegeRetroTool>>();
			for (int j = 0; j < tools.Count; j++)
			{
				BuildingPrivilegeRetroTool item2 = tools[j].Copy();
				instance.tools.Add(item2);
			}
		}
		else
		{
			instance.tools = null;
		}
	}

	public BuildingPrivilegeRetro Copy()
	{
		BuildingPrivilegeRetro buildingPrivilegeRetro = Pool.Get<BuildingPrivilegeRetro>();
		CopyTo(buildingPrivilegeRetro);
		return buildingPrivilegeRetro;
	}

	public static BuildingPrivilegeRetro Deserialize(BufferStream stream)
	{
		BuildingPrivilegeRetro buildingPrivilegeRetro = Pool.Get<BuildingPrivilegeRetro>();
		Deserialize(stream, buildingPrivilegeRetro, isDelta: false);
		return buildingPrivilegeRetro;
	}

	public static BuildingPrivilegeRetro DeserializeLengthDelimited(BufferStream stream)
	{
		BuildingPrivilegeRetro buildingPrivilegeRetro = Pool.Get<BuildingPrivilegeRetro>();
		DeserializeLengthDelimited(stream, buildingPrivilegeRetro, isDelta: false);
		return buildingPrivilegeRetro;
	}

	public static BuildingPrivilegeRetro DeserializeLength(BufferStream stream, int length)
	{
		BuildingPrivilegeRetro buildingPrivilegeRetro = Pool.Get<BuildingPrivilegeRetro>();
		DeserializeLength(stream, length, buildingPrivilegeRetro, isDelta: false);
		return buildingPrivilegeRetro;
	}

	public static BuildingPrivilegeRetro Deserialize(byte[] buffer)
	{
		BuildingPrivilegeRetro buildingPrivilegeRetro = Pool.Get<BuildingPrivilegeRetro>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, buildingPrivilegeRetro, isDelta: false);
		return buildingPrivilegeRetro;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BuildingPrivilegeRetro previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuildingPrivilegeRetro Deserialize(BufferStream stream, BuildingPrivilegeRetro instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.resources == null)
			{
				instance.resources = Pool.Get<List<float>>();
			}
			if (instance.tools == null)
			{
				instance.tools = Pool.Get<List<BuildingPrivilegeRetroTool>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.resources.Add(ProtocolParser.ReadSingle(stream));
				continue;
			case 18:
				instance.tools.Add(BuildingPrivilegeRetroTool.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuildingPrivilegeRetro DeserializeLengthDelimited(BufferStream stream, BuildingPrivilegeRetro instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.resources == null)
			{
				instance.resources = Pool.Get<List<float>>();
			}
			if (instance.tools == null)
			{
				instance.tools = Pool.Get<List<BuildingPrivilegeRetroTool>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.resources.Add(ProtocolParser.ReadSingle(stream));
				continue;
			case 18:
				instance.tools.Add(BuildingPrivilegeRetroTool.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuildingPrivilegeRetro DeserializeLength(BufferStream stream, int length, BuildingPrivilegeRetro instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.resources == null)
			{
				instance.resources = Pool.Get<List<float>>();
			}
			if (instance.tools == null)
			{
				instance.tools = Pool.Get<List<BuildingPrivilegeRetroTool>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.resources.Add(ProtocolParser.ReadSingle(stream));
				continue;
			case 18:
				instance.tools.Add(BuildingPrivilegeRetroTool.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BuildingPrivilegeRetro instance, BuildingPrivilegeRetro previous)
	{
		if (instance.resources != null)
		{
			for (int i = 0; i < instance.resources.Count; i++)
			{
				float f = instance.resources[i];
				stream.WriteByte(13);
				ProtocolParser.WriteSingle(stream, f);
			}
		}
		if (instance.tools == null)
		{
			return;
		}
		for (int j = 0; j < instance.tools.Count; j++)
		{
			BuildingPrivilegeRetroTool buildingPrivilegeRetroTool = instance.tools[j];
			stream.WriteByte(18);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			BuildingPrivilegeRetroTool.SerializeDelta(stream, buildingPrivilegeRetroTool, buildingPrivilegeRetroTool);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field tools (ProtoBuf.BuildingPrivilegeRetroTool)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
	}

	public static void Serialize(BufferStream stream, BuildingPrivilegeRetro instance)
	{
		if (instance.resources != null)
		{
			for (int i = 0; i < instance.resources.Count; i++)
			{
				float f = instance.resources[i];
				stream.WriteByte(13);
				ProtocolParser.WriteSingle(stream, f);
			}
		}
		if (instance.tools == null)
		{
			return;
		}
		for (int j = 0; j < instance.tools.Count; j++)
		{
			BuildingPrivilegeRetroTool instance2 = instance.tools[j];
			stream.WriteByte(18);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			BuildingPrivilegeRetroTool.Serialize(stream, instance2);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field tools (ProtoBuf.BuildingPrivilegeRetroTool)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (tools != null)
		{
			for (int i = 0; i < tools.Count; i++)
			{
				tools[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BuildingPrivilegeRetroTool : IDisposable, IPooled, IProto<BuildingPrivilegeRetroTool>, IProto
{
	[NonSerialized]
	public int itemID;

	[NonSerialized]
	public ulong skinid;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuildingPrivilegeRetroTool instance)
	{
		if (instance.ShouldPool)
		{
			instance.itemID = 0;
			instance.skinid = 0uL;
			Pool.Free<BuildingPrivilegeRetroTool>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuildingPrivilegeRetroTool with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuildingPrivilegeRetroTool instance)
	{
		instance.itemID = itemID;
		instance.skinid = skinid;
	}

	public BuildingPrivilegeRetroTool Copy()
	{
		BuildingPrivilegeRetroTool buildingPrivilegeRetroTool = Pool.Get<BuildingPrivilegeRetroTool>();
		CopyTo(buildingPrivilegeRetroTool);
		return buildingPrivilegeRetroTool;
	}

	public static BuildingPrivilegeRetroTool Deserialize(BufferStream stream)
	{
		BuildingPrivilegeRetroTool buildingPrivilegeRetroTool = Pool.Get<BuildingPrivilegeRetroTool>();
		Deserialize(stream, buildingPrivilegeRetroTool, isDelta: false);
		return buildingPrivilegeRetroTool;
	}

	public static BuildingPrivilegeRetroTool DeserializeLengthDelimited(BufferStream stream)
	{
		BuildingPrivilegeRetroTool buildingPrivilegeRetroTool = Pool.Get<BuildingPrivilegeRetroTool>();
		DeserializeLengthDelimited(stream, buildingPrivilegeRetroTool, isDelta: false);
		return buildingPrivilegeRetroTool;
	}

	public static BuildingPrivilegeRetroTool DeserializeLength(BufferStream stream, int length)
	{
		BuildingPrivilegeRetroTool buildingPrivilegeRetroTool = Pool.Get<BuildingPrivilegeRetroTool>();
		DeserializeLength(stream, length, buildingPrivilegeRetroTool, isDelta: false);
		return buildingPrivilegeRetroTool;
	}

	public static BuildingPrivilegeRetroTool Deserialize(byte[] buffer)
	{
		BuildingPrivilegeRetroTool buildingPrivilegeRetroTool = Pool.Get<BuildingPrivilegeRetroTool>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, buildingPrivilegeRetroTool, isDelta: false);
		return buildingPrivilegeRetroTool;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, BuildingPrivilegeRetroTool previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuildingPrivilegeRetroTool Deserialize(BufferStream stream, BuildingPrivilegeRetroTool instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.itemID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuildingPrivilegeRetroTool DeserializeLengthDelimited(BufferStream stream, BuildingPrivilegeRetroTool instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuildingPrivilegeRetroTool DeserializeLength(BufferStream stream, int length, BuildingPrivilegeRetroTool instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.skinid = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, BuildingPrivilegeRetroTool instance, BuildingPrivilegeRetroTool previous)
	{
		if (instance.itemID != previous.itemID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemID);
		}
		if (instance.skinid != previous.skinid)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.skinid);
		}
	}

	public static void Serialize(BufferStream stream, BuildingPrivilegeRetroTool instance)
	{
		if (instance.itemID != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemID);
		}
		if (instance.skinid != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.skinid);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class StorageBox : IDisposable, IPooled, IProto<StorageBox>, IProto
{
	[NonSerialized]
	public ItemContainer contents;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(StorageBox instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.contents != null)
			{
				instance.contents.ResetToPool();
				instance.contents = null;
			}
			Pool.Free<StorageBox>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose StorageBox with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(StorageBox instance)
	{
		if (contents != null)
		{
			if (instance.contents == null)
			{
				instance.contents = contents.Copy();
			}
			else
			{
				contents.CopyTo(instance.contents);
			}
		}
		else
		{
			instance.contents = null;
		}
	}

	public StorageBox Copy()
	{
		StorageBox storageBox = Pool.Get<StorageBox>();
		CopyTo(storageBox);
		return storageBox;
	}

	public static StorageBox Deserialize(BufferStream stream)
	{
		StorageBox storageBox = Pool.Get<StorageBox>();
		Deserialize(stream, storageBox, isDelta: false);
		return storageBox;
	}

	public static StorageBox DeserializeLengthDelimited(BufferStream stream)
	{
		StorageBox storageBox = Pool.Get<StorageBox>();
		DeserializeLengthDelimited(stream, storageBox, isDelta: false);
		return storageBox;
	}

	public static StorageBox DeserializeLength(BufferStream stream, int length)
	{
		StorageBox storageBox = Pool.Get<StorageBox>();
		DeserializeLength(stream, length, storageBox, isDelta: false);
		return storageBox;
	}

	public static StorageBox Deserialize(byte[] buffer)
	{
		StorageBox storageBox = Pool.Get<StorageBox>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, storageBox, isDelta: false);
		return storageBox;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, StorageBox previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static StorageBox Deserialize(BufferStream stream, StorageBox instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.contents == null)
				{
					instance.contents = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.contents, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static StorageBox DeserializeLengthDelimited(BufferStream stream, StorageBox instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.contents == null)
				{
					instance.contents = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.contents, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static StorageBox DeserializeLength(BufferStream stream, int length, StorageBox instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.contents == null)
				{
					instance.contents = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.contents, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, StorageBox instance, StorageBox previous)
	{
		if (instance.contents == null)
		{
			return;
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(5);
		int position = stream.Position;
		ItemContainer.SerializeDelta(stream, instance.contents, previous.contents);
		int val = stream.Position - position;
		Span<byte> span = range.GetSpan();
		int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
		if (num < 5)
		{
			span[num - 1] |= 128;
			while (num < 4)
			{
				span[num++] = 128;
			}
			span[4] = 0;
		}
	}

	public static void Serialize(BufferStream stream, StorageBox instance)
	{
		if (instance.contents == null)
		{
			return;
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(5);
		int position = stream.Position;
		ItemContainer.Serialize(stream, instance.contents);
		int val = stream.Position - position;
		Span<byte> span = range.GetSpan();
		int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
		if (num < 5)
		{
			span[num - 1] |= 128;
			while (num < 4)
			{
				span[num++] = 128;
			}
			span[4] = 0;
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		contents?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class HeldEntity : IDisposable, IPooled, IProto<HeldEntity>, IProto
{
	[NonSerialized]
	public ItemId itemUID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(HeldEntity instance)
	{
		if (instance.ShouldPool)
		{
			instance.itemUID = default(ItemId);
			Pool.Free<HeldEntity>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose HeldEntity with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(HeldEntity instance)
	{
		instance.itemUID = itemUID;
	}

	public HeldEntity Copy()
	{
		HeldEntity heldEntity = Pool.Get<HeldEntity>();
		CopyTo(heldEntity);
		return heldEntity;
	}

	public static HeldEntity Deserialize(BufferStream stream)
	{
		HeldEntity heldEntity = Pool.Get<HeldEntity>();
		Deserialize(stream, heldEntity, isDelta: false);
		return heldEntity;
	}

	public static HeldEntity DeserializeLengthDelimited(BufferStream stream)
	{
		HeldEntity heldEntity = Pool.Get<HeldEntity>();
		DeserializeLengthDelimited(stream, heldEntity, isDelta: false);
		return heldEntity;
	}

	public static HeldEntity DeserializeLength(BufferStream stream, int length)
	{
		HeldEntity heldEntity = Pool.Get<HeldEntity>();
		DeserializeLength(stream, length, heldEntity, isDelta: false);
		return heldEntity;
	}

	public static HeldEntity Deserialize(byte[] buffer)
	{
		HeldEntity heldEntity = Pool.Get<HeldEntity>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, heldEntity, isDelta: false);
		return heldEntity;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, HeldEntity previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static HeldEntity Deserialize(BufferStream stream, HeldEntity instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.itemUID = new ItemId(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static HeldEntity DeserializeLengthDelimited(BufferStream stream, HeldEntity instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemUID = new ItemId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static HeldEntity DeserializeLength(BufferStream stream, int length, HeldEntity instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemUID = new ItemId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, HeldEntity instance, HeldEntity previous)
	{
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.itemUID.Value);
	}

	public static void Serialize(BufferStream stream, HeldEntity instance)
	{
		if (instance.itemUID != default(ItemId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.itemUID.Value);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.ItemId, ref itemUID.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Loot : IDisposable, IPooled, IProto<Loot>, IProto
{
	[NonSerialized]
	public ItemContainer contents;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Loot instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.contents != null)
			{
				instance.contents.ResetToPool();
				instance.contents = null;
			}
			Pool.Free<Loot>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Loot with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Loot instance)
	{
		if (contents != null)
		{
			if (instance.contents == null)
			{
				instance.contents = contents.Copy();
			}
			else
			{
				contents.CopyTo(instance.contents);
			}
		}
		else
		{
			instance.contents = null;
		}
	}

	public Loot Copy()
	{
		Loot loot = Pool.Get<Loot>();
		CopyTo(loot);
		return loot;
	}

	public static Loot Deserialize(BufferStream stream)
	{
		Loot loot = Pool.Get<Loot>();
		Deserialize(stream, loot, isDelta: false);
		return loot;
	}

	public static Loot DeserializeLengthDelimited(BufferStream stream)
	{
		Loot loot = Pool.Get<Loot>();
		DeserializeLengthDelimited(stream, loot, isDelta: false);
		return loot;
	}

	public static Loot DeserializeLength(BufferStream stream, int length)
	{
		Loot loot = Pool.Get<Loot>();
		DeserializeLength(stream, length, loot, isDelta: false);
		return loot;
	}

	public static Loot Deserialize(byte[] buffer)
	{
		Loot loot = Pool.Get<Loot>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, loot, isDelta: false);
		return loot;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, Loot previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Loot Deserialize(BufferStream stream, Loot instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.contents == null)
				{
					instance.contents = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.contents, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			case -1:
				return instance;
			}
		}
	}

	public static Loot DeserializeLengthDelimited(BufferStream stream, Loot instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.contents == null)
				{
					instance.contents = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.contents, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Loot DeserializeLength(BufferStream stream, int length, Loot instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.contents == null)
				{
					instance.contents = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.contents, isDelta);
				}
				break;
			default:
			{
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
				break;
			}
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Loot instance, Loot previous)
	{
		if (instance.contents == null)
		{
			return;
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(5);
		int position = stream.Position;
		ItemContainer.SerializeDelta(stream, instance.contents, previous.contents);
		int val = stream.Position - position;
		Span<byte> span = range.GetSpan();
		int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
		if (num < 5)
		{
			span[num - 1] |= 128;
			while (num < 4)
			{
				span[num++] = 128;
			}
			span[4] = 0;
		}
	}

	public static void Serialize(BufferStream stream, Loot instance)
	{
		if (instance.contents == null)
		{
			return;
		}
		stream.WriteByte(10);
		BufferStream.RangeHandle range = stream.GetRange(5);
		int position = stream.Position;
		ItemContainer.Serialize(stream, instance.contents);
		int val = stream.Position - position;
		Span<byte> span = range.GetSpan();
		int num = ProtocolParser.WriteUInt32((uint)val, span, 0);
		if (num < 5)
		{
			span[num - 1] |= 128;
			while (num < 4)
			{
				span[num++] = 128;
			}
			span[4] = 0;
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		contents?.InspectUids(action);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class GenericSpawner : IDisposable, IPooled, IProto<GenericSpawner>, IProto
{
	public class SpawnedEnt : IDisposable, IPooled, IProto<SpawnedEnt>, IProto
	{
		[NonSerialized]
		public uint uid;

		[NonSerialized]
		public uint spawnPointIndex;

		[NonSerialized]
		public bool mobile;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SpawnedEnt instance)
		{
			if (instance.ShouldPool)
			{
				instance.uid = 0u;
				instance.spawnPointIndex = 0u;
				instance.mobile = false;
				Pool.Free<SpawnedEnt>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose SpawnedEnt with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(SpawnedEnt instance)
		{
			instance.uid = uid;
			instance.spawnPointIndex = spawnPointIndex;
			instance.mobile = mobile;
		}

		public SpawnedEnt Copy()
		{
			SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
			CopyTo(spawnedEnt);
			return spawnedEnt;
		}

		public static SpawnedEnt Deserialize(BufferStream stream)
		{
			SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
			Deserialize(stream, spawnedEnt, isDelta: false);
			return spawnedEnt;
		}

		public static SpawnedEnt DeserializeLengthDelimited(BufferStream stream)
		{
			SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
			DeserializeLengthDelimited(stream, spawnedEnt, isDelta: false);
			return spawnedEnt;
		}

		public static SpawnedEnt DeserializeLength(BufferStream stream, int length)
		{
			SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
			DeserializeLength(stream, length, spawnedEnt, isDelta: false);
			return spawnedEnt;
		}

		public static SpawnedEnt Deserialize(byte[] buffer)
		{
			SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
			using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
			Deserialize(stream, spawnedEnt, isDelta: false);
			return spawnedEnt;
		}

		public void FromProto(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(BufferStream stream, SpawnedEnt previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static SpawnedEnt Deserialize(BufferStream stream, SpawnedEnt instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.uid = ProtocolParser.ReadUInt32(stream);
					continue;
				case 16:
					instance.spawnPointIndex = ProtocolParser.ReadUInt32(stream);
					continue;
				case 24:
					instance.mobile = ProtocolParser.ReadBool(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static SpawnedEnt DeserializeLengthDelimited(BufferStream stream, SpawnedEnt instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.uid = ProtocolParser.ReadUInt32(stream);
					continue;
				case 16:
					instance.spawnPointIndex = ProtocolParser.ReadUInt32(stream);
					continue;
				case 24:
					instance.mobile = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SpawnedEnt DeserializeLength(BufferStream stream, int length, SpawnedEnt instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.uid = ProtocolParser.ReadUInt32(stream);
					continue;
				case 16:
					instance.spawnPointIndex = ProtocolParser.ReadUInt32(stream);
					continue;
				case 24:
					instance.mobile = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				_ = key.Field;
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(BufferStream stream, SpawnedEnt instance, SpawnedEnt previous)
		{
			if (instance.uid != previous.uid)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt32(stream, instance.uid);
			}
			if (instance.spawnPointIndex != previous.spawnPointIndex)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt32(stream, instance.spawnPointIndex);
			}
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.mobile);
		}

		public static void Serialize(BufferStream stream, SpawnedEnt instance)
		{
			if (instance.uid != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt32(stream, instance.uid);
			}
			if (instance.spawnPointIndex != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt32(stream, instance.spawnPointIndex);
			}
			if (instance.mobile)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteBool(stream, instance.mobile);
			}
		}

		public void ToProto(BufferStream stream)
		{
			Serialize(stream, this);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<SpawnedEnt> ents;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(GenericSpawner instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.ents != null)
		{
			for (int i = 0; i < instance.ents.Count; i++)
			{
				if (instance.ents[i] != null)
				{
					instance.ents[i].ResetToPool();
					instance.ents[i] = null;
				}
			}
			List<SpawnedEnt> list = instance.ents;
			Pool.Free<SpawnedEnt>(ref list, false);
			instance.ents = list;
		}
		Pool.Free<GenericSpawner>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose GenericSpawner with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(GenericSpawner instance)
	{
		if (ents != null)
		{
			instance.ents = Pool.Get<List<SpawnedEnt>>();
			for (int i = 0; i < ents.Count; i++)
			{
				SpawnedEnt item = ents[i].Copy();
				instance.ents.Add(item);
			}
		}
		else
		{
			instance.ents = null;
		}
	}

	public GenericSpawner Copy()
	{
		GenericSpawner genericSpawner = Pool.Get<GenericSpawner>();
		CopyTo(genericSpawner);
		return genericSpawner;
	}

	public static GenericSpawner Deserialize(BufferStream stream)
	{
		GenericSpawner genericSpawner = Pool.Get<GenericSpawner>();
		Deserialize(stream, genericSpawner, isDelta: false);
		return genericSpawner;
	}

	public static GenericSpawner DeserializeLengthDelimited(BufferStream stream)
	{
		GenericSpawner genericSpawner = Pool.Get<GenericSpawner>();
		DeserializeLengthDelimited(stream, genericSpawner, isDelta: false);
		return genericSpawner;
	}

	public static GenericSpawner DeserializeLength(BufferStream stream, int length)
	{
		GenericSpawner genericSpawner = Pool.Get<GenericSpawner>();
		DeserializeLength(stream, length, genericSpawner, isDelta: false);
		return genericSpawner;
	}

	public static GenericSpawner Deserialize(byte[] buffer)
	{
		GenericSpawner genericSpawner = Pool.Get<GenericSpawner>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, genericSpawner, isDelta: false);
		return genericSpawner;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, GenericSpawner previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static GenericSpawner Deserialize(BufferStream stream, GenericSpawner instance, bool isDelta)
	{
		if (!isDelta && instance.ents == null)
		{
			instance.ents = Pool.Get<List<SpawnedEnt>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.ents.Add(SpawnedEnt.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static GenericSpawner DeserializeLengthDelimited(BufferStream stream, GenericSpawner instance, bool isDelta)
	{
		if (!isDelta && instance.ents == null)
		{
			instance.ents = Pool.Get<List<SpawnedEnt>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.ents.Add(SpawnedEnt.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static GenericSpawner DeserializeLength(BufferStream stream, int length, GenericSpawner instance, bool isDelta)
	{
		if (!isDelta && instance.ents == null)
		{
			instance.ents = Pool.Get<List<SpawnedEnt>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.ents.Add(SpawnedEnt.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, GenericSpawner instance, GenericSpawner previous)
	{
		if (instance.ents == null)
		{
			return;
		}
		for (int i = 0; i < instance.ents.Count; i++)
		{
			SpawnedEnt spawnedEnt = instance.ents[i];
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			SpawnedEnt.SerializeDelta(stream, spawnedEnt, spawnedEnt);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ents (ProtoBuf.GenericSpawner.SpawnedEnt)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
	}

	public static void Serialize(BufferStream stream, GenericSpawner instance)
	{
		if (instance.ents == null)
		{
			return;
		}
		for (int i = 0; i < instance.ents.Count; i++)
		{
			SpawnedEnt instance2 = instance.ents[i];
			stream.WriteByte(10);
			BufferStream.RangeHandle range = stream.GetRange(1);
			int position = stream.Position;
			SpawnedEnt.Serialize(stream, instance2);
			int num = stream.Position - position;
			if (num > 127)
			{
				throw new InvalidOperationException("Not enough space was reserved for the length prefix of field ents (ProtoBuf.GenericSpawner.SpawnedEnt)");
			}
			Span<byte> span = range.GetSpan();
			ProtocolParser.WriteUInt32((uint)num, span, 0);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (ents != null)
		{
			for (int i = 0; i < ents.Count; i++)
			{
				ents[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class SleepingBag : IDisposable, IPooled, IProto<SleepingBag>, IProto
{
	[NonSerialized]
	public string name;

	[NonSerialized]
	public ulong deployerID;

	[NonSerialized]
	public bool clientAssigned;

	[NonSerialized]
	public bool isAssigned;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SleepingBag instance)
	{
		if (instance.ShouldPool)
		{
			instance.name = string.Empty;
			instance.deployerID = 0uL;
			instance.clientAssigned = false;
			instance.isAssigned = false;
			Pool.Free<SleepingBag>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SleepingBag with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SleepingBag instance)
	{
		instance.name = name;
		instance.deployerID = deployerID;
		instance.clientAssigned = clientAssigned;
		instance.isAssigned = isAssigned;
	}

	public SleepingBag Copy()
	{
		SleepingBag sleepingBag = Pool.Get<SleepingBag>();
		CopyTo(sleepingBag);
		return sleepingBag;
	}

	public static SleepingBag Deserialize(BufferStream stream)
	{
		SleepingBag sleepingBag = Pool.Get<SleepingBag>();
		Deserialize(stream, sleepingBag, isDelta: false);
		return sleepingBag;
	}

	public static SleepingBag DeserializeLengthDelimited(BufferStream stream)
	{
		SleepingBag sleepingBag = Pool.Get<SleepingBag>();
		DeserializeLengthDelimited(stream, sleepingBag, isDelta: false);
		return sleepingBag;
	}

	public static SleepingBag DeserializeLength(BufferStream stream, int length)
	{
		SleepingBag sleepingBag = Pool.Get<SleepingBag>();
		DeserializeLength(stream, length, sleepingBag, isDelta: false);
		return sleepingBag;
	}

	public static SleepingBag Deserialize(byte[] buffer)
	{
		SleepingBag sleepingBag = Pool.Get<SleepingBag>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, sleepingBag, isDelta: false);
		return sleepingBag;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, SleepingBag previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SleepingBag Deserialize(BufferStream stream, SleepingBag instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.deployerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.clientAssigned = ProtocolParser.ReadBool(stream);
				continue;
			case 40:
				instance.isAssigned = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SleepingBag DeserializeLengthDelimited(BufferStream stream, SleepingBag instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.deployerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.clientAssigned = ProtocolParser.ReadBool(stream);
				continue;
			case 40:
				instance.isAssigned = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SleepingBag DeserializeLength(BufferStream stream, int length, SleepingBag instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.deployerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.clientAssigned = ProtocolParser.ReadBool(stream);
				continue;
			case 40:
				instance.isAssigned = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, SleepingBag instance, SleepingBag previous)
	{
		if (instance.name != null && instance.name != previous.name)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.deployerID != previous.deployerID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.deployerID);
		}
		stream.WriteByte(32);
		ProtocolParser.WriteBool(stream, instance.clientAssigned);
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.isAssigned);
	}

	public static void Serialize(BufferStream stream, SleepingBag instance)
	{
		if (instance.name != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.deployerID != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.deployerID);
		}
		if (instance.clientAssigned)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteBool(stream, instance.clientAssigned);
		}
		if (instance.isAssigned)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.isAssigned);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Magazine : IDisposable, IPooled, IProto<Magazine>, IProto
{
	[NonSerialized]
	public int capacity;

	[NonSerialized]
	public int contents;

	[NonSerialized]
	public int ammoType;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Magazine instance)
	{
		if (instance.ShouldPool)
		{
			instance.capacity = 0;
			instance.contents = 0;
			instance.ammoType = 0;
			Pool.Free<Magazine>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Magazine with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Magazine instance)
	{
		instance.capacity = capacity;
		instance.contents = contents;
		instance.ammoType = ammoType;
	}

	public Magazine Copy()
	{
		Magazine magazine = Pool.Get<Magazine>();
		CopyTo(magazine);
		return magazine;
	}

	public static Magazine Deserialize(BufferStream stream)
	{
		Magazine magazine = Pool.Get<Magazine>();
		Deserialize(stream, magazine, isDelta: false);
		return magazine;
	}

	public static Magazine DeserializeLengthDelimited(BufferStream stream)
	{
		Magazine magazine = Pool.Get<Magazine>();
		DeserializeLengthDelimited(stream, magazine, isDelta: false);
		return magazine;
	}

	public static Magazine DeserializeLength(BufferStream stream, int length)
	{
		Magazine magazine = Pool.Get<Magazine>();
		DeserializeLength(stream, length, magazine, isDelta: false);
		return magazine;
	}

	public static Magazine Deserialize(byte[] buffer)
	{
		Magazine magazine = Pool.Get<Magazine>();
		using BufferStream stream = Pool.Get<BufferStream>().Initialize(buffer);
		Deserialize(stream, magazine, isDelta: false);
		return magazine;
	}

	public void FromProto(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(BufferStream stream, Magazine previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(BufferStream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void ReadFromStream(BufferStream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Magazine Deserialize(BufferStream stream, Magazine instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.capacity = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.contents = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Magazine DeserializeLengthDelimited(BufferStream stream, Magazine instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.capacity = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.contents = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Magazine DeserializeLength(BufferStream stream, int length, Magazine instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.capacity = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.contents = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			_ = key.Field;
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(BufferStream stream, Magazine instance, Magazine previous)
	{
		if (instance.capacity != previous.capacity)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.capacity);
		}
		if (instance.contents != previous.contents)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.contents);
		}
		if (instance.ammoType != previous.ammoType)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoType);
		}
	}

	public static void Serialize(BufferStream stream, Magazine instance)
	{
		if (instance.capacity != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.capacity);
		}
		if (instance.contents != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.contents);
		}
		if (instance.ammoType != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoType);
		}
	}

	public void ToProto(BufferStream stream)
	{
		Serialize(stream, this);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


