using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[974]
		{
			0, 0, 0, 1, 0, 0, 0, 79, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 66, 117, 114, 115, 116, 67,
			108, 111, 116, 104, 92, 65, 116, 116, 114, 105,
			98, 117, 116, 101, 115, 92, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 67, 117, 114, 118,
			101, 82, 101, 99, 116, 65, 116, 116, 114, 105,
			98, 117, 116, 101, 46, 99, 115, 0, 0, 0,
			4, 0, 0, 0, 50, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 66, 117, 114, 115, 116, 67, 108, 111, 116,
			104, 92, 66, 117, 114, 115, 116, 67, 108, 111,
			116, 104, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 60, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 66,
			117, 114, 115, 116, 67, 108, 111, 116, 104, 92,
			66, 117, 114, 115, 116, 67, 108, 111, 116, 104,
			67, 111, 110, 115, 116, 114, 97, 105, 110, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 66, 117, 114,
			115, 116, 67, 108, 111, 116, 104, 92, 66, 117,
			114, 115, 116, 67, 108, 111, 116, 104, 77, 97,
			110, 97, 103, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 66, 117, 114, 115, 116, 67, 108, 111,
			116, 104, 92, 66, 117, 114, 115, 116, 67, 108,
			111, 116, 104, 77, 97, 116, 101, 114, 105, 97,
			108, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 66, 117,
			114, 115, 116, 67, 108, 111, 116, 104, 92, 74,
			111, 98, 115, 92, 66, 111, 110, 101, 68, 97,
			116, 97, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 54, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 66,
			117, 114, 115, 116, 67, 108, 111, 116, 104, 92,
			74, 111, 98, 115, 92, 66, 111, 110, 101, 83,
			116, 97, 116, 101, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 66, 117, 114, 115, 116, 67, 108, 111, 116,
			104, 92, 74, 111, 98, 115, 92, 67, 111, 108,
			108, 105, 100, 101, 114, 68, 97, 116, 97, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 92, 74, 111, 98,
			115, 92, 67, 111, 108, 108, 105, 100, 101, 114,
			83, 116, 97, 116, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 67, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 66, 117, 114, 115, 116, 67, 108, 111,
			116, 104, 92, 74, 111, 98, 115, 92, 73, 110,
			105, 116, 105, 97, 108, 105, 122, 101, 66, 111,
			110, 101, 83, 116, 97, 116, 101, 74, 111, 98,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			71, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 66, 117, 114,
			115, 116, 67, 108, 111, 116, 104, 92, 74, 111,
			98, 115, 92, 73, 110, 105, 116, 105, 97, 108,
			105, 122, 101, 67, 111, 108, 108, 105, 100, 101,
			114, 83, 116, 97, 116, 101, 74, 111, 98, 46,
			99, 115, 0, 0, 0, 3, 0, 0, 0, 65,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 92, 74, 111, 98,
			115, 92, 83, 105, 109, 117, 108, 97, 116, 101,
			80, 111, 115, 105, 116, 105, 111, 110, 115, 74,
			111, 98, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 69, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 66,
			117, 114, 115, 116, 67, 108, 111, 116, 104, 92,
			74, 111, 98, 115, 92, 85, 112, 100, 97, 116,
			101, 83, 107, 105, 110, 67, 111, 110, 115, 116,
			114, 97, 105, 110, 116, 115, 74, 111, 98, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 64,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 92, 74, 111, 98,
			115, 92, 85, 112, 100, 97, 116, 101, 84, 114,
			97, 110, 115, 102, 111, 114, 109, 115, 74, 111,
			98, 46, 99, 115
		};
		result.TypesData = new byte[924]
		{
			0, 0, 0, 0, 49, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 66, 117, 114, 115, 116,
			67, 108, 111, 116, 104, 124, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 67, 117, 114, 118,
			101, 82, 101, 99, 116, 65, 116, 116, 114, 105,
			98, 117, 116, 101, 0, 0, 0, 0, 33, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 66,
			117, 114, 115, 116, 67, 108, 111, 116, 104, 124,
			83, 112, 104, 101, 114, 101, 80, 97, 114, 97,
			109, 115, 0, 0, 0, 0, 35, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 66, 117, 114,
			115, 116, 67, 108, 111, 116, 104, 124, 83, 107,
			105, 110, 67, 111, 110, 115, 116, 114, 97, 105,
			110, 116, 0, 0, 0, 0, 31, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 66, 117, 114,
			115, 116, 67, 108, 111, 116, 104, 124, 66, 117,
			114, 115, 116, 67, 108, 111, 116, 104, 0, 0,
			0, 0, 37, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 66, 117, 114, 115, 116, 67, 108,
			111, 116, 104, 46, 66, 117, 114, 115, 116, 67,
			108, 111, 116, 104, 124, 67, 104, 97, 105, 110,
			0, 0, 0, 0, 41, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 66, 117, 114, 115, 116,
			67, 108, 111, 116, 104, 124, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 67, 111, 110, 115,
			116, 114, 97, 105, 110, 116, 0, 0, 0, 0,
			38, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 66, 117, 114, 115, 116, 67, 108, 111, 116,
			104, 124, 66, 117, 114, 115, 116, 67, 108, 111,
			116, 104, 77, 97, 110, 97, 103, 101, 114, 0,
			0, 0, 0, 39, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 66, 117, 114, 115, 116, 67,
			108, 111, 116, 104, 124, 66, 117, 114, 115, 116,
			67, 108, 111, 116, 104, 77, 97, 116, 101, 114,
			105, 97, 108, 0, 0, 0, 0, 34, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 66, 117,
			114, 115, 116, 67, 108, 111, 116, 104, 46, 74,
			111, 98, 115, 124, 66, 111, 110, 101, 68, 97,
			116, 97, 0, 0, 0, 0, 44, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 66, 117, 114,
			115, 116, 67, 108, 111, 116, 104, 46, 74, 111,
			98, 115, 124, 82, 111, 116, 97, 116, 105, 111,
			110, 67, 111, 110, 115, 116, 114, 97, 105, 110,
			116, 0, 0, 0, 0, 35, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 46, 74, 111, 98,
			115, 124, 66, 111, 110, 101, 83, 116, 97, 116,
			101, 0, 0, 0, 0, 44, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 66, 117, 114, 115,
			116, 67, 108, 111, 116, 104, 46, 74, 111, 98,
			115, 124, 83, 112, 104, 101, 114, 101, 67, 111,
			108, 108, 105, 100, 101, 114, 68, 97, 116, 97,
			0, 0, 0, 0, 45, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 66, 117, 114, 115, 116,
			67, 108, 111, 116, 104, 46, 74, 111, 98, 115,
			124, 83, 112, 104, 101, 114, 101, 67, 111, 108,
			108, 105, 100, 101, 114, 83, 116, 97, 116, 101,
			0, 0, 0, 0, 48, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 66, 117, 114, 115, 116,
			67, 108, 111, 116, 104, 46, 74, 111, 98, 115,
			124, 73, 110, 105, 116, 105, 97, 108, 105, 122,
			101, 66, 111, 110, 101, 83, 116, 97, 116, 101,
			74, 111, 98, 0, 0, 0, 0, 58, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 66, 117,
			114, 115, 116, 67, 108, 111, 116, 104, 46, 74,
			111, 98, 115, 124, 73, 110, 105, 116, 105, 97,
			108, 105, 122, 101, 83, 112, 104, 101, 114, 101,
			67, 111, 108, 108, 105, 100, 101, 114, 83, 116,
			97, 116, 101, 74, 111, 98, 0, 0, 0, 0,
			46, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 66, 117, 114, 115, 116, 67, 108, 111, 116,
			104, 46, 74, 111, 98, 115, 124, 83, 105, 109,
			117, 108, 97, 116, 101, 80, 111, 115, 105, 116,
			105, 111, 110, 115, 74, 111, 98, 0, 0, 0,
			0, 36, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 66, 117, 114, 115, 116, 67, 108, 111,
			116, 104, 46, 74, 111, 98, 115, 46, 124, 76,
			101, 114, 112, 83, 116, 97, 116, 101, 0, 0,
			0, 0, 36, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 66, 117, 114, 115, 116, 67, 108,
			111, 116, 104, 46, 74, 111, 98, 115, 46, 124,
			67, 111, 108, 108, 105, 115, 105, 111, 110, 0,
			0, 0, 0, 50, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 66, 117, 114, 115, 116, 67,
			108, 111, 116, 104, 46, 74, 111, 98, 115, 124,
			85, 112, 100, 97, 116, 101, 83, 107, 105, 110,
			67, 111, 110, 115, 116, 114, 97, 105, 110, 116,
			115, 74, 111, 98, 0, 0, 0, 0, 45, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 66,
			117, 114, 115, 116, 67, 108, 111, 116, 104, 46,
			74, 111, 98, 115, 124, 85, 112, 100, 97, 116,
			101, 84, 114, 97, 110, 115, 102, 111, 114, 109,
			115, 74, 111, 98
		};
		result.TotalFiles = 14;
		result.TotalTypes = 20;
		result.IsEditorOnly = false;
		return result;
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using UnityEngine;

public class BurstClothCurveRectAttribute : PropertyAttribute
{
	public readonly Rect Rect;

	public readonly Color Color = Color.green;

	public BurstClothCurveRectAttribute()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		Rect = new Rect(0f, 0f, 1f, 1f);
	}

	public BurstClothCurveRectAttribute(Rect rect)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		Rect = rect;
	}

	public BurstClothCurveRectAttribute(float x, float y, float width, float height)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		Rect = new Rect(x, y, width, height);
	}

	public BurstClothCurveRectAttribute(Rect rect, Color color)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		Rect = rect;
		Color = color;
	}

	public BurstClothCurveRectAttribute(float x, float y, float width, float height, Color color)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		Rect = new Rect(x, y, width, height);
		Color = color;
	}
}


using UnityEngine;

public struct SphereParams
{
	public Transform Transform;

	public Vector3 Point;

	public float Radius;
}


using System;
using Unity.Mathematics;

[Serializable]
internal struct SkinConstraint
{
	public float3 WorldSkinPosition;

	public float3 WorldSkinNormal;

	public float3 WorldEscapeNormal;

	public float3 LocalSkinPosition;

	public float3 LocalSkinNormal;

	public float3 LocalEscapeNormal;

	public float BackstopRadius;

	public float BackstopInset;
}


using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch.BurstCloth;
using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Jobs;
using Unity.Jobs.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.Jobs;

public class BurstCloth : MonoBehaviour
{
	[Serializable]
	internal struct Chain
	{
		public List<Transform> Transforms;
	}

	internal const int TickRateMultiplier = 30;

	internal const int MaximumTickRate = 120;

	private static readonly List<SphereParams> SphereParamsShared = new List<SphereParams>(32);

	[Header("Structure")]
	public Transform[] RootBones;

	[Tooltip("You only need to set this value if this is a ViewModel prefab")]
	public Transform ViewModelRootTransform;

	public bool SiblingConstraints = true;

	[Range(0f, 1f)]
	public float LengthModifier = 1f;

	[Header("Simulation")]
	public BurstClothMaterial Material;

	public Vector3 Gravity = new Vector3(0f, -10f, 0f);

	public Transform SimulationSpace;

	[Range(0f, 1f)]
	public float RootMotionStrength = 1f;

	public float MaxOriginDelta = 1f;

	[Tooltip("This will be used as the default for all bones without a length constraint given by BurstClothConstraint")]
	public Vector2 DefaultLengthConstraint = new Vector2(0f, 1f);

	[Tooltip("If the controller becomes culled, bones will return to their original rigged positions")]
	public bool ResetBonesOnDisable;

	[Header("Collision")]
	public bool EnableCollisions;

	public float CollisionRadius;

	public float CollisionDirectionAdjustment;

	public float CollisionFilteringScale = 3f;

	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	public AnimationCurve CollisionRadiusCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[Header("Performance")]
	public bool EnableSimulation = true;

	[Range(30f, 120f)]
	public int TickRate = 120;

	[Range(1f, 16f)]
	public int MaxTicksPerFrame = 4;

	[Range(1f, 16f)]
	public int ConstraintIterationCount = 2;

	[SerializeField]
	[HideInInspector]
	internal List<Chain> _chains;

	[SerializeField]
	[HideInInspector]
	internal List<BoneData> _boneDataOriginal;

	[SerializeField]
	[HideInInspector]
	internal List<RotationConstraint> _rotationConstraintsDataOriginal;

	private Vector3 _origin;

	private Quaternion _rotation;

	private Quaternion _prevRotation;

	private Quaternion _rotationDelta;

	private Vector3 _up;

	private Vector3 _simulationSpaceDelta;

	private Transform _prevSimulationSpace;

	private Vector3? _prevSimulationOrigin;

	private Vector3 _originDelta;

	private Vector3? _prevOrigin;

	private bool _originDirty;

	private float _accumulator;

	private int _boneCount;

	private int _maxBoneDepth;

	private Dictionary<Transform, int> _boneToIndex;

	private TransformAccessArray _boneTransforms;

	private NativeArray<BoneData> _boneData;

	private NativeArray<BoneState> _boneState;

	private NativeArray<RotationConstraint> _rotationConstraints;

	[SerializeField]
	[HideInInspector]
	private List<string> _skinConstraintTargetsIds;

	private Transform[] _skinConstraintTargetCache;

	[SerializeField]
	[HideInInspector]
	internal List<SkinConstraint> _skinConstraintsOriginal;

	private NativeArray<SkinConstraint> _skinConstraints;

	private bool _skinAccessArrayDirty;

	private TransformAccessArray _skinConstraintsTransformAccessArray;

	private TransformAccessArray _sphereColliderTransforms;

	private NativeArray<SphereColliderData> _sphereColliderData;

	private NativeArray<SphereColliderState> _sphereColliderState;

	protected virtual Transform GetSkeletonBone(string boneId)
	{
		return null;
	}

	protected void Initialize()
	{
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0447: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0461: Unknown result type (might be due to invalid IL or missing references)
		//IL_0463: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_0467: Unknown result type (might be due to invalid IL or missing references)
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04db: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)Material == (Object)null)
		{
			Material = BurstClothMaterial.DefaultMaterial;
		}
		if (_chains == null || _chains.Count == 0)
		{
			_chains = new List<Chain>();
			Transform[] rootBones = RootBones;
			foreach (Transform obj in rootBones)
			{
				List<Transform> list = new List<Transform>();
				Transform val = obj;
				while ((Object)(object)val != (Object)null)
				{
					list.Add(val);
					if (val.childCount == 0)
					{
						break;
					}
					val = val.GetChild(0);
				}
				if (list.Count >= 2)
				{
					_chains.Add(new Chain
					{
						Transforms = list
					});
				}
			}
		}
		SetupManagedData();
		if (_boneDataOriginal != null && _boneDataOriginal.Count != 0)
		{
			return;
		}
		_boneDataOriginal = new List<BoneData>();
		_rotationConstraintsDataOriginal = new List<RotationConstraint>();
		_skinConstraintTargetsIds = new List<string>();
		_skinConstraintsOriginal = new List<SkinConstraint>();
		Vector3 localScale = Vector3.one;
		if ((Object)(object)ViewModelRootTransform != (Object)null)
		{
			localScale = ViewModelRootTransform.localScale;
			ViewModelRootTransform.localScale = Vector3.one;
		}
		(Vector3 Origin, Quaternion Rotation, Vector3 Up) originTransform = GetOriginTransform();
		Vector3 item = originTransform.Origin;
		Quaternion item2 = originTransform.Rotation;
		Vector3 item3 = originTransform.Up;
		Quaternion val2 = Quaternion.Inverse(item2);
		int num = 0;
		BurstClothConstraint burstClothConstraint = default(BurstClothConstraint);
		for (int j = 0; j < _chains.Count; j++)
		{
			List<Transform> transforms = _chains[j].Transforms;
			for (int k = 0; k < transforms.Count; k++)
			{
				Transform val3 = transforms[k];
				Vector3 position = val3.position;
				Vector3 val4 = Vector3.Project(position - item, item3) + item;
				(Transform, int) siblingAndIndex = GetSiblingAndIndex(j - 1, k);
				Transform item4 = siblingAndIndex.Item1;
				int item5 = siblingAndIndex.Item2;
				(Vector3, float) boneLocalPositionAndLength = GetBoneLocalPositionAndLength(val3, item4);
				Vector3 item6 = boneLocalPositionAndLength.Item1;
				float item7 = boneLocalPositionAndLength.Item2;
				(Transform, int) siblingAndIndex2 = GetSiblingAndIndex(j + 1, k);
				Transform item8 = siblingAndIndex2.Item1;
				int item9 = siblingAndIndex2.Item2;
				(Vector3, float) boneLocalPositionAndLength2 = GetBoneLocalPositionAndLength(val3, item8);
				Vector3 item10 = boneLocalPositionAndLength2.Item1;
				float item11 = boneLocalPositionAndLength2.Item2;
				float num2 = (float)k / (float)_maxBoneDepth;
				BurstClothConstraint burstClothConstraint2 = (((Component)val3).TryGetComponent<BurstClothConstraint>(ref burstClothConstraint) ? burstClothConstraint : null);
				Vector3 val5 = position - val3.parent.position;
				float magnitude = ((Vector3)(ref val5)).magnitude;
				int rotationConstraintIndex = -1;
				int skinConstraintIndex = -1;
				if ((Object)(object)burstClothConstraint2 != (Object)null)
				{
					bool constrainRotateX = burstClothConstraint2.ConstrainRotateX;
					bool constrainRotateY = burstClothConstraint2.ConstrainRotateY;
					bool constrainRotateZ = burstClothConstraint2.ConstrainRotateZ;
					if (constrainRotateX || constrainRotateY || constrainRotateZ)
					{
						RotationConstraint item12 = new RotationConstraint(new bool3(constrainRotateX, constrainRotateY, constrainRotateZ), math.radians(float2.op_Implicit(burstClothConstraint2.RotateX)), math.radians(float2.op_Implicit(burstClothConstraint2.RotateY)), math.radians(float2.op_Implicit(burstClothConstraint2.RotateZ)));
						_rotationConstraintsDataOriginal.Add(item12);
						rotationConstraintIndex = _rotationConstraintsDataOriginal.Count - 1;
					}
					if (burstClothConstraint2.ExtraSkinConstraint && !string.IsNullOrEmpty(burstClothConstraint2.SkeletonBoneName))
					{
						_skinConstraintTargetsIds.Add(burstClothConstraint2.SkeletonBoneName);
						SkinConstraint skinConstraint = default(SkinConstraint);
						skinConstraint.LocalSkinPosition = float3.zero;
						skinConstraint.LocalSkinNormal = float3.op_Implicit(burstClothConstraint2.SkinNormal);
						skinConstraint.LocalEscapeNormal = float3.op_Implicit(burstClothConstraint2.EscapeNormal);
						skinConstraint.BackstopRadius = burstClothConstraint2.BackstopRadius;
						skinConstraint.BackstopInset = burstClothConstraint2.BackstopInset;
						SkinConstraint item13 = skinConstraint;
						_skinConstraintsOriginal.Add(item13);
						skinConstraintIndex = _skinConstraintsOriginal.Count - 1;
					}
				}
				List<BoneData> boneDataOriginal = _boneDataOriginal;
				BoneData item14 = new BoneData
				{
					Depth = k,
					Parent = ((k > 0) ? (num - 1) : (-1)),
					Child = ((k < transforms.Count - 1) ? (num + 1) : (-1)),
					Length = magnitude
				};
				Vector3 val6 = val3.parent.InverseTransformPoint(position);
				item14.NormalFromParent = float3.op_Implicit(((Vector3)(ref val6)).normalized);
				item14.LeftSibling = item5;
				item14.LengthToLeft = item7;
				item14.NormalFromLeft = math.normalize(float3.op_Implicit(item6));
				item14.RightSibling = item9;
				item14.NormalFromRight = math.normalize(float3.op_Implicit(item10));
				item14.LengthToRight = item11;
				item14.LocalPosition = float3.op_Implicit(val3.parent.InverseTransformPoint(position));
				item14.LocalRotation = quaternion.op_Implicit(val3.localRotation);
				val6 = val2 * (position - val4);
				item14.DirectionFromOrigin = float3.op_Implicit(((Vector3)(ref val6)).normalized);
				item14.CollisionRadius = CollisionRadius * CollisionRadiusCurve.Evaluate(num2);
				item14.DampingInv = 1f - Material.GetDamping(num2);
				item14.RotationConstraintIndex = rotationConstraintIndex;
				item14.SkinConstraintIndex = skinConstraintIndex;
				item14.LengthConstraint = ((burstClothConstraint2 != null && burstClothConstraint2.ConstrainLength) ? float2.op_Implicit(burstClothConstraint2.Length) : float2.op_Implicit(DefaultLengthConstraint)) * magnitude;
				item14.LengthRelaxation = Material.GetLengthRelaxation(num2);
				item14.ShapeRelaxation = Material.GetShapeRelaxation(num2);
				item14.SiblingRelaxation = Material.GetSiblingRelaxation(num2);
				boneDataOriginal.Add(item14);
				num++;
			}
		}
		if ((Object)(object)ViewModelRootTransform != (Object)null)
		{
			ViewModelRootTransform.localScale = localScale;
		}
	}

	protected virtual void Awake()
	{
		Initialize();
	}

	protected virtual void OnEnable()
	{
		BurstClothManager.Get().Instances.Add(this);
		_originDirty = true;
	}

	protected void ResetBoneTransforms(bool resetBoneStates = false)
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		if (_boneDataOriginal == null || _boneDataOriginal.Count == 0)
		{
			return;
		}
		int num = 0;
		Vector3 val2 = default(Vector3);
		Quaternion val3 = default(Quaternion);
		for (int i = 0; i < _chains.Count; i++)
		{
			Chain chain = _chains[i];
			for (int j = 0; j < chain.Transforms.Count; j++)
			{
				BoneData boneData = _boneDataOriginal[num];
				num++;
				if (boneData.Depth != 0)
				{
					Transform val = chain.Transforms[j];
					val.localPosition = float3.op_Implicit(boneData.LocalPosition);
					val.localRotation = quaternion.op_Implicit(boneData.LocalRotation);
					if (resetBoneStates && _boneState.IsCreated)
					{
						val.GetPositionAndRotation(ref val2, ref val3);
						_boneState[num - 1] = new BoneState
						{
							Position = float3.op_Implicit(val2),
							OldPosition = float3.op_Implicit(val2),
							Rotation = quaternion.op_Implicit(val3)
						};
					}
				}
			}
		}
	}

	protected virtual void OnDisable()
	{
		if (ResetBonesOnDisable)
		{
			ResetBoneTransforms();
		}
		_accumulator = 0f;
		_boneCount = 0;
		_maxBoneDepth = 0;
		_boneToIndex = null;
		if (((TransformAccessArray)(ref _boneTransforms)).isCreated)
		{
			((TransformAccessArray)(ref _boneTransforms)).Dispose();
		}
		if (_boneData.IsCreated)
		{
			_boneData.Dispose();
		}
		if (_rotationConstraints.IsCreated)
		{
			_rotationConstraints.Dispose();
		}
		if (_boneState.IsCreated)
		{
			_boneState.Dispose();
		}
		if (_sphereColliderData.IsCreated)
		{
			_sphereColliderData.Dispose();
		}
		if (_sphereColliderState.IsCreated)
		{
			_sphereColliderState.Dispose();
		}
		if (((TransformAccessArray)(ref _sphereColliderTransforms)).isCreated)
		{
			((TransformAccessArray)(ref _sphereColliderTransforms)).Dispose();
		}
		if (_skinConstraints.IsCreated)
		{
			_skinConstraints.Dispose();
		}
		if (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated)
		{
			((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).Dispose();
		}
		BurstClothManager.Get().Instances.Remove(this);
	}

	protected internal virtual void FrameUpdate()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = _rotation * Vector3.forward;
		(Vector3, Quaternion, Vector3) originTransform = GetOriginTransform();
		_origin = originTransform.Item1;
		_rotation = originTransform.Item2;
		_up = originTransform.Item3;
		Vector3 val2 = _rotation * Vector3.forward;
		if (Vector3.Dot(val, val2) < 0.2f)
		{
			ResetBoneTransforms(resetBoneStates: true);
			_originDirty = true;
		}
		if (SimulationSpace != null && (Object)(object)SimulationSpace == (Object)null)
		{
			SimulationSpace = null;
		}
		Quaternion val3 = Quaternion.Slerp(_rotation, _prevRotation, 1f - RootMotionStrength);
		Quaternion normalized = ((Quaternion)(ref val3)).normalized;
		val3 = _rotation * Quaternion.Inverse(normalized);
		_rotationDelta = ((Quaternion)(ref val3)).normalized;
		Transform simulationSpace = SimulationSpace;
		Vector3 val4 = ((simulationSpace != null) ? simulationSpace.position : Vector3.zero);
		if (_originDirty)
		{
			_simulationSpaceDelta = Vector3.zero;
			_rotationDelta = Quaternion.identity;
			_prevSimulationOrigin = val4;
		}
		else
		{
			_simulationSpaceDelta += (_prevSimulationOrigin.HasValue ? (val4 - _prevSimulationOrigin.Value) : Vector3.zero);
			_prevSimulationOrigin = val4;
		}
		if (SimulationSpace != _prevSimulationSpace)
		{
			_simulationSpaceDelta = Vector3.zero;
		}
		_prevSimulationSpace = SimulationSpace;
		if (_originDirty)
		{
			_originDelta = Vector3.zero;
			_prevOrigin = _origin;
		}
		else
		{
			_originDelta += (_prevOrigin.HasValue ? (_origin - _prevOrigin.Value - _simulationSpaceDelta) : Vector3.zero);
			_prevOrigin = _origin;
		}
		_originDirty = false;
	}

	private void VerifySkinConstraintTransformCache()
	{
		if (_skinConstraintTargetsIds == null)
		{
			return;
		}
		if (_skinConstraintTargetCache == null && _skinConstraintTargetsIds.Count > 0)
		{
			_skinConstraintTargetCache = (Transform[])(object)new Transform[_skinConstraintTargetsIds.Count];
		}
		for (int i = 0; i < _skinConstraintTargetsIds.Count; i++)
		{
			Transform val = _skinConstraintTargetCache[i];
			if ((Object)(object)val == (Object)null)
			{
				_skinAccessArrayDirty = true;
				val = GetSkeletonBone(_skinConstraintTargetsIds[i]);
			}
			_skinConstraintTargetCache[i] = val;
		}
	}

	private void PopulateSkinConstraintTransformAccessArray()
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (_skinConstraintTargetCache == null || (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated && !_skinAccessArrayDirty))
		{
			return;
		}
		if (!((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated || ((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).capacity < _skinConstraintTargetCache.Length)
		{
			if (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated)
			{
				((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).Dispose();
			}
			_skinConstraintsTransformAccessArray = new TransformAccessArray(_skinConstraintTargetCache.Length, -1);
		}
		((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).SetTransforms(_skinConstraintTargetCache);
		_skinAccessArrayDirty = false;
	}

	public virtual JobHandle SimulateSystem()
	{
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0329: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_035a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_037a: Unknown result type (might be due to invalid IL or missing references)
		//IL_037f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		SetupData();
		_accumulator += Time.deltaTime;
		float num = 1f / (float)TickRate;
		int num2 = Mathf.Min(Mathf.FloorToInt(_accumulator / num), MaxTicksPerFrame);
		if (num2 == 0)
		{
			return default(JobHandle);
		}
		_accumulator -= (float)num2 * num;
		UpdateSkinConstraintsJob updateSkinConstraintsJob = default(UpdateSkinConstraintsJob);
		updateSkinConstraintsJob.SkinConstraints = _skinConstraints;
		UpdateSkinConstraintsJob updateSkinConstraintsJob2 = updateSkinConstraintsJob;
		InitializeBoneStateJob initializeBoneStateJob = default(InitializeBoneStateJob);
		initializeBoneStateJob.Data = _boneData;
		initializeBoneStateJob.State = _boneState;
		InitializeBoneStateJob initializeBoneStateJob2 = initializeBoneStateJob;
		InitializeSphereColliderStateJob initializeSphereColliderStateJob = default(InitializeSphereColliderStateJob);
		initializeSphereColliderStateJob.Data = _sphereColliderData;
		initializeSphereColliderStateJob.State = _sphereColliderState;
		InitializeSphereColliderStateJob initializeSphereColliderStateJob2 = initializeSphereColliderStateJob;
		SimulatePositionsJob simulatePositionsJob = default(SimulatePositionsJob);
		simulatePositionsJob.ColliderData = _sphereColliderData;
		simulatePositionsJob.ColliderState = _sphereColliderState;
		simulatePositionsJob.RotationConstraints = _rotationConstraints;
		simulatePositionsJob.SkinConstraints = _skinConstraints;
		simulatePositionsJob.BoneData = _boneData;
		simulatePositionsJob.BoneStates = _boneState;
		simulatePositionsJob.TickRate = TickRate;
		simulatePositionsJob.DeltaTime = num;
		simulatePositionsJob.IterationCount = num2;
		simulatePositionsJob.ConstraintIterationCount = ConstraintIterationCount;
		simulatePositionsJob.SimulationSpaceDelta = float3.op_Implicit(_simulationSpaceDelta);
		simulatePositionsJob.OriginRotationDelta = quaternion.op_Implicit(_rotationDelta);
		simulatePositionsJob.OriginDelta = float3.op_Implicit((((Vector3)(ref _originDelta)).sqrMagnitude < MaxOriginDelta * MaxOriginDelta) ? (_originDelta * (1f - RootMotionStrength)) : _originDelta);
		simulatePositionsJob.Gravity = float3.op_Implicit((Vector3)((((Vector3)(ref Gravity)).sqrMagnitude < 0.01f) ? new Vector3(0f, -0.01f, 0f) : Gravity));
		simulatePositionsJob.SiblingConstraints = SiblingConstraints;
		simulatePositionsJob.LengthModifier = LengthModifier;
		simulatePositionsJob.EnableCollisions = EnableCollisions;
		simulatePositionsJob.Origin = float3.op_Implicit(_origin);
		simulatePositionsJob.Rotation = quaternion.op_Implicit(_rotation);
		simulatePositionsJob.Up = float3.op_Implicit(_up);
		simulatePositionsJob.CollisionProjectionYOffset = CollisionDirectionAdjustment;
		simulatePositionsJob.CollisionFilteringScale = CollisionFilteringScale;
		simulatePositionsJob.Radius = 10f;
		SimulatePositionsJob simulatePositionsJob2 = simulatePositionsJob;
		_prevRotation = _rotation;
		_originDelta = Vector3.zero;
		_simulationSpaceDelta = Vector3.zero;
		UpdateTransformsJob updateTransformsJob = default(UpdateTransformsJob);
		updateTransformsJob.Data = _boneData;
		updateTransformsJob.State = _boneState;
		UpdateTransformsJob updateTransformsJob2 = updateTransformsJob;
		JobHandle val = default(JobHandle);
		if (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated)
		{
			val = IJobParallelForTransformExtensions.ScheduleReadOnly<UpdateSkinConstraintsJob>(updateSkinConstraintsJob2, _skinConstraintsTransformAccessArray, math.max(((TransformAccessArray)(ref _boneTransforms)).length / math.max(JobsUtility.JobWorkerCount, 1), 32), default(JobHandle));
		}
		JobHandle val2 = IJobParallelForTransformExtensions.ScheduleReadOnly<InitializeBoneStateJob>(initializeBoneStateJob2, _boneTransforms, math.max(((TransformAccessArray)(ref _boneTransforms)).length / math.max(JobsUtility.JobWorkerCount, 1), 32), default(JobHandle));
		JobHandle val3 = IJobParallelForTransformExtensions.ScheduleReadOnly<InitializeSphereColliderStateJob>(initializeSphereColliderStateJob2, _sphereColliderTransforms, math.max(((TransformAccessArray)(ref _sphereColliderTransforms)).length / math.max(JobsUtility.JobWorkerCount, 1), 32), default(JobHandle));
		JobHandle val4 = JobHandle.CombineDependencies(val, val2, val3);
		JobHandle val5 = IJobExtensions.Schedule<SimulatePositionsJob>(simulatePositionsJob2, val4);
		return IJobParallelForTransformExtensions.Schedule<UpdateTransformsJob>(updateTransformsJob2, _boneTransforms, val5);
	}

	private void SetupData()
	{
		SetupManagedData();
		SetupNativeData();
	}

	private void SetupManagedData()
	{
		if (_boneCount == 0 || _maxBoneDepth == 0)
		{
			_boneCount = _chains.Sum((Chain c) => c.Transforms.Count);
			_maxBoneDepth = _chains.Max((Chain c) => c.Transforms.Count);
		}
		if (_boneToIndex == null)
		{
			_boneToIndex = new Dictionary<Transform, int>();
			BuildBoneToIndexMap(_boneToIndex);
		}
		VerifySkinConstraintTransformCache();
	}

	private void SetupNativeData()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		if (!((TransformAccessArray)(ref _boneTransforms)).isCreated)
		{
			_boneTransforms = new TransformAccessArray(_boneCount, -1);
			foreach (Chain chain in _chains)
			{
				foreach (Transform transform in chain.Transforms)
				{
					((TransformAccessArray)(ref _boneTransforms)).Add(transform);
				}
			}
		}
		if (!_boneData.IsCreated)
		{
			_boneData = new NativeArray<BoneData>(_boneCount, (Allocator)4, (NativeArrayOptions)0);
			int num = 0;
			foreach (BoneData item in _boneDataOriginal)
			{
				_boneData[num++] = item;
			}
		}
		if (!_rotationConstraints.IsCreated)
		{
			_rotationConstraints = new NativeArray<RotationConstraint>(_rotationConstraintsDataOriginal.Count, (Allocator)4, (NativeArrayOptions)0);
			int num2 = 0;
			foreach (RotationConstraint item2 in _rotationConstraintsDataOriginal)
			{
				_rotationConstraints[num2++] = item2;
			}
		}
		if (!_boneState.IsCreated)
		{
			_boneState = new NativeArray<BoneState>(_boneCount, (Allocator)4, (NativeArrayOptions)0);
			int num3 = 0;
			foreach (Chain chain2 in _chains)
			{
				foreach (Transform transform2 in chain2.Transforms)
				{
					Vector3 position = transform2.position;
					_boneState[num3++] = new BoneState
					{
						Position = float3.op_Implicit(position),
						Rotation = quaternion.op_Implicit(transform2.rotation),
						OldPosition = float3.op_Implicit(position)
					};
				}
			}
		}
		if (!((TransformAccessArray)(ref _sphereColliderTransforms)).isCreated || !_sphereColliderData.IsCreated)
		{
			SphereParamsShared.Clear();
			GatherColliders(SphereParamsShared);
			_sphereColliderTransforms = new TransformAccessArray(SphereParamsShared.Count, -1);
			_sphereColliderData = new NativeArray<SphereColliderData>(SphereParamsShared.Count, (Allocator)4, (NativeArrayOptions)0);
			for (int i = 0; i < SphereParamsShared.Count; i++)
			{
				SphereParams sphereParams = SphereParamsShared[i];
				((TransformAccessArray)(ref _sphereColliderTransforms)).Add(sphereParams.Transform);
				_sphereColliderData[i] = new SphereColliderData
				{
					Radius = sphereParams.Radius,
					RadiusSqr = sphereParams.Radius * sphereParams.Radius,
					LocalPosition = float3.op_Implicit(sphereParams.Point)
				};
			}
			SphereParamsShared.Clear();
		}
		if (!_sphereColliderState.IsCreated)
		{
			_sphereColliderState = new NativeArray<SphereColliderState>(_sphereColliderData.Length, (Allocator)4, (NativeArrayOptions)0);
		}
		if (!_skinConstraints.IsCreated)
		{
			_skinConstraints = new NativeArray<SkinConstraint>(_skinConstraintsOriginal.Count, (Allocator)4, (NativeArrayOptions)0);
			for (int j = 0; j < _skinConstraintsOriginal.Count; j++)
			{
				_skinConstraints[j] = _skinConstraintsOriginal[j];
			}
		}
		PopulateSkinConstraintTransformAccessArray();
	}

	protected virtual (Vector3 Origin, Quaternion Rotation, Vector3 Up) GetOriginTransform()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		return (Origin: ((Component)this).transform.position, Rotation: ((Component)this).transform.rotation, Up: ((Component)this).transform.up);
	}

	protected virtual void GatherColliders(List<SphereParams> sphereColliders)
	{
	}

	private static (Vector3, float) GetBoneLocalPositionAndLength(Transform parent, Transform child)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)child == (Object)null)
		{
			return (Vector3.zero, 0f);
		}
		Vector3 item = child.InverseTransformPoint(parent.position);
		return (item, ((Vector3)(ref item)).magnitude);
	}

	private (Transform, int) GetSiblingAndIndex(int chainIndex, int depth)
	{
		if (chainIndex < 0 || chainIndex >= _chains.Count)
		{
			return (null, -1);
		}
		List<Transform> transforms = _chains[chainIndex].Transforms;
		if (depth < 0 || depth >= transforms.Count)
		{
			return (null, -1);
		}
		Transform val = transforms[depth];
		return (val, _boneToIndex[val]);
	}

	private void BuildBoneToIndexMap(Dictionary<Transform, int> boneToIndex)
	{
		boneToIndex.Clear();
		int num = 0;
		foreach (Chain chain in _chains)
		{
			foreach (Transform transform in chain.Transforms)
			{
				boneToIndex.Add(transform, num++);
			}
		}
	}

	protected void UpdateCachedMaterialData()
	{
		bool flag = false;
		if (_chains != null)
		{
			foreach (Chain chain in _chains)
			{
				foreach (Transform transform in chain.Transforms)
				{
					if ((Object)(object)transform == (Object)null)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					break;
				}
			}
		}
		if (flag)
		{
			_chains.Clear();
		}
		if (!Application.isPlaying || !_boneData.IsCreated)
		{
			return;
		}
		if ((Object)(object)Material == (Object)null)
		{
			Material = BurstClothMaterial.DefaultMaterial;
		}
		int num = 0;
		for (int i = 0; i < _chains.Count; i++)
		{
			List<Transform> transforms = _chains[i].Transforms;
			for (int j = 0; j < transforms.Count; j++)
			{
				BoneData boneData = _boneDataOriginal[num];
				float num2 = (float)j / (float)_maxBoneDepth;
				boneData.CollisionRadius = CollisionRadius * CollisionRadiusCurve.Evaluate(num2);
				boneData.DampingInv = 1f - Material.GetDamping(num2);
				boneData.LengthRelaxation = Material.GetLengthRelaxation(num2);
				boneData.ShapeRelaxation = Material.GetShapeRelaxation(num2);
				boneData.SiblingRelaxation = Material.GetSiblingRelaxation(num2);
				_boneDataOriginal[num] = boneData;
				_boneData[num] = boneData;
				num++;
			}
		}
	}
}


using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
internal struct Chain
{
	public List<Transform> Transforms;
}


using UnityEngine;

public class BurstClothConstraint : MonoBehaviour
{
	public bool ConstrainRotateX;

	public Vector2 RotateX;

	public bool ConstrainRotateY;

	public Vector2 RotateY;

	public bool ConstrainRotateZ;

	public Vector2 RotateZ;

	public bool ConstrainLength;

	public Vector2 Length;

	public bool ExtraSkinConstraint;

	public Transform SkeletonBone;

	[HideInInspector]
	public string SkeletonBoneName;

	public Vector3 SkinNormal;

	public Vector3 EscapeNormal;

	public float BackstopInset;

	public float BackstopRadius;

	private void OnValidate()
	{
		if ((Object)(object)SkeletonBone != (Object)null)
		{
			SkeletonBoneName = ((Object)SkeletonBone).name;
		}
	}
}


using System.Collections.Generic;
using Facepunch.BurstCloth;
using Unity.Collections;
using Unity.Jobs;
using UnityEngine;

public class BurstClothManager : MonoBehaviour
{
	private static BurstClothManager _instance;

	internal readonly List<BurstCloth> Instances = new List<BurstCloth>();

	public void LateUpdate()
	{
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		foreach (BurstCloth instance in Instances)
		{
			if (instance.EnableSimulation)
			{
				instance.FrameUpdate();
				num++;
			}
		}
		NativeArray<JobHandle> val = default(NativeArray<JobHandle>);
		val..ctor(num, (Allocator)2, (NativeArrayOptions)1);
		int num2 = 0;
		foreach (BurstCloth instance2 in Instances)
		{
			if (instance2.EnableSimulation)
			{
				val[num2++] = instance2.SimulateSystem();
			}
		}
		JobHandle.CompleteAll(val);
	}

	public static BurstClothManager Get()
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Expected O, but got Unknown
		if (Object.op_Implicit((Object)(object)_instance))
		{
			return _instance;
		}
		GameObject val = new GameObject("BurstClothManager");
		Object.DontDestroyOnLoad((Object)val);
		_instance = val.AddComponent<BurstClothManager>();
		return _instance;
	}
}


using Facepunch.BurstCloth;
using UnityEngine;
using UnityEngine.Serialization;

[CreateAssetMenu(fileName = "BurstClothMaterial", menuName = "Facepunch.BurstCloth/Material")]
public class BurstClothMaterial : ScriptableObject
{
	[Header("Relaxation\n [0,1]\tUnder-tuned - generally gives best results\n[1, 1.5]\tOver-tuned - can work well with low iteration counts")]
	[SerializeField]
	[Range(0.25f, 1.5f)]
	[Tooltip("Relaxation factor on alignment with parent")]
	private float lengthRelaxation = 1f;

	[SerializeField]
	[Range(0f, 15f)]
	[Tooltip("Speed at which a bone returns to its original orientation")]
	private float shapeRelaxation;

	[SerializeField]
	[Range(0f, 1.5f)]
	[Tooltip("Relaxation factor on alignment with siblings (very low values work best)")]
	private float siblingRelaxation;

	[SerializeField]
	[Range(0f, 0.99f)]
	[Tooltip("Controls how quickly movements come to rest.")]
	private float _damping = 0.2f;

	[Space]
	[Header("Depth Weighting Curves")]
	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking damping according to depth in the chain.")]
	private AnimationCurve _dampingCurve = AnimationCurve.EaseInOut(0f, 1f, 1f, 1f);

	[FormerlySerializedAs("_lengthWeightCurve")]
	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking length weight according to depth in the chain.")]
	private AnimationCurve _lengthRelaxationCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking shape weight according to depth in the chain.")]
	private AnimationCurve _shapeRelaxationCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking sibling constraint weight according to depth in the chain.")]
	private AnimationCurve _siblingConstraintWeightCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[Space]
	[Header("Debug - can hurt editor performance")]
	[SerializeField]
	private bool _forceSyncInEditor;

	private static BurstClothMaterial _defaultMaterial;

	public bool ForceSyncInEditor => _forceSyncInEditor;

	public static BurstClothMaterial DefaultMaterial
	{
		get
		{
			if ((Object)(object)_defaultMaterial == (Object)null)
			{
				_defaultMaterial = ScriptableObject.CreateInstance<BurstClothMaterial>();
			}
			((Object)_defaultMaterial).name = "BurstCloth_Default";
			return _defaultMaterial;
		}
	}

	public float GetLengthRelaxation(float t)
	{
		return lengthRelaxation * _lengthRelaxationCurve.Evaluate(t);
	}

	public float GetShapeRelaxation(float t)
	{
		return shapeRelaxation * _shapeRelaxationCurve.Evaluate(t);
	}

	public float GetSiblingRelaxation(float t)
	{
		return siblingRelaxation * _siblingConstraintWeightCurve.Evaluate(t);
	}

	public float GetDamping(float t)
	{
		return _damping * _dampingCurve.Evaluate(t);
	}
}


using System;
using Unity.Mathematics;

[Serializable]
internal struct BoneData
{
	public int Depth;

	public int Parent;

	public int Child;

	public float Length;

	public float3 NormalFromParent;

	public int LeftSibling;

	public float3 NormalFromLeft;

	public float LengthToLeft;

	public int RightSibling;

	public float3 NormalFromRight;

	public float LengthToRight;

	public float3 LocalPosition;

	public quaternion LocalRotation;

	public float3 DirectionFromOrigin;

	public float CollisionRadius;

	public float DampingInv;

	public float LengthRelaxation;

	public float ShapeRelaxation;

	public float SiblingRelaxation;

	public int RotationConstraintIndex;

	public int SkinConstraintIndex;

	public float2 LengthConstraint;
}


using System;
using Unity.Mathematics;

[Serializable]
internal struct RotationConstraint
{
	public bool3 Constraints;

	public float2 X;

	public float2 Y;

	public float2 Z;

	public RotationConstraint(bool3 constraints, float2 x, float2 y, float2 z)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		Constraints = constraints;
		X = x;
		Y = y;
		Z = z;
	}
}


using Unity.Mathematics;

internal struct BoneState
{
	public float3 Position;

	public quaternion Rotation;

	public float3 OldPosition;

	public float3 Delta;
}


using Unity.Mathematics;

internal struct SphereColliderData
{
	public float Radius;

	public float RadiusSqr;

	public float3 LocalPosition;
}


using Unity.Mathematics;

internal struct SphereColliderState
{
	public float3 Position;
}


using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

internal struct InitializeBoneStateJob : IJobParallelForTransform
{
	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneData> Data;

	[WriteOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneState> State;

	public void Execute(int index, [ReadOnly] TransformAccess transform)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref Data, index);
		ref BoneState reference = ref BurstUtil.Get<BoneState>(ref State, index);
		if (((BoneData)@readonly).Depth == 0)
		{
			reference.OldPosition = reference.Position;
			reference.Position = float3.op_Implicit(((TransformAccess)(ref transform)).position);
		}
		reference.Rotation = quaternion.op_Implicit(((TransformAccess)(ref transform)).rotation);
	}
}


using Facepunch.BurstCloth.Jobs;
using Unity.Burst;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

[BurstCompile]
internal struct InitializeSphereColliderStateJob : IJobParallelForTransform
{
	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<SphereColliderData> Data;

	[WriteOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<SphereColliderState> State;

	public void Execute(int index, TransformAccess transform)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		ref SphereColliderData @readonly = BurstUtil.GetReadonly<SphereColliderData>(ref Data, index);
		ref SphereColliderState reference = ref BurstUtil.Get<SphereColliderState>(ref State, index);
		float3 val = float3.op_Implicit(((TransformAccess)(ref transform)).position);
		quaternion val2 = quaternion.op_Implicit(((TransformAccess)(ref transform)).rotation);
		reference.Position = val + math.mul(val2, @readonly.LocalPosition);
	}
}


using Facepunch.BurstCloth;
using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;

internal struct SimulatePositionsJob : IJob
{
	private struct LerpState
	{
		public float3 Start;

		public float3 End;
	}

	private readonly struct Collision
	{
		public readonly bool Exists;

		public readonly float3 TargetToResolve;

		public Collision(bool exists, float3 targetToResolve)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			Exists = exists;
			TargetToResolve = targetToResolve;
		}
	}

	[ReadOnly]
	public NativeArray<SphereColliderData> ColliderData;

	[ReadOnly]
	public NativeArray<SphereColliderState> ColliderState;

	[ReadOnly]
	public NativeArray<RotationConstraint> RotationConstraints;

	[ReadOnly]
	public NativeArray<SkinConstraint> SkinConstraints;

	[ReadOnly]
	public NativeArray<BoneData> BoneData;

	public NativeArray<BoneState> BoneStates;

	public int TickRate;

	public float DeltaTime;

	public int IterationCount;

	public int ConstraintIterationCount;

	public quaternion OriginRotationDelta;

	public float3 SimulationSpaceDelta;

	public float3 OriginDelta;

	public float3 Gravity;

	public float LengthModifier;

	public bool SiblingConstraints;

	public bool EnableCollisions;

	public float3 Origin;

	public quaternion Rotation;

	public float3 Up;

	public float Radius;

	public float CollisionProjectionYOffset;

	public float CollisionFilteringScale;

	public void Execute()
	{
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		NativeArray<LerpState> val = default(NativeArray<LerpState>);
		val..ctor(BoneStates.Length, (Allocator)2, (NativeArrayOptions)0);
		bool flag = EnableCollisions && ColliderData.Length > 0;
		NativeArray<Collision> collisions = default(NativeArray<Collision>);
		collisions..ctor(BoneStates.Length, (Allocator)2, (NativeArrayOptions)1);
		AdjustSimulationSpace();
		for (int i = 0; i < BoneStates.Length; i++)
		{
			ref BoneState @readonly = BurstUtil.GetReadonly<BoneState>(ref BoneStates, i);
			val[i] = new LerpState
			{
				Start = @readonly.OldPosition,
				End = @readonly.Position
			};
		}
		for (int j = 0; j < IterationCount; j++)
		{
			float num = ((float)j + 1f) / (float)IterationCount;
			for (int k = 0; k < BoneData.Length; k++)
			{
				ref BoneData readonly2 = BurstUtil.GetReadonly<BoneData>(ref BoneData, k);
				ref BoneState reference = ref BurstUtil.Get<BoneState>(ref BoneStates, k);
				if (readonly2.Depth == 0)
				{
					reference.OldPosition = reference.Position;
					reference.Position = math.lerp(val[k].Start, val[k].End, num);
				}
				else
				{
					VerletIntegrate(ref reference, Gravity, DeltaTime, readonly2.DampingInv);
				}
			}
			if (flag)
			{
				PopulateCollisions(collisions);
			}
			for (int l = 0; l < ConstraintIterationCount; l++)
			{
				for (int m = 0; m < BoneData.Length; m++)
				{
					ApplyRotationConstraints((BoneData)BurstUtil.GetReadonly<BoneData>(ref BoneData, m), ref BurstUtil.Get<BoneState>(ref BoneStates, m));
				}
				for (int n = 0; n < BoneData.Length; n++)
				{
					ref BoneData readonly3 = BurstUtil.GetReadonly<BoneData>(ref BoneData, n);
					ref BoneState state = ref BurstUtil.Get<BoneState>(ref BoneStates, n);
					ref Collision readonly4 = BurstUtil.GetReadonly<Collision>(ref collisions, n);
					ApplyLinearConstraints(in readonly3, ref state, in BoneStates, in readonly4);
				}
				for (int num2 = 0; num2 < BoneData.Length; num2++)
				{
					if (((BoneData)BurstUtil.GetReadonly<BoneData>(ref BoneData, num2)).Depth != 0)
					{
						ref BoneState reference2 = ref BurstUtil.Get<BoneState>(ref BoneStates, num2);
						ref float3 position = ref reference2.Position;
						position += reference2.Delta;
						reference2.Delta = float3.zero;
					}
				}
			}
			for (int num3 = 0; num3 < BoneData.Length; num3++)
			{
				ApplyRotationConstraints((BoneData)BurstUtil.GetReadonly<BoneData>(ref BoneData, num3), ref BurstUtil.Get<BoneState>(ref BoneStates, num3));
			}
		}
		val.Dispose();
	}

	private void AdjustSimulationSpace()
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < BoneData.Length; i++)
		{
			ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref BoneData, i);
			ref BoneState reference = ref BurstUtil.Get<BoneState>(ref BoneStates, i);
			float3 val = reference.Position - Origin;
			float3 val2 = val - math.rotate(OriginRotationDelta, val);
			if (((BoneData)@readonly).Depth > 0)
			{
				ref float3 position = ref reference.Position;
				position += SimulationSpaceDelta + OriginDelta - val2;
			}
			ref float3 oldPosition = ref reference.OldPosition;
			oldPosition += SimulationSpaceDelta + OriginDelta - val2;
		}
	}

	private void ApplyLinearConstraints(in BoneData data, ref BoneState state, in NativeArray<BoneState> workBoneState, in Collision collision)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0305: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		if (data.Depth == 0)
		{
			return;
		}
		ref BoneState reference = ref BurstUtil.Get<BoneState>(ref workBoneState, data.Parent);
		float3 val = float3.zero;
		int num = 0;
		float3 val2 = float3.zero;
		int num2 = 0;
		if (data.SkinConstraintIndex >= 0)
		{
			ref SkinConstraint @readonly = BurstUtil.GetReadonly<SkinConstraint>(ref SkinConstraints, data.SkinConstraintIndex);
			float3 val3 = @readonly.WorldSkinPosition - @readonly.WorldSkinNormal * @readonly.BackstopInset;
			if (math.distancesq(state.Position, val3) <= @readonly.BackstopRadius * @readonly.BackstopRadius)
			{
				float3 val4 = math.normalize(state.Position - val3);
				float3 val5 = Slerp(val4, @readonly.WorldEscapeNormal, math.select(0.2f, 1f, math.dot(val4, @readonly.WorldEscapeNormal) >= 0f));
				float3 val6 = val3 + val5 * @readonly.BackstopRadius;
				float3 val7 = state.Position - val6;
				val += 0.5f * data.LengthRelaxation * -val7;
				num++;
			}
		}
		if (EnableCollisions && collision.Exists)
		{
			float3 targetToResolve = collision.TargetToResolve;
			float3 val8 = state.Position - targetToResolve;
			val += 0.5f * data.LengthRelaxation * -val8;
			num++;
		}
		if (data.LengthRelaxation > 0f)
		{
			float num3 = math.clamp(math.distance(state.Position, reference.Position), data.LengthConstraint.x, data.LengthConstraint.y);
			float3 val9 = reference.Position + math.rotate(reference.Rotation, data.NormalFromParent * num3 * LengthModifier);
			float3 val10 = state.Position - val9;
			float3 val11 = math.select(0.5f, 1f, data.Depth == 1) * data.LengthRelaxation * -val10;
			val += val11;
			num++;
			val2 -= val11;
			num2++;
		}
		ref float3 delta = ref state.Delta;
		delta += val / ((float)num + 1.1754944E-38f);
		if (data.Depth > 1)
		{
			ref float3 delta2 = ref reference.Delta;
			delta2 += val2 / ((float)num2 + 1.1754944E-38f);
		}
		if (SiblingConstraints)
		{
			float3 val12 = float3.zero;
			int num4 = 0;
			if (data.LeftSibling >= 0)
			{
				ref BoneState reference2 = ref BurstUtil.Get<BoneState>(ref workBoneState, data.LeftSibling);
				float3 val13 = reference2.Position + math.rotate(math.slerp(reference2.Rotation, state.Rotation, 0.5f), data.NormalFromLeft * data.LengthToLeft);
				float3 val14 = state.Position - val13;
				float3 val15 = 0.5f * data.SiblingRelaxation * -val14;
				val12 += val15;
				num4++;
				ref float3 delta3 = ref reference2.Delta;
				delta3 -= val15;
			}
			ref float3 delta4 = ref state.Delta;
			delta4 += val12 / ((float)num4 + 1.1754944E-38f);
		}
	}

	private static void VerletIntegrate(ref BoneState state, float3 acceleration, float dt, float damping)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		float3 position = state.Position;
		ref float3 position2 = ref state.Position;
		position2 += (state.Position - state.OldPosition) * damping + acceleration * dt * dt;
		state.OldPosition = position;
	}

	private void PopulateCollisions(NativeArray<Collision> collisions)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < BoneStates.Length; i++)
		{
			ref BoneState @readonly = BurstUtil.GetReadonly<BoneState>(ref BoneStates, i);
			ref BoneData readonly2 = BurstUtil.GetReadonly<BoneData>(ref BoneData, i);
			float3 val = math.project(@readonly.Position - Origin, Up) + Origin + Up * CollisionProjectionYOffset;
			float3 val2 = math.normalizesafe(@readonly.Position - val, default(float3));
			float3 val3 = math.mul(Rotation, readonly2.DirectionFromOrigin);
			float3 val4 = Slerp(val3, val2, math.max(math.dot(val2, val3), 0f));
			float3 origin = val + val4 * Radius;
			float3 val5 = @readonly.Position - origin;
			float3 direction = math.normalizesafe(val5, default(float3));
			float maxDistance = math.length(val5);
			bool hit;
			float3 val6 = RayMarch(in origin, in direction, readonly2.CollisionRadius, maxDistance, out hit);
			if (math.distancesq(val6, @readonly.Position) > readonly2.CollisionRadius * CollisionFilteringScale * readonly2.CollisionRadius * CollisionFilteringScale)
			{
				hit = false;
			}
			collisions[i] = new Collision(hit, val6);
		}
	}

	private void ApplyRotationConstraints(in BoneData data, ref BoneState state)
	{
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		if (data.Depth != 0 && data.Parent >= 0)
		{
			ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref BoneData, data.Parent);
			ref BoneState reference = ref BurstUtil.Get<BoneState>(ref BoneStates, data.Parent);
			quaternion rotation = state.Rotation;
			if (data.Child >= 0)
			{
				ref BoneData readonly2 = BurstUtil.GetReadonly<BoneData>(ref BoneData, data.Child);
				ref BoneState reference2 = ref BurstUtil.Get<BoneState>(ref BoneStates, data.Child);
				rotation = math.mul(rotation, FromToRotation(readonly2.LocalPosition, math.mul(math.conjugate(rotation), reference2.Position - state.Position)));
			}
			else
			{
				rotation = math.mul(rotation, FromToRotation(@readonly.LocalPosition, math.mul(math.conjugate(rotation), state.Position - reference.Position)));
			}
			_ = SiblingConstraints;
			quaternion val = math.mul(reference.Rotation, data.LocalRotation);
			rotation = math.slerp(rotation, val, math.saturate(DeltaTime * data.ShapeRelaxation));
			rotation = ApplyAngleLimitsConstraint(in data, in RotationConstraints, rotation, reference.Rotation);
			state.Rotation = math.normalize(rotation);
		}
	}

	private static quaternion ApplyAngleLimitsConstraint(in BoneData data, in NativeArray<RotationConstraint> rotationConstraints, quaternion rotation, quaternion parentRotation)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		if (data.RotationConstraintIndex == -1)
		{
			return rotation;
		}
		ref RotationConstraint @readonly = BurstUtil.GetReadonly<RotationConstraint>(ref rotationConstraints, data.RotationConstraintIndex);
		float3 val = ToEuler(math.mul(math.conjugate(parentRotation), rotation), (RotationOrder)4);
		if (@readonly.Constraints.x)
		{
			val.x = ClampAngle(val.x, @readonly.X.x, @readonly.X.y);
		}
		if (@readonly.Constraints.y)
		{
			val.y = ClampAngle(val.y, @readonly.Y.x, @readonly.Y.y);
		}
		if (@readonly.Constraints.z)
		{
			val.z = ClampAngle(val.z, @readonly.Z.x, @readonly.Z.y);
		}
		return math.mul(parentRotation, quaternion.Euler(val, (RotationOrder)4));
	}

	private float3 RayMarch(in float3 origin, in float3 direction, float radius, float maxDistance, out bool hit)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		hit = false;
		float num = 0f;
		for (int i = 0; i < 8; i++)
		{
			float3 position = origin + direction * num;
			float num2 = Scene(in position) - radius;
			if (num2 < 0.0001f)
			{
				hit = true;
				return position + direction * num2;
			}
			num += num2;
			if (num > maxDistance)
			{
				break;
			}
		}
		return origin + direction * maxDistance;
	}

	private float Scene(in float3 position)
	{
		float num = float.MaxValue;
		for (int i = 0; i < ColliderData.Length; i++)
		{
			ref SphereColliderData @readonly = BurstUtil.GetReadonly<SphereColliderData>(ref ColliderData, i);
			num = Union(num, SphereSignedDistance(in position, in ((SphereColliderState)BurstUtil.GetReadonly<SphereColliderState>(ref ColliderState, i)).Position, in @readonly.Radius));
		}
		return num;
	}

	private static float Union(float d1, float d2)
	{
		return math.min(d1, d2);
	}

	private static float SphereSignedDistance(in float3 p, in float3 pSphere, in float r)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return math.length(p - pSphere) - r;
	}

	private static float Capsule(in float3 p, in float3 a, in float3 b, float r)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		float3 val = p - a;
		float3 val2 = b - a;
		float num = math.clamp(math.dot(val, val2) / math.dot(val2, val2), 0f, 1f);
		return math.length(val - val2 * num) - r;
	}

	private static float3 Slerp(float3 a, float3 b, float t)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		return float3.op_Implicit(Vector3.Slerp(float3.op_Implicit(a), float3.op_Implicit(b), t));
	}

	private static quaternion FromToRotation(float3 from, float3 to)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		float num = math.acos(math.clamp(math.dot(math.normalizesafe(from, default(float3)), math.normalizesafe(to, default(float3))), -1f, 1f));
		return quaternion.AxisAngle(math.normalizesafe(math.cross(from, to), default(float3)), num);
	}

	private static float ClampAngle(float current, float min, float max)
	{
		float num = math.abs((min - max + 180f) % 360f - 180f) * 0.5f;
		float target = min + num;
		float num2 = math.abs(DeltaAngle(current, target)) - num;
		if (num2 > 0f)
		{
			current = MoveTowardsAngle(current, target, num2);
		}
		return current;
	}

	private static float MoveTowardsAngle(float current, float target, float maxDelta)
	{
		float num = DeltaAngle(current, target);
		if (0f - maxDelta < num && num < maxDelta)
		{
			return target;
		}
		target = current + num;
		return MoveTowards(current, target, maxDelta);
	}

	private static float MoveTowards(float current, float target, float maxDelta)
	{
		if (!(math.abs(target - current) <= maxDelta))
		{
			return current + math.sign(target - current) * maxDelta;
		}
		return target;
	}

	private static float DeltaAngle(float current, float target)
	{
		float num = Repeat(target - current, 360f);
		if ((double)num > 180.0)
		{
			num -= 360f;
		}
		return num;
	}

	private static float Repeat(float t, float length)
	{
		return math.clamp(t - math.floor(t / length) * length, 0f, length);
	}

	private static float3 ToEuler(quaternion q, RotationOrder order = 4)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Expected I4, but got Unknown
		//IL_06c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0444: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0770: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0782: Unknown result type (might be due to invalid IL or missing references)
		//IL_0792: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0700: Unknown result type (might be due to invalid IL or missing references)
		//IL_0709: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0725: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_062f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_063b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_0658: Unknown result type (might be due to invalid IL or missing references)
		//IL_0660: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_0673: Unknown result type (might be due to invalid IL or missing references)
		//IL_0675: Unknown result type (might be due to invalid IL or missing references)
		//IL_0677: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_0695: Unknown result type (might be due to invalid IL or missing references)
		//IL_059b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_035a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_050e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0515: Unknown result type (might be due to invalid IL or missing references)
		//IL_051d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_0530: Unknown result type (might be due to invalid IL or missing references)
		//IL_0532: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0485: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0802: Unknown result type (might be due to invalid IL or missing references)
		float4 value = q.value;
		float4 val = value * ((float4)(ref value)).wwww * new float4(2f);
		float4 val2 = value * ((float4)(ref value)).yzxw * new float4(2f);
		float4 val3 = value * value;
		float3 euler = default(float3);
		((float3)(ref euler))..ctor(0f);
		switch ((int)order)
		{
		case 5:
		{
			float num29 = val2.z + val.y;
			if (num29 * num29 < 0.99999595f)
			{
				float num30 = 0f - val2.x + val.z;
				float num31 = val3.x + val3.w - val3.y - val3.z;
				float num32 = 0f - val2.y + val.x;
				float num33 = val3.z + val3.w - val3.y - val3.x;
				((float3)(ref euler))..ctor(math.atan2(num30, num31), math.asin(num29), math.atan2(num32, num33));
			}
			else
			{
				num29 = math.clamp(num29, -1f, 1f);
				float4 val8 = default(float4);
				((float4)(ref val8))..ctor(val2.z, val.y, val2.y, val.x);
				float num34 = 2f * (val8.x * val8.w + val8.y * val8.z);
				float num35 = math.csum(val8 * val8 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num34, num35), math.asin(num29), 0f);
			}
			break;
		}
		case 4:
		{
			float num15 = val2.y - val.x;
			if (num15 * num15 < 0.99999595f)
			{
				float num16 = val2.x + val.z;
				float num17 = val3.y + val3.w - val3.x - val3.z;
				float num18 = val2.z + val.y;
				float num19 = val3.z + val3.w - val3.x - val3.y;
				((float3)(ref euler))..ctor(math.atan2(num16, num17), 0f - math.asin(num15), math.atan2(num18, num19));
			}
			else
			{
				num15 = math.clamp(num15, -1f, 1f);
				float4 val6 = default(float4);
				((float4)(ref val6))..ctor(val2.z, val.y, val2.y, val.x);
				float num20 = 2f * (val6.x * val6.w + val6.y * val6.z);
				float num21 = math.csum(val6 * val6 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num20, num21), 0f - math.asin(num15), 0f);
			}
			break;
		}
		case 2:
		{
			float num36 = val2.y + val.x;
			if (num36 * num36 < 0.99999595f)
			{
				float num37 = 0f - val2.z + val.y;
				float num38 = val3.z + val3.w - val3.x - val3.y;
				float num39 = 0f - val2.x + val.z;
				float num40 = val3.y + val3.w - val3.z - val3.x;
				((float3)(ref euler))..ctor(math.atan2(num37, num38), math.asin(num36), math.atan2(num39, num40));
			}
			else
			{
				num36 = math.clamp(num36, -1f, 1f);
				float4 val9 = default(float4);
				((float4)(ref val9))..ctor(val2.x, val.z, val2.y, val.x);
				float num41 = 2f * (val9.x * val9.w + val9.y * val9.z);
				float num42 = math.csum(val9 * val9 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num41, num42), math.asin(num36), 0f);
			}
			break;
		}
		case 3:
		{
			float num8 = val2.x - val.z;
			if (num8 * num8 < 0.99999595f)
			{
				float num9 = val2.z + val.y;
				float num10 = val3.x + val3.w - val3.z - val3.y;
				float num11 = val2.y + val.x;
				float num12 = val3.y + val3.w - val3.x - val3.z;
				((float3)(ref euler))..ctor(math.atan2(num9, num10), 0f - math.asin(num8), math.atan2(num11, num12));
			}
			else
			{
				num8 = math.clamp(num8, -1f, 1f);
				float4 val5 = default(float4);
				((float4)(ref val5))..ctor(val2.x, val.z, val2.y, val.x);
				float num13 = 2f * (val5.x * val5.w + val5.y * val5.z);
				float num14 = math.csum(val5 * val5 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num13, num14), 0f - math.asin(num8), 0f);
			}
			break;
		}
		case 1:
		{
			float num22 = val2.x + val.z;
			if (num22 * num22 < 0.99999595f)
			{
				float num23 = 0f - val2.y + val.x;
				float num24 = val3.y + val3.w - val3.z - val3.x;
				float num25 = 0f - val2.z + val.y;
				float num26 = val3.x + val3.w - val3.y - val3.z;
				((float3)(ref euler))..ctor(math.atan2(num23, num24), math.asin(num22), math.atan2(num25, num26));
			}
			else
			{
				num22 = math.clamp(num22, -1f, 1f);
				float4 val7 = default(float4);
				((float4)(ref val7))..ctor(val2.x, val.z, val2.z, val.y);
				float num27 = 2f * (val7.x * val7.w + val7.y * val7.z);
				float num28 = math.csum(val7 * val7 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num27, num28), math.asin(num22), 0f);
			}
			break;
		}
		case 0:
		{
			float num = val2.z - val.y;
			if (num * num < 0.99999595f)
			{
				float num2 = val2.y + val.x;
				float num3 = val3.z + val3.w - val3.y - val3.x;
				float num4 = val2.x + val.z;
				float num5 = val3.x + val3.w - val3.y - val3.z;
				((float3)(ref euler))..ctor(math.atan2(num2, num3), 0f - math.asin(num), math.atan2(num4, num5));
			}
			else
			{
				num = math.clamp(num, -1f, 1f);
				float4 val4 = default(float4);
				((float4)(ref val4))..ctor(val2.z, val.y, val2.x, val.z);
				float num6 = 2f * (val4.x * val4.w + val4.y * val4.z);
				float num7 = math.csum(val4 * val4 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num6, num7), 0f - math.asin(num), 0f);
			}
			break;
		}
		}
		return EulerReorderBack(euler, order);
	}

	private static float3 EulerReorderBack(float3 euler, RotationOrder order)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Expected I4, but got Unknown
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		return (float3)((int)order switch
		{
			1 => ((float3)(ref euler)).xzy, 
			3 => ((float3)(ref euler)).zxy, 
			2 => ((float3)(ref euler)).yxz, 
			4 => ((float3)(ref euler)).yzx, 
			5 => ((float3)(ref euler)).zyx, 
			_ => euler, 
		});
	}
}


using Unity.Mathematics;

private struct LerpState
{
	public float3 Start;

	public float3 End;
}


using Unity.Mathematics;

private readonly struct Collision
{
	public readonly bool Exists;

	public readonly float3 TargetToResolve;

	public Collision(bool exists, float3 targetToResolve)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		Exists = exists;
		TargetToResolve = targetToResolve;
	}
}


using Facepunch.BurstCloth;
using Unity.Burst;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

[BurstCompile]
internal struct UpdateSkinConstraintsJob : IJobParallelForTransform
{
	[NativeMatchesParallelForLength]
	public NativeArray<SkinConstraint> SkinConstraints;

	public void Execute(int index, [ReadOnly] TransformAccess transform)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		if (((TransformAccess)(ref transform)).isValid)
		{
			ref SkinConstraint reference = ref BurstUtil.Get<SkinConstraint>(ref SkinConstraints, index);
			float4x4 val = float4x4.op_Implicit(((TransformAccess)(ref transform)).localToWorldMatrix);
			float3 val2 = math.rotate(val, reference.LocalSkinNormal);
			reference.WorldSkinNormal = math.normalize(((float3)(ref val2)).xyz);
			val2 = math.rotate(val, reference.LocalEscapeNormal);
			reference.WorldEscapeNormal = math.normalize(((float3)(ref val2)).xyz);
			float4 val3 = math.mul(val, new float4(reference.LocalSkinPosition, 1f));
			reference.WorldSkinPosition = ((float4)(ref val3)).xyz;
		}
	}
}


using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

internal struct UpdateTransformsJob : IJobParallelForTransform
{
	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneData> Data;

	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneState> State;

	public void Execute(int index, [WriteOnly] TransformAccess transform)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref Data, index);
		ref BoneState readonly2 = BurstUtil.GetReadonly<BoneState>(ref State, index);
		if (@readonly.Depth != 0)
		{
			ref BoneState readonly3 = BurstUtil.GetReadonly<BoneState>(ref State, @readonly.Parent);
			RigidTransform val = math.inverse(math.RigidTransform(readonly3.Rotation, readonly3.Position));
			RigidTransform val2 = math.RigidTransform(readonly2.Rotation, readonly2.Position);
			RigidTransform val3 = math.mul(val, val2);
			((TransformAccess)(ref transform)).localRotation = quaternion.op_Implicit(val3.rot);
			((TransformAccess)(ref transform)).localPosition = float3.op_Implicit(val3.pos);
		}
	}
}


using System;
using Facepunch.BurstCloth.Jobs;
using Unity.Jobs;
using UnityEngine;
using UnityEngine.Jobs;

[DOTSCompilerGenerated]
internal class __JobReflectionRegistrationOutput__7727290552441277134
{
	public static void CreateJobReflectionData()
	{
		try
		{
			IJobParallelForTransformExtensions.EarlyJobInit<InitializeBoneStateJob>();
			IJobParallelForTransformExtensions.EarlyJobInit<InitializeSphereColliderStateJob>();
			IJobExtensions.EarlyJobInit<SimulatePositionsJob>();
			IJobParallelForTransformExtensions.EarlyJobInit<UpdateSkinConstraintsJob>();
			IJobParallelForTransformExtensions.EarlyJobInit<UpdateTransformsJob>();
		}
		catch (Exception ex)
		{
			EarlyInitHelpers.JobReflectionDataCreationFailed(ex);
		}
	}

	[RuntimeInitializeOnLoadMethod(/*Could not decode attribute arguments.*/)]
	public static void EarlyInit()
	{
		CreateJobReflectionData();
	}
}


