public enum AuthResponse
{
	Invalid,
	TimedOut,
	OK,
	VACBanned,
	PublisherBanned,
	InvalidAuthSession,
	NetworkIdentityFailure,
	AuthTicketAlreadyUsed,
	AuthTicketCanceled
}


using System;
using System.Collections.Generic;
using UnityEngine;

public class AvatarCache
{
	private readonly struct Entry
	{
		public readonly ulong UserId;

		public readonly Texture2D Texture;

		public Entry(ulong userId, Texture2D texture)
		{
			UserId = userId;
			Texture = texture;
		}
	}

	private readonly Dictionary<ulong, Entry> _entries;

	private readonly Action<ulong, Texture2D> _loadAvatar;

	public AvatarCache(Action<ulong, Texture2D> loadAvatar)
	{
		_entries = new Dictionary<ulong, Entry>();
		_loadAvatar = loadAvatar ?? throw new ArgumentNullException("loadAvatar");
	}

	public Texture2D Get(ulong userId)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Expected O, but got Unknown
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		if (_entries.TryGetValue(userId, out var value))
		{
			return value.Texture;
		}
		Texture2D val = new Texture2D(64, 64, (TextureFormat)5, false)
		{
			name = $"Avatar_{userId}",
			filterMode = (FilterMode)2,
			wrapMode = (TextureWrapMode)1,
			anisoLevel = 8
		};
		for (int i = 0; i < ((Texture)val).width; i++)
		{
			for (int j = 0; j < ((Texture)val).height; j++)
			{
				val.SetPixel(i, j, Color32.op_Implicit(new Color32((byte)0, (byte)0, (byte)0, (byte)20)));
			}
		}
		val.Apply(true);
		Entry value2 = new Entry(userId, val);
		_entries.Add(userId, value2);
		_loadAvatar(userId, val);
		return val;
	}
}


public interface IAchievement
{
	string Key { get; }

	bool IsUnlocked { get; }

	void Unlock();
}


using System;

public interface IAuthTicket : IDisposable
{
	string Token { get; }

	byte[] Data { get; }
}


public interface IDownloadableContent
{
	int AppId { get; }

	bool IsInstalled { get; }
}


using Rust.Platform.Common;

public interface IPlatformHooks
{
	uint SteamAppId { get; }

	ServerParameters? ServerParameters { get; }

	void Abort();

	void OnItemDefinitionsChanged();

	void AuthSessionValidated(ulong userId, ulong ownerUserId, AuthResponse response, string rawResponse);
}


using System.Collections.Generic;
using System.Threading.Tasks;

public interface IPlatformService
{
	bool IsValid { get; }

	IReadOnlyList<IPlayerItemDefinition> ItemDefinitions { get; }

	bool Initialize(IPlatformHooks hooks);

	void Shutdown();

	void Update();

	void RefreshItemDefinitions();

	IPlayerItemDefinition GetItemDefinition(int definitionId);

	Task<IPlayerInventory> DeserializeInventory(byte[] data);

	bool PlayerOwnsDownloadableContent(ulong userId, int appId);

	Task<bool> LoadPlayerStats(ulong userId);

	Task<bool> SavePlayerStats(ulong userId);

	long GetPlayerStatInt(ulong userId, string key, long defaultValue = 0L);

	bool SetPlayerStatInt(ulong userId, string key, long value);

	bool BeginPlayerSession(ulong userId, byte[] authToken);

	void UpdatePlayerSession(ulong userId, string userName);

	void EndPlayerSession(ulong userId);
}


public interface IPlayerInfo
{
	ulong UserId { get; }

	string UserName { get; }

	bool IsOnline { get; }

	bool IsMe { get; }

	bool IsFriend { get; }

	bool IsPlayingThisGame { get; }

	string ServerEndpoint { get; }
}


using System;
using System.Collections.Generic;

public interface IPlayerInventory : IDisposable
{
	IReadOnlyList<IPlayerItem> Items { get; }

	bool BelongsTo(ulong userId);

	byte[] Serialize();
}


using System;
using System.Threading.Tasks;

public interface IPlayerItem
{
	ulong Id { get; }

	int DefinitionId { get; }

	int Quantity { get; }

	DateTimeOffset Acquired { get; }

	ulong WorkshopId { get; }

	string ItemShortName { get; }

	Task Consume();
}


using System;
using System.Collections.Generic;

public interface IPlayerItemDefinition : IEquatable<IPlayerItemDefinition>
{
	int DefinitionId { get; }

	string Name { get; }

	string Description { get; }

	string Type { get; }

	string IconUrl { get; }

	int LocalPrice { get; }

	string LocalPriceFormatted { get; }

	string PriceCategory { get; }

	bool IsGenerator { get; }

	bool IsTradable { get; }

	bool IsMarketable { get; }

	string StoreTags { get; }

	DateTime Created { get; }

	DateTime Modified { get; }

	string ItemShortName { get; }

	ulong WorkshopId { get; }

	ulong WorkshopDownload { get; }

	IEnumerable<PlayerItemRecipe> GetRecipesContainingThis();
}


public enum ServerQuerySet
{
	Whitelist,
	Internet,
	LocalNetwork,
	Friends,
	Favorites,
	History
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public interface IServerQuery : IDisposable
{
	IReadOnlyList<ServerInfo> Servers { get; }

	event Action<ServerInfo> OnServerFound;

	void AddFilter(string key, string value);

	Task RunQueryAsync(double timeoutInSeconds);
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public sealed class CompositeServerQuery : IServerQuery, IDisposable
{
	private readonly IServerQuery _queryA;

	private readonly IServerQuery _queryB;

	public IReadOnlyList<ServerInfo> Servers { get; }

	public event Action<ServerInfo> OnServerFound;

	public CompositeServerQuery(IServerQuery queryA, IServerQuery queryB)
	{
		CompositeServerQuery compositeServerQuery = this;
		_queryA = queryA ?? throw new ArgumentNullException("queryA");
		_queryB = queryB ?? throw new ArgumentNullException("queryB");
		List<ServerInfo> serverList = new List<ServerInfo>();
		Servers = serverList;
		HashSet<(uint, int)> foundServers = new HashSet<(uint, int)>();
		Action<ServerInfo> value = delegate(ServerInfo info)
		{
			if (foundServers.Add((info.AddressRaw, info.QueryPort)))
			{
				serverList.Add(info);
				compositeServerQuery.OnServerFound?.Invoke(info);
			}
		};
		_queryA.OnServerFound += value;
		_queryB.OnServerFound += value;
	}

	public void Dispose()
	{
		_queryA.Dispose();
		_queryB.Dispose();
	}

	public void AddFilter(string key, string value)
	{
		_queryA.AddFilter(key, value);
		_queryB.AddFilter(key, value);
	}

	public async Task RunQueryAsync(double timeoutInSeconds)
	{
		await Task.WhenAll(_queryA.RunQueryAsync(timeoutInSeconds), _queryB.RunQueryAsync(timeoutInSeconds));
	}
}


using System.Collections.Generic;

public interface IWorkshopContent
{
	ulong WorkshopId { get; }

	string Title { get; }

	string Description { get; }

	IEnumerable<string> Tags { get; }

	string Url { get; }

	string PreviewImageUrl { get; }

	ulong OwnerId { get; }

	IPlayerInfo Owner { get; }

	bool IsInstalled { get; }

	bool IsDownloadPending { get; }

	bool IsDownloading { get; }

	string Directory { get; }

	bool Download();
}


using System;
using System.Collections.Generic;
using System.Linq;

public readonly struct PlayerItemRecipe : IEquatable<PlayerItemRecipe>
{
	public readonly struct Ingredient : IEquatable<Ingredient>
	{
		public int DefinitionId { get; }

		public int Amount { get; }

		public Ingredient(int definitionId, int amount)
		{
			DefinitionId = definitionId;
			Amount = amount;
		}

		public bool Equals(Ingredient other)
		{
			if (DefinitionId == other.DefinitionId)
			{
				return Amount == other.Amount;
			}
			return false;
		}

		public override bool Equals(object obj)
		{
			if (obj is Ingredient other)
			{
				return Equals(other);
			}
			return false;
		}

		public override int GetHashCode()
		{
			return (DefinitionId * 397) ^ Amount;
		}

		public static bool operator ==(Ingredient left, Ingredient right)
		{
			return left.Equals(right);
		}

		public static bool operator !=(Ingredient left, Ingredient right)
		{
			return !left.Equals(right);
		}
	}

	public IReadOnlyList<Ingredient> Ingredients { get; }

	public IPlayerItemDefinition Result { get; }

	public PlayerItemRecipe(IReadOnlyList<Ingredient> ingredients, IPlayerItemDefinition result)
	{
		Ingredients = ingredients ?? throw new ArgumentNullException("ingredients");
		Result = result ?? throw new ArgumentNullException("result");
		if (Ingredients.Count == 0)
		{
			throw new ArgumentException("Recipes must have at least one ingredient.", "ingredients");
		}
	}

	public bool Equals(PlayerItemRecipe other)
	{
		if (Result.Equals(other.Result))
		{
			if (!Ingredients.Equals(other.Ingredients))
			{
				return Ingredients.SequenceEqual(other.Ingredients);
			}
			return true;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is PlayerItemRecipe other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return (Ingredients.Sum((Ingredient i) => i.GetHashCode()) * 397) ^ Result.GetHashCode();
	}

	public static bool operator ==(PlayerItemRecipe left, PlayerItemRecipe right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(PlayerItemRecipe left, PlayerItemRecipe right)
	{
		return !left.Equals(right);
	}
}


using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using Facepunch;

public readonly struct ServerInfo : IEquatable<ServerInfo>
{
	public enum Protocol
	{
		Default,
		Raknet,
		Steamworks
	}

	private static readonly HashSet<StringView> EmptyTags = new HashSet<StringView>();

	public static readonly BufferList<string> ModePriority;

	public uint AppId { get; }

	public string Name { get; }

	public IPAddress Address { get; }

	public uint AddressRaw { get; }

	public int ConnectionPort { get; }

	public int QueryPort { get; }

	public string Map { get; }

	public string TagString { get; }

	public bool IsSecure { get; }

	public int Players { get; }

	public int MaxPlayers { get; }

	public uint LastTimePlayed { get; }

	public int Ping { get; }

	public ulong SteamId { get; }

	public StringView RegionCode { get; }

	public int MaxTeamSize { get; }

	public string Mode { get; }

	public int ModeSortIndex { get; }

	public uint Born { get; }

	public HashSet<StringView> Tags { get; }

	public bool HasPremiumTag
	{
		get
		{
			//IL_000b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			if (!Tags.Contains(StringView.op_Implicit("premium")))
			{
				return Tags.Contains(StringView.op_Implicit("^q"));
			}
			return true;
		}
	}

	public int QueuedPlayers { get; }

	public Protocol ConnectionProtocol { get; }

	public string ConnectionString => $"{Address}:{ConnectionPort}";

	public ServerInfo(uint appId, string name, IPAddress address, int connectionPort, int queryPort, string map, string tagString, bool isSecure, int players, int maxPlayers, uint lastTimePlayed, int ping, ulong steamId, int authedPlayers = int.MaxValue)
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		AppId = appId;
		Name = name;
		Address = address ?? throw new ArgumentNullException("address");
		AddressRaw = AddressToUInt32(address);
		ConnectionPort = connectionPort;
		QueryPort = queryPort;
		Map = map;
		TagString = tagString;
		IsSecure = isSecure;
		RegionCode = default(StringView);
		if (!string.IsNullOrEmpty(TagString))
		{
			List<StringView> list = Pool.Get<List<StringView>>();
			StringView val = StringView.op_Implicit(TagString);
			((StringView)(ref val)).Split(',', (ICollection<StringView>)list);
			Tags = new HashSet<StringView>(list, (IEqualityComparer<StringView>?)ComparerIgnoreCase.Instance);
			Pool.FreeUnmanaged<StringView>(ref list);
		}
		else
		{
			Tags = EmptyTags;
		}
		ConnectionProtocol = Protocol.Default;
		uint result = 0u;
		int result2 = 0;
		foreach (StringView tag2 in Tags)
		{
			StringView current = tag2;
			if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("cp")))
			{
				int.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(2)), out players);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("mp")))
			{
				int.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(2)), out maxPlayers);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("pt")))
			{
				StringView val2 = ((StringView)(ref current)).Substring(2);
				if (val2 == StringView.op_Implicit("sw"))
				{
					ConnectionProtocol = Protocol.Steamworks;
				}
				else if (val2 == StringView.op_Implicit("rak"))
				{
					ConnectionProtocol = Protocol.Raknet;
				}
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("$r")))
			{
				RegionCode = ((StringView)(ref current)).Substring(2);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("born")))
			{
				uint.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(4)), out result);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("ts")))
			{
				int.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(2)), out result2);
			}
		}
		Mode = "vanilla";
		ModeSortIndex = ModePriority.Count - 1;
		for (int i = 0; i < ModePriority.Count; i++)
		{
			string tag = ModePriority[i];
			foreach (StringView tag3 in Tags)
			{
				if (ServerTagCompressor.HasDecompressedTag(tag3, tag))
				{
					Mode = tag;
					ModeSortIndex = i;
					goto end_IL_029b;
				}
			}
			continue;
			end_IL_029b:
			break;
		}
		QueuedPlayers = GetQueuedPlayers(Tags);
		Players = Math.Min(players, authedPlayers);
		MaxPlayers = maxPlayers;
		LastTimePlayed = lastTimePlayed;
		Ping = ping;
		SteamId = steamId;
		Born = result;
		MaxTeamSize = result2;
	}

	private static int GetQueuedPlayers(HashSet<StringView> Tags)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		foreach (StringView Tag in Tags)
		{
			StringView current = Tag;
			int num = ((StringView)(ref current)).IndexOf(StringView.op_Implicit("qp"));
			if (num >= 0 && int.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(num + 2)), out var result))
			{
				return result;
			}
		}
		return 0;
	}

	private static uint AddressToUInt32(IPAddress address)
	{
		if (address.AddressFamily != AddressFamily.InterNetwork)
		{
			return 0u;
		}
		return Swap((uint)address.Address);
	}

	private static uint Swap(uint x)
	{
		return ((x & 0xFF) << 24) + ((x & 0xFF00) << 8) + ((x & 0xFF0000) >> 8) + ((x & 0xFF000000u) >> 24);
	}

	public bool Equals(ServerInfo other)
	{
		if (Name == other.Name && object.Equals(Address, other.Address) && AddressRaw == other.AddressRaw && ConnectionPort == other.ConnectionPort && QueryPort == other.QueryPort && Map == other.Map && MaxPlayers == other.MaxPlayers)
		{
			return Mode == other.Mode;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is ServerInfo other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		HashCode hashCode = default(HashCode);
		hashCode.Add(Name);
		hashCode.Add(Address);
		hashCode.Add(AddressRaw);
		hashCode.Add(ConnectionPort);
		hashCode.Add(QueryPort);
		hashCode.Add(Map);
		hashCode.Add(MaxPlayers);
		hashCode.Add(Mode);
		return hashCode.ToHashCode();
	}

	static ServerInfo()
	{
		BufferList<string> obj = new BufferList<string>();
		obj.Add("event");
		obj.Add("minigame");
		obj.Add("battlefield");
		obj.Add("builds");
		obj.Add("training");
		obj.Add("roleplay");
		obj.Add("creative");
		obj.Add("gmhardcore");
		obj.Add("gmsoftcore");
		obj.Add("gmprimitive");
		obj.Add("pvp");
		obj.Add("pve");
		obj.Add("vanilla");
		ModePriority = obj;
	}
}


using System.Collections.Generic;
using System.Linq;
using System.Text;
using Facepunch;
using UnityEngine;

public static class ServerTagCompressor
{
	private static readonly IReadOnlyDictionary<char, string> charToTag;

	private static readonly IReadOnlyDictionary<string, char> tagToChar;

	public static readonly char TagPrefixCharacter;

	private static readonly StringBuilder normalTags;

	static ServerTagCompressor()
	{
		charToTag = new Dictionary<char, string>
		{
			{ 'b', "biweekly" },
			{ 'c', "creative" },
			{ 'd', "training" },
			{ 'e', "minigame" },
			{ 'g', "gamemode" },
			{ 'h', "hardcore" },
			{ 'i', "battlefield" },
			{ 'j', "broyale" },
			{ 'k', "builds" },
			{ 'm', "monthly" },
			{ 'o', "oxide" },
			{ 'p', "pve" },
			{ 'q', "premium" },
			{ 'r', "roleplay" },
			{ 's', "softcore" },
			{ 't', "tut" },
			{ 'u', "primitive" },
			{ 'v', "vanilla" },
			{ 'w', "weekly" },
			{ 'y', "carbon" },
			{ 'z', "modded" }
		};
		TagPrefixCharacter = '^';
		normalTags = new StringBuilder();
		tagToChar = charToTag.ToDictionary((KeyValuePair<char, string> x) => x.Value, (KeyValuePair<char, string> x) => x.Key);
	}

	public static string ShortenTag(string tag)
	{
		if (tagToChar.TryGetValue(tag, out var value))
		{
			return $"{TagPrefixCharacter}{value}";
		}
		return tag;
	}

	public static bool HasDecompressedTag(StringView tagView, string tag)
	{
		if (((StringView)(ref tagView)).Length == 2 && ((StringView)(ref tagView))[0] == TagPrefixCharacter)
		{
			char key = ((StringView)(ref tagView))[1];
			if (charToTag.TryGetValue(key, out var value))
			{
				return value == tag;
			}
		}
		return ((StringView)(ref tagView)).Equals(tag);
	}

	public static string DecompressSingleTag(StringView tagView)
	{
		if (((StringView)(ref tagView)).Length == 2 && ((StringView)(ref tagView))[0] == TagPrefixCharacter)
		{
			char key = ((StringView)(ref tagView))[1];
			if (charToTag.TryGetValue(key, out var value))
			{
				return value;
			}
		}
		return ((object)(StringView)(ref tagView)/*cast due to .constrained prefix*/).ToString();
	}

	public static string DecompressSingleTag(string tag)
	{
		if (tag.Length == 2 && tag[0] == TagPrefixCharacter)
		{
			char key = tag[1];
			if (charToTag.TryGetValue(key, out var value))
			{
				return value;
			}
		}
		return tag;
	}

	public static string CompressTags(string input)
	{
		if (input.Contains(TagPrefixCharacter))
		{
			Debug.LogError((object)$"Server tags '{input}' already contain unique compressed character '{TagPrefixCharacter}'");
		}
		string[] array = input.Split(',');
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = ShortenTag(array[i]);
		}
		return string.Join(',', array);
	}

	public static void DecompressTags(HashSet<string> tags, string compactTag)
	{
		for (int i = 1; i < compactTag.Length; i += 2)
		{
			char key = compactTag[i];
			if (charToTag.TryGetValue(key, out var value))
			{
				tags.Add(value);
			}
		}
	}
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[1000]
		{
			0, 0, 0, 2, 0, 0, 0, 51, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 67, 111,
			109, 109, 111, 110, 92, 65, 118, 97, 116, 97,
			114, 67, 97, 99, 104, 101, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 52, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 82, 117, 115, 116, 46, 80, 108,
			97, 116, 102, 111, 114, 109, 46, 67, 111, 109,
			109, 111, 110, 92, 73, 65, 99, 104, 105, 101,
			118, 101, 109, 101, 110, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 51, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 82, 117, 115, 116, 46, 80, 108,
			97, 116, 102, 111, 114, 109, 46, 67, 111, 109,
			109, 111, 110, 92, 73, 65, 117, 116, 104, 84,
			105, 99, 107, 101, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 60, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 67, 111, 109, 109,
			111, 110, 92, 73, 68, 111, 119, 110, 108, 111,
			97, 100, 97, 98, 108, 101, 67, 111, 110, 116,
			101, 110, 116, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 54, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			82, 117, 115, 116, 46, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 67, 111, 109, 109, 111, 110,
			92, 73, 80, 108, 97, 116, 102, 111, 114, 109,
			72, 111, 111, 107, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 67, 111, 109, 109,
			111, 110, 92, 73, 80, 108, 97, 116, 102, 111,
			114, 109, 83, 101, 114, 118, 105, 99, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 51,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 82, 117, 115, 116,
			46, 80, 108, 97, 116, 102, 111, 114, 109, 46,
			67, 111, 109, 109, 111, 110, 92, 73, 80, 108,
			97, 121, 101, 114, 73, 110, 102, 111, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 56, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 67,
			111, 109, 109, 111, 110, 92, 73, 80, 108, 97,
			121, 101, 114, 73, 110, 118, 101, 110, 116, 111,
			114, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 51, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 82,
			117, 115, 116, 46, 80, 108, 97, 116, 102, 111,
			114, 109, 46, 67, 111, 109, 109, 111, 110, 92,
			73, 80, 108, 97, 121, 101, 114, 73, 116, 101,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 61, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 67, 111, 109, 109, 111, 110, 92, 73,
			80, 108, 97, 121, 101, 114, 73, 116, 101, 109,
			68, 101, 102, 105, 110, 105, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 80, 108, 97, 116, 102, 111, 114, 109,
			46, 67, 111, 109, 109, 111, 110, 92, 73, 83,
			101, 114, 118, 101, 114, 81, 117, 101, 114, 121,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			56, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 80, 108, 97, 116, 102, 111, 114, 109,
			46, 67, 111, 109, 109, 111, 110, 92, 73, 87,
			111, 114, 107, 115, 104, 111, 112, 67, 111, 110,
			116, 101, 110, 116, 46, 99, 115, 0, 0, 0,
			2, 0, 0, 0, 56, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 67, 111, 109, 109, 111,
			110, 92, 80, 108, 97, 121, 101, 114, 73, 116,
			101, 109, 82, 101, 99, 105, 112, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 50, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 67,
			111, 109, 109, 111, 110, 92, 83, 101, 114, 118,
			101, 114, 73, 110, 102, 111, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 56, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 82, 117, 115, 116, 46, 80, 108,
			97, 116, 102, 111, 114, 109, 46, 67, 111, 109,
			109, 111, 110, 92, 83, 101, 114, 118, 101, 114,
			80, 97, 114, 97, 109, 101, 116, 101, 114, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			59, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 80, 108, 97, 116, 102, 111, 114, 109,
			46, 67, 111, 109, 109, 111, 110, 92, 83, 101,
			114, 118, 101, 114, 84, 97, 103, 67, 111, 109,
			112, 114, 101, 115, 115, 111, 114, 46, 99, 115
		};
		result.TypesData = new byte[412]
		{
			0, 0, 0, 0, 12, 124, 65, 118, 97, 116,
			97, 114, 67, 97, 99, 104, 101, 0, 0, 0,
			0, 17, 65, 118, 97, 116, 97, 114, 67, 97,
			99, 104, 101, 124, 69, 110, 116, 114, 121, 0,
			0, 0, 0, 13, 124, 73, 65, 99, 104, 105,
			101, 118, 101, 109, 101, 110, 116, 0, 0, 0,
			0, 12, 124, 73, 65, 117, 116, 104, 84, 105,
			99, 107, 101, 116, 0, 0, 0, 0, 21, 124,
			73, 68, 111, 119, 110, 108, 111, 97, 100, 97,
			98, 108, 101, 67, 111, 110, 116, 101, 110, 116,
			0, 0, 0, 0, 15, 124, 73, 80, 108, 97,
			116, 102, 111, 114, 109, 72, 111, 111, 107, 115,
			0, 0, 0, 0, 17, 124, 73, 80, 108, 97,
			116, 102, 111, 114, 109, 83, 101, 114, 118, 105,
			99, 101, 0, 0, 0, 0, 12, 124, 73, 80,
			108, 97, 121, 101, 114, 73, 110, 102, 111, 0,
			0, 0, 0, 17, 124, 73, 80, 108, 97, 121,
			101, 114, 73, 110, 118, 101, 110, 116, 111, 114,
			121, 0, 0, 0, 0, 12, 124, 73, 80, 108,
			97, 121, 101, 114, 73, 116, 101, 109, 0, 0,
			0, 0, 22, 124, 73, 80, 108, 97, 121, 101,
			114, 73, 116, 101, 109, 68, 101, 102, 105, 110,
			105, 116, 105, 111, 110, 0, 0, 0, 0, 13,
			124, 73, 83, 101, 114, 118, 101, 114, 81, 117,
			101, 114, 121, 0, 0, 0, 0, 21, 124, 67,
			111, 109, 112, 111, 115, 105, 116, 101, 83, 101,
			114, 118, 101, 114, 81, 117, 101, 114, 121, 0,
			0, 0, 0, 17, 124, 73, 87, 111, 114, 107,
			115, 104, 111, 112, 67, 111, 110, 116, 101, 110,
			116, 0, 0, 0, 0, 17, 124, 80, 108, 97,
			121, 101, 114, 73, 116, 101, 109, 82, 101, 99,
			105, 112, 101, 0, 0, 0, 0, 11, 124, 73,
			110, 103, 114, 101, 100, 105, 101, 110, 116, 0,
			0, 0, 0, 11, 124, 83, 101, 114, 118, 101,
			114, 73, 110, 102, 111, 0, 0, 0, 0, 37,
			82, 117, 115, 116, 46, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 67, 111, 109, 109, 111, 110,
			124, 83, 101, 114, 118, 101, 114, 80, 97, 114,
			97, 109, 101, 116, 101, 114, 115, 0, 0, 0,
			0, 20, 124, 83, 101, 114, 118, 101, 114, 84,
			97, 103, 67, 111, 109, 112, 114, 101, 115, 115,
			111, 114
		};
		result.TotalFiles = 16;
		result.TotalTypes = 19;
		result.IsEditorOnly = false;
		return result;
	}
}


using System;
using System.Net;

public readonly struct ServerParameters
{
	public string ShortName { get; }

	public string FullName { get; }

	public string Version { get; }

	public bool IsSecure { get; }

	public bool HideIP { get; }

	public IPAddress Address { get; }

	public ushort GamePort { get; }

	public ushort QueryPort { get; }

	public ServerParameters(string shortName, string fullName, string version, bool isSecure, bool hideIP, IPAddress address, ushort gamePort, ushort queryPort = 0)
	{
		ShortName = shortName ?? throw new ArgumentNullException("shortName");
		FullName = fullName ?? throw new ArgumentNullException("fullName");
		Version = version ?? throw new ArgumentNullException("version");
		IsSecure = isSecure;
		HideIP = hideIP;
		Address = address;
		GamePort = gamePort;
		QueryPort = queryPort;
	}
}


using UnityEngine;

private readonly struct Entry
{
	public readonly ulong UserId;

	public readonly Texture2D Texture;

	public Entry(ulong userId, Texture2D texture)
	{
		UserId = userId;
		Texture = texture;
	}
}


using System;

public readonly struct Ingredient : IEquatable<Ingredient>
{
	public int DefinitionId { get; }

	public int Amount { get; }

	public Ingredient(int definitionId, int amount)
	{
		DefinitionId = definitionId;
		Amount = amount;
	}

	public bool Equals(Ingredient other)
	{
		if (DefinitionId == other.DefinitionId)
		{
			return Amount == other.Amount;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is Ingredient other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return (DefinitionId * 397) ^ Amount;
	}

	public static bool operator ==(Ingredient left, Ingredient right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(Ingredient left, Ingredient right)
	{
		return !left.Equals(right);
	}
}


public enum Protocol
{
	Default,
	Raknet,
	Steamworks
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


