using System;
using System.Collections.Generic;

public static class TerrainBiome
{
	[Flags]
	public enum Enum
	{
		Arid = 1,
		Temperate = 2,
		Tundra = 4,
		Arctic = 8,
		Jungle = 0x10
	}

	public const int COUNT = 5;

	public const int EVERYTHING = -1;

	public const int NOTHING = 0;

	public const int ARID = 1;

	public const int TEMPERATE = 2;

	public const int TUNDRA = 4;

	public const int ARCTIC = 8;

	public const int JUNGLE = 16;

	public const int ARID_IDX = 0;

	public const int TEMPERATE_IDX = 1;

	public const int TUNDRA_IDX = 2;

	public const int ARCTIC_IDX = 3;

	public const int JUNGLE_IDX = 4;

	private static Dictionary<int, int> type2index = new Dictionary<int, int>
	{
		{ 1, 0 },
		{ 2, 1 },
		{ 4, 2 },
		{ 8, 3 },
		{ 16, 4 }
	};

	public static int TypeToIndex(int id)
	{
		return type2index[id];
	}

	public static int IndexToType(int idx)
	{
		return 1 << idx;
	}
}


using System.Collections.Generic;

public static class TerrainSplat
{
	public enum Enum
	{
		Dirt = 1,
		Snow = 2,
		Sand = 4,
		Rock = 8,
		Grass = 0x10,
		Forest = 0x20,
		Stones = 0x40,
		Gravel = 0x80
	}

	public const int COUNT = 8;

	public const int EVERYTHING = -1;

	public const int NOTHING = 0;

	public const int DIRT = 1;

	public const int SNOW = 2;

	public const int SAND = 4;

	public const int ROCK = 8;

	public const int GRASS = 16;

	public const int FOREST = 32;

	public const int STONES = 64;

	public const int GRAVEL = 128;

	public const int DIRT_IDX = 0;

	public const int SNOW_IDX = 1;

	public const int SAND_IDX = 2;

	public const int ROCK_IDX = 3;

	public const int GRASS_IDX = 4;

	public const int FOREST_IDX = 5;

	public const int STONES_IDX = 6;

	public const int GRAVEL_IDX = 7;

	private static Dictionary<int, int> type2index = new Dictionary<int, int>
	{
		{ 8, 3 },
		{ 16, 4 },
		{ 4, 2 },
		{ 1, 0 },
		{ 32, 5 },
		{ 64, 6 },
		{ 2, 1 },
		{ 128, 7 }
	};

	public static Dictionary<int, int> GetType2IndexDic()
	{
		return new Dictionary<int, int>(type2index);
	}

	public static int TypeToIndex(int id)
	{
		return type2index[id];
	}

	public static int IndexToType(int idx)
	{
		return 1 << idx;
	}
}


using System;

public static class TerrainTopology
{
	[Flags]
	public enum Enum
	{
		Field = 1,
		Cliff = 2,
		Summit = 4,
		Beachside = 8,
		Beach = 0x10,
		Forest = 0x20,
		Forestside = 0x40,
		Ocean = 0x80,
		Oceanside = 0x100,
		Decor = 0x200,
		Monument = 0x400,
		Road = 0x800,
		Roadside = 0x1000,
		Swamp = 0x2000,
		River = 0x4000,
		Riverside = 0x8000,
		Lake = 0x10000,
		Lakeside = 0x20000,
		Offshore = 0x40000,
		Rail = 0x80000,
		Railside = 0x100000,
		Building = 0x200000,
		Cliffside = 0x400000,
		Mountain = 0x800000,
		Clutter = 0x1000000,
		Alt = 0x2000000,
		Tier0 = 0x4000000,
		Tier1 = 0x8000000,
		Tier2 = 0x10000000,
		Mainland = 0x20000000,
		Hilltop = 0x40000000
	}

	public const int COUNT = 31;

	public const int EVERYTHING = -1;

	public const int NOTHING = 0;

	public const int FIELD = 1;

	public const int CLIFF = 2;

	public const int SUMMIT = 4;

	public const int BEACHSIDE = 8;

	public const int BEACH = 16;

	public const int FOREST = 32;

	public const int FORESTSIDE = 64;

	public const int OCEAN = 128;

	public const int OCEANSIDE = 256;

	public const int DECOR = 512;

	public const int MONUMENT = 1024;

	public const int ROAD = 2048;

	public const int ROADSIDE = 4096;

	public const int SWAMP = 8192;

	public const int RIVER = 16384;

	public const int RIVERSIDE = 32768;

	public const int LAKE = 65536;

	public const int LAKESIDE = 131072;

	public const int OFFSHORE = 262144;

	public const int RAIL = 524288;

	public const int RAILSIDE = 1048576;

	public const int BUILDING = 2097152;

	public const int CLIFFSIDE = 4194304;

	public const int MOUNTAIN = 8388608;

	public const int CLUTTER = 16777216;

	public const int ALT = 33554432;

	public const int TIER0 = 67108864;

	public const int TIER1 = 134217728;

	public const int TIER2 = 268435456;

	public const int MAINLAND = 536870912;

	public const int HILLTOP = 1073741824;

	public const int PATH = 526336;

	public const int PATHSIDE = 1052672;

	public const int WATER = 82048;

	public const int WATERSIDE = 164096;

	public const int SAND = 197016;
}


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Facepunch;
using LZ4;
using ProtoBuf;
using Unity.Collections;
using UnityEngine;

public class WorldSerialization
{
	public const uint PreviousVersion = 9u;

	public const uint CurrentVersion = 10u;

	public WorldData world = new WorldData
	{
		size = 4000u,
		maps = new List<MapData>(),
		prefabs = new List<PrefabData>(),
		paths = new List<PathData>()
	};

	public uint Version { get; private set; }

	public string Checksum { get; private set; }

	public long Timestamp { get; private set; }

	public WorldSerialization()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Expected O, but got Unknown
		Version = 10u;
		Checksum = null;
		Timestamp = 0L;
	}

	public MapData GetMap(string name)
	{
		for (int i = 0; i < world.maps.Count; i++)
		{
			if (world.maps[i].name == name)
			{
				return world.maps[i];
			}
		}
		return null;
	}

	public void AddMap(string name, byte[] data)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		MapData val = new MapData();
		val.name = name;
		val.data = data;
		world.maps.Add(val);
	}

	public IEnumerable<PrefabData> GetPrefabs(string category)
	{
		return world.prefabs.Where((PrefabData p) => p.category == category);
	}

	public void AddPrefab(string category, uint id, Vector3 position, Quaternion rotation, Vector3 scale)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		PrefabData val = new PrefabData();
		val.category = category;
		val.id = id;
		val.position = VectorData.op_Implicit(position);
		val.rotation = VectorData.op_Implicit(rotation);
		val.scale = VectorData.op_Implicit(scale);
		world.prefabs.Add(val);
	}

	public IEnumerable<PathData> GetPaths(string name)
	{
		return world.paths.Where((PathData p) => p.name.Contains(name));
	}

	public PathData GetPath(string name)
	{
		for (int i = 0; i < world.paths.Count; i++)
		{
			if (world.paths[i].name == name)
			{
				return world.paths[i];
			}
		}
		return null;
	}

	public void AddPath(PathData path)
	{
		world.paths.Add(path);
	}

	public void Clear()
	{
		world.maps.Clear();
		world.prefabs.Clear();
		world.paths.Clear();
		Version = 10u;
		Checksum = null;
	}

	public void Save(string fileName)
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Expected O, but got Unknown
		long value = DateTimeOffset.Now.ToUnixTimeMilliseconds();
		try
		{
			BufferStream val = Pool.Get<BufferStream>().Initialize();
			try
			{
				WorldData.Serialize(val, world);
				ArraySegment<byte> buffer = val.GetBuffer();
				using FileStream fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write, FileShare.None);
				using BinaryWriter binaryWriter = new BinaryWriter(fileStream);
				binaryWriter.Write(Version);
				binaryWriter.Write(value);
				LZ4Stream val2 = new LZ4Stream((Stream)fileStream, (LZ4StreamMode)0, (LZ4StreamFlags)0, 1048576);
				try
				{
					((Stream)(object)val2).Write(buffer.Array, buffer.Offset, buffer.Count);
					Checksum = Hash();
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
		catch (Exception ex)
		{
			Debug.LogError((object)ex);
		}
	}

	public void Load(string fileName)
	{
		try
		{
			using FileStream stream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read);
			ReadWorldData(stream);
		}
		catch (Exception ex)
		{
			Debug.LogError((object)ex.Message);
		}
	}

	public void Load(byte[] data)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Expected O, but got Unknown
		try
		{
			ByteArrayStream val = new ByteArrayStream(data, 0, data.Length);
			try
			{
				ReadWorldData((Stream)(object)val);
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
		catch (Exception ex)
		{
			Debug.LogError((object)ex.Message);
		}
	}

	public void ReadWorldData(Stream stream)
	{
		using (BinaryReader binaryReader = new BinaryReader(stream))
		{
			Version = binaryReader.ReadUInt32();
			if (Version == 9)
			{
				LoadWorldFromStream(stream);
				Version = 10u;
				Timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds();
			}
			else if (Version == 10)
			{
				Timestamp = binaryReader.ReadInt64();
				LoadWorldFromStream(stream);
			}
			Checksum = Hash();
		}
		void LoadWorldFromStream(Stream stream)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Expected O, but got Unknown
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Expected O, but got Unknown
			LZ4Stream val = new LZ4Stream(stream, (LZ4StreamMode)1, (LZ4StreamFlags)0, 1048576);
			try
			{
				NativeMemoryStream val2 = new NativeMemoryStream(60000000, (Allocator)2, true);
				try
				{
					((Stream)(object)val).CopyTo((Stream)(object)val2);
					((Stream)(object)val2).Position = 0L;
					BufferStream val3 = Pool.Get<BufferStream>().Initialize(val2.Span);
					try
					{
						world = WorldData.Deserialize(val3);
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
	}

	public void CalculateChecksum()
	{
		Checksum = Hash();
	}

	private string Hash()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		Checksum val = new Checksum();
		List<PrefabData> prefabs = world.prefabs;
		if (prefabs != null)
		{
			for (int i = 0; i < prefabs.Count; i++)
			{
				PrefabData val2 = prefabs[i];
				val.Add(val2.id);
				val.Add(val2.position.x, 3);
				val.Add(val2.position.y, 3);
				val.Add(val2.position.z, 3);
				val.Add(val2.rotation.x, 3);
				val.Add(val2.rotation.y, 3);
				val.Add(val2.rotation.z, 3);
				val.Add(val2.scale.x, 3);
				val.Add(val2.scale.y, 3);
				val.Add(val2.scale.z, 3);
			}
		}
		return val.MD5();
	}

	public int CalculateCount()
	{
		return world.maps.Count + world.prefabs.Count + world.paths.Count;
	}
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[209]
		{
			0, 0, 0, 1, 0, 0, 0, 42, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 87,
			111, 114, 108, 100, 92, 84, 101, 114, 114, 97,
			105, 110, 66, 105, 111, 109, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 42, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 87,
			111, 114, 108, 100, 92, 84, 101, 114, 114, 97,
			105, 110, 83, 112, 108, 97, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 87,
			111, 114, 108, 100, 92, 84, 101, 114, 114, 97,
			105, 110, 84, 111, 112, 111, 108, 111, 103, 121,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			48, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 87, 111, 114, 108, 100, 92, 87, 111,
			114, 108, 100, 83, 101, 114, 105, 97, 108, 105,
			122, 97, 116, 105, 111, 110, 46, 99, 115
		};
		result.TypesData = new byte[81]
		{
			0, 0, 0, 0, 13, 124, 84, 101, 114, 114,
			97, 105, 110, 66, 105, 111, 109, 101, 0, 0,
			0, 0, 13, 124, 84, 101, 114, 114, 97, 105,
			110, 83, 112, 108, 97, 116, 0, 0, 0, 0,
			16, 124, 84, 101, 114, 114, 97, 105, 110, 84,
			111, 112, 111, 108, 111, 103, 121, 0, 0, 0,
			0, 19, 124, 87, 111, 114, 108, 100, 83, 101,
			114, 105, 97, 108, 105, 122, 97, 116, 105, 111,
			110
		};
		result.TotalFiles = 4;
		result.TotalTypes = 4;
		result.IsEditorOnly = false;
		return result;
	}
}


using System;

[Flags]
public enum Enum
{
	Arid = 1,
	Temperate = 2,
	Tundra = 4,
	Arctic = 8,
	Jungle = 0x10
}


public enum Enum
{
	Dirt = 1,
	Snow = 2,
	Sand = 4,
	Rock = 8,
	Grass = 0x10,
	Forest = 0x20,
	Stones = 0x40,
	Gravel = 0x80
}


using System;

[Flags]
public enum Enum
{
	Field = 1,
	Cliff = 2,
	Summit = 4,
	Beachside = 8,
	Beach = 0x10,
	Forest = 0x20,
	Forestside = 0x40,
	Ocean = 0x80,
	Oceanside = 0x100,
	Decor = 0x200,
	Monument = 0x400,
	Road = 0x800,
	Roadside = 0x1000,
	Swamp = 0x2000,
	River = 0x4000,
	Riverside = 0x8000,
	Lake = 0x10000,
	Lakeside = 0x20000,
	Offshore = 0x40000,
	Rail = 0x80000,
	Railside = 0x100000,
	Building = 0x200000,
	Cliffside = 0x400000,
	Mountain = 0x800000,
	Clutter = 0x1000000,
	Alt = 0x2000000,
	Tier0 = 0x4000000,
	Tier1 = 0x8000000,
	Tier2 = 0x10000000,
	Mainland = 0x20000000,
	Hilltop = 0x40000000
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


