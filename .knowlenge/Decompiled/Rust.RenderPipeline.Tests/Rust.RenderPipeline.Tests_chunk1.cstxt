using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[145]
		{
			0, 0, 0, 1, 0, 0, 0, 55, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 84, 101,
			115, 116, 115, 92, 82, 117, 110, 116, 105, 109,
			101, 92, 77, 101, 115, 104, 66, 97, 108, 108,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			74, 92, 80, 97, 99, 107, 97, 103, 101, 115,
			92, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			92, 84, 101, 115, 116, 115, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 101, 114, 79, 98,
			106, 101, 99, 116, 77, 97, 116, 101, 114, 105,
			97, 108, 80, 114, 111, 112, 101, 114, 116, 105,
			101, 115, 46, 99, 115
		};
		result.TypesData = new byte[103]
		{
			0, 0, 0, 0, 37, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 69, 120, 97, 109, 112,
			108, 101, 115, 124, 77, 101, 115, 104, 66, 97,
			108, 108, 0, 0, 0, 0, 56, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 46, 69, 120, 97,
			109, 112, 108, 101, 115, 124, 80, 101, 114, 79,
			98, 106, 101, 99, 116, 77, 97, 116, 101, 114,
			105, 97, 108, 80, 114, 111, 112, 101, 114, 116,
			105, 101, 115
		};
		result.TotalFiles = 2;
		result.TotalTypes = 2;
		result.IsEditorOnly = false;
		return result;
	}
}


using UnityEngine;

public class MeshBall : MonoBehaviour
{
	private const int NUM_INSTANCES = 1023;

	private static readonly int baseColorId = Shader.PropertyToID("_BaseColor");

	private static readonly int metallicId = Shader.PropertyToID("_Metallic");

	private static readonly int smoothnessId = Shader.PropertyToID("_Smoothness");

	[SerializeField]
	private Mesh mesh;

	[SerializeField]
	private Material material;

	[SerializeField]
	private float radius = 10f;

	private Matrix4x4[] matrices = (Matrix4x4[])(object)new Matrix4x4[1023];

	private Vector4[] baseColors = (Vector4[])(object)new Vector4[1023];

	private float[] metallic = new float[1023];

	private float[] smoothness = new float[1023];

	private MaterialPropertyBlock materialPropertyBlock;

	private bool IsValid()
	{
		if ((Object)(object)mesh != (Object)null)
		{
			return (Object)(object)material != (Object)null;
		}
		return false;
	}

	private void Awake()
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		if (!IsValid())
		{
			Debug.LogError((object)"Failed to render MeshBall due to missing object reference!", (Object)(object)this);
			return;
		}
		for (int i = 0; i < matrices.Length; i++)
		{
			matrices[i] = Matrix4x4.TRS(Random.insideUnitSphere * radius, Quaternion.Euler(Random.value * 360f, Random.value * 360f, Random.value * 360f), Vector3.one * Random.Range(0.5f, 1.5f));
			baseColors[i] = new Vector4(Random.value, Random.value, Random.value, Random.Range(0.5f, 1f));
			metallic[i] = ((Random.value < 0.25f) ? 1f : 0f);
			smoothness[i] = Random.Range(0.05f, 0.95f);
		}
	}

	private void Update()
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Expected O, but got Unknown
		if (IsValid())
		{
			if (materialPropertyBlock == null)
			{
				materialPropertyBlock = new MaterialPropertyBlock();
				materialPropertyBlock.SetVectorArray(baseColorId, baseColors);
				materialPropertyBlock.SetFloatArray(metallicId, metallic);
				materialPropertyBlock.SetFloatArray(smoothnessId, smoothness);
			}
			Graphics.DrawMeshInstanced(mesh, 0, material, matrices, 1023, materialPropertyBlock);
		}
	}
}


using UnityEngine;

public class PerObjectMaterialProperties : MonoBehaviour
{
	private static readonly int baseColorId = Shader.PropertyToID("_BaseColor");

	private static readonly int cutoffId = Shader.PropertyToID("_Cutoff");

	private static readonly int metallicId = Shader.PropertyToID("_Metallic");

	private static readonly int smoothnessId = Shader.PropertyToID("_Smoothness");

	private static readonly int emissionColorId = Shader.PropertyToID("_EmissionColor");

	private static MaterialPropertyBlock materialPropertyBlock;

	[SerializeField]
	private Color baseColor = Color.white;

	[SerializeField]
	[Range(0f, 1f)]
	private float cutoff = 0.5f;

	[SerializeField]
	[Range(0f, 1f)]
	private float metallic;

	[SerializeField]
	[Range(0f, 1f)]
	private float smoothness = 0.5f;

	[SerializeField]
	[ColorUsage(false, true)]
	private Color emissionColor = Color.black;

	private void OnValidate()
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		if (materialPropertyBlock == null)
		{
			materialPropertyBlock = new MaterialPropertyBlock();
		}
		materialPropertyBlock.SetColor(baseColorId, baseColor);
		materialPropertyBlock.SetFloat(cutoffId, cutoff);
		materialPropertyBlock.SetFloat(metallicId, metallic);
		materialPropertyBlock.SetFloat(smoothnessId, smoothness);
		materialPropertyBlock.SetColor(emissionColorId, emissionColor);
		((Component)this).GetComponent<Renderer>().SetPropertyBlock(materialPropertyBlock);
	}

	private void Awake()
	{
		OnValidate();
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


