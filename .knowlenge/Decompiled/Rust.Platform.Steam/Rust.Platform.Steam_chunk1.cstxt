using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[1424]
		{
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 92, 73, 112, 76, 105, 115, 116,
			81, 117, 101, 114, 121, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 92, 83, 116, 101, 97, 109, 65, 99, 104,
			105, 101, 118, 101, 109, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 54, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 83,
			116, 101, 97, 109, 92, 83, 116, 101, 97, 109,
			65, 117, 116, 104, 84, 105, 99, 107, 101, 116,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			63, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 80, 108, 97, 116, 102, 111, 114, 109,
			46, 83, 116, 101, 97, 109, 92, 83, 116, 101,
			97, 109, 68, 111, 119, 110, 108, 111, 97, 100,
			97, 98, 108, 101, 67, 111, 110, 116, 101, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 53, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 83, 116, 101, 97, 109, 92, 83, 116,
			101, 97, 109, 73, 110, 118, 101, 110, 116, 111,
			114, 121, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 48, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 82,
			117, 115, 116, 46, 80, 108, 97, 116, 102, 111,
			114, 109, 46, 83, 116, 101, 97, 109, 92, 83,
			116, 101, 97, 109, 73, 116, 101, 109, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 83,
			116, 101, 97, 109, 92, 83, 116, 101, 97, 109,
			73, 116, 101, 109, 68, 101, 102, 105, 110, 105,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 59, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			92, 83, 116, 101, 97, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 65, 118, 97, 116, 97,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 52, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 83, 116, 101, 97, 109, 92, 83, 116,
			101, 97, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 83, 116, 101, 97, 109, 92, 83, 116,
			101, 97, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 68, 76, 67, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 92, 83, 116, 101, 97, 109, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 70, 97, 107, 101,
			83, 116, 101, 97, 109, 73, 100, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 62, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 92, 83, 116, 101, 97, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 73, 110,
			118, 101, 110, 116, 111, 114, 121, 46, 99, 115,
			0, 0, 0, 2, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 92, 83, 116, 101, 97, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 80, 108,
			97, 121, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 65, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			92, 83, 116, 101, 97, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 82, 105, 99, 104, 80,
			114, 101, 115, 101, 110, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 59, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 92, 83, 116, 101, 97, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 101,
			114, 118, 101, 114, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 63, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			92, 83, 116, 101, 97, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 101, 114, 118, 101,
			114, 76, 105, 115, 116, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 58, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 92, 83, 116, 101, 97, 109, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 97, 116,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 58, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 83, 116, 101, 97, 109, 92, 83, 116,
			101, 97, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 86, 111, 105, 99, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 50, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 92, 83, 116, 101, 97, 109, 80,
			108, 97, 121, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 92, 83, 116, 101, 97, 109, 83, 101, 114,
			118, 101, 114, 81, 117, 101, 114, 121, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 48, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 83,
			116, 101, 97, 109, 92, 83, 116, 101, 97, 109,
			85, 116, 105, 108, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 59, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			92, 83, 116, 101, 97, 109, 87, 111, 114, 107,
			115, 104, 111, 112, 67, 111, 110, 116, 101, 110,
			116, 46, 99, 115
		};
		result.TypesData = new byte[910]
		{
			0, 0, 0, 0, 31, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 83,
			116, 101, 97, 109, 124, 73, 112, 76, 105, 115,
			116, 81, 117, 101, 114, 121, 0, 0, 0, 0,
			36, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			124, 83, 116, 101, 97, 109, 65, 99, 104, 105,
			101, 118, 101, 109, 101, 110, 116, 0, 0, 0,
			0, 35, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 124, 83, 116, 101, 97, 109, 65, 117, 116,
			104, 84, 105, 99, 107, 101, 116, 0, 0, 0,
			0, 44, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 124, 83, 116, 101, 97, 109, 68, 111, 119,
			110, 108, 111, 97, 100, 97, 98, 108, 101, 67,
			111, 110, 116, 101, 110, 116, 0, 0, 0, 0,
			34, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			124, 83, 116, 101, 97, 109, 73, 110, 118, 101,
			110, 116, 111, 114, 121, 0, 0, 0, 0, 29,
			82, 117, 115, 116, 46, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 83, 116, 101, 97, 109, 124,
			83, 116, 101, 97, 109, 73, 116, 101, 109, 0,
			0, 0, 0, 39, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 124, 83, 116, 101, 97, 109, 73,
			116, 101, 109, 68, 101, 102, 105, 110, 105, 116,
			105, 111, 110, 1, 0, 0, 0, 33, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 83, 116, 101, 97, 109, 124, 83, 116,
			101, 97, 109, 80, 108, 97, 116, 102, 111, 114,
			109, 1, 0, 0, 0, 33, 82, 117, 115, 116,
			46, 80, 108, 97, 116, 102, 111, 114, 109, 46,
			83, 116, 101, 97, 109, 124, 83, 116, 101, 97,
			109, 80, 108, 97, 116, 102, 111, 114, 109, 1,
			0, 0, 0, 33, 82, 117, 115, 116, 46, 80,
			108, 97, 116, 102, 111, 114, 109, 46, 83, 116,
			101, 97, 109, 124, 83, 116, 101, 97, 109, 80,
			108, 97, 116, 102, 111, 114, 109, 1, 0, 0,
			0, 33, 82, 117, 115, 116, 46, 80, 108, 97,
			116, 102, 111, 114, 109, 46, 83, 116, 101, 97,
			109, 124, 83, 116, 101, 97, 109, 80, 108, 97,
			116, 102, 111, 114, 109, 1, 0, 0, 0, 33,
			82, 117, 115, 116, 46, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 83, 116, 101, 97, 109, 124,
			83, 116, 101, 97, 109, 80, 108, 97, 116, 102,
			111, 114, 109, 0, 0, 0, 0, 48, 82, 117,
			115, 116, 46, 80, 108, 97, 116, 102, 111, 114,
			109, 46, 83, 116, 101, 97, 109, 124, 83, 116,
			101, 97, 109, 65, 117, 116, 104, 84, 105, 99,
			107, 101, 116, 78, 117, 108, 108, 69, 120, 99,
			101, 112, 116, 105, 111, 110, 1, 0, 0, 0,
			33, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			124, 83, 116, 101, 97, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 1, 0, 0, 0, 33, 82,
			117, 115, 116, 46, 80, 108, 97, 116, 102, 111,
			114, 109, 46, 83, 116, 101, 97, 109, 124, 83,
			116, 101, 97, 109, 80, 108, 97, 116, 102, 111,
			114, 109, 1, 0, 0, 0, 33, 82, 117, 115,
			116, 46, 80, 108, 97, 116, 102, 111, 114, 109,
			46, 83, 116, 101, 97, 109, 124, 83, 116, 101,
			97, 109, 80, 108, 97, 116, 102, 111, 114, 109,
			1, 0, 0, 0, 33, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 83,
			116, 101, 97, 109, 124, 83, 116, 101, 97, 109,
			80, 108, 97, 116, 102, 111, 114, 109, 1, 0,
			0, 0, 33, 82, 117, 115, 116, 46, 80, 108,
			97, 116, 102, 111, 114, 109, 46, 83, 116, 101,
			97, 109, 124, 83, 116, 101, 97, 109, 80, 108,
			97, 116, 102, 111, 114, 109, 1, 0, 0, 0,
			33, 82, 117, 115, 116, 46, 80, 108, 97, 116,
			102, 111, 114, 109, 46, 83, 116, 101, 97, 109,
			124, 83, 116, 101, 97, 109, 80, 108, 97, 116,
			102, 111, 114, 109, 0, 0, 0, 0, 31, 82,
			117, 115, 116, 46, 80, 108, 97, 116, 102, 111,
			114, 109, 46, 83, 116, 101, 97, 109, 124, 83,
			116, 101, 97, 109, 80, 108, 97, 121, 101, 114,
			0, 0, 0, 0, 36, 82, 117, 115, 116, 46,
			80, 108, 97, 116, 102, 111, 114, 109, 46, 83,
			116, 101, 97, 109, 124, 83, 116, 101, 97, 109,
			83, 101, 114, 118, 101, 114, 81, 117, 101, 114,
			121, 0, 0, 0, 0, 29, 82, 117, 115, 116,
			46, 80, 108, 97, 116, 102, 111, 114, 109, 46,
			83, 116, 101, 97, 109, 124, 83, 116, 101, 97,
			109, 85, 116, 105, 108, 0, 0, 0, 0, 40,
			82, 117, 115, 116, 46, 80, 108, 97, 116, 102,
			111, 114, 109, 46, 83, 116, 101, 97, 109, 124,
			83, 116, 101, 97, 109, 87, 111, 114, 107, 115,
			104, 111, 112, 67, 111, 110, 116, 101, 110, 116
		};
		result.TotalFiles = 22;
		result.TotalTypes = 23;
		result.IsEditorOnly = false;
		return result;
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Rust.Platform.Steam;
using Steamworks.Data;
using Steamworks.ServerList;

internal class IpListQuery : IServerQuery, IDisposable
{
	private readonly List<string> _ips;

	private readonly CancellationTokenSource _cts;

	private readonly List<(string Key, string Value)> _filters;

	private readonly Action<ServerInfo> _serverFoundHandler;

	public IReadOnlyList<ServerInfo> Servers { get; }

	public event Action<ServerInfo> OnServerFound;

	public IpListQuery(IEnumerable<string> list)
	{
		IpListQuery ipListQuery = this;
		if (list == null)
		{
			throw new ArgumentNullException("list");
		}
		_ips = new List<string>(list);
		_cts = new CancellationTokenSource();
		_filters = new List<(string, string)>();
		List<ServerInfo> serverList = new List<ServerInfo>();
		Servers = serverList;
		HashSet<(uint, int)> foundServers = new HashSet<(uint, int)>();
		_serverFoundHandler = delegate(ServerInfo server)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			ServerInfo val = SteamPlatform.ToPlatformServer(server);
			if (foundServers.Add((((ServerInfo)(ref server)).AddressRaw, ((ServerInfo)(ref server)).QueryPort)))
			{
				serverList.Add(val);
				ipListQuery.OnServerFound?.Invoke(val);
			}
		};
	}

	public void Dispose()
	{
		_cts.Cancel();
	}

	public void AddFilter(string key, string value)
	{
		_filters.Add((key, value));
	}

	public async Task RunQueryAsync(double timeoutSeconds = 10.0)
	{
		if (_ips == null || _ips.Count == 0)
		{
			return;
		}
		List<string> source = _ips.ToList();
		List<(string, string)> filters = _filters.ToList();
		int count = 5;
		int num = 0;
		List<Task> list = new List<Task>();
		while (!_cts.Token.IsCancellationRequested)
		{
			List<string> list2 = source.Skip(num).Take(count).ToList();
			if (list2.Count == 0)
			{
				break;
			}
			list.Add(QueryServers(list2, filters, timeoutSeconds));
			num += list2.Count;
		}
		await Task.WhenAll(list);
	}

	private async Task QueryServers(List<string> servers, List<(string Key, string Value)> filters, double timeoutSeconds)
	{
		Internet query = new Internet();
		try
		{
			foreach (var (text, text2) in filters)
			{
				((Base)query).AddFilter(text, text2);
			}
			((Base)query).AddFilter("or", (servers.Count * 2).ToString());
			foreach (string server in servers)
			{
				((Base)query).AddFilter("gameaddr", server);
				((Base)query).AddFilter("addr", server);
			}
			((Base)query).OnResponsiveServer += _serverFoundHandler;
			await ((Base)query).RunQueryAsync((float)timeoutSeconds);
		}
		finally
		{
			((IDisposable)query)?.Dispose();
		}
	}
}


using Steamworks.Data;

public class SteamAchievement : IAchievement
{
	private Achievement _achievement;

	public string Key => ((Achievement)(ref _achievement)).Name;

	public bool IsUnlocked => ((Achievement)(ref _achievement)).State;

	internal SteamAchievement(Achievement achievement)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		_achievement = achievement;
	}

	public void Unlock()
	{
		((Achievement)(ref _achievement)).Trigger(true);
	}
}


using System;
using Steamworks;

public class SteamAuthTicket : IAuthTicket, IDisposable
{
	private readonly AuthTicket _ticket;

	public string Token { get; }

	public byte[] Data { get; }

	internal SteamAuthTicket(AuthTicket ticket)
	{
		_ticket = ticket ?? throw new ArgumentNullException("ticket");
		Token = BitConverter.ToString(ticket.Data).Replace("-", "");
		Data = ticket.Data;
	}

	public void Dispose()
	{
		AuthTicket ticket = _ticket;
		if (ticket != null)
		{
			ticket.Dispose();
		}
	}
}


using Steamworks;

public class SteamDownloadableContent : IDownloadableContent
{
	public int AppId { get; }

	public bool IsInstalled => SteamApps.IsDlcInstalled(AppId.op_Implicit(AppId));

	public SteamDownloadableContent(int appId)
	{
		AppId = appId;
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using Rust.Platform.Steam;
using Steamworks;

public class SteamInventory : IPlayerInventory, IDisposable
{
	public InventoryResult Value { get; }

	public IReadOnlyList<IPlayerItem> Items { get; }

	internal SteamInventory(InventoryResult inventory)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		Value = inventory;
		InventoryResult value = Value;
		InventoryItem[] items = ((InventoryResult)(ref value)).GetItems(true);
		if (items == null)
		{
			Items = new List<IPlayerItem>(0);
			return;
		}
		Items = (IReadOnlyList<IPlayerItem>)items.Select((InventoryItem i) => new SteamItem(i)).ToList();
	}

	public void Dispose()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		InventoryResult value = Value;
		((InventoryResult)(ref value)).Dispose();
	}

	public bool BelongsTo(ulong userId)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		InventoryResult value = Value;
		return ((InventoryResult)(ref value)).BelongsTo(SteamId.op_Implicit(userId));
	}

	public byte[] Serialize()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		InventoryResult value = Value;
		return ((InventoryResult)(ref value)).Serialize();
	}
}


using System;
using System.Threading.Tasks;
using Steamworks;

public class SteamItem : IPlayerItem
{
	public InventoryItem Value;

	public ulong Id => ((InventoryItem)(ref Value)).Id.Value;

	public int DefinitionId => ((InventoryItem)(ref Value)).DefId.Value;

	public int Quantity => ((InventoryItem)(ref Value)).Quantity;

	public DateTimeOffset Acquired => ((InventoryItem)(ref Value)).Acquired.ToUniversalTime();

	public ulong WorkshopId
	{
		get
		{
			if (!((InventoryItem)(ref Value)).Properties.TryGetValue("workshopid", out var value))
			{
				return 0uL;
			}
			return ulong.Parse(value);
		}
	}

	public string ItemShortName
	{
		get
		{
			if (!((InventoryItem)(ref Value)).Properties.TryGetValue("itemshortname", out var value))
			{
				return null;
			}
			return value;
		}
	}

	public SteamItem(InventoryItem item)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		Value = item;
	}

	public async Task Consume()
	{
		await ((InventoryItem)(ref Value)).ConsumeAsync(1);
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using Rust.Platform.Steam;
using Steamworks;

public class SteamItemDefinition : IPlayerItemDefinition, IEquatable<IPlayerItemDefinition>
{
	public InventoryDef Value { get; }

	public int DefinitionId => Value.Id;

	public string Name => Value.Name;

	public string Description => Value.Description;

	public string Type => Value.Type;

	public string IconUrl => Value.IconUrlLarge;

	public int LocalPrice => Value.LocalPrice;

	public string LocalPriceFormatted => Value.LocalPriceFormatted;

	public string PriceCategory => Value.PriceCategory;

	public bool IsGenerator => Value.IsGenerator;

	public bool IsTradable => Value.Tradable;

	public bool IsMarketable => Value.Marketable;

	public string StoreTags => Value.GetProperty<string>("store_tags");

	public DateTime Created => Value.Created;

	public DateTime Modified => Value.Modified;

	public string ItemShortName => Value.GetProperty<string>("itemshortname");

	public ulong WorkshopId => Value.GetProperty<ulong>("workshopid");

	public ulong WorkshopDownload => Value.GetProperty<ulong>("workshopdownload");

	internal SteamItemDefinition(InventoryDef value)
	{
		Value = value;
	}

	public static IPlayerItemDefinition FromInventoryDef(InventoryDef def)
	{
		return (IPlayerItemDefinition)(object)new SteamItemDefinition(def);
	}

	public IEnumerable<PlayerItemRecipe> GetRecipesContainingThis()
	{
		return Value.GetRecipesContainingThis().Select(SteamToPlatformRecipe);
	}

	private static PlayerItemRecipe SteamToPlatformRecipe(InventoryRecipe recipe)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		return new PlayerItemRecipe((IReadOnlyList<Ingredient>)((IEnumerable<Ingredient>)recipe.Ingredients).Select((Func<Ingredient, Ingredient>)((Ingredient i) => new Ingredient(i.DefinitionId, i.Count))).ToList(), (IPlayerItemDefinition)(object)new SteamItemDefinition(recipe.Result));
	}

	public bool Equals(IPlayerItemDefinition other)
	{
		return ((object)this).Equals((object?)other);
	}

	public override bool Equals(object obj)
	{
		if (obj == null)
		{
			return false;
		}
		if (this == obj)
		{
			return true;
		}
		if (obj.GetType() != GetType())
		{
			return false;
		}
		return Value.Equals(((SteamItemDefinition)obj).Value);
	}

	public override int GetHashCode()
	{
		if (!(Value != (InventoryDef)null))
		{
			return 0;
		}
		return ((object)Value).GetHashCode();
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Rust.Platform.Common;
using Rust.Platform.Steam;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

public class SteamPlatform : IPlatformService
{
	private IPlatformHooks _hooks;

	private bool _initialized;

	public bool IsValid => SteamServer.IsValid;

	public IReadOnlyList<IPlayerItemDefinition> ItemDefinitions { get; private set; }

	public bool Initialize(IPlatformHooks hooks)
	{
		if (_hooks != null && _hooks != hooks)
		{
			throw new InvalidOperationException("SteamPlatform was initialized with two different platform hooks");
		}
		_hooks = hooks ?? throw new ArgumentNullException("hooks");
		StartSteamServer();
		if (!_initialized)
		{
			SteamInventory.OnDefinitionsUpdated += OnDefinitionsUpdated;
			SteamInventory.LoadItemDefinitions();
			Dispatch.OnException = delegate(Exception e)
			{
				Debug.LogException(e);
			};
			_initialized = true;
		}
		return true;
	}

	public void Shutdown()
	{
		TimeWarning val = TimeWarning.New("Steamworks.SteamServer.Shutdown", 0);
		try
		{
			if (SteamServer.IsValid)
			{
				Debug.Log((object)"Steamworks Shutting Down");
				SteamServer.Shutdown();
				Debug.Log((object)"Okay");
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public void Update()
	{
		if (SteamServer.IsValid)
		{
			SteamServer.RunCallbacks();
		}
	}

	private static AuthResponse RemapAuthResponse(AuthResponse response)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Invalid comparison between Unknown and I4
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Invalid comparison between Unknown and I4
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Invalid comparison between Unknown and I4
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Invalid comparison between Unknown and I4
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Invalid comparison between Unknown and I4
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Invalid comparison between Unknown and I4
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Invalid comparison between Unknown and I4
		if ((int)response != 0)
		{
			if ((int)response != 3)
			{
				if ((int)response != 9)
				{
					if ((int)response != 5)
					{
						if ((int)response != 6)
						{
							if ((int)response != 7)
							{
								if ((int)response != 8)
								{
									if ((int)response != 10)
									{
										return (AuthResponse)0;
									}
									return (AuthResponse)6;
								}
								return (AuthResponse)5;
							}
							return (AuthResponse)7;
						}
						return (AuthResponse)8;
					}
					return (AuthResponse)1;
				}
				return (AuthResponse)4;
			}
			return (AuthResponse)3;
		}
		return (AuthResponse)2;
	}

	private static void DebugPrintSteamCallback(CallbackType type, string content, bool isServer)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		string arg = (isServer ? "SteamServer" : "SteamClient");
		Debug.Log((object)$"[{arg}] {type}: {content}");
	}

	public bool PlayerOwnsDownloadableContent(ulong userId, int appId)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Invalid comparison between Unknown and I4
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Invalid comparison between Unknown and I4
		UserHasLicenseForAppResult val = SteamServer.UserHasLicenseForApp(SteamId.op_Implicit(userId), AppId.op_Implicit(appId));
		if ((int)val == 2)
		{
			Debug.LogWarning((object)$"User tried to check DLC license but not authed ({userId})");
			return false;
		}
		return (int)val == 0;
	}

	public void RefreshItemDefinitions()
	{
		SteamInventory.LoadItemDefinitions();
	}

	public IPlayerItemDefinition GetItemDefinition(int definitionId)
	{
		if (ItemDefinitions == null)
		{
			return null;
		}
		foreach (IPlayerItemDefinition itemDefinition in ItemDefinitions)
		{
			if (itemDefinition.DefinitionId == definitionId)
			{
				return itemDefinition;
			}
		}
		return null;
	}

	private void OnDefinitionsUpdated()
	{
		ItemDefinitions = (IReadOnlyList<IPlayerItemDefinition>)SteamInventory.Definitions.Select((InventoryDef d) => new SteamItemDefinition(d)).ToList();
		_hooks.OnItemDefinitionsChanged();
	}

	public async Task<IPlayerInventory> DeserializeInventory(byte[] data)
	{
		InventoryResult? val = await SteamInventory.DeserializeAsync(data, -1);
		return (IPlayerInventory)(object)(val.HasValue ? new SteamInventory(val.Value) : null);
	}

	private void StartSteamServer()
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		if (SteamServer.IsValid)
		{
			return;
		}
		ServerParameters? serverParameters = _hooks.ServerParameters;
		if (serverParameters.HasValue)
		{
			ServerParameters value = serverParameters.Value;
			SteamServerInit val = default(SteamServerInit);
			((SteamServerInit)(ref val))..ctor(((ServerParameters)(ref value)).ShortName, ((ServerParameters)(ref value)).FullName);
			val.IpAddress = ((ServerParameters)(ref value)).Address;
			val.GamePort = ((ServerParameters)(ref value)).GamePort;
			val.Secure = ((ServerParameters)(ref value)).IsSecure;
			val.VersionString = ((ServerParameters)(ref value)).Version;
			if (((ServerParameters)(ref value)).QueryPort > 0)
			{
				val.QueryPort = ((ServerParameters)(ref value)).QueryPort;
			}
			else
			{
				val = ((SteamServerInit)(ref val)).WithQueryShareGamePort();
			}
			try
			{
				SteamServer.Init(AppId.op_Implicit(_hooks.SteamAppId), val, false);
			}
			catch (Exception ex)
			{
				Debug.LogWarning((object)("Couldn't initialize Steam Server (" + ex.Message + ")"));
				_hooks.Abort();
				return;
			}
			SteamServer.OnSteamServerConnectFailure += OnSteamConnectionFailure;
			SteamServer.OnSteamServersDisconnected += OnSteamServersDisconnected;
			SteamServer.OnSteamServersConnected += OnSteamConnected;
			SteamServer.DedicatedServer = true;
			if (((ServerParameters)(ref value)).HideIP)
			{
				SteamNetworkingSockets.RequestFakeIP(1);
			}
			SteamServer.LogOnAnonymous();
			SteamServer.OnValidateAuthTicketResponse += delegate(SteamId steamId, SteamId ownerSteamId, AuthResponse response)
			{
				//IL_0006: Unknown result type (might be due to invalid IL or missing references)
				//IL_000c: Unknown result type (might be due to invalid IL or missing references)
				//IL_0012: Unknown result type (might be due to invalid IL or missing references)
				//IL_0013: Unknown result type (might be due to invalid IL or missing references)
				_hooks.AuthSessionValidated(SteamId.op_Implicit(steamId), SteamId.op_Implicit(ownerSteamId), RemapAuthResponse(response), ((object)(AuthResponse)(ref response)/*cast due to .constrained prefix*/).ToString());
			};
		}
	}

	private void OnSteamServersDisconnected(Result result)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		Debug.LogWarning((object)$"SteamServer Disconnected ({result})");
	}

	private void OnSteamConnected()
	{
		Debug.Log((object)"SteamServer Connected");
	}

	private void OnSteamConnectionFailure(Result result, bool stilltrying)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		Debug.LogWarning((object)$"SteamServer Connection Failure ({result})");
	}

	public bool BeginPlayerSession(ulong userId, byte[] authToken)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return SteamServer.BeginAuthSession(authToken, SteamId.op_Implicit(userId));
	}

	public void UpdatePlayerSession(ulong userId, string userName)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		SteamServer.UpdatePlayer(SteamId.op_Implicit(userId), userName, 0);
	}

	public void EndPlayerSession(ulong userId)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		SteamServer.EndSession(SteamId.op_Implicit(userId));
	}

	internal static ServerInfo ToPlatformServer(ServerInfo info)
	{
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		return new ServerInfo(((ServerInfo)(ref info)).AppId, ((ServerInfo)(ref info)).Name, ((ServerInfo)(ref info)).Address, ((ServerInfo)(ref info)).ConnectionPort, ((ServerInfo)(ref info)).QueryPort, ((ServerInfo)(ref info)).Map, ((ServerInfo)(ref info)).TagString, ((ServerInfo)(ref info)).Secure, ((ServerInfo)(ref info)).Players, ((ServerInfo)(ref info)).MaxPlayers, ((ServerInfo)(ref info)).LastTimePlayed, ((ServerInfo)(ref info)).Ping, ((ServerInfo)(ref info)).SteamId, int.MaxValue);
	}

	internal static ServerInfo ToSteamServer(ServerInfo server)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		return new ServerInfo(((ServerInfo)(ref server)).AddressRaw, (ushort)((ServerInfo)(ref server)).ConnectionPort, (ushort)((ServerInfo)(ref server)).QueryPort, 0u);
	}

	public async Task<bool> LoadPlayerStats(ulong userId)
	{
		return (int)(await SteamServerStats.RequestUserStatsAsync(SteamId.op_Implicit(userId))) == 1;
	}

	public async Task<bool> SavePlayerStats(ulong userId)
	{
		return (int)(await SteamServerStats.StoreUserStats(SteamId.op_Implicit(userId))) == 1;
	}

	public long GetPlayerStatInt(ulong userId, string key, long defaultValue = 0L)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return SteamServerStats.GetInt(SteamId.op_Implicit(userId), key, (int)defaultValue);
	}

	public bool SetPlayerStatInt(ulong userId, string key, long value)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return SteamServerStats.SetInt(SteamId.op_Implicit(userId), key, (int)value);
	}
}


using System;

public sealed class SteamAuthTicketNullException : Exception
{
	public SteamAuthTicketNullException(string message)
		: base(message)
	{
	}
}


using System.Net;
using Steamworks;

public class SteamPlayer : IPlayerInfo
{
	public Friend Value { get; }

	public ulong UserId => SteamId.op_Implicit(Value.Id);

	public string UserName
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Friend value = Value;
			return ((Friend)(ref value)).Name;
		}
	}

	public bool IsOnline
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Friend value = Value;
			return ((Friend)(ref value)).IsOnline;
		}
	}

	public bool IsMe
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Friend value = Value;
			return ((Friend)(ref value)).IsMe;
		}
	}

	public bool IsFriend
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Friend value = Value;
			return ((Friend)(ref value)).IsFriend;
		}
	}

	public bool IsPlayingThisGame
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Friend value = Value;
			return ((Friend)(ref value)).IsPlayingThisGame;
		}
	}

	public string ServerEndpoint
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_0025: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			Friend value = Value;
			if (!((Friend)(ref value)).GameInfo.HasValue)
			{
				return null;
			}
			value = Value;
			FriendGameInfo value2 = ((Friend)(ref value)).GameInfo.Value;
			IPAddress ipAddress = ((FriendGameInfo)(ref value2)).IpAddress;
			value = Value;
			return $"{ipAddress}:{((Friend)(ref value)).GameInfo.Value.ConnectionPort}";
		}
	}

	public SteamPlayer(Friend value)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		Value = value;
	}
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Rust.Platform.Steam;
using Steamworks;
using Steamworks.Data;
using Steamworks.ServerList;

public class SteamServerQuery : IServerQuery, IDisposable
{
	public ServerQuerySet QuerySet { get; }

	public Base Query { get; private set; }

	public IReadOnlyList<ServerInfo> Servers { get; }

	public event Action<ServerInfo> OnServerFound;

	public SteamServerQuery(ServerQuerySet set, Base query)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		SteamServerQuery steamServerQuery = this;
		QuerySet = set;
		Query = query ?? throw new ArgumentNullException("query");
		List<ServerInfo> serverList = new List<ServerInfo>();
		Servers = serverList;
		Query.OnChanges += delegate
		{
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00be: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			if (steamServerQuery.Query != null)
			{
				foreach (ServerInfo item in steamServerQuery.Query.Responsive)
				{
					TimeWarning val = TimeWarning.New("SteamServerQuery.OnChanges.Responsive", 0);
					try
					{
						ServerInfo val2 = SteamPlatform.ToPlatformServer(item);
						serverList.Add(val2);
						steamServerQuery.OnServerFound?.Invoke(val2);
					}
					finally
					{
						((IDisposable)val)?.Dispose();
					}
				}
				foreach (ServerInfo item2 in steamServerQuery.Query.Unqueried)
				{
					TimeWarning val3 = TimeWarning.New("SteamServerQuery.OnChanges.Unqueried", 0);
					try
					{
						ServerInfo val4 = SteamPlatform.ToPlatformServer(item2);
						serverList.Add(val4);
						steamServerQuery.OnServerFound?.Invoke(val4);
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
				}
				steamServerQuery.Query.Responsive.Clear();
			}
		};
	}

	public void Dispose()
	{
		if (SteamClient.IsValid)
		{
			Base query = Query;
			if (query != null)
			{
				query.Dispose();
			}
		}
		Query = null;
	}

	public void AddFilter(string key, string value)
	{
		Query.AddFilter(key, value);
	}

	public async Task RunQueryAsync(double timeoutInSeconds)
	{
		await Query.RunQueryAsync((float)timeoutInSeconds);
	}
}


public static class SteamUtil
{
}


using System.Collections.Generic;
using Rust.Platform.Steam;
using Steamworks;
using Steamworks.Data;
using Steamworks.Ugc;

public class SteamWorkshopContent : IWorkshopContent
{
	public Item Value { get; }

	public ulong WorkshopId
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return PublishedFileId.op_Implicit(((Item)(ref value)).Id);
		}
	}

	public string Title
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).Title;
		}
	}

	public string Description
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).Description;
		}
	}

	public IEnumerable<string> Tags
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).Tags;
		}
	}

	public string Url
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).Url;
		}
	}

	public string PreviewImageUrl
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).PreviewImageUrl;
		}
	}

	public ulong OwnerId
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return SteamId.op_Implicit(((Item)(ref value)).Owner.Id);
		}
	}

	public IPlayerInfo Owner
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return (IPlayerInfo)(object)new SteamPlayer(((Item)(ref value)).Owner);
		}
	}

	public bool IsInstalled
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).IsInstalled;
		}
	}

	public bool IsDownloadPending
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).IsDownloadPending;
		}
	}

	public bool IsDownloading
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).IsDownloading;
		}
	}

	public string Directory
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			Item value = Value;
			return ((Item)(ref value)).Directory;
		}
	}

	public SteamWorkshopContent(Item item)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		Value = item;
	}

	public bool Download()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		Item value = Value;
		return ((Item)(ref value)).Download(true);
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


