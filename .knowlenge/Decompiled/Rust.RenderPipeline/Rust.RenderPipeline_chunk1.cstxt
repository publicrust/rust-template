using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[3510]
		{
			0, 0, 0, 2, 0, 0, 0, 61, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 67, 97, 109, 101,
			114, 97, 66, 117, 102, 102, 101, 114, 83, 101,
			116, 116, 105, 110, 103, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 67, 97, 109, 101, 114,
			97, 68, 101, 98, 117, 103, 103, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 55,
			92, 80, 97, 99, 107, 97, 103, 101, 115, 92,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 67, 97,
			109, 101, 114, 97, 82, 101, 110, 100, 101, 114,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 61, 92, 80, 97, 99, 107, 97, 103,
			101, 115, 92, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 92, 82, 117, 110, 116, 105, 109, 101,
			92, 67, 97, 109, 101, 114, 97, 82, 101, 110,
			100, 101, 114, 101, 114, 67, 111, 112, 105, 101,
			114, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 55, 92, 80, 97, 99, 107, 97, 103, 101,
			115, 92, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			67, 97, 109, 101, 114, 97, 83, 101, 116, 116,
			105, 110, 103, 115, 46, 99, 115, 0, 0, 0,
			4, 0, 0, 0, 57, 92, 80, 97, 99, 107,
			97, 103, 101, 115, 92, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 92, 82, 117, 110, 116, 105,
			109, 101, 92, 67, 111, 110, 116, 101, 120, 116,
			67, 111, 110, 116, 97, 105, 110, 101, 114, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 60,
			92, 80, 97, 99, 107, 97, 103, 101, 115, 92,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 70, 111,
			114, 119, 97, 114, 100, 80, 108, 117, 115, 83,
			101, 116, 116, 105, 110, 103, 115, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 61, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 73, 82, 101, 110,
			100, 101, 114, 71, 114, 97, 112, 104, 82, 101,
			99, 111, 114, 100, 101, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 67, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 97, 115, 115, 101,
			115, 92, 67, 111, 112, 121, 65, 116, 116, 97,
			99, 104, 109, 101, 110, 116, 115, 80, 97, 115,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 57, 92, 80, 97, 99, 107, 97, 103, 101,
			115, 92, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			80, 97, 115, 115, 101, 115, 92, 68, 101, 98,
			117, 103, 80, 97, 115, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 57, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 97, 115, 115, 101,
			115, 92, 70, 105, 110, 97, 108, 80, 97, 115,
			115, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 59, 92, 80, 97, 99, 107, 97, 103, 101,
			115, 92, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			80, 97, 115, 115, 101, 115, 92, 71, 66, 117,
			102, 102, 101, 114, 80, 97, 115, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 60, 92,
			80, 97, 99, 107, 97, 103, 101, 115, 92, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 92, 82,
			117, 110, 116, 105, 109, 101, 92, 80, 97, 115,
			115, 101, 115, 92, 71, 101, 111, 109, 101, 116,
			114, 121, 80, 97, 115, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 97, 115, 115, 101,
			115, 92, 71, 105, 122, 109, 111, 115, 80, 97,
			115, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 76, 92, 80, 97, 99, 107, 97, 103,
			101, 115, 92, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 92, 82, 117, 110, 116, 105, 109, 101,
			92, 80, 97, 115, 115, 101, 115, 92, 76, 105,
			103, 104, 116, 105, 110, 103, 92, 65, 100, 100,
			105, 116, 105, 111, 110, 97, 108, 76, 105, 103,
			104, 116, 68, 97, 116, 97, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 77, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 97, 115, 115, 101,
			115, 92, 76, 105, 103, 104, 116, 105, 110, 103,
			92, 65, 100, 100, 105, 116, 105, 111, 110, 97,
			108, 83, 104, 97, 100, 111, 119, 68, 97, 116,
			97, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 85, 92, 80, 97, 99, 107, 97, 103, 101,
			115, 92, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			80, 97, 115, 115, 101, 115, 92, 76, 105, 103,
			104, 116, 105, 110, 103, 92, 68, 101, 102, 101,
			114, 114, 101, 100, 73, 110, 100, 105, 114, 101,
			99, 116, 76, 105, 103, 104, 116, 105, 110, 103,
			80, 97, 115, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 77, 92, 80, 97, 99, 107,
			97, 103, 101, 115, 92, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 92, 82, 117, 110, 116, 105,
			109, 101, 92, 80, 97, 115, 115, 101, 115, 92,
			76, 105, 103, 104, 116, 105, 110, 103, 92, 68,
			101, 102, 101, 114, 114, 101, 100, 76, 105, 103,
			104, 116, 105, 110, 103, 80, 97, 115, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 77,
			92, 80, 97, 99, 107, 97, 103, 101, 115, 92,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 80, 97,
			115, 115, 101, 115, 92, 76, 105, 103, 104, 116,
			105, 110, 103, 92, 68, 105, 114, 101, 99, 116,
			105, 111, 110, 97, 108, 76, 105, 103, 104, 116,
			68, 97, 116, 97, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 81, 92, 80, 97, 99, 107,
			97, 103, 101, 115, 92, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 92, 82, 117, 110, 116, 105,
			109, 101, 92, 80, 97, 115, 115, 101, 115, 92,
			76, 105, 103, 104, 116, 105, 110, 103, 92, 68,
			105, 114, 101, 99, 116, 105, 111, 110, 97, 108,
			83, 104, 97, 100, 111, 119, 67, 97, 115, 99,
			97, 100, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 76, 92, 80, 97, 99, 107, 97,
			103, 101, 115, 92, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 92, 82, 117, 110, 116, 105, 109,
			101, 92, 80, 97, 115, 115, 101, 115, 92, 76,
			105, 103, 104, 116, 105, 110, 103, 92, 70, 111,
			114, 119, 97, 114, 100, 80, 108, 117, 115, 84,
			105, 108, 101, 115, 74, 111, 98, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 69, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 80, 97, 115, 115,
			101, 115, 92, 76, 105, 103, 104, 116, 105, 110,
			103, 92, 76, 105, 103, 104, 116, 105, 110, 103,
			80, 97, 115, 115, 46, 99, 115, 0, 0, 0,
			3, 0, 0, 0, 64, 92, 80, 97, 99, 107,
			97, 103, 101, 115, 92, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 92, 82, 117, 110, 116, 105,
			109, 101, 92, 80, 97, 115, 115, 101, 115, 92,
			76, 105, 103, 104, 116, 105, 110, 103, 92, 83,
			104, 97, 100, 111, 119, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 72, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 97, 115, 115, 101,
			115, 92, 80, 111, 115, 116, 80, 114, 111, 99,
			101, 115, 115, 105, 110, 103, 92, 66, 108, 111,
			111, 109, 80, 97, 115, 115, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 75, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 80, 97, 115, 115, 101,
			115, 92, 80, 111, 115, 116, 80, 114, 111, 99,
			101, 115, 115, 105, 110, 103, 92, 67, 111, 108,
			111, 114, 76, 117, 116, 80, 97, 115, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 76,
			92, 80, 97, 99, 107, 97, 103, 101, 115, 92,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 80, 97,
			115, 115, 101, 115, 92, 80, 111, 115, 116, 80,
			114, 111, 99, 101, 115, 115, 105, 110, 103, 92,
			80, 111, 115, 116, 70, 88, 66, 108, 105, 116,
			116, 101, 114, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 73, 92, 80, 97, 99, 107, 97,
			103, 101, 115, 92, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 92, 82, 117, 110, 116, 105, 109,
			101, 92, 80, 97, 115, 115, 101, 115, 92, 80,
			111, 115, 116, 80, 114, 111, 99, 101, 115, 115,
			105, 110, 103, 92, 80, 111, 115, 116, 70, 88,
			80, 97, 115, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 57, 92, 80, 97, 99, 107,
			97, 103, 101, 115, 92, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 92, 82, 117, 110, 116, 105,
			109, 101, 92, 80, 97, 115, 115, 101, 115, 92,
			83, 101, 116, 117, 112, 80, 97, 115, 115, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 58,
			92, 80, 97, 99, 107, 97, 103, 101, 115, 92,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 80, 97,
			115, 115, 101, 115, 92, 83, 107, 121, 98, 111,
			120, 80, 97, 115, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 80, 97, 99,
			107, 97, 103, 101, 115, 92, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 80, 97, 115, 115, 101, 115,
			92, 85, 110, 115, 117, 112, 112, 111, 114, 116,
			101, 100, 83, 104, 97, 100, 101, 114, 115, 80,
			97, 115, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 54, 92, 80, 97, 99, 107, 97,
			103, 101, 115, 92, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 92, 82, 117, 110, 116, 105, 109,
			101, 92, 80, 105, 112, 101, 108, 105, 110, 101,
			85, 116, 105, 108, 115, 46, 99, 115, 0, 0,
			0, 8, 0, 0, 0, 55, 92, 80, 97, 99,
			107, 97, 103, 101, 115, 92, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 80, 111, 115, 116, 70, 88,
			83, 101, 116, 116, 105, 110, 103, 115, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 62, 92,
			80, 97, 99, 107, 97, 103, 101, 115, 92, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 92, 82,
			117, 110, 116, 105, 109, 101, 92, 82, 101, 105,
			110, 116, 101, 114, 112, 114, 101, 116, 69, 120,
			116, 101, 110, 115, 105, 111, 110, 115, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 75, 92,
			80, 97, 99, 107, 97, 103, 101, 115, 92, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 92, 82,
			117, 110, 116, 105, 109, 101, 92, 82, 101, 110,
			100, 101, 114, 105, 110, 103, 67, 111, 110, 116,
			101, 120, 116, 92, 82, 117, 115, 116, 67, 97,
			109, 101, 114, 97, 67, 111, 110, 116, 101, 120,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 78, 92, 80, 97, 99, 107, 97, 103, 101,
			115, 92, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			82, 101, 110, 100, 101, 114, 105, 110, 103, 67,
			111, 110, 116, 101, 120, 116, 92, 82, 117, 115,
			116, 82, 101, 110, 100, 101, 114, 105, 110, 103,
			67, 111, 110, 116, 101, 120, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 81, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 82, 101, 110, 100,
			101, 114, 105, 110, 103, 67, 111, 110, 116, 101,
			120, 116, 92, 82, 117, 115, 116, 82, 101, 115,
			111, 117, 114, 99, 101, 68, 97, 116, 97, 67,
			111, 110, 116, 101, 120, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 73, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 82, 101, 110, 100, 101,
			114, 105, 110, 103, 76, 97, 121, 101, 114, 77,
			97, 115, 107, 70, 105, 101, 108, 100, 65, 116,
			116, 114, 105, 98, 117, 116, 101, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 56, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 82, 101, 110, 100,
			101, 114, 80, 97, 115, 115, 69, 118, 101, 110,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 53, 92, 80, 97, 99, 107, 97, 103, 101,
			115, 92, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 92, 82, 117, 110, 116, 105, 109, 101, 92,
			82, 117, 115, 116, 82, 101, 110, 100, 101, 114,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 57, 92, 80, 97, 99, 107, 97, 103,
			101, 115, 92, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 92, 82, 117, 110, 116, 105, 109, 101,
			92, 82, 117, 115, 116, 82, 101, 110, 100, 101,
			114, 101, 114, 68, 97, 116, 97, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 60, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 82, 117, 115, 116,
			82, 101, 110, 100, 101, 114, 101, 114, 70, 101,
			97, 116, 117, 114, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 55, 92, 80, 97, 99,
			107, 97, 103, 101, 115, 92, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 82, 117, 115, 116, 82, 101,
			110, 100, 101, 114, 80, 97, 115, 115, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 59, 92,
			80, 97, 99, 107, 97, 103, 101, 115, 92, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 92, 82,
			117, 110, 116, 105, 109, 101, 92, 82, 117, 115,
			116, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 64, 92, 80, 97, 99,
			107, 97, 103, 101, 115, 92, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 92, 82, 117, 110, 116,
			105, 109, 101, 92, 82, 117, 115, 116, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 65, 115, 115, 101, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 71, 92, 80,
			97, 99, 107, 97, 103, 101, 115, 92, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 92, 82, 117,
			110, 116, 105, 109, 101, 92, 82, 117, 115, 116,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 65, 115, 115, 101, 116, 46,
			69, 100, 105, 116, 111, 114, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 65, 92, 80, 97,
			99, 107, 97, 103, 101, 115, 92, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 92, 82, 117, 110,
			116, 105, 109, 101, 92, 82, 117, 115, 116, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 67, 97, 109, 101, 114, 97, 46,
			99, 115, 0, 0, 0, 3, 0, 0, 0, 67,
			92, 80, 97, 99, 107, 97, 103, 101, 115, 92,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 92,
			82, 117, 110, 116, 105, 109, 101, 92, 82, 117,
			115, 116, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 83, 101, 116, 116,
			105, 110, 103, 115, 46, 99, 115, 0, 0, 0,
			3, 0, 0, 0, 55, 92, 80, 97, 99, 107,
			97, 103, 101, 115, 92, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 92, 82, 117, 110, 116, 105,
			109, 101, 92, 83, 104, 97, 100, 111, 119, 83,
			101, 116, 116, 105, 110, 103, 115, 46, 99, 115
		};
		result.TypesData = new byte[4063]
		{
			0, 0, 0, 0, 48, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 124, 67, 97, 109, 101, 114, 97, 66,
			117, 102, 102, 101, 114, 83, 101, 116, 116, 105,
			110, 103, 115, 0, 0, 0, 0, 41, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 124, 70, 120, 97,
			97, 83, 101, 116, 116, 105, 110, 103, 115, 0,
			0, 0, 0, 42, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 46, 82, 117, 110, 116, 105, 109,
			101, 124, 67, 97, 109, 101, 114, 97, 68, 101,
			98, 117, 103, 103, 101, 114, 0, 0, 0, 0,
			42, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 124, 67,
			97, 109, 101, 114, 97, 82, 101, 110, 100, 101,
			114, 101, 114, 0, 0, 0, 0, 48, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 124, 67, 97, 109, 101,
			114, 97, 82, 101, 110, 100, 101, 114, 101, 114,
			67, 111, 112, 105, 101, 114, 0, 0, 0, 0,
			42, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 124, 67,
			97, 109, 101, 114, 97, 83, 101, 116, 116, 105,
			110, 103, 115, 0, 0, 0, 0, 57, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 67, 97, 109, 101,
			114, 97, 83, 101, 116, 116, 105, 110, 103, 115,
			124, 70, 105, 110, 97, 108, 66, 108, 101, 110,
			100, 77, 111, 100, 101, 0, 0, 0, 0, 44,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 46,
			82, 117, 110, 116, 105, 109, 101, 124, 67, 111,
			110, 116, 101, 120, 116, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 0, 0, 0, 0, 51, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 46, 82,
			117, 110, 116, 105, 109, 101, 46, 67, 111, 110,
			116, 101, 120, 116, 67, 111, 110, 116, 97, 105,
			110, 101, 114, 124, 84, 121, 112, 101, 73, 100,
			0, 0, 0, 0, 49, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 67, 111, 110, 116, 101, 120, 116,
			67, 111, 110, 116, 97, 105, 110, 101, 114, 124,
			73, 116, 101, 109, 0, 0, 0, 0, 39, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 46, 82,
			117, 110, 116, 105, 109, 101, 124, 67, 111, 110,
			116, 101, 120, 116, 73, 116, 101, 109, 0, 0,
			0, 0, 47, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			124, 70, 111, 114, 119, 97, 114, 100, 80, 108,
			117, 115, 83, 101, 116, 116, 105, 110, 103, 115,
			0, 0, 0, 0, 48, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 124, 73, 82, 101, 110, 100, 101, 114,
			71, 114, 97, 112, 104, 82, 101, 99, 111, 114,
			100, 101, 114, 0, 0, 0, 0, 54, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 97, 115, 115,
			101, 115, 124, 67, 111, 112, 121, 65, 116, 116,
			97, 99, 104, 109, 101, 110, 116, 115, 80, 97,
			115, 115, 0, 0, 0, 0, 44, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 46, 82, 117, 110,
			116, 105, 109, 101, 46, 80, 97, 115, 115, 101,
			115, 124, 68, 101, 98, 117, 103, 80, 97, 115,
			115, 0, 0, 0, 0, 44, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 82, 117, 110, 116,
			105, 109, 101, 46, 80, 97, 115, 115, 101, 115,
			124, 70, 105, 110, 97, 108, 80, 97, 115, 115,
			0, 0, 0, 0, 46, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 80, 97, 115, 115, 101, 115, 124,
			71, 66, 117, 102, 102, 101, 114, 80, 97, 115,
			115, 0, 0, 0, 0, 47, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 82, 117, 110, 116,
			105, 109, 101, 46, 80, 97, 115, 115, 101, 115,
			124, 71, 101, 111, 109, 101, 116, 114, 121, 80,
			97, 115, 115, 0, 0, 0, 0, 45, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 97, 115, 115,
			101, 115, 124, 71, 105, 122, 109, 111, 115, 80,
			97, 115, 115, 0, 0, 0, 0, 63, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 97, 115, 115,
			101, 115, 46, 76, 105, 103, 104, 116, 105, 110,
			103, 124, 65, 100, 100, 105, 116, 105, 111, 110,
			97, 108, 76, 105, 103, 104, 116, 68, 97, 116,
			97, 0, 0, 0, 0, 64, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 82, 117, 110, 116,
			105, 109, 101, 46, 80, 97, 115, 115, 101, 115,
			46, 76, 105, 103, 104, 116, 105, 110, 103, 124,
			65, 100, 100, 105, 116, 105, 111, 110, 97, 108,
			83, 104, 97, 100, 111, 119, 68, 97, 116, 97,
			0, 0, 0, 0, 72, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 80, 97, 115, 115, 101, 115, 46,
			76, 105, 103, 104, 116, 105, 110, 103, 124, 68,
			101, 102, 101, 114, 114, 101, 100, 73, 110, 100,
			105, 114, 101, 99, 116, 76, 105, 103, 104, 116,
			105, 110, 103, 80, 97, 115, 115, 0, 0, 0,
			0, 64, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 46, 82, 117, 110, 116, 105, 109, 101, 46,
			80, 97, 115, 115, 101, 115, 46, 76, 105, 103,
			104, 116, 105, 110, 103, 124, 68, 101, 102, 101,
			114, 114, 101, 100, 76, 105, 103, 104, 116, 105,
			110, 103, 80, 97, 115, 115, 0, 0, 0, 0,
			64, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 46, 80,
			97, 115, 115, 101, 115, 46, 76, 105, 103, 104,
			116, 105, 110, 103, 124, 68, 105, 114, 101, 99,
			116, 105, 111, 110, 97, 108, 76, 105, 103, 104,
			116, 68, 97, 116, 97, 0, 0, 0, 0, 68,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 46,
			82, 117, 110, 116, 105, 109, 101, 46, 80, 97,
			115, 115, 101, 115, 46, 76, 105, 103, 104, 116,
			105, 110, 103, 124, 68, 105, 114, 101, 99, 116,
			105, 111, 110, 97, 108, 83, 104, 97, 100, 111,
			119, 67, 97, 115, 99, 97, 100, 101, 0, 0,
			0, 0, 63, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			46, 80, 97, 115, 115, 101, 115, 46, 76, 105,
			103, 104, 116, 105, 110, 103, 124, 70, 111, 114,
			119, 97, 114, 100, 80, 108, 117, 115, 84, 105,
			108, 101, 115, 74, 111, 98, 0, 0, 0, 0,
			56, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 46, 80,
			97, 115, 115, 101, 115, 46, 76, 105, 103, 104,
			116, 105, 110, 103, 124, 76, 105, 103, 104, 116,
			105, 110, 103, 80, 97, 115, 115, 0, 0, 0,
			0, 51, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 46, 82, 117, 110, 116, 105, 109, 101, 46,
			80, 97, 115, 115, 101, 115, 46, 76, 105, 103,
			104, 116, 105, 110, 103, 124, 83, 104, 97, 100,
			111, 119, 115, 0, 0, 0, 0, 76, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 97, 115, 115,
			101, 115, 46, 76, 105, 103, 104, 116, 105, 110,
			103, 46, 83, 104, 97, 100, 111, 119, 115, 124,
			83, 104, 97, 100, 111, 119, 101, 100, 68, 105,
			114, 101, 99, 116, 105, 111, 110, 97, 108, 76,
			105, 103, 104, 116, 0, 0, 0, 0, 75, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 46, 82,
			117, 110, 116, 105, 109, 101, 46, 80, 97, 115,
			115, 101, 115, 46, 76, 105, 103, 104, 116, 105,
			110, 103, 46, 83, 104, 97, 100, 111, 119, 115,
			124, 83, 104, 97, 100, 111, 119, 101, 100, 65,
			100, 100, 105, 116, 105, 111, 110, 97, 108, 76,
			105, 103, 104, 116, 0, 0, 0, 0, 59, 82,
			117, 115, 116, 46, 82, 101, 110, 100, 101, 114,
			80, 105, 112, 101, 108, 105, 110, 101, 46, 82,
			117, 110, 116, 105, 109, 101, 46, 80, 97, 115,
			115, 101, 115, 46, 80, 111, 115, 116, 80, 114,
			111, 99, 101, 115, 115, 105, 110, 103, 124, 66,
			108, 111, 111, 109, 80, 97, 115, 115, 0, 0,
			0, 0, 62, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			46, 80, 97, 115, 115, 101, 115, 46, 80, 111,
			115, 116, 80, 114, 111, 99, 101, 115, 115, 105,
			110, 103, 124, 67, 111, 108, 111, 114, 76, 117,
			116, 80, 97, 115, 115, 0, 0, 0, 0, 63,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 46,
			82, 117, 110, 116, 105, 109, 101, 46, 80, 97,
			115, 115, 101, 115, 46, 80, 111, 115, 116, 80,
			114, 111, 99, 101, 115, 115, 105, 110, 103, 124,
			80, 111, 115, 116, 70, 88, 66, 108, 105, 116,
			116, 101, 114, 0, 0, 0, 0, 60, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 97, 115, 115,
			101, 115, 46, 80, 111, 115, 116, 80, 114, 111,
			99, 101, 115, 115, 105, 110, 103, 124, 80, 111,
			115, 116, 70, 88, 80, 97, 115, 115, 0, 0,
			0, 0, 44, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			46, 80, 97, 115, 115, 101, 115, 124, 83, 101,
			116, 117, 112, 80, 97, 115, 115, 0, 0, 0,
			0, 45, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 46, 82, 117, 110, 116, 105, 109, 101, 46,
			80, 97, 115, 115, 101, 115, 124, 83, 107, 121,
			98, 111, 120, 80, 97, 115, 115, 0, 0, 0,
			0, 57, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 46, 82, 117, 110, 116, 105, 109, 101, 46,
			80, 97, 115, 115, 101, 115, 124, 85, 110, 115,
			117, 112, 112, 111, 114, 116, 101, 100, 83, 104,
			97, 100, 101, 114, 115, 80, 97, 115, 115, 0,
			0, 0, 0, 41, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 46, 82, 117, 110, 116, 105, 109,
			101, 124, 80, 105, 112, 101, 108, 105, 110, 101,
			85, 116, 105, 108, 115, 0, 0, 0, 0, 42,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 46,
			82, 117, 110, 116, 105, 109, 101, 124, 80, 111,
			115, 116, 70, 88, 83, 101, 116, 116, 105, 110,
			103, 115, 0, 0, 0, 0, 56, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 46, 82, 117, 110,
			116, 105, 109, 101, 46, 80, 111, 115, 116, 70,
			88, 83, 101, 116, 116, 105, 110, 103, 115, 124,
			66, 108, 111, 111, 109, 83, 101, 116, 116, 105,
			110, 103, 115, 0, 0, 0, 0, 67, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 111, 115, 116,
			70, 88, 83, 101, 116, 116, 105, 110, 103, 115,
			124, 67, 111, 108, 111, 114, 65, 100, 106, 117,
			115, 116, 109, 101, 110, 116, 115, 83, 101, 116,
			116, 105, 110, 103, 115, 0, 0, 0, 0, 63,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 46,
			82, 117, 110, 116, 105, 109, 101, 46, 80, 111,
			115, 116, 70, 88, 83, 101, 116, 116, 105, 110,
			103, 115, 124, 67, 104, 97, 110, 110, 101, 108,
			77, 105, 120, 101, 114, 83, 101, 116, 116, 105,
			110, 103, 115, 0, 0, 0, 0, 63, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 80, 111, 115, 116,
			70, 88, 83, 101, 116, 116, 105, 110, 103, 115,
			124, 87, 104, 105, 116, 101, 66, 97, 108, 97,
			110, 99, 101, 83, 101, 116, 116, 105, 110, 103,
			115, 0, 0, 0, 0, 62, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 82, 117, 110, 116,
			105, 109, 101, 46, 80, 111, 115, 116, 70, 88,
			83, 101, 116, 116, 105, 110, 103, 115, 124, 83,
			112, 108, 105, 116, 84, 111, 110, 105, 110, 103,
			83, 101, 116, 116, 105, 110, 103, 115, 0, 0,
			0, 0, 62, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			46, 80, 111, 115, 116, 70, 88, 83, 101, 116,
			116, 105, 110, 103, 115, 124, 84, 111, 110, 101,
			77, 97, 112, 112, 105, 110, 103, 83, 101, 116,
			116, 105, 110, 103, 115, 0, 0, 0, 0, 76,
			82, 117, 115, 116, 46, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 46,
			82, 117, 110, 116, 105, 109, 101, 46, 80, 111,
			115, 116, 70, 88, 83, 101, 116, 116, 105, 110,
			103, 115, 124, 83, 104, 97, 100, 111, 119, 115,
			77, 105, 100, 116, 111, 110, 101, 115, 72, 105,
			103, 104, 108, 105, 103, 104, 116, 115, 83, 101,
			116, 116, 105, 110, 103, 115, 0, 0, 0, 0,
			49, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 124, 82,
			101, 105, 110, 116, 101, 114, 112, 114, 101, 116,
			69, 120, 116, 101, 110, 115, 105, 111, 110, 115,
			0, 0, 0, 0, 58, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 82, 101, 105, 110, 116, 101, 114,
			112, 114, 101, 116, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 115, 124, 73, 110, 116, 70, 108,
			111, 97, 116, 0, 0, 0, 0, 62, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 82, 101, 110, 100,
			101, 114, 105, 110, 103, 67, 111, 110, 116, 101,
			120, 116, 124, 82, 117, 115, 116, 67, 97, 109,
			101, 114, 97, 67, 111, 110, 116, 101, 120, 116,
			0, 0, 0, 0, 65, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 82, 101, 110, 100, 101, 114, 105,
			110, 103, 67, 111, 110, 116, 101, 120, 116, 124,
			82, 117, 115, 116, 82, 101, 110, 100, 101, 114,
			105, 110, 103, 67, 111, 110, 116, 101, 120, 116,
			0, 0, 0, 0, 68, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 82, 101, 110, 100, 101, 114, 105,
			110, 103, 67, 111, 110, 116, 101, 120, 116, 124,
			82, 117, 115, 116, 82, 101, 115, 111, 117, 114,
			99, 101, 68, 97, 116, 97, 67, 111, 110, 116,
			101, 120, 116, 0, 0, 0, 0, 60, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 124, 82, 101, 110, 100,
			101, 114, 105, 110, 103, 76, 97, 121, 101, 114,
			77, 97, 115, 107, 70, 105, 101, 108, 100, 65,
			116, 116, 114, 105, 98, 117, 116, 101, 0, 0,
			0, 0, 54, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			124, 82, 101, 110, 100, 101, 114, 80, 97, 115,
			115, 69, 118, 101, 110, 116, 115, 69, 110, 117,
			109, 86, 97, 108, 117, 101, 115, 0, 0, 0,
			0, 40, 82, 117, 115, 116, 46, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 46, 82, 117, 110, 116, 105, 109, 101, 124,
			82, 117, 115, 116, 82, 101, 110, 100, 101, 114,
			101, 114, 0, 0, 0, 0, 44, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 46, 82, 117, 110,
			116, 105, 109, 101, 124, 82, 117, 115, 116, 82,
			101, 110, 100, 101, 114, 101, 114, 68, 97, 116,
			97, 0, 0, 0, 0, 47, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 82, 117, 110, 116,
			105, 109, 101, 124, 82, 117, 115, 116, 82, 101,
			110, 100, 101, 114, 101, 114, 70, 101, 97, 116,
			117, 114, 101, 0, 0, 0, 0, 42, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 124, 82, 117, 115, 116,
			82, 101, 110, 100, 101, 114, 80, 97, 115, 115,
			0, 0, 0, 0, 46, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 124, 82, 117, 115, 116, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 0, 0, 0, 0, 64, 82, 117, 115, 116,
			46, 82, 101, 110, 100, 101, 114, 80, 105, 112,
			101, 108, 105, 110, 101, 46, 82, 117, 110, 116,
			105, 109, 101, 46, 82, 117, 115, 116, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 124, 80, 105, 112, 101, 108, 105, 110,
			101, 77, 97, 116, 101, 114, 105, 97, 108, 115,
			1, 0, 0, 0, 51, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 124, 82, 117, 115, 116, 82, 101, 110,
			100, 101, 114, 80, 105, 112, 101, 108, 105, 110,
			101, 65, 115, 115, 101, 116, 1, 0, 0, 0,
			51, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 124, 82,
			117, 115, 116, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 65, 115, 115,
			101, 116, 0, 0, 0, 0, 52, 82, 117, 115,
			116, 46, 82, 101, 110, 100, 101, 114, 80, 105,
			112, 101, 108, 105, 110, 101, 46, 82, 117, 110,
			116, 105, 109, 101, 124, 82, 117, 115, 116, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 67, 97, 109, 101, 114, 97, 0,
			0, 0, 0, 54, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 46, 82, 117, 110, 116, 105, 109,
			101, 124, 82, 117, 115, 116, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			83, 101, 116, 116, 105, 110, 103, 115, 0, 0,
			0, 0, 70, 82, 117, 115, 116, 46, 82, 101,
			110, 100, 101, 114, 80, 105, 112, 101, 108, 105,
			110, 101, 46, 82, 117, 110, 116, 105, 109, 101,
			46, 82, 117, 115, 116, 82, 101, 110, 100, 101,
			114, 80, 105, 112, 101, 108, 105, 110, 101, 83,
			101, 116, 116, 105, 110, 103, 115, 124, 80, 105,
			112, 101, 108, 105, 110, 101, 83, 104, 97, 100,
			101, 114, 115, 0, 0, 0, 0, 71, 82, 117,
			115, 116, 46, 82, 101, 110, 100, 101, 114, 80,
			105, 112, 101, 108, 105, 110, 101, 46, 82, 117,
			110, 116, 105, 109, 101, 46, 82, 117, 115, 116,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 83, 101, 116, 116, 105, 110,
			103, 115, 124, 80, 105, 112, 101, 108, 105, 110,
			101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
			0, 0, 0, 42, 82, 117, 115, 116, 46, 82,
			101, 110, 100, 101, 114, 80, 105, 112, 101, 108,
			105, 110, 101, 46, 82, 117, 110, 116, 105, 109,
			101, 124, 83, 104, 97, 100, 111, 119, 83, 101,
			116, 116, 105, 110, 103, 115, 0, 0, 0, 0,
			59, 82, 117, 115, 116, 46, 82, 101, 110, 100,
			101, 114, 80, 105, 112, 101, 108, 105, 110, 101,
			46, 82, 117, 110, 116, 105, 109, 101, 46, 83,
			104, 97, 100, 111, 119, 83, 101, 116, 116, 105,
			110, 103, 115, 124, 68, 105, 114, 101, 99, 116,
			105, 111, 110, 97, 108, 76, 105, 103, 104, 116,
			0, 0, 0, 0, 58, 82, 117, 115, 116, 46,
			82, 101, 110, 100, 101, 114, 80, 105, 112, 101,
			108, 105, 110, 101, 46, 82, 117, 110, 116, 105,
			109, 101, 46, 83, 104, 97, 100, 111, 119, 83,
			101, 116, 116, 105, 110, 103, 115, 124, 65, 100,
			100, 105, 116, 105, 111, 110, 97, 108, 76, 105,
			103, 104, 116
		};
		result.TotalFiles = 48;
		result.TotalTypes = 68;
		result.IsEditorOnly = false;
		return result;
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;

[Serializable]
public struct CameraBufferSettings
{
	[Serializable]
	public struct FxaaSettings
	{
		public enum Quality
		{
			Low,
			Medium,
			High
		}

		public bool enabled;

		public Quality quality;

		[Range(0.0312f, 0.0833f)]
		public float fixedThreshold;

		[Range(0.063f, 0.333f)]
		public float relativeThreshold;

		[Range(0f, 1f)]
		public float subpixelBlending;
	}

	public enum BicubicRescalingMode
	{
		Off,
		UpOnly,
		UpAndDown
	}

	public bool allowHDR;

	public bool copyColor;

	public bool copyColorReflection;

	public bool copyDepth;

	public bool copyDepthReflection;

	[Range(0.1f, 2f)]
	public float renderScale;

	public BicubicRescalingMode bicubicRescaling;

	public FxaaSettings fxaaSettings;
}


using System.Diagnostics;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class CameraDebugger
{
	private enum ShaderPasses
	{
		GBufferRendering,
		IndirectLightingRendering,
		ForwardPlusTiles
	}

	private enum GBufferTarget
	{
		None,
		GBuffer0,
		GBuffer1,
		GBuffer2,
		GBuffer3
	}

	private enum DeferredIndirectLightingTarget
	{
		None,
		Diffuse,
		Specular
	}

	private const string FORWARD_PLUS_PANEL_NAME = "Forward+";

	private const string DEFERRED_PANEL_NAME = "Deferred";

	private static readonly int opacityID = Shader.PropertyToID("_DebugOpacity");

	private static readonly int selectedGBufferTextureId = Shader.PropertyToID("_SelectedGBufferTexture");

	private static readonly int showGBufferTargetAlphaId = Shader.PropertyToID("_ShowGBufferTargetAlpha");

	private static readonly int selectedIndirectLightingTextureId = Shader.PropertyToID("_SelectedIndirectLightingTexture");

	private static readonly int showIndirectLightingAlphaId = Shader.PropertyToID("_ShowIndirectLightingAlpha");

	private static Material material;

	private static bool showTiles;

	private static float opacity = 0.5f;

	private static GBufferTarget gBufferTarget;

	private static bool showGBufferTargetAlpha;

	private static DeferredIndirectLightingTarget indirectLightingTarget;

	private static bool showIndirectLightingAlpha;

	public static bool IsActive
	{
		get
		{
			if ((!showTiles || !(opacity > 0f)) && gBufferTarget == GBufferTarget.None)
			{
				return indirectLightingTarget != DeferredIndirectLightingTarget.None;
			}
			return true;
		}
	}

	[Conditional("DEVELOPMENT_BUILD")]
	[Conditional("UNITY_EDITOR")]
	public static void Initialize(Material cameraDebuggerMaterial)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Expected O, but got Unknown
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Expected O, but got Unknown
		//IL_00d5: Expected O, but got Unknown
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Expected O, but got Unknown
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Expected O, but got Unknown
		//IL_013d: Expected O, but got Unknown
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Expected O, but got Unknown
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Expected O, but got Unknown
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0221: Expected O, but got Unknown
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Expected O, but got Unknown
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Expected O, but got Unknown
		//IL_0289: Expected O, but got Unknown
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Expected O, but got Unknown
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Expected O, but got Unknown
		//IL_033a: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Expected O, but got Unknown
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_038d: Expected O, but got Unknown
		//IL_038d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b2: Expected O, but got Unknown
		//IL_03b3: Expected O, but got Unknown
		material = cameraDebuggerMaterial;
		ObservableList<Widget> children = DebugManager.instance.GetPanel("Forward+", true, 0, false).children;
		Widget[] array = new Widget[2];
		FloatField val = new FloatField
		{
			displayName = "Opacity",
			tooltip = "Opacity of the debug overlay.",
			min = () => 0f,
			max = () => 1f
		};
		((Field<float>)val).getter = () => opacity;
		((Field<float>)val).setter = delegate(float value)
		{
			opacity = value;
		};
		array[0] = (Widget)val;
		BoolField val2 = new BoolField
		{
			displayName = "Show Tiles",
			tooltip = "Whether the debug overlay is shown."
		};
		((Field<bool>)val2).getter = () => showTiles;
		((Field<bool>)val2).setter = delegate(bool value)
		{
			showTiles = value;
		};
		array[1] = (Widget)val2;
		children.Add((Widget[])(object)array);
		ObservableList<Widget> children2 = DebugManager.instance.GetPanel("Deferred", true, 0, false).children;
		Widget[] array2 = new Widget[4];
		EnumField val3 = new EnumField
		{
			displayName = "Show GBuffer Output",
			tooltip = "Displays the output of the selected GBuffer render target.",
			getIndex = () => (int)gBufferTarget,
			setIndex = delegate(int value)
			{
				gBufferTarget = (GBufferTarget)value;
			}
		};
		((Field<int>)val3).getter = () => (int)gBufferTarget;
		((Field<int>)val3).setter = delegate(int value)
		{
			gBufferTarget = (GBufferTarget)value;
		};
		val3.autoEnum = typeof(GBufferTarget);
		array2[0] = (Widget)val3;
		BoolField val4 = new BoolField
		{
			displayName = "Show GBuffer Target Alpha",
			tooltip = "Whether the selected GBuffer target is displaying the alpha of the texture rather than RGB."
		};
		((Field<bool>)val4).getter = () => showGBufferTargetAlpha;
		((Field<bool>)val4).setter = delegate(bool value)
		{
			showGBufferTargetAlpha = value;
		};
		array2[1] = (Widget)val4;
		EnumField val5 = new EnumField
		{
			displayName = "Show Deferred Indirect Lighting Target",
			tooltip = "Displays the selected deferred indirect lighting render target.",
			getIndex = () => (int)indirectLightingTarget,
			setIndex = delegate(int value)
			{
				indirectLightingTarget = (DeferredIndirectLightingTarget)value;
			}
		};
		((Field<int>)val5).getter = () => (int)indirectLightingTarget;
		((Field<int>)val5).setter = delegate(int value)
		{
			indirectLightingTarget = (DeferredIndirectLightingTarget)value;
		};
		val5.autoEnum = typeof(DeferredIndirectLightingTarget);
		array2[2] = (Widget)val5;
		BoolField val6 = new BoolField
		{
			displayName = "Show Indirect Lighting Target Alpha",
			tooltip = "Whether the selected Indirect Lighting target is displaying the alpha of the texture rather than RGB."
		};
		((Field<bool>)val6).getter = () => showIndirectLightingAlpha;
		((Field<bool>)val6).setter = delegate(bool value)
		{
			showIndirectLightingAlpha = value;
		};
		array2[3] = (Widget)val6;
		children2.Add((Widget[])(object)array2);
	}

	private static void DrawFullscreenEffect(CommandBuffer cmd, ShaderPasses pass)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		cmd.DrawProcedural(Matrix4x4.identity, material, (int)pass, (MeshTopology)0, 3);
	}

	[Conditional("DEVELOPMENT_BUILD")]
	[Conditional("UNITY_EDITOR")]
	public static void Render(RenderGraphContext context, DebugPass pass)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		if (gBufferTarget != 0)
		{
			cmd.SetGlobalTexture(selectedGBufferTextureId, TextureHandle.op_Implicit(pass.gBufferHandles[(int)(gBufferTarget - 1)]));
			cmd.SetGlobalInt(showGBufferTargetAlphaId, showGBufferTargetAlpha ? 1 : 0);
			DrawFullscreenEffect(cmd, ShaderPasses.GBufferRendering);
		}
		if (indirectLightingTarget != 0)
		{
			TextureHandle val = (TextureHandle)(indirectLightingTarget switch
			{
				DeferredIndirectLightingTarget.Diffuse => pass.indirectDiffuseHandle, 
				DeferredIndirectLightingTarget.Specular => pass.indirectSpecularHandle, 
				DeferredIndirectLightingTarget.None => TextureHandle.nullHandle, 
				_ => TextureHandle.nullHandle, 
			});
			cmd.SetGlobalTexture(selectedIndirectLightingTextureId, TextureHandle.op_Implicit(val));
			cmd.SetGlobalInt(showIndirectLightingAlphaId, showIndirectLightingAlpha ? 1 : 0);
			DrawFullscreenEffect(cmd, ShaderPasses.IndirectLightingRendering);
		}
		if (showTiles)
		{
			cmd.SetGlobalFloat(opacityID, opacity);
			DrawFullscreenEffect(cmd, ShaderPasses.ForwardPlusTiles);
		}
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(cmd);
		cmd.Clear();
	}

	[Conditional("DEVELOPMENT_BUILD")]
	[Conditional("UNITY_EDITOR")]
	public static void Cleanup()
	{
		DebugManager.instance.RemovePanel("Forward+");
		DebugManager.instance.RemovePanel("Deferred");
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.Passes.Lighting;
using Rust.RenderPipeline.Runtime.Passes.PostProcessing;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class CameraRenderer
{
	public const float RENDERSCALE_MIN = 0.1f;

	public const float RENDERSCALE_MAX = 2f;

	private static readonly CameraSettings defaultCameraSettings = new CameraSettings();

	private readonly RustRenderPipeline.PipelineMaterials pipelineMaterials;

	private RustRenderer rustRenderer;

	public CameraRenderer(RustRenderPipeline.PipelineMaterials pipelineMaterials)
	{
		this.pipelineMaterials = pipelineMaterials;
	}

	public void Render(RenderGraph renderGraph, ScriptableRenderContext context, Camera camera, RustRenderPipelineSettings settings, RustRendererData rustRendererData)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Invalid comparison between Unknown and I4
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		CameraBufferSettings cameraBuffer = settings.cameraBuffer;
		PostFXSettings postFXSettings = settings.postFXSettings;
		ShadowSettings shadows = settings.shadows;
		if (rustRenderer == null)
		{
			rustRenderer = new RustRenderer();
		}
		rustRenderer.Initialize(rustRendererData);
		RustRenderPipelineCamera rustRenderPipelineCamera = default(RustRenderPipelineCamera);
		ProfilingSampler val;
		CameraSettings settings2;
		if (((Component)camera).TryGetComponent<RustRenderPipelineCamera>(ref rustRenderPipelineCamera))
		{
			val = rustRenderPipelineCamera.Sampler;
			settings2 = rustRenderPipelineCamera.Settings;
		}
		else
		{
			val = ProfilingSampler.Get<CameraType>(camera.cameraType);
			settings2 = defaultCameraSettings;
		}
		if (settings2.overridePostFX)
		{
			postFXSettings = settings2.postFXSettings;
		}
		bool postProcessingActive = settings.postProcessingEnabled && settings2.postProcessingEnabled && (Object)(object)postFXSettings != (Object)null && PostFXSettings.AreApplicableTo(camera);
		bool useOpaqueColorTexture;
		bool useDepthTexture;
		if ((int)camera.cameraType == 16)
		{
			useOpaqueColorTexture = cameraBuffer.copyColorReflection;
			useDepthTexture = cameraBuffer.copyDepthReflection || settings.renderPath == RustRenderPipelineSettings.RenderPath.Deferred;
		}
		else
		{
			useOpaqueColorTexture = cameraBuffer.copyColor && settings2.copyColor;
			useDepthTexture = (cameraBuffer.copyDepth && settings2.copyDepth) || settings.renderPath == RustRenderPipelineSettings.RenderPath.Deferred;
		}
		float renderScale = settings2.GetRenderScale(cameraBuffer.renderScale);
		bool flag = !Mathf.Approximately(renderScale, 1f);
		ScriptableCullingParameters val2 = default(ScriptableCullingParameters);
		if (!camera.TryGetCullingParameters(ref val2))
		{
			return;
		}
		((ScriptableCullingParameters)(ref val2)).shadowDistance = Mathf.Min(shadows.maxDistance, camera.farClipPlane);
		CullingResults cullResults = ((ScriptableRenderContext)(ref context)).Cull(ref val2);
		cameraBuffer.allowHDR &= camera.allowHDR;
		Vector2Int cameraBufferSize = default(Vector2Int);
		if (flag)
		{
			renderScale = Mathf.Clamp(renderScale, 0.1f, 2f);
			((Vector2Int)(ref cameraBufferSize)).x = (int)((float)camera.pixelWidth * renderScale);
			((Vector2Int)(ref cameraBufferSize)).y = (int)((float)camera.pixelHeight * renderScale);
		}
		else
		{
			((Vector2Int)(ref cameraBufferSize)).x = camera.pixelWidth;
			((Vector2Int)(ref cameraBufferSize)).y = camera.pixelHeight;
		}
		cameraBuffer.fxaaSettings.enabled &= settings2.allowFXAA;
		using ContextContainer contextContainer = rustRenderer.FrameData;
		RustRenderingContext rustRenderingContext = contextContainer.Create<RustRenderingContext>();
		rustRenderingContext.cullResults = cullResults;
		rustRenderingContext.pipelineSettings = settings;
		RustCameraContext rustCameraContext = contextContainer.Create<RustCameraContext>();
		rustCameraContext.Camera = camera;
		rustCameraContext.CameraSettings = settings2;
		rustCameraContext.CameraBufferSettings = cameraBuffer;
		rustCameraContext.CameraBufferSize = cameraBufferSize;
		rustCameraContext.UseOpaqueColorTexture = useOpaqueColorTexture;
		rustCameraContext.UseDepthTexture = useDepthTexture;
		rustCameraContext.PostProcessingActive = postProcessingActive;
		rustCameraContext.PostFXSettings = postFXSettings;
		RustResourceDataContext rustResourceDataContext = contextContainer.Create<RustResourceDataContext>();
		rustRenderer.AddRenderPasses();
		RenderGraphParameters val3 = default(RenderGraphParameters);
		val3.commandBuffer = CommandBufferPool.Get();
		val3.currentFrameIndex = Time.frameCount;
		val3.executionName = val.name;
		val3.rendererListCulling = true;
		val3.scriptableRenderContext = context;
		RenderGraphParameters val4 = val3;
		RenderGraphExecution val5 = renderGraph.RecordAndExecute(ref val4);
		try
		{
			RenderGraphProfilingScope val6 = default(RenderGraphProfilingScope);
			((RenderGraphProfilingScope)(ref val6))..ctor(renderGraph, val);
			try
			{
				rustResourceDataContext.InitFrame();
				switch (settings.renderPath)
				{
				case RustRenderPipelineSettings.RenderPath.ForwardPlus:
					ForwardPlusRenderPath(renderGraph);
					break;
				case RustRenderPipelineSettings.RenderPath.Deferred:
					DeferredRenderPath(renderGraph);
					break;
				default:
					throw new ArgumentOutOfRangeException();
				}
				rustResourceDataContext.EndFrame();
			}
			finally
			{
				((IDisposable)(RenderGraphProfilingScope)(ref val6)/*cast due to .constrained prefix*/).Dispose();
			}
		}
		finally
		{
			((IDisposable)(RenderGraphExecution)(ref val5)/*cast due to .constrained prefix*/).Dispose();
		}
		((ScriptableRenderContext)(ref context)).ExecuteCommandBuffer(val4.commandBuffer);
		((ScriptableRenderContext)(ref context)).Submit();
		CommandBufferPool.Release(val4.commandBuffer);
	}

	private void ForwardPlusRenderPath(RenderGraph renderGraph)
	{
		ContextContainer frameData = rustRenderer.FrameData;
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		CameraRendererCopier copier = new CameraRendererCopier(pipelineMaterials.cameraRendererMaterial, rustCameraContext.Camera, rustCameraContext.CameraSettings.finalBlendMode);
		LightingPass.Record(renderGraph, frameData);
		SetupPass.Record(renderGraph, frameData);
		GeometryPass.Record(renderGraph, frameData, opaque: true);
		SkyboxPass.Record(renderGraph, frameData);
		CopyAttachmentsPass.Record(renderGraph, frameData, rustCameraContext.UseOpaqueColorTexture, rustCameraContext.UseDepthTexture, copier);
		GeometryPass.Record(renderGraph, frameData, opaque: false);
		if (rustCameraContext.PostProcessingActive)
		{
			PostFXPass.Record(renderGraph, frameData);
		}
		else
		{
			FinalPass.Record(renderGraph, frameData, copier);
		}
	}

	private void DeferredRenderPath(RenderGraph renderGraph)
	{
		ContextContainer frameData = rustRenderer.FrameData;
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		CameraRendererCopier copier = new CameraRendererCopier(pipelineMaterials.cameraRendererMaterial, rustCameraContext.Camera, rustCameraContext.CameraSettings.finalBlendMode);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.BeforeRendering, RenderPassEvent.BeforeRenderingShadows);
		LightingPass.Record(renderGraph, frameData);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingShadows);
		SetupPass.Record(renderGraph, frameData);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.BeforeRenderingPrePasses, RenderPassEvent.AfterRenderingPrePasses);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.BeforeRenderingGBuffer);
		GBufferPass.Record(renderGraph, frameData);
		CopyAttachmentsPass.Record(renderGraph, frameData, copyColor: false, rustCameraContext.UseDepthTexture, copier);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingGBuffer, RenderPassEvent.BeforeRenderingDeferredIndirectLighting);
		DeferredIndirectLightingPass.Record_DrawIndirectLighting(renderGraph, frameData, pipelineMaterials.deferredIndirectLightingMaterial);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingDeferredIndirectLighting, RenderPassEvent.BeforeRenderingCombinedIndirectLighting);
		DeferredIndirectLightingPass.Record_CombineIndirectLighting(renderGraph, frameData, pipelineMaterials.deferredIndirectLightingMaterial);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingCombinedIndirectLighting, RenderPassEvent.BeforeRenderingDeferredLights);
		DeferredLightingPass.Record(renderGraph, frameData, pipelineMaterials.deferredLightingMaterial);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingDeferredLights);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.BeforeRenderingSkybox);
		SkyboxPass.Record(renderGraph, frameData);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingSkybox);
		CopyAttachmentsPass.Record(renderGraph, frameData, rustCameraContext.UseOpaqueColorTexture, copyDepth: false, copier);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.BeforeRenderingTransparents);
		GeometryPass.Record(renderGraph, frameData, opaque: false);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingTransparents);
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.BeforeRenderingPostProcessing);
		if (rustCameraContext.PostProcessingActive)
		{
			PostFXPass.Record(renderGraph, frameData);
		}
		else
		{
			FinalPass.Record(renderGraph, frameData, copier);
		}
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		rustResourceDataContext.ActiveColorID = RustResourceDataContext.ActiveID.BackBuffer;
		rustResourceDataContext.ActiveDepthID = RustResourceDataContext.ActiveID.BackBuffer;
		rustRenderer.RecordCustomRenderGraphPasses(renderGraph, RenderPassEvent.AfterRenderingPostProcessing, RenderPassEvent.AfterRendering);
	}

	public void Dispose()
	{
		rustRenderer?.Dispose();
	}
}


using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Rendering;

public readonly struct CameraRendererCopier
{
	private static readonly bool copyTextureSupported = (int)SystemInfo.copyTextureSupport > 0;

	private static readonly Rect fullViewRect = new Rect(0f, 0f, 1f, 1f);

	private static readonly int sourceTextureId = Shader.PropertyToID("_SourceTexture");

	private static readonly int srcBlendId = Shader.PropertyToID("_CameraSrcBlend");

	private static readonly int dstBlendId = Shader.PropertyToID("_CameraDstBlend");

	private readonly CameraSettings.FinalBlendMode finalBlendMode;

	private readonly Material material;

	private readonly Camera camera;

	public static bool RequiresRenderTargetResetAfterCopy => !copyTextureSupported;

	public Camera Camera => camera;

	public CameraRendererCopier(Material material, Camera camera, CameraSettings.FinalBlendMode finalBlendMode)
	{
		this.material = material;
		this.camera = camera;
		this.finalBlendMode = finalBlendMode;
	}

	public void Copy(CommandBuffer commandBuffer, RenderTargetIdentifier from, RenderTargetIdentifier to, bool isDepth)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if (copyTextureSupported)
		{
			commandBuffer.CopyTexture(from, to);
		}
		else
		{
			CopyByDrawing(commandBuffer, from, to, isDepth);
		}
	}

	public void CopyByDrawing(CommandBuffer commandBuffer, RenderTargetIdentifier from, RenderTargetIdentifier to, bool isDepth)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer.SetGlobalTexture(sourceTextureId, from);
		commandBuffer.SetRenderTarget(to, (RenderBufferLoadAction)2, (RenderBufferStoreAction)0);
		commandBuffer.SetViewport(camera.pixelRect);
		commandBuffer.DrawProcedural(Matrix4x4.identity, material, isDepth ? 1 : 0, (MeshTopology)0, 3);
	}

	public void CopyToCameraTarget(CommandBuffer commandBuffer, RenderTargetIdentifier from)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer.SetGlobalFloat(srcBlendId, (float)finalBlendMode.source);
		commandBuffer.SetGlobalFloat(dstBlendId, (float)finalBlendMode.destination);
		commandBuffer.SetGlobalTexture(sourceTextureId, from);
		commandBuffer.SetRenderTarget(RenderTargetIdentifier.op_Implicit((BuiltinRenderTextureType)2), (RenderBufferLoadAction)(((int)finalBlendMode.destination == 0 && camera.rect == fullViewRect) ? 2 : 0), (RenderBufferStoreAction)0);
		commandBuffer.SetViewport(camera.pixelRect);
		commandBuffer.DrawProcedural(Matrix4x4.identity, material, 0, (MeshTopology)0, 3);
		commandBuffer.SetGlobalFloat(srcBlendId, 1f);
		commandBuffer.SetGlobalFloat(dstBlendId, 0f);
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Rendering;

[Serializable]
public class CameraSettings
{
	public enum RenderScaleMode
	{
		Inherit,
		Multiply,
		Override
	}

	[Serializable]
	public struct FinalBlendMode
	{
		public BlendMode source;

		public BlendMode destination;
	}

	public RustRendererData rustRendererData;

	public bool copyColor = true;

	public bool copyDepth = true;

	[RenderingLayerMaskField]
	public int renderingLayerMask = -1;

	public bool maskLights;

	public RenderScaleMode renderScaleMode;

	[Range(0.1f, 2f)]
	public float renderScale = 1f;

	public bool postProcessingEnabled = true;

	public bool overridePostFX;

	public PostFXSettings postFXSettings;

	public FinalBlendMode finalBlendMode = new FinalBlendMode
	{
		source = (BlendMode)1,
		destination = (BlendMode)0
	};

	public bool allowFXAA;

	[Tooltip("Alpha is used to store Luma by default, which makes FXAA look better. Ticking this maintains transparency in the alpha channel after color grading")]
	public bool keepAlpha;

	public float GetRenderScale(float scale)
	{
		return renderScaleMode switch
		{
			RenderScaleMode.Inherit => scale, 
			RenderScaleMode.Override => renderScale, 
			RenderScaleMode.Multiply => scale * renderScale, 
			_ => scale, 
		};
	}
}


using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Rust.RenderPipeline.Runtime;
using Unity.Mathematics;

public class ContextContainer : IDisposable
{
	private static class TypeId<T>
	{
		public static uint value = s_TypeCount++;
	}

	private struct Item
	{
		public ContextItem storage;

		public bool isSet;
	}

	private Item[] m_Items = new Item[64];

	private List<uint> m_ActiveItemIndices = new List<uint>();

	private static uint s_TypeCount;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T Get<T>() where T : ContextItem, new()
	{
		uint value = TypeId<T>.value;
		if (!Contains(value))
		{
			throw new InvalidOperationException("Type " + typeof(T).FullName + " has not been created yet.");
		}
		return (T)m_Items[value].storage;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T Create<T>() where T : ContextItem, new()
	{
		uint value = TypeId<T>.value;
		if (Contains(value))
		{
			throw new InvalidOperationException("Type " + typeof(T).FullName + " has already been created.");
		}
		return CreateAndGetData<T>(value);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T GetOrCreate<T>() where T : ContextItem, new()
	{
		uint value = TypeId<T>.value;
		if (Contains(value))
		{
			return (T)m_Items[value].storage;
		}
		return CreateAndGetData<T>(value);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Contains<T>() where T : ContextItem, new()
	{
		uint value = TypeId<T>.value;
		return Contains(value);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private bool Contains(uint typeId)
	{
		if (typeId < m_Items.Length)
		{
			return m_Items[typeId].isSet;
		}
		return false;
	}

	private T CreateAndGetData<T>(uint typeId) where T : ContextItem, new()
	{
		if (m_Items.Length <= typeId)
		{
			Item[] array = new Item[math.max((long)math.ceilpow2(s_TypeCount), (long)(m_Items.Length * 2))];
			for (int i = 0; i < m_Items.Length; i++)
			{
				array[i] = m_Items[i];
			}
			m_Items = array;
		}
		m_ActiveItemIndices.Add(typeId);
		ref Item reference = ref m_Items[typeId];
		ref ContextItem storage = ref reference.storage;
		if (storage == null)
		{
			storage = new T();
		}
		reference.isSet = true;
		return (T)reference.storage;
	}

	public void Dispose()
	{
		foreach (uint activeItemIndex in m_ActiveItemIndices)
		{
			ref Item reference = ref m_Items[activeItemIndex];
			reference.storage.Reset();
			reference.isSet = false;
		}
		m_ActiveItemIndices.Clear();
	}
}


public abstract class ContextItem
{
	public abstract void Reset();
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;

[Serializable]
public struct ForwardPlusSettings
{
	public enum TileSize
	{
		Default = 0,
		_16 = 0x10,
		_32 = 0x20,
		_64 = 0x40,
		_128 = 0x80,
		_256 = 0x100
	}

	[Tooltip("Tile size in pixels per dimension, default is 64.")]
	public TileSize tileSize;

	[Range(0f, 99f)]
	[Tooltip("Maximum allowed lights per tile, 0 means default, which is 31.")]
	public int maxLightsPerTile;
}


using Rust.RenderPipeline.Runtime;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Scripting.APIUpdating;

[MovedFrom(true, "UnityEngine.Experimental.Rendering.RenderGraphModule", "UnityEngine.Rendering.RenderGraphModule", null)]
public interface IRenderGraphRecorder
{
	void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData);
}


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Rendering;

public static class PipelineUtils
{
	private static Dictionary<CameraEvent, string> cameraEventToString;

	public static Dictionary<CameraEvent, string> CameraEventToString
	{
		get
		{
			if (cameraEventToString != null)
			{
				return cameraEventToString;
			}
			cameraEventToString = Enum.GetValues(typeof(CameraEvent)).Cast<CameraEvent>().ToDictionary((CameraEvent k) => k, (CameraEvent v) => ((object)(CameraEvent)(ref v)/*cast due to .constrained prefix*/).ToString());
			return cameraEventToString;
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;

[CreateAssetMenu(menuName = "Rendering/Rust Post FX Settings")]
public class PostFXSettings : ScriptableObject
{
	[Serializable]
	public struct BloomSettings
	{
		public enum Mode
		{
			Additive,
			Scattering
		}

		public bool ignoreRenderScale;

		[Range(0f, 16f)]
		public int maxIterations;

		[Min(1f)]
		public int downscaleLimit;

		public bool bicubicUpsampling;

		[Min(0f)]
		public float threshold;

		[Range(0f, 1f)]
		public float thresholdKnee;

		[Min(0f)]
		public float intensity;

		public bool fadeFireflies;

		public Mode mode;

		[Range(0.05f, 0.95f)]
		public float scatter;
	}

	[Serializable]
	public struct ColorAdjustmentsSettings
	{
		public float postExposure;

		[Range(-100f, 100f)]
		public float contrast;

		[ColorUsage(false, true)]
		public Color colorFilter;

		[Range(-180f, 180f)]
		public float hueShift;

		[Range(-100f, 100f)]
		public float saturation;
	}

	[Serializable]
	public struct ChannelMixerSettings
	{
		public Vector3 red;

		public Vector3 green;

		public Vector3 blue;
	}

	[Serializable]
	public struct WhiteBalanceSettings
	{
		[Range(-100f, 100f)]
		public float temperature;

		[Range(-100f, 100f)]
		public float tint;
	}

	[Serializable]
	public struct SplitToningSettings
	{
		[ColorUsage(false)]
		public Color shadows;

		[ColorUsage(false)]
		public Color highlights;

		[Range(-100f, 100f)]
		public float balance;
	}

	[Serializable]
	public struct ToneMappingSettings
	{
		public enum Mode
		{
			None,
			ACES,
			Neutral,
			Reinhard
		}

		public Mode mode;
	}

	[Serializable]
	public struct ShadowsMidtonesHighlightsSettings
	{
		[ColorUsage(false, true)]
		public Color shadows;

		[ColorUsage(false, true)]
		public Color midtones;

		[ColorUsage(false, true)]
		public Color highlights;

		[Range(0f, 2f)]
		public float shadowsStart;

		[Range(0f, 2f)]
		public float shadowsEnd;

		[Range(0f, 2f)]
		public float highlightsStart;

		[Range(0f, 2f)]
		public float highLightsEnd;
	}

	[SerializeField]
	private Shader shader;

	[NonSerialized]
	private Material material;

	public Material Material
	{
		get
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Expected O, but got Unknown
			if ((Object)(object)material == (Object)null && (Object)(object)shader != (Object)null)
			{
				material = new Material(shader)
				{
					hideFlags = (HideFlags)61
				};
			}
			return material;
		}
	}

	[field: SerializeField]
	public BloomSettings Bloom { get; private set; } = new BloomSettings
	{
		scatter = 0.7f
	};

	[field: SerializeField]
	public ColorAdjustmentsSettings ColorAdjustments { get; private set; } = new ColorAdjustmentsSettings
	{
		colorFilter = Color.white
	};

	[field: SerializeField]
	public WhiteBalanceSettings WhiteBalance { get; private set; }

	[field: SerializeField]
	public SplitToningSettings SplitToning { get; private set; } = new SplitToningSettings
	{
		shadows = Color.gray,
		highlights = Color.gray
	};

	[field: SerializeField]
	public ChannelMixerSettings ChannelMixer { get; private set; } = new ChannelMixerSettings
	{
		red = Vector3.right,
		green = Vector3.up,
		blue = Vector3.forward
	};

	[field: SerializeField]
	public ShadowsMidtonesHighlightsSettings ShadowsMidtonesHighlights { get; private set; } = new ShadowsMidtonesHighlightsSettings
	{
		shadows = Color.white,
		midtones = Color.white,
		highlights = Color.white,
		shadowsEnd = 0.3f,
		highlightsStart = 0.55f,
		highLightsEnd = 1f
	};

	[field: SerializeField]
	public ToneMappingSettings ToneMapping { get; private set; }

	public static bool AreApplicableTo(Camera camera)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Invalid comparison between Unknown and I4
		return (int)camera.cameraType <= 2;
	}
}


using System.Runtime.InteropServices;
using Rust.RenderPipeline.Runtime;

public static class ReinterpretExtensions
{
	[StructLayout(LayoutKind.Explicit)]
	private struct IntFloat
	{
		[FieldOffset(0)]
		public int intValue;

		[FieldOffset(0)]
		public float floatValue;
	}

	public static float ReinterpretAsFloat(this int value)
	{
		IntFloat intFloat = default(IntFloat);
		intFloat.intValue = value;
		return intFloat.floatValue;
	}
}


using UnityEngine;

public class RenderingLayerMaskFieldAttribute : PropertyAttribute
{
}


public enum RenderPassEvent
{
	BeforeRendering = 0,
	BeforeRenderingShadows = 50,
	AfterRenderingShadows = 100,
	BeforeRenderingPrePasses = 150,
	AfterRenderingPrePasses = 200,
	BeforeRenderingGBuffer = 210,
	AfterRenderingGBuffer = 220,
	BeforeRenderingDeferredLights = 230,
	BeforeRenderingDeferredIndirectLighting = 240,
	AfterRenderingDeferredIndirectLighting = 250,
	BeforeRenderingCombinedIndirectLighting = 260,
	AfterRenderingCombinedIndirectLighting = 270,
	AfterRenderingDeferredLights = 280,
	BeforeRenderingOpaques = 290,
	AfterRenderingOpaques = 300,
	BeforeRenderingSkybox = 350,
	AfterRenderingSkybox = 400,
	BeforeRenderingTransparents = 450,
	AfterRenderingTransparents = 500,
	BeforeRenderingPostProcessing = 550,
	AfterRenderingPostProcessing = 600,
	AfterRendering = 1000
}


using System;
using Rust.RenderPipeline.Runtime;

internal static class RenderPassEventsEnumValues
{
	public static int[] values;

	static RenderPassEventsEnumValues()
	{
		Array array = Enum.GetValues(typeof(RenderPassEvent));
		values = new int[array.Length];
		int num = 0;
		foreach (int item in array)
		{
			values[num] = item;
			num++;
		}
	}
}


using System;
using System.Collections.Generic;
using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public sealed class RustRenderer : IDisposable
{
	private static readonly ProfilingSampler addRenderPassesSampler = new ProfilingSampler("Add Render Passes");

	private readonly List<RustRenderPass> activeRenderPassQueue = new List<RustRenderPass>(32);

	private readonly List<RustRendererFeature> rendererFeatures = new List<RustRendererFeature>(10);

	public ContextContainer FrameData { get; private set; } = new ContextContainer();

	public void Initialize(RustRendererData data)
	{
		rendererFeatures.Clear();
		foreach (RustRendererFeature rendererFeature in data.rendererFeatures)
		{
			if (!((Object)(object)rendererFeature == (Object)null))
			{
				rendererFeature.Create();
				rendererFeatures.Add(rendererFeature);
			}
		}
		activeRenderPassQueue.Clear();
	}

	public void EnqueuePass(RustRenderPass rustRenderPass)
	{
		activeRenderPassQueue.Add(rustRenderPass);
	}

	internal void AddRenderPasses()
	{
		foreach (RustRendererFeature rendererFeature in rendererFeatures)
		{
			if (rendererFeature.IsActive)
			{
				rendererFeature.AddRenderPasses(this);
			}
		}
	}

	internal static void SortStable(List<RustRenderPass> list)
	{
		for (int i = 1; i < list.Count; i++)
		{
			RustRenderPass rustRenderPass = list[i];
			int num = i - 1;
			while (num >= 0 && rustRenderPass < list[num])
			{
				list[num + 1] = list[num];
				num--;
			}
			list[num + 1] = rustRenderPass;
		}
	}

	internal void RecordCustomRenderGraphPassesInEventRange(RenderGraph renderGraph, RenderPassEvent eventStart, RenderPassEvent eventEnd)
	{
		if (eventStart == eventEnd)
		{
			return;
		}
		foreach (RustRenderPass item in activeRenderPassQueue)
		{
			if (item.renderPassEvent >= eventStart && item.renderPassEvent < eventEnd)
			{
				item.RecordRenderGraph(renderGraph, FrameData);
			}
		}
	}

	internal void RecordCustomRenderGraphPasses(RenderGraph renderGraph, RenderPassEvent startInjectionPoint, RenderPassEvent endInjectionPoint)
	{
		int renderPassEventRange = RustRenderPass.GetRenderPassEventRange(endInjectionPoint);
		RecordCustomRenderGraphPassesInEventRange(renderGraph, startInjectionPoint, endInjectionPoint + renderPassEventRange);
	}

	internal void RecordCustomRenderGraphPasses(RenderGraph renderGraph, RenderPassEvent injectionPoint)
	{
		RecordCustomRenderGraphPasses(renderGraph, injectionPoint, injectionPoint);
	}

	public void Dispose()
	{
		foreach (RustRendererFeature rendererFeature in rendererFeatures)
		{
			if (!((Object)(object)rendererFeature == (Object)null))
			{
				try
				{
					rendererFeature.Dispose();
				}
				catch (Exception ex)
				{
					Debug.LogException(ex);
				}
			}
		}
	}
}


using System.Collections.Generic;
using Rust.RenderPipeline.Runtime;
using UnityEngine;

[CreateAssetMenu(menuName = "Rendering/Rust Render Pipeline Renderer")]
public class RustRendererData : ScriptableObject
{
	[SerializeField]
	internal List<RustRendererFeature> rendererFeatures = new List<RustRendererFeature>(10);

	public bool TryGetRendererFeature<T>(out T rendererFeature) where T : RustRendererFeature
	{
		foreach (RustRendererFeature rendererFeature2 in rendererFeatures)
		{
			if (((object)rendererFeature2).GetType() == typeof(T))
			{
				rendererFeature = rendererFeature2 as T;
				return true;
			}
		}
		rendererFeature = null;
		return false;
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Rendering;

public abstract class RustRendererFeature : ScriptableObject, IDisposable
{
	[SerializeField]
	protected bool active = true;

	public bool IsActive => active;

	public abstract void Create();

	public abstract void AddRenderPasses(RustRenderer renderer);

	private void OnEnable()
	{
		if (RenderPipelineManager.currentPipeline is RustRenderPipeline)
		{
			Create();
		}
	}

	private void OnValidate()
	{
		if (RenderPipelineManager.currentPipeline is RustRenderPipeline)
		{
			Create();
		}
	}

	public void SetActive(bool active)
	{
		this.active = active;
	}

	public void Dispose()
	{
		Dispose(disposing: true);
		GC.SuppressFinalize(this);
	}

	protected virtual void Dispose(bool disposing)
	{
	}
}


using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;

public abstract class RustRenderPass : IRenderGraphRecorder
{
	public RenderPassEvent renderPassEvent { get; set; }

	public virtual void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData)
	{
		Debug.LogWarning((object)("Scriptable Render pass (" + ToString() + " is missing an implementation of the RecordRenderGraph method!)"));
	}

	public static bool operator <(RustRenderPass lhs, RustRenderPass rhs)
	{
		return lhs.renderPassEvent < rhs.renderPassEvent;
	}

	public static bool operator >(RustRenderPass lhs, RustRenderPass rhs)
	{
		return lhs.renderPassEvent > rhs.renderPassEvent;
	}

	internal static int GetRenderPassEventRange(RenderPassEvent renderPassEvent)
	{
		int num = RenderPassEventsEnumValues.values.Length;
		int num2 = 0;
		for (int i = 0; i < num; i++)
		{
			if (RenderPassEventsEnumValues.values[num2] == (int)renderPassEvent)
			{
				break;
			}
			num2++;
		}
		if (num2 >= num)
		{
			Debug.LogError((object)"GetRenderPassEventRange: invalid renderPassEvent value cannot be found in the RenderPassEvent enumeration");
			return 0;
		}
		if (num2 + 1 >= num)
		{
			return 50;
		}
		return (int)(RenderPassEventsEnumValues.values[num2 + 1] - renderPassEvent);
	}
}


using System.Collections.Generic;
using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class RustRenderPipeline : RenderPipeline
{
	public readonly struct PipelineMaterials
	{
		public readonly Material cameraRendererMaterial;

		public readonly Material cameraDebuggerMaterial;

		public readonly Material deferredLightingMaterial;

		public readonly Material deferredIndirectLightingMaterial;

		public PipelineMaterials(RustRenderPipelineSettings.PipelineShaders pipelineShaders)
		{
			cameraRendererMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.cameraRendererShader);
			cameraDebuggerMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.cameraDebuggerShader);
			deferredLightingMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.deferredLightingShader);
			deferredIndirectLightingMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.deferredIndirectLightingShader);
		}

		public void Dispose()
		{
			CoreUtils.Destroy((Object)(object)cameraRendererMaterial);
			CoreUtils.Destroy((Object)(object)cameraDebuggerMaterial);
			CoreUtils.Destroy((Object)(object)deferredLightingMaterial);
			CoreUtils.Destroy((Object)(object)deferredIndirectLightingMaterial);
		}
	}

	private readonly RenderGraph renderGraph = new RenderGraph("Rust SRP Render Graph");

	private readonly CameraRenderer cameraRenderer;

	private readonly RustRenderPipelineSettings settings;

	private readonly PipelineMaterials pipelineMaterials;

	private readonly RustRendererData defaultRendererData;

	public RustRenderPipeline(RustRendererData defaultRendererData, RustRenderPipelineSettings settings)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Expected O, but got Unknown
		this.settings = settings;
		this.defaultRendererData = defaultRendererData;
		GraphicsSettings.useScriptableRenderPipelineBatching = settings.useSrpBatching;
		GraphicsSettings.lightsUseLinearIntensity = true;
		pipelineMaterials = new PipelineMaterials(settings.pipelineShaders);
		Blitter.Initialize(settings.pipelineShaders.coreBlit, settings.pipelineShaders.coreBlitColorAndDepth);
		cameraRenderer = new CameraRenderer(pipelineMaterials);
	}

	protected override void Render(ScriptableRenderContext context, List<Camera> cameras)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		RenderPipeline.BeginContextRendering(context, cameras);
		foreach (Camera camera in cameras)
		{
			RustRenderPipelineCamera component = ((Component)camera).GetComponent<RustRenderPipelineCamera>();
			RustRendererData rustRendererData = (((Object)(object)component == (Object)null || (Object)(object)component.Settings.rustRendererData == (Object)null) ? defaultRendererData : component.Settings.rustRendererData);
			RenderPipeline.BeginCameraRendering(context, camera);
			cameraRenderer.Render(renderGraph, context, camera, settings, rustRendererData);
			RenderPipeline.EndCameraRendering(context, camera);
		}
		renderGraph.EndFrame();
		RenderPipeline.EndContextRendering(context, cameras);
	}

	protected override void Render(ScriptableRenderContext context, Camera[] cameras)
	{
	}

	protected override void Dispose(bool disposing)
	{
		((RenderPipeline)this).Dispose(disposing);
		cameraRenderer.Dispose();
		pipelineMaterials.Dispose();
		renderGraph.Cleanup();
		Blitter.Cleanup();
	}
}


using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Rendering;

[CreateAssetMenu(menuName = "Rendering/Rust Render Pipeline Asset")]
public class RustRenderPipelineAsset : RenderPipelineAsset
{
	[SerializeField]
	private RustRendererData defaultRendererData;

	[SerializeField]
	private RustRenderPipelineSettings settings;

	protected override RenderPipeline CreatePipeline()
	{
		return (RenderPipeline)(object)new RustRenderPipeline(defaultRendererData, settings);
	}
}


using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Rendering;

[DisallowMultipleComponent]
[RequireComponent(typeof(Camera))]
public class RustRenderPipelineCamera : MonoBehaviour
{
	[SerializeField]
	private CameraSettings settings;

	private ProfilingSampler sampler;

	public CameraSettings Settings => settings ?? (settings = new CameraSettings());

	public ProfilingSampler Sampler
	{
		get
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Expected O, but got Unknown
			//IL_0022: Expected O, but got Unknown
			ProfilingSampler obj = sampler;
			if (obj == null)
			{
				ProfilingSampler val = new ProfilingSampler(((Object)((Component)this).GetComponent<Camera>()).name);
				ProfilingSampler val2 = val;
				sampler = val;
				obj = val2;
			}
			return obj;
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;

[Serializable]
public class RustRenderPipelineSettings
{
	public enum ColorLutResolution
	{
		_16 = 0x10,
		_32 = 0x20,
		_64 = 0x40
	}

	public enum RenderPath
	{
		ForwardPlus,
		Deferred
	}

	[Serializable]
	public struct PipelineShaders
	{
		public Shader cameraRendererShader;

		public Shader cameraDebuggerShader;

		public Shader deferredLightingShader;

		public Shader deferredIndirectLightingShader;

		public Shader coreBlit;

		public Shader coreBlitColorAndDepth;
	}

	[Serializable]
	public struct PipelineTextures
	{
		public Texture blueNoise;

		public Texture preIntegratedFgdGgx;

		public Texture environmentBrdfLut;
	}

	public RenderPath renderPath;

	public CameraBufferSettings cameraBuffer = new CameraBufferSettings
	{
		allowHDR = true,
		renderScale = 1f,
		fxaaSettings = new CameraBufferSettings.FxaaSettings
		{
			fixedThreshold = 0.0833f,
			relativeThreshold = 0.166f,
			subpixelBlending = 0.75f
		}
	};

	public bool useSrpBatching = true;

	public ForwardPlusSettings forwardPlus;

	public ShadowSettings shadows;

	public bool postProcessingEnabled = true;

	public PostFXSettings postFXSettings;

	public ColorLutResolution colorLutResolution = ColorLutResolution._32;

	public PipelineShaders pipelineShaders;

	public PipelineTextures pipelineTextures;
}


using System;
using Rust.RenderPipeline.Runtime;
using UnityEngine;

[Serializable]
public class ShadowSettings
{
	public enum FilterQuality
	{
		Low,
		Medium,
		High
	}

	public enum MapSize
	{
		_256 = 0x100,
		_512 = 0x200,
		_1024 = 0x400,
		_2048 = 0x800,
		_4096 = 0x1000,
		_8192 = 0x2000
	}

	[Serializable]
	public struct DirectionalLight
	{
		public MapSize atlasSize;

		[Range(1f, 4f)]
		public int cascadeCount;

		[Range(0f, 1f)]
		public float cascadeRatio1;

		[Range(0f, 1f)]
		public float cascadeRatio2;

		[Range(0f, 1f)]
		public float cascadeRatio3;

		[Range(0.001f, 1f)]
		public float cascadeFade;

		public bool softCascadeBlend;

		public Vector3 CascadeRatios => new Vector3(cascadeRatio1, cascadeRatio2, cascadeRatio3);
	}

	[Serializable]
	public struct AdditionalLight
	{
		public MapSize atlasSize;

		public FilterMode filter;
	}

	[Min(0.001f)]
	public float maxDistance = 100f;

	[Range(0.001f, 1f)]
	public float distanceFade = 0.1f;

	public DirectionalLight directional = new DirectionalLight
	{
		atlasSize = MapSize._1024,
		cascadeCount = 4,
		cascadeRatio1 = 0.1f,
		cascadeRatio2 = 0.25f,
		cascadeRatio3 = 0.5f,
		cascadeFade = 0.1f
	};

	public AdditionalLight additional = new AdditionalLight
	{
		atlasSize = MapSize._1024
	};

	public FilterQuality filterQuality = FilterQuality.Medium;

	public float DirectionalFilterSize => (float)filterQuality + 2f;

	public float AdditionalFilterSize => (float)filterQuality + 2f;
}


using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;

public class RustCameraContext : ContextItem
{
	public Camera Camera { get; internal set; }

	public CameraSettings CameraSettings { get; internal set; }

	public CameraBufferSettings CameraBufferSettings { get; internal set; }

	public PostFXSettings PostFXSettings { get; internal set; }

	public TextureDesc CameraTargetDescriptor { get; internal set; }

	public Vector2Int CameraBufferSize { get; internal set; }

	public Matrix4x4 ViewMatrix { get; internal set; }

	public Matrix4x4 ProjectionMatrix { get; internal set; }

	public bool UseOpaqueColorTexture { get; internal set; }

	public bool UseDepthTexture { get; internal set; }

	public bool PostProcessingActive { get; internal set; }

	public override void Reset()
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		Camera = null;
		CameraSettings = null;
		CameraBufferSettings = default(CameraBufferSettings);
		PostFXSettings = null;
		CameraTargetDescriptor = default(TextureDesc);
		CameraBufferSize = default(Vector2Int);
		ViewMatrix = default(Matrix4x4);
		ProjectionMatrix = default(Matrix4x4);
		UseOpaqueColorTexture = false;
		UseDepthTexture = false;
		PostProcessingActive = false;
	}
}


using Rust.RenderPipeline.Runtime;
using UnityEngine.Rendering;

public class RustRenderingContext : ContextItem
{
	public RustRenderPipelineSettings pipelineSettings;

	public CullingResults cullResults;

	public PerObjectData perObjectData;

	public override void Reset()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		pipelineSettings = null;
		cullResults = default(CullingResults);
		perObjectData = (PerObjectData)0;
	}
}


using System;
using System.Collections.Generic;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;

public class RustResourceDataContext : ContextItem
{
	internal enum ActiveID
	{
		Camera,
		BackBuffer
	}

	public static readonly int gBufferTextureCount = 4;

	private TextureHandle backBufferColor;

	private TextureHandle backBufferDepth;

	private TextureHandle cameraColor;

	private TextureHandle cameraDepth;

	private TextureHandle mainShadowsTexture;

	private TextureHandle additionalShadowsTexture;

	private ComputeBufferHandle shadowCascadesBuffer;

	private ComputeBufferHandle shadowMatricesBuffer;

	private ComputeBufferHandle additionalShadowDataBuffer;

	private ComputeBufferHandle directionalLightDataBuffer;

	private ComputeBufferHandle additionalLightDataBuffer;

	private ComputeBufferHandle lightTilesBuffer;

	private Dictionary<Light, Vector4> lightShadowData;

	private TextureHandle[] gBuffer = (TextureHandle[])(object)new TextureHandle[gBufferTextureCount];

	private TextureHandle cameraOpaqueTexture;

	private TextureHandle cameraDepthTexture;

	private TextureHandle indirectDiffuseHandle;

	private TextureHandle indirectSpecularHandle;

	internal bool IsAccessible { get; set; }

	internal ActiveID ActiveColorID { get; set; }

	public TextureHandle ActiveColorTexture
	{
		get
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			if (!CheckAndWarnAboutAccessibility())
			{
				return TextureHandle.nullHandle;
			}
			return (TextureHandle)(ActiveColorID switch
			{
				ActiveID.Camera => CameraColor, 
				ActiveID.BackBuffer => BackBufferColor, 
				_ => throw new ArgumentOutOfRangeException(), 
			});
		}
	}

	internal ActiveID ActiveDepthID { get; set; }

	public TextureHandle ActiveDepthTexture
	{
		get
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			if (!CheckAndWarnAboutAccessibility())
			{
				return TextureHandle.nullHandle;
			}
			return (TextureHandle)(ActiveDepthID switch
			{
				ActiveID.Camera => CameraDepth, 
				ActiveID.BackBuffer => BackBufferDepth, 
				_ => throw new ArgumentOutOfRangeException(), 
			});
		}
	}

	public TextureHandle BackBufferColor
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref backBufferColor);
		}
		internal set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref backBufferColor, value);
		}
	}

	public TextureHandle BackBufferDepth
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref backBufferDepth);
		}
		internal set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref backBufferDepth, value);
		}
	}

	public TextureHandle CameraColor
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref cameraColor);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref cameraColor, value);
		}
	}

	public TextureHandle CameraDepth
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref cameraDepth);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref cameraDepth, value);
		}
	}

	public TextureHandle MainShadowsTexture
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref mainShadowsTexture);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref mainShadowsTexture, value);
		}
	}

	public TextureHandle AdditionalShadowsTexture
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref additionalShadowsTexture);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref additionalShadowsTexture, value);
		}
	}

	public ComputeBufferHandle ShadowCascadesBuffer
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetComputeBufferHandle(ref shadowCascadesBuffer);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetComputeBufferHandle(ref shadowCascadesBuffer, value);
		}
	}

	public ComputeBufferHandle ShadowMatricesBuffer
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetComputeBufferHandle(ref shadowMatricesBuffer);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetComputeBufferHandle(ref shadowMatricesBuffer, value);
		}
	}

	public ComputeBufferHandle AdditionalShadowDataBuffer
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetComputeBufferHandle(ref additionalShadowDataBuffer);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetComputeBufferHandle(ref additionalShadowDataBuffer, value);
		}
	}

	public ComputeBufferHandle DirectionalLightDataBuffer
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetComputeBufferHandle(ref directionalLightDataBuffer);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetComputeBufferHandle(ref directionalLightDataBuffer, value);
		}
	}

	public ComputeBufferHandle AdditionalLightDataBuffer
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetComputeBufferHandle(ref additionalLightDataBuffer);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetComputeBufferHandle(ref additionalLightDataBuffer, value);
		}
	}

	public ComputeBufferHandle LightTilesBuffer
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetComputeBufferHandle(ref lightTilesBuffer);
		}
		set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetComputeBufferHandle(ref lightTilesBuffer, value);
		}
	}

	public Dictionary<Light, Vector4> LightShadowData
	{
		get
		{
			return lightShadowData;
		}
		set
		{
			lightShadowData = value;
		}
	}

	public TextureHandle[] GBuffer
	{
		get
		{
			return CheckAndGetTextureHandle(ref gBuffer);
		}
		set
		{
			CheckAndSetTextureHandle(ref gBuffer, value);
		}
	}

	public TextureHandle CameraOpaqueTexture
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref cameraOpaqueTexture);
		}
		internal set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref cameraOpaqueTexture, value);
		}
	}

	public TextureHandle CameraDepthTexture
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref cameraDepthTexture);
		}
		internal set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref cameraDepthTexture, value);
		}
	}

	public TextureHandle IndirectDiffuseHandle
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref indirectDiffuseHandle);
		}
		internal set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref indirectDiffuseHandle, value);
		}
	}

	public TextureHandle IndirectSpecularHandle
	{
		get
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			return CheckAndGetTextureHandle(ref indirectSpecularHandle);
		}
		internal set
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			CheckAndSetTextureHandle(ref indirectSpecularHandle, value);
		}
	}

	internal void InitFrame()
	{
		IsAccessible = true;
	}

	internal void EndFrame()
	{
		IsAccessible = false;
	}

	private void CheckAndSetTextureHandle(ref TextureHandle handle, TextureHandle newHandle)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		if (CheckAndWarnAboutAccessibility())
		{
			handle = newHandle;
		}
	}

	private TextureHandle CheckAndGetTextureHandle(ref TextureHandle handle)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if (CheckAndWarnAboutAccessibility())
		{
			return handle;
		}
		return TextureHandle.nullHandle;
	}

	private void CheckAndSetTextureHandle(ref TextureHandle[] handle, TextureHandle[] newHandle)
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		if (CheckAndWarnAboutAccessibility())
		{
			if (handle == null || handle.Length != newHandle.Length)
			{
				handle = (TextureHandle[])(object)new TextureHandle[newHandle.Length];
			}
			for (int i = 0; i < newHandle.Length; i++)
			{
				handle[i] = newHandle[i];
			}
		}
	}

	private TextureHandle[] CheckAndGetTextureHandle(ref TextureHandle[] handle)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckAndWarnAboutAccessibility())
		{
			return (TextureHandle[])(object)new TextureHandle[1] { TextureHandle.nullHandle };
		}
		return handle;
	}

	private ComputeBufferHandle CheckAndGetComputeBufferHandle(ref ComputeBufferHandle handle)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if (CheckAndWarnAboutAccessibility())
		{
			return handle;
		}
		return ComputeBufferHandle.nullHandle;
	}

	private void CheckAndSetComputeBufferHandle(ref ComputeBufferHandle handle, ComputeBufferHandle newHandle)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		if (CheckAndWarnAboutAccessibility())
		{
			handle = newHandle;
		}
	}

	private bool CheckAndWarnAboutAccessibility()
	{
		if (!IsAccessible)
		{
			Debug.LogError((object)"Trying to access Universal Resources outside of the current frame setup.");
		}
		return IsAccessible;
	}

	public override void Reset()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		backBufferColor = TextureHandle.nullHandle;
		backBufferDepth = TextureHandle.nullHandle;
		cameraColor = TextureHandle.nullHandle;
		cameraDepth = TextureHandle.nullHandle;
		mainShadowsTexture = TextureHandle.nullHandle;
		additionalShadowsTexture = TextureHandle.nullHandle;
		shadowCascadesBuffer = ComputeBufferHandle.nullHandle;
		shadowMatricesBuffer = ComputeBufferHandle.nullHandle;
		additionalShadowDataBuffer = ComputeBufferHandle.nullHandle;
		directionalLightDataBuffer = ComputeBufferHandle.nullHandle;
		additionalLightDataBuffer = ComputeBufferHandle.nullHandle;
		lightTilesBuffer = ComputeBufferHandle.nullHandle;
		cameraOpaqueTexture = TextureHandle.nullHandle;
		cameraDepthTexture = TextureHandle.nullHandle;
		indirectDiffuseHandle = TextureHandle.nullHandle;
		indirectSpecularHandle = TextureHandle.nullHandle;
		for (int i = 0; i < gBuffer.Length; i++)
		{
			gBuffer[i] = TextureHandle.nullHandle;
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class CopyAttachmentsPass
{
	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("Copy Attachments");

	private static readonly int colorCopyID = Shader.PropertyToID("_CameraColorTexture");

	private static readonly int depthCopyID = Shader.PropertyToID("_CameraDepthTexture");

	private bool copyColor;

	private bool copyDepth;

	private CameraRendererCopier copier;

	private TextureHandle colorAttachment;

	private TextureHandle depthAttachment;

	private TextureHandle colorCopy;

	private TextureHandle depthCopy;

	private void Render(RenderGraphContext context)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		if (copyColor)
		{
			copier.Copy(cmd, TextureHandle.op_Implicit(colorAttachment), TextureHandle.op_Implicit(colorCopy), isDepth: false);
			cmd.SetGlobalTexture(colorCopyID, TextureHandle.op_Implicit(colorCopy));
		}
		if (copyDepth)
		{
			copier.Copy(cmd, TextureHandle.op_Implicit(depthAttachment), TextureHandle.op_Implicit(depthCopy), isDepth: true);
			cmd.SetGlobalTexture(depthCopyID, TextureHandle.op_Implicit(depthCopy));
		}
		if (CameraRendererCopier.RequiresRenderTargetResetAfterCopy)
		{
			cmd.SetRenderTarget(TextureHandle.op_Implicit(colorAttachment), (RenderBufferLoadAction)0, (RenderBufferStoreAction)0, TextureHandle.op_Implicit(depthAttachment), (RenderBufferLoadAction)0, (RenderBufferStoreAction)0);
		}
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(cmd);
		cmd.Clear();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData, bool copyColor, bool copyDepth, CameraRendererCopier copier)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		frameData.Get<RustCameraContext>();
		if (!copyColor && !copyDepth)
		{
			return;
		}
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		CopyAttachmentsPass copyAttachmentsPass = default(CopyAttachmentsPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<CopyAttachmentsPass>(profilingSampler.name, ref copyAttachmentsPass, profilingSampler);
		try
		{
			copyAttachmentsPass.copyColor = copyColor;
			copyAttachmentsPass.copyDepth = copyDepth;
			copyAttachmentsPass.copier = copier;
			CopyAttachmentsPass copyAttachmentsPass2 = copyAttachmentsPass;
			TextureHandle cameraColor = rustResourceDataContext.CameraColor;
			copyAttachmentsPass2.colorAttachment = ((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraColor);
			CopyAttachmentsPass copyAttachmentsPass3 = copyAttachmentsPass;
			cameraColor = rustResourceDataContext.CameraDepth;
			copyAttachmentsPass3.depthAttachment = ((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraColor);
			if (copyColor)
			{
				CopyAttachmentsPass copyAttachmentsPass4 = copyAttachmentsPass;
				cameraColor = rustResourceDataContext.CameraOpaqueTexture;
				copyAttachmentsPass4.colorCopy = ((RenderGraphBuilder)(ref val)).WriteTexture(ref cameraColor);
			}
			if (copyDepth)
			{
				CopyAttachmentsPass copyAttachmentsPass5 = copyAttachmentsPass;
				cameraColor = rustResourceDataContext.CameraDepthTexture;
				copyAttachmentsPass5.depthCopy = ((RenderGraphBuilder)(ref val)).WriteTexture(ref cameraColor);
			}
			((RenderGraphBuilder)(ref val)).SetRenderFunc<CopyAttachmentsPass>((RenderFunc<CopyAttachmentsPass>)delegate(CopyAttachmentsPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using System.Diagnostics;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class DebugPass
{
	private static readonly ProfilingSampler sampler = new ProfilingSampler("Debug");

	public TextureHandle[] gBufferHandles;

	public TextureHandle indirectDiffuseHandle;

	public TextureHandle indirectSpecularHandle;

	[Conditional("DEVELOPMENT_BUILD")]
	[Conditional("UNITY_EDITOR")]
	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Invalid comparison between Unknown and I4
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		if (!CameraDebugger.IsActive || (int)rustCameraContext.Camera.cameraType > 2)
		{
			return;
		}
		DebugPass debugPass = default(DebugPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<DebugPass>(sampler.name, ref debugPass, sampler);
		try
		{
			debugPass.gBufferHandles = rustResourceDataContext.GBuffer;
			debugPass.indirectDiffuseHandle = rustResourceDataContext.IndirectDiffuseHandle;
			debugPass.indirectSpecularHandle = rustResourceDataContext.IndirectSpecularHandle;
			TextureHandle[] gBuffer = rustResourceDataContext.GBuffer;
			for (int i = 0; i < gBuffer.Length; i++)
			{
				TextureHandle val2 = gBuffer[i];
				((RenderGraphBuilder)(ref val)).ReadTexture(ref val2);
			}
			TextureHandle val3 = rustResourceDataContext.IndirectDiffuseHandle;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref val3);
			val3 = rustResourceDataContext.IndirectSpecularHandle;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref val3);
			ComputeBufferHandle lightTilesBuffer = rustResourceDataContext.LightTilesBuffer;
			((RenderGraphBuilder)(ref val)).ReadComputeBuffer(ref lightTilesBuffer);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<DebugPass>((RenderFunc<DebugPass>)delegate
			{
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class FinalPass
{
	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("Final");

	private CameraRendererCopier copier;

	private TextureHandle colorAttachment;

	private void Render(RenderGraphContext context)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		copier.CopyToCameraTarget(cmd, TextureHandle.op_Implicit(colorAttachment));
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(cmd);
		cmd.Clear();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData, CameraRendererCopier copier)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		FinalPass finalPass = default(FinalPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<FinalPass>("Final", ref finalPass, profilingSampler);
		try
		{
			finalPass.copier = copier;
			FinalPass finalPass2 = finalPass;
			TextureHandle cameraColor = rustResourceDataContext.CameraColor;
			finalPass2.colorAttachment = ((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraColor);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<FinalPass>((RenderFunc<FinalPass>)delegate(FinalPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;
using UnityEngine.Rendering.RendererUtils;

public class GBufferPass
{
	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("GBuffer");

	private static readonly ShaderTagId[] shaderTagIds = (ShaderTagId[])(object)new ShaderTagId[2]
	{
		new ShaderTagId("RustGBuffer"),
		new ShaderTagId("Deferred")
	};

	private readonly RenderTargetIdentifier[] gBufferRenderTargetIdentifiers = (RenderTargetIdentifier[])(object)new RenderTargetIdentifier[RustResourceDataContext.gBufferTextureCount];

	private RendererListHandle renderListHandle;

	private readonly TextureHandle[] gBufferTextureHandles = (TextureHandle[])(object)new TextureHandle[RustResourceDataContext.gBufferTextureCount];

	private TextureHandle depthAttachment;

	private Camera camera;

	private void Render(RenderGraphContext context)
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		((ScriptableRenderContext)(ref context.renderContext)).SetupCameraProperties(camera, false);
		CommandBuffer cmd = context.cmd;
		for (int i = 0; i < gBufferRenderTargetIdentifiers.Length; i++)
		{
			gBufferRenderTargetIdentifiers[i] = TextureHandle.op_Implicit(gBufferTextureHandles[i]);
		}
		cmd.SetRenderTarget(gBufferRenderTargetIdentifiers, TextureHandle.op_Implicit(depthAttachment));
		cmd.ClearRenderTarget(true, true, Color.clear);
		context.cmd.DrawRendererList(RendererListHandle.op_Implicit(renderListHandle));
		cmd.SetRenderTarget(gBufferRenderTargetIdentifiers[3], TextureHandle.op_Implicit(depthAttachment));
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(context.cmd);
		context.cmd.Clear();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		RustRenderingContext rustRenderingContext = frameData.Get<RustRenderingContext>();
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		GBufferPass gBufferPass = default(GBufferPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<GBufferPass>(profilingSampler.name, ref gBufferPass, profilingSampler);
		try
		{
			rustRenderingContext.perObjectData = (PerObjectData)3;
			GBufferPass gBufferPass2 = gBufferPass;
			RendererListDesc val2 = new RendererListDesc(shaderTagIds, rustRenderingContext.cullResults, rustCameraContext.Camera)
			{
				sortingCriteria = (SortingCriteria)59,
				rendererConfiguration = rustRenderingContext.perObjectData,
				renderQueueRange = RenderQueueRange.opaque,
				renderingLayerMask = (uint)rustCameraContext.CameraSettings.renderingLayerMask
			};
			RendererListHandle val3 = renderGraph.CreateRendererList(ref val2);
			gBufferPass2.renderListHandle = ((RenderGraphBuilder)(ref val)).UseRendererList(ref val3);
			gBufferPass.camera = rustCameraContext.Camera;
			GBufferPass gBufferPass3 = gBufferPass;
			TextureHandle cameraDepth = rustResourceDataContext.CameraDepth;
			gBufferPass3.depthAttachment = ((RenderGraphBuilder)(ref val)).ReadWriteTexture(ref cameraDepth);
			Vector2Int cameraBufferSize = rustCameraContext.CameraBufferSize;
			int x = ((Vector2Int)(ref cameraBufferSize)).x;
			cameraBufferSize = rustCameraContext.CameraBufferSize;
			TextureDesc val4 = new TextureDesc(x, ((Vector2Int)(ref cameraBufferSize)).y, false, false);
			val4.name = "GBuffer0";
			val4.colorFormat = SystemInfo.GetGraphicsFormat((DefaultFormat)0);
			TextureDesc val5 = val4;
			TextureHandle[] gBuffer = rustResourceDataContext.GBuffer;
			TextureHandle[] array = gBufferPass.gBufferTextureHandles;
			cameraDepth = renderGraph.CreateTexture(ref val5);
			gBuffer[0] = (array[0] = ((RenderGraphBuilder)(ref val)).WriteTexture(ref cameraDepth));
			val5.name = "GBuffer1";
			TextureHandle[] gBuffer2 = rustResourceDataContext.GBuffer;
			TextureHandle[] array2 = gBufferPass.gBufferTextureHandles;
			cameraDepth = renderGraph.CreateTexture(ref val5);
			gBuffer2[1] = (array2[1] = ((RenderGraphBuilder)(ref val)).WriteTexture(ref cameraDepth));
			val5.name = "GBuffer2";
			val5.colorFormat = (GraphicsFormat)75;
			TextureHandle[] gBuffer3 = rustResourceDataContext.GBuffer;
			TextureHandle[] array3 = gBufferPass.gBufferTextureHandles;
			cameraDepth = renderGraph.CreateTexture(ref val5);
			gBuffer3[2] = (array3[2] = ((RenderGraphBuilder)(ref val)).WriteTexture(ref cameraDepth));
			val5.name = "GBuffer3";
			TextureHandle[] gBuffer4 = rustResourceDataContext.GBuffer;
			TextureHandle[] array4 = gBufferPass.gBufferTextureHandles;
			cameraDepth = rustResourceDataContext.CameraColor;
			gBuffer4[3] = (array4[3] = ((RenderGraphBuilder)(ref val)).ReadWriteTexture(ref cameraDepth));
			((RenderGraphBuilder)(ref val)).SetRenderFunc<GBufferPass>((RenderFunc<GBufferPass>)delegate(GBufferPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;
using UnityEngine.Rendering.RendererUtils;

public class GeometryPass
{
	private static readonly ProfilingSampler profilingSamplerOpaque = new ProfilingSampler("Opaque Geometry");

	private static readonly ProfilingSampler profilingSamplerTransparent = new ProfilingSampler("Transparent Geometry");

	private static readonly ShaderTagId[] shaderTagIds = (ShaderTagId[])(object)new ShaderTagId[4]
	{
		new ShaderTagId("SRPDefaultUnlit"),
		new ShaderTagId("RustLit"),
		new ShaderTagId("ForwardBase"),
		new ShaderTagId("Vertex")
	};

	private RendererListHandle renderListHandle;

	private void Render(RenderGraphContext context)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		context.cmd.DrawRendererList(RendererListHandle.op_Implicit(renderListHandle));
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(context.cmd);
		context.cmd.Clear();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData, bool opaque)
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		RustRenderingContext rustRenderingContext = frameData.Get<RustRenderingContext>();
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		int renderingLayerMask = rustCameraContext.CameraSettings.renderingLayerMask;
		ProfilingSampler val = (opaque ? profilingSamplerOpaque : profilingSamplerTransparent);
		GeometryPass geometryPass = default(GeometryPass);
		RenderGraphBuilder val2 = renderGraph.AddRenderPass<GeometryPass>(val.name, ref geometryPass, val);
		try
		{
			rustRenderingContext.perObjectData = (PerObjectData)3;
			GeometryPass geometryPass2 = geometryPass;
			RendererListDesc val3 = new RendererListDesc(shaderTagIds, rustRenderingContext.cullResults, rustCameraContext.Camera)
			{
				sortingCriteria = (SortingCriteria)(opaque ? 59 : 23),
				rendererConfiguration = rustRenderingContext.perObjectData,
				renderQueueRange = (opaque ? RenderQueueRange.opaque : RenderQueueRange.transparent),
				renderingLayerMask = (uint)renderingLayerMask
			};
			RendererListHandle val4 = renderGraph.CreateRendererList(ref val3);
			geometryPass2.renderListHandle = ((RenderGraphBuilder)(ref val2)).UseRendererList(ref val4);
			TextureHandle val5 = rustResourceDataContext.CameraColor;
			((RenderGraphBuilder)(ref val2)).ReadWriteTexture(ref val5);
			val5 = rustResourceDataContext.CameraDepth;
			((RenderGraphBuilder)(ref val2)).ReadWriteTexture(ref val5);
			if (!opaque)
			{
				val5 = rustResourceDataContext.CameraOpaqueTexture;
				if (((TextureHandle)(ref val5)).IsValid())
				{
					val5 = rustResourceDataContext.CameraOpaqueTexture;
					((RenderGraphBuilder)(ref val2)).ReadTexture(ref val5);
				}
				val5 = rustResourceDataContext.CameraDepthTexture;
				if (((TextureHandle)(ref val5)).IsValid())
				{
					val5 = rustResourceDataContext.CameraDepthTexture;
					((RenderGraphBuilder)(ref val2)).ReadTexture(ref val5);
				}
			}
			ComputeBufferHandle val6 = rustResourceDataContext.DirectionalLightDataBuffer;
			((RenderGraphBuilder)(ref val2)).ReadComputeBuffer(ref val6);
			val6 = rustResourceDataContext.AdditionalLightDataBuffer;
			((RenderGraphBuilder)(ref val2)).ReadComputeBuffer(ref val6);
			val6 = rustResourceDataContext.LightTilesBuffer;
			if (((ComputeBufferHandle)(ref val6)).IsValid())
			{
				val6 = rustResourceDataContext.LightTilesBuffer;
				((RenderGraphBuilder)(ref val2)).ReadComputeBuffer(ref val6);
			}
			val5 = rustResourceDataContext.MainShadowsTexture;
			((RenderGraphBuilder)(ref val2)).ReadTexture(ref val5);
			val5 = rustResourceDataContext.AdditionalShadowsTexture;
			((RenderGraphBuilder)(ref val2)).ReadTexture(ref val5);
			val6 = rustResourceDataContext.ShadowCascadesBuffer;
			((RenderGraphBuilder)(ref val2)).ReadComputeBuffer(ref val6);
			val6 = rustResourceDataContext.ShadowMatricesBuffer;
			((RenderGraphBuilder)(ref val2)).ReadComputeBuffer(ref val6);
			val6 = rustResourceDataContext.AdditionalShadowDataBuffer;
			((RenderGraphBuilder)(ref val2)).ReadComputeBuffer(ref val6);
			((RenderGraphBuilder)(ref val2)).SetRenderFunc<GeometryPass>((RenderFunc<GeometryPass>)delegate(GeometryPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val2)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System.Diagnostics;
using Rust.RenderPipeline.Runtime;
using UnityEngine.Experimental.Rendering.RenderGraphModule;

public class GizmosPass
{
	[Conditional("UNITY_EDITOR")]
	public static void Record(RenderGraph renderGraph, ContextContainer frameData, CameraRendererCopier copier)
	{
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class SetupPass
{
	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("Setup");

	private static readonly int attachmentSizeID = Shader.PropertyToID("_CameraBufferSize");

	private static readonly int envBrdfLutId = Shader.PropertyToID("global_EnvBrdfLut");

	private static readonly int envBrdfLutTexelSizeId = Shader.PropertyToID("global_EnvBrdfLut_TexelSize");

	private static readonly int blueNoiseId = Shader.PropertyToID("global_BlueNoise");

	private static readonly int blueNoiseRcpSizeId = Shader.PropertyToID("global_BlueNoiseRcpSize");

	private static readonly int preIntegratedFgdGgxId = Shader.PropertyToID("global_PFGD_GGX");

	private static readonly int preIntegratedFgdGgxTexelSizeId = Shader.PropertyToID("global_PFGD_GGX_TexelSize");

	private TextureHandle colorAttachment;

	private TextureHandle depthAttachment;

	private Vector2Int attachmentSize;

	private Camera camera;

	private CameraClearFlags clearFlags;

	private Texture envBrdfLutTexture;

	private Texture blueNoiseTexture;

	private Texture preIntegratedFgdGgxTexture;

	private void Render(RenderGraphContext context)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Invalid comparison between Unknown and I4
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Invalid comparison between Unknown and I4
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Invalid comparison between Unknown and I4
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		((ScriptableRenderContext)(ref context.renderContext)).SetupCameraProperties(camera, false);
		CommandBuffer cmd = context.cmd;
		cmd.SetRenderTarget(TextureHandle.op_Implicit(colorAttachment), (RenderBufferLoadAction)2, (RenderBufferStoreAction)0, TextureHandle.op_Implicit(depthAttachment), (RenderBufferLoadAction)2, (RenderBufferStoreAction)0);
		bool num = (int)clearFlags <= 3;
		bool num2 = (int)clearFlags <= 2;
		Color val;
		if ((int)clearFlags != 2)
		{
			val = Color.clear;
		}
		else
		{
			Color backgroundColor = camera.backgroundColor;
			val = ((Color)(ref backgroundColor)).linear;
		}
		cmd.ClearRenderTarget(num, num2, val);
		cmd.SetGlobalVector(attachmentSizeID, new Vector4(1f / (float)((Vector2Int)(ref attachmentSize)).x, 1f / (float)((Vector2Int)(ref attachmentSize)).y, (float)((Vector2Int)(ref attachmentSize)).x, (float)((Vector2Int)(ref attachmentSize)).y));
		if ((Object)(object)blueNoiseTexture != (Object)null)
		{
			cmd.SetGlobalTexture(blueNoiseId, RenderTargetIdentifier.op_Implicit(blueNoiseTexture));
			cmd.SetGlobalFloat(blueNoiseRcpSizeId, 1f / (float)blueNoiseTexture.width);
		}
		if ((Object)(object)preIntegratedFgdGgxTexture != (Object)null)
		{
			int width = preIntegratedFgdGgxTexture.width;
			int height = preIntegratedFgdGgxTexture.height;
			cmd.SetGlobalTexture(preIntegratedFgdGgxId, RenderTargetIdentifier.op_Implicit(preIntegratedFgdGgxTexture));
			cmd.SetGlobalVector(preIntegratedFgdGgxTexelSizeId, new Vector4(1f / (float)width, 1f / (float)height, (float)width, (float)height));
		}
		if ((Object)(object)envBrdfLutTexture != (Object)null)
		{
			int width2 = envBrdfLutTexture.width;
			int height2 = envBrdfLutTexture.height;
			cmd.SetGlobalTexture(envBrdfLutId, RenderTargetIdentifier.op_Implicit(envBrdfLutTexture));
			cmd.SetGlobalVector(envBrdfLutTexelSizeId, new Vector4(1f / (float)width2, 1f / (float)height2, (float)width2, (float)height2));
		}
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(cmd);
		cmd.Clear();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Invalid comparison between Unknown and I4
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		RustRenderingContext rustRenderingContext = frameData.Get<RustRenderingContext>();
		SetupPass setupPass = default(SetupPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<SetupPass>("Setup", ref setupPass, profilingSampler);
		try
		{
			setupPass.attachmentSize = rustCameraContext.CameraBufferSize;
			setupPass.camera = rustCameraContext.Camera;
			setupPass.clearFlags = rustCameraContext.Camera.clearFlags;
			RustRenderPipelineSettings.PipelineTextures pipelineTextures = rustRenderingContext.pipelineSettings.pipelineTextures;
			setupPass.envBrdfLutTexture = pipelineTextures.environmentBrdfLut;
			setupPass.blueNoiseTexture = pipelineTextures.blueNoise;
			setupPass.preIntegratedFgdGgxTexture = pipelineTextures.preIntegratedFgdGgx;
			if ((int)setupPass.clearFlags > 2)
			{
				setupPass.clearFlags = (CameraClearFlags)2;
			}
			Vector2Int cameraBufferSize = rustCameraContext.CameraBufferSize;
			int x = ((Vector2Int)(ref cameraBufferSize)).x;
			cameraBufferSize = rustCameraContext.CameraBufferSize;
			TextureDesc val2 = new TextureDesc(x, ((Vector2Int)(ref cameraBufferSize)).y, false, false);
			val2.colorFormat = SystemInfo.GetGraphicsFormat((DefaultFormat)(rustCameraContext.CameraBufferSettings.allowHDR ? 1 : 0));
			val2.name = "Color Attachment";
			TextureDesc val4 = (rustCameraContext.CameraTargetDescriptor = val2);
			SetupPass setupPass2 = setupPass;
			TextureHandle val5 = renderGraph.CreateTexture(ref val4);
			rustResourceDataContext.CameraColor = (setupPass2.colorAttachment = ((RenderGraphBuilder)(ref val)).WriteTexture(ref val5));
			if (rustCameraContext.UseOpaqueColorTexture)
			{
				val4.name = "Color Copy";
				rustResourceDataContext.CameraOpaqueTexture = renderGraph.CreateTexture(ref val4);
			}
			val4.depthBufferBits = (DepthBits)32;
			val4.name = "Depth Attachment";
			SetupPass setupPass3 = setupPass;
			val5 = renderGraph.CreateTexture(ref val4);
			rustResourceDataContext.CameraDepth = (setupPass3.depthAttachment = ((RenderGraphBuilder)(ref val)).WriteTexture(ref val5));
			if (rustCameraContext.UseDepthTexture)
			{
				val4.name = "Depth Copy";
				rustResourceDataContext.CameraDepthTexture = renderGraph.CreateTexture(ref val4);
			}
			rustResourceDataContext.ActiveColorID = RustResourceDataContext.ActiveID.Camera;
			rustResourceDataContext.ActiveDepthID = RustResourceDataContext.ActiveID.Camera;
			((RenderGraphBuilder)(ref val)).AllowPassCulling(false);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<SetupPass>((RenderFunc<SetupPass>)delegate(SetupPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class SkyboxPass
{
	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("Skybox");

	private Camera camera;

	private void Render(RenderGraphContext context)
	{
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(context.cmd);
		context.cmd.Clear();
		((ScriptableRenderContext)(ref context.renderContext)).DrawSkybox(camera);
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Invalid comparison between Unknown and I4
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		if ((int)rustCameraContext.Camera.clearFlags != 1)
		{
			return;
		}
		SkyboxPass skyboxPass = default(SkyboxPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<SkyboxPass>(profilingSampler.name, ref skyboxPass, profilingSampler);
		try
		{
			skyboxPass.camera = rustCameraContext.Camera;
			TextureHandle cameraColor = rustResourceDataContext.CameraColor;
			((RenderGraphBuilder)(ref val)).ReadWriteTexture(ref cameraColor);
			cameraColor = rustResourceDataContext.CameraDepth;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraColor);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<SkyboxPass>((RenderFunc<SkyboxPass>)delegate(SkyboxPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System.Diagnostics;
using Rust.RenderPipeline.Runtime;
using UnityEngine.Experimental.Rendering.RenderGraphModule;

public class UnsupportedShadersPass
{
	[Conditional("UNITY_EDITOR")]
	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.PostProcessing;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class BloomPass
{
	private const int MAX_BLOOM_PYRAMID_LEVELS = 16;

	private static readonly ProfilingSampler sampler = new ProfilingSampler("Bloom");

	private static readonly int bicubicUpsamplingId = Shader.PropertyToID("_BloomBicubicUpsampling");

	private static readonly int intensityId = Shader.PropertyToID("_BloomIntensity");

	private static readonly int thresholdId = Shader.PropertyToID("_BloomThreshold");

	private static readonly int fxSource2Id = Shader.PropertyToID("_PostFXSource2");

	private readonly TextureHandle[] pyramid = (TextureHandle[])(object)new TextureHandle[33];

	private TextureHandle colorSource;

	private TextureHandle bloomResult;

	private PostFXBlitter postFXBlitter;

	private PostFXSettings.BloomSettings bloomSettings;

	private int stepCount;

	private void Render(RenderGraphContext context)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		Vector4 val = default(Vector4);
		val.x = Mathf.GammaToLinearSpace(bloomSettings.threshold);
		val.y = val.x * bloomSettings.thresholdKnee;
		val.z = 2f * val.y;
		val.w = 0.25f / (val.y + 1E-05f);
		val.y -= val.x;
		cmd.SetGlobalVector(thresholdId, val);
		postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(colorSource), TextureHandle.op_Implicit(pyramid[0]), bloomSettings.fadeFireflies ? PostFXPass.Pass.BloomPrefilterFireflies : PostFXPass.Pass.BloomPrefilter);
		int num = 0;
		int num2 = 2;
		int i;
		for (i = 0; i < stepCount; i++)
		{
			int num3 = num2 - 1;
			postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(pyramid[num]), TextureHandle.op_Implicit(pyramid[num3]), PostFXPass.Pass.BloomHorizontal);
			postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(pyramid[num3]), TextureHandle.op_Implicit(pyramid[num2]), PostFXPass.Pass.BloomVertical);
			num = num2;
			num2 += 2;
		}
		cmd.SetGlobalFloat(bicubicUpsamplingId, bloomSettings.bicubicUpsampling ? 1f : 0f);
		PostFXPass.Pass pass2;
		PostFXPass.Pass pass;
		float num4;
		if (bloomSettings.mode == PostFXSettings.BloomSettings.Mode.Additive)
		{
			pass2 = (pass = PostFXPass.Pass.BloomAdd);
			cmd.SetGlobalFloat(intensityId, 1f);
			num4 = bloomSettings.intensity;
		}
		else
		{
			pass2 = PostFXPass.Pass.BloomScatter;
			pass = PostFXPass.Pass.BloomScatterFinal;
			cmd.SetGlobalFloat(intensityId, bloomSettings.scatter);
			num4 = Mathf.Min(bloomSettings.intensity, 1f);
		}
		if (i > 1)
		{
			num2 -= 5;
			for (i--; i > 0; i--)
			{
				cmd.SetGlobalTexture(fxSource2Id, TextureHandle.op_Implicit(pyramid[num2 + 1]));
				postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(pyramid[num]), TextureHandle.op_Implicit(pyramid[num2]), pass2);
				num = num2;
				num2 -= 2;
			}
		}
		cmd.SetGlobalFloat(intensityId, num4);
		cmd.SetGlobalTexture(fxSource2Id, TextureHandle.op_Implicit(colorSource));
		postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(pyramid[num]), TextureHandle.op_Implicit(bloomResult), pass);
	}

	public static TextureHandle Record(RenderGraph renderGraph, ContextContainer frameData, PostFXBlitter postFXBlitter)
	{
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		PostFXSettings.BloomSettings bloom = rustCameraContext.PostFXSettings.Bloom;
		Camera camera = rustCameraContext.Camera;
		Vector2Int val = (Vector2Int)(bloom.ignoreRenderScale ? new Vector2Int(camera.pixelWidth, camera.pixelHeight) : rustCameraContext.CameraBufferSize) / 2;
		if (bloom.maxIterations == 0 || bloom.intensity <= 0f || ((Vector2Int)(ref val)).y < bloom.downscaleLimit * 2 || ((Vector2Int)(ref val)).x < bloom.downscaleLimit * 2)
		{
			return rustResourceDataContext.CameraColor;
		}
		BloomPass bloomPass = default(BloomPass);
		RenderGraphBuilder val2 = renderGraph.AddRenderPass<BloomPass>(sampler.name, ref bloomPass, sampler);
		try
		{
			bloomPass.postFXBlitter = postFXBlitter;
			BloomPass bloomPass2 = bloomPass;
			TextureHandle cameraColor = rustResourceDataContext.CameraColor;
			bloomPass2.colorSource = ((RenderGraphBuilder)(ref val2)).ReadTexture(ref cameraColor);
			bloomPass.bloomSettings = bloom;
			TextureDesc val3 = new TextureDesc(((Vector2Int)(ref val)).x, ((Vector2Int)(ref val)).y, false, false);
			val3.colorFormat = SystemInfo.GetGraphicsFormat((DefaultFormat)(rustCameraContext.CameraBufferSettings.allowHDR ? 1 : 0));
			val3.name = "Bloom Prefilter";
			TextureDesc val4 = val3;
			TextureHandle[] array = bloomPass.pyramid;
			array[0] = ((RenderGraphBuilder)(ref val2)).CreateTransientTexture(ref val4);
			val /= 2;
			int num = 1;
			int num2 = 0;
			while (num2 < bloom.maxIterations && ((Vector2Int)(ref val)).y >= bloom.downscaleLimit && ((Vector2Int)(ref val)).x >= bloom.downscaleLimit)
			{
				val4.width = ((Vector2Int)(ref val)).x;
				val4.height = ((Vector2Int)(ref val)).y;
				val4.name = "Bloom Pyramid H";
				array[num] = ((RenderGraphBuilder)(ref val2)).CreateTransientTexture(ref val4);
				val4.name = "Bloom Pyramid V";
				array[num + 1] = ((RenderGraphBuilder)(ref val2)).CreateTransientTexture(ref val4);
				val /= 2;
				num2++;
				num += 2;
			}
			bloomPass.stepCount = num2;
			Vector2Int cameraBufferSize = rustCameraContext.CameraBufferSize;
			val4.width = ((Vector2Int)(ref cameraBufferSize)).x;
			cameraBufferSize = rustCameraContext.CameraBufferSize;
			val4.height = ((Vector2Int)(ref cameraBufferSize)).y;
			val4.name = "Bloom Result";
			BloomPass bloomPass3 = bloomPass;
			cameraColor = renderGraph.CreateTexture(ref val4);
			bloomPass3.bloomResult = ((RenderGraphBuilder)(ref val2)).WriteTexture(ref cameraColor);
			((RenderGraphBuilder)(ref val2)).SetRenderFunc<BloomPass>((RenderFunc<BloomPass>)delegate(BloomPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
			return bloomPass.bloomResult;
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val2)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.PostProcessing;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class ColorLutPass
{
	private static readonly ProfilingSampler sampler = new ProfilingSampler("Color LUT");

	private static readonly int colorGradingLutId = Shader.PropertyToID("_ColorGradingLUT");

	private static readonly int colorAdjustmentsId = Shader.PropertyToID("_ColorAdjustments");

	private static readonly int colorFilterId = Shader.PropertyToID("_ColorFilter");

	private static readonly int whiteBalanceId = Shader.PropertyToID("_WhiteBalance");

	private static readonly int splitToningShadowsId = Shader.PropertyToID("_SplitToningShadows");

	private static readonly int splitToningHighlightsId = Shader.PropertyToID("_SplitToningHighlights");

	private static readonly int channelMixerRedId = Shader.PropertyToID("_ChannelMixerRed");

	private static readonly int channelMixerGreenId = Shader.PropertyToID("_ChannelMixerGreen");

	private static readonly int channelMixerBlueId = Shader.PropertyToID("_ChannelMixerBlue");

	private static readonly int smhShadowsId = Shader.PropertyToID("_SMHShadows");

	private static readonly int smhMidtonesId = Shader.PropertyToID("_SMHMidtones");

	private static readonly int smhHighlightsId = Shader.PropertyToID("_SMHHighlights");

	private static readonly int smhRangeId = Shader.PropertyToID("_SMHRange");

	private static readonly int colorGradingLutParametersId = Shader.PropertyToID("_ColorGradingLUTParameters");

	private static readonly int colorGradingLutInLogCId = Shader.PropertyToID("_ColorGradingLUTInLogC");

	private static readonly GraphicsFormat colorFormat = SystemInfo.GetGraphicsFormat((DefaultFormat)1);

	private int colorLutResolution;

	private TextureHandle colorLut;

	private PostFXSettings postFXSettings;

	private PostFXBlitter postFXBlitter;

	private bool allowHDR;

	private void ConfigureColorAdjustments(CommandBuffer commandBuffer, PostFXSettings settings)
	{
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		PostFXSettings.ColorAdjustmentsSettings colorAdjustments = settings.ColorAdjustments;
		commandBuffer.SetGlobalVector(colorAdjustmentsId, new Vector4(Mathf.Pow(2f, colorAdjustments.postExposure), colorAdjustments.contrast * 0.01f + 1f, colorAdjustments.hueShift * 0.0027777778f, colorAdjustments.saturation * 0.01f + 1f));
		commandBuffer.SetGlobalColor(colorFilterId, ((Color)(ref colorAdjustments.colorFilter)).linear);
	}

	private void ConfigureWhiteBalance(CommandBuffer commandBuffer, PostFXSettings settings)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		PostFXSettings.WhiteBalanceSettings whiteBalance = settings.WhiteBalance;
		commandBuffer.SetGlobalVector(whiteBalanceId, Vector4.op_Implicit(ColorUtils.ColorBalanceToLMSCoeffs(whiteBalance.temperature, whiteBalance.tint)));
	}

	private void ConfigureSplitToning(CommandBuffer commandBuffer, PostFXSettings settings)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		PostFXSettings.SplitToningSettings splitToning = settings.SplitToning;
		Color shadows = splitToning.shadows;
		shadows.a = splitToning.balance * 0.01f;
		commandBuffer.SetGlobalColor(splitToningShadowsId, shadows);
		commandBuffer.SetGlobalColor(splitToningHighlightsId, splitToning.highlights);
	}

	private void ConfigureChannelMixer(CommandBuffer commandBuffer, PostFXSettings settings)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		PostFXSettings.ChannelMixerSettings channelMixer = settings.ChannelMixer;
		commandBuffer.SetGlobalVector(channelMixerRedId, Vector4.op_Implicit(channelMixer.red));
		commandBuffer.SetGlobalVector(channelMixerGreenId, Vector4.op_Implicit(channelMixer.green));
		commandBuffer.SetGlobalVector(channelMixerBlueId, Vector4.op_Implicit(channelMixer.blue));
	}

	private void ConfigureShadowsMidtonesHighlights(CommandBuffer commandBuffer, PostFXSettings settings)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		PostFXSettings.ShadowsMidtonesHighlightsSettings shadowsMidtonesHighlights = settings.ShadowsMidtonesHighlights;
		commandBuffer.SetGlobalColor(smhShadowsId, ((Color)(ref shadowsMidtonesHighlights.shadows)).linear);
		commandBuffer.SetGlobalColor(smhMidtonesId, ((Color)(ref shadowsMidtonesHighlights.midtones)).linear);
		commandBuffer.SetGlobalColor(smhHighlightsId, ((Color)(ref shadowsMidtonesHighlights.highlights)).linear);
		commandBuffer.SetGlobalVector(smhRangeId, new Vector4(shadowsMidtonesHighlights.shadowsStart, shadowsMidtonesHighlights.shadowsEnd, shadowsMidtonesHighlights.highlightsStart, shadowsMidtonesHighlights.highLightsEnd));
	}

	private void Render(RenderGraphContext context)
	{
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		ConfigureColorAdjustments(cmd, postFXSettings);
		ConfigureWhiteBalance(cmd, postFXSettings);
		ConfigureSplitToning(cmd, postFXSettings);
		ConfigureChannelMixer(cmd, postFXSettings);
		ConfigureShadowsMidtonesHighlights(cmd, postFXSettings);
		int num = colorLutResolution;
		int num2 = num * num;
		cmd.SetGlobalVector(colorGradingLutParametersId, new Vector4((float)num, 0.5f / (float)num2, 0.5f / (float)num, (float)num / ((float)num - 1f)));
		PostFXSettings.ToneMappingSettings.Mode mode = postFXSettings.ToneMapping.mode;
		PostFXPass.Pass pass = (PostFXPass.Pass)(7 + mode);
		cmd.SetGlobalFloat(colorGradingLutInLogCId, (allowHDR && pass != PostFXPass.Pass.ColorGradingNone) ? 1f : 0f);
		postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(colorLut), pass);
		cmd.SetGlobalVector(colorGradingLutParametersId, new Vector4(1f / (float)num2, 1f / (float)num, (float)num - 1f));
		cmd.SetGlobalTexture(colorGradingLutId, TextureHandle.op_Implicit(colorLut));
	}

	public static TextureHandle Record(RenderGraph renderGraph, ContextContainer frameData, PostFXBlitter postFXBlitter)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		int num = (int)frameData.Get<RustRenderingContext>().pipelineSettings.colorLutResolution;
		ColorLutPass colorLutPass = default(ColorLutPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<ColorLutPass>(sampler.name, ref colorLutPass, sampler);
		try
		{
			colorLutPass.colorLutResolution = num;
			colorLutPass.postFXSettings = rustCameraContext.PostFXSettings;
			colorLutPass.allowHDR = rustCameraContext.CameraBufferSettings.allowHDR;
			colorLutPass.postFXBlitter = postFXBlitter;
			int num2 = num;
			int num3 = num2 * num2;
			TextureDesc val2 = new TextureDesc(num3, num2, false, false);
			val2.colorFormat = colorFormat;
			val2.name = "Color LUT";
			TextureDesc val3 = val2;
			ColorLutPass colorLutPass2 = colorLutPass;
			TextureHandle val4 = renderGraph.CreateTexture(ref val3);
			colorLutPass2.colorLut = ((RenderGraphBuilder)(ref val)).WriteTexture(ref val4);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<ColorLutPass>((RenderFunc<ColorLutPass>)delegate(ColorLutPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
			return colorLutPass.colorLut;
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.PostProcessing;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Rendering;

public struct PostFXBlitter
{
	private static readonly Rect fullViewRect = new Rect(0f, 0f, 1f, 1f);

	private static readonly int fxSourceId = Shader.PropertyToID("_PostFXSource");

	private static readonly int finalSrcBlendId = Shader.PropertyToID("_FinalSrcBlend");

	private static readonly int finalDstBlendId = Shader.PropertyToID("_FinalDstBlend");

	private readonly Camera camera;

	private readonly CameraSettings cameraSettings;

	private readonly PostFXSettings postFXSettings;

	public PostFXBlitter(ContextContainer frameData)
	{
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		camera = rustCameraContext.Camera;
		cameraSettings = rustCameraContext.CameraSettings;
		postFXSettings = rustCameraContext.PostFXSettings;
	}

	public void Draw(CommandBuffer commandBuffer, RenderTargetIdentifier to, PostFXPass.Pass pass)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer.SetRenderTarget(to, (RenderBufferLoadAction)2, (RenderBufferStoreAction)0);
		commandBuffer.DrawProcedural(Matrix4x4.identity, postFXSettings.Material, (int)pass, (MeshTopology)0, 3);
	}

	public void Draw(CommandBuffer commandBuffer, RenderTargetIdentifier from, RenderTargetIdentifier to, PostFXPass.Pass pass)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer.SetGlobalTexture(fxSourceId, from);
		commandBuffer.SetRenderTarget(to, (RenderBufferLoadAction)2, (RenderBufferStoreAction)0);
		commandBuffer.DrawProcedural(Matrix4x4.identity, postFXSettings.Material, (int)pass, (MeshTopology)0, 3);
	}

	public void DrawFinal(CommandBuffer commandBuffer, RenderTargetIdentifier from, PostFXPass.Pass pass)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer.SetGlobalFloat(finalSrcBlendId, (float)cameraSettings.finalBlendMode.source);
		commandBuffer.SetGlobalFloat(finalDstBlendId, (float)cameraSettings.finalBlendMode.destination);
		commandBuffer.SetGlobalTexture(fxSourceId, from);
		commandBuffer.SetRenderTarget(RenderTargetIdentifier.op_Implicit((BuiltinRenderTextureType)2), (RenderBufferLoadAction)(((int)cameraSettings.finalBlendMode.destination == 0 && camera.rect == fullViewRect) ? 2 : 0), (RenderBufferStoreAction)0);
		commandBuffer.SetViewport(camera.pixelRect);
		commandBuffer.DrawProcedural(Matrix4x4.identity, postFXSettings.Material, (int)pass, (MeshTopology)0, 3);
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.PostProcessing;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class PostFXPass
{
	public enum Pass
	{
		BloomPrefilter,
		BloomPrefilterFireflies,
		BloomHorizontal,
		BloomVertical,
		BloomAdd,
		BloomScatter,
		BloomScatterFinal,
		ColorGradingNone,
		ColorGradingACES,
		ColorGradingNeutral,
		ColorGradingReinhard,
		ApplyColorGrading,
		ApplyColorGradingWithLuma,
		FXAA,
		FXAAWithLuma,
		FinalRescale,
		Copy
	}

	private enum ScaleMode
	{
		None,
		Bilinear,
		Bicubic
	}

	private static readonly ProfilingSampler groupSampler = new ProfilingSampler("Post FX");

	private static readonly ProfilingSampler finalSampler = new ProfilingSampler("Final Post FX");

	private static readonly int copyBicubicId = Shader.PropertyToID("_CopyBicubic");

	private static readonly int fxaaConfigId = Shader.PropertyToID("_FXAAConfig");

	private static readonly int finalSrcBlendId = Shader.PropertyToID("_FinalSrcBlend");

	private static readonly int finalDstBlendId = Shader.PropertyToID("_FinalDstBlend");

	private static readonly GlobalKeyword fxaaLowKeyword = GlobalKeyword.Create("FXAA_QUALITY_LOW");

	private static readonly GlobalKeyword fxaaMediumKeyword = GlobalKeyword.Create("FXAA_QUALITY_MEDIUM");

	private static readonly GraphicsFormat colorFormat = SystemInfo.GetGraphicsFormat((DefaultFormat)0);

	private bool keepAlpha;

	private ScaleMode scaleMode;

	private TextureHandle colorSource;

	private TextureHandle colorGradingResult;

	private TextureHandle scaledResult;

	private CameraBufferSettings.FxaaSettings fxaaSettings;

	private PostFXBlitter postFXBlitter;

	private void ConfigureFxaa(CommandBuffer commandBuffer)
	{
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer.SetKeyword(ref fxaaLowKeyword, fxaaSettings.quality == CameraBufferSettings.FxaaSettings.Quality.Low);
		commandBuffer.SetKeyword(ref fxaaMediumKeyword, fxaaSettings.quality == CameraBufferSettings.FxaaSettings.Quality.Medium);
		commandBuffer.SetGlobalVector(fxaaConfigId, new Vector4(fxaaSettings.fixedThreshold, fxaaSettings.relativeThreshold, fxaaSettings.subpixelBlending));
	}

	private void Render(RenderGraphContext context)
	{
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		cmd.SetGlobalFloat(finalSrcBlendId, 1f);
		cmd.SetGlobalFloat(finalDstBlendId, 0f);
		RenderTargetIdentifier val;
		Pass pass;
		if (fxaaSettings.enabled)
		{
			val = TextureHandle.op_Implicit(colorGradingResult);
			pass = (keepAlpha ? Pass.FXAA : Pass.FXAAWithLuma);
			ConfigureFxaa(cmd);
			postFXBlitter.Draw(cmd, TextureHandle.op_Implicit(colorSource), val, keepAlpha ? Pass.ApplyColorGrading : Pass.ApplyColorGradingWithLuma);
		}
		else
		{
			val = TextureHandle.op_Implicit(colorSource);
			pass = Pass.ApplyColorGrading;
		}
		if (scaleMode == ScaleMode.None)
		{
			postFXBlitter.DrawFinal(cmd, val, pass);
		}
		else
		{
			postFXBlitter.Draw(cmd, val, TextureHandle.op_Implicit(scaledResult), pass);
			cmd.SetGlobalFloat(copyBicubicId, (scaleMode == ScaleMode.Bicubic) ? 1f : 0f);
			postFXBlitter.DrawFinal(cmd, TextureHandle.op_Implicit(scaledResult), Pass.FinalRescale);
		}
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(cmd);
		cmd.Clear();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		RenderGraphProfilingScope val = default(RenderGraphProfilingScope);
		((RenderGraphProfilingScope)(ref val))..ctor(renderGraph, groupSampler);
		try
		{
			bool flag = rustCameraContext.CameraSettings.keepAlpha;
			PostFXBlitter postFXBlitter = new PostFXBlitter(frameData);
			TextureHandle val2 = BloomPass.Record(renderGraph, frameData, postFXBlitter);
			TextureHandle val3 = ColorLutPass.Record(renderGraph, frameData, postFXBlitter);
			PostFXPass postFXPass = default(PostFXPass);
			RenderGraphBuilder val4 = renderGraph.AddRenderPass<PostFXPass>(finalSampler.name, ref postFXPass, finalSampler);
			try
			{
				postFXPass.keepAlpha = flag;
				postFXPass.colorSource = ((RenderGraphBuilder)(ref val4)).ReadTexture(ref val2);
				postFXPass.fxaaSettings = rustCameraContext.CameraBufferSettings.fxaaSettings;
				postFXPass.postFXBlitter = postFXBlitter;
				((RenderGraphBuilder)(ref val4)).ReadTexture(ref val3);
				Vector2Int cameraBufferSize = rustCameraContext.CameraBufferSize;
				if (((Vector2Int)(ref cameraBufferSize)).x == rustCameraContext.Camera.pixelWidth)
				{
					postFXPass.scaleMode = ScaleMode.None;
					goto IL_00f9;
				}
				PostFXPass postFXPass2 = postFXPass;
				if (rustCameraContext.CameraBufferSettings.bicubicRescaling == CameraBufferSettings.BicubicRescalingMode.UpAndDown)
				{
					goto IL_00f3;
				}
				if (rustCameraContext.CameraBufferSettings.bicubicRescaling == CameraBufferSettings.BicubicRescalingMode.UpOnly)
				{
					cameraBufferSize = rustCameraContext.CameraBufferSize;
					if (((Vector2Int)(ref cameraBufferSize)).x < rustCameraContext.Camera.pixelWidth)
					{
						goto IL_00f3;
					}
				}
				int num = 1;
				goto IL_00f4;
				IL_00f3:
				num = 2;
				goto IL_00f4;
				IL_00f4:
				postFXPass2.scaleMode = (ScaleMode)num;
				goto IL_00f9;
				IL_00f9:
				bool enabled = rustCameraContext.CameraBufferSettings.fxaaSettings.enabled;
				if (enabled || postFXPass.scaleMode != 0)
				{
					cameraBufferSize = rustCameraContext.CameraBufferSize;
					int x = ((Vector2Int)(ref cameraBufferSize)).x;
					cameraBufferSize = rustCameraContext.CameraBufferSize;
					TextureDesc val5 = new TextureDesc(x, ((Vector2Int)(ref cameraBufferSize)).y, false, false);
					val5.colorFormat = colorFormat;
					TextureDesc val6 = val5;
					if (enabled)
					{
						val6.name = "Color Grading Result";
						postFXPass.colorGradingResult = ((RenderGraphBuilder)(ref val4)).CreateTransientTexture(ref val6);
					}
					if (postFXPass.scaleMode != 0)
					{
						val6.name = "Scaled Result";
						postFXPass.scaledResult = ((RenderGraphBuilder)(ref val4)).CreateTransientTexture(ref val6);
					}
				}
				((RenderGraphBuilder)(ref val4)).SetRenderFunc<PostFXPass>((RenderFunc<PostFXPass>)delegate(PostFXPass pass, RenderGraphContext context)
				{
					pass.Render(context);
				});
			}
			finally
			{
				((IDisposable)(RenderGraphBuilder)(ref val4)/*cast due to .constrained prefix*/).Dispose();
			}
		}
		finally
		{
			((IDisposable)(RenderGraphProfilingScope)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.Lighting;
using UnityEngine;
using UnityEngine.Rendering;

public struct AdditionalLightData
{
	public const int STRIDE = 80;

	public Vector4 color;

	public Vector4 position;

	public Vector4 directionAndMask;

	public Vector4 spotAngle;

	public Vector4 shadowData;

	public static AdditionalLightData CreatePointLight(ref VisibleLight visibleLight, Light light, Vector4 shadowData)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		AdditionalLightData result = default(AdditionalLightData);
		result.color = Color.op_Implicit(((VisibleLight)(ref visibleLight)).finalColor);
		Matrix4x4 localToWorldMatrix = ((VisibleLight)(ref visibleLight)).localToWorldMatrix;
		result.position = ((Matrix4x4)(ref localToWorldMatrix)).GetColumn(3);
		result.position.w = 1f / Mathf.Max(((VisibleLight)(ref visibleLight)).range * ((VisibleLight)(ref visibleLight)).range, 1E-05f);
		result.spotAngle = new Vector4(0f, 1f);
		result.directionAndMask = Vector4.zero;
		result.directionAndMask.w = light.renderingLayerMask.ReinterpretAsFloat();
		result.shadowData = shadowData;
		return result;
	}

	public static AdditionalLightData CreateSpotLight(ref VisibleLight visibleLight, Light light, Vector4 shadowData)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		AdditionalLightData result = default(AdditionalLightData);
		result.color = Color.op_Implicit(((VisibleLight)(ref visibleLight)).finalColor);
		Matrix4x4 localToWorldMatrix = ((VisibleLight)(ref visibleLight)).localToWorldMatrix;
		result.position = ((Matrix4x4)(ref localToWorldMatrix)).GetColumn(3);
		result.position.w = 1f / Mathf.Max(((VisibleLight)(ref visibleLight)).range * ((VisibleLight)(ref visibleLight)).range, 1E-05f);
		localToWorldMatrix = ((VisibleLight)(ref visibleLight)).localToWorldMatrix;
		result.directionAndMask = -((Matrix4x4)(ref localToWorldMatrix)).GetColumn(2);
		result.directionAndMask.w = light.renderingLayerMask.ReinterpretAsFloat();
		float num = Mathf.Cos((float)Math.PI / 360f * light.innerSpotAngle);
		float num2 = Mathf.Cos((float)Math.PI / 360f * ((VisibleLight)(ref visibleLight)).spotAngle);
		float num3 = 1f / Mathf.Max(num - num2, 0.001f);
		result.spotAngle = new Vector4(num3, (0f - num2) * num3);
		result.shadowData = shadowData;
		return result;
	}
}


using UnityEngine;

public struct AdditionalShadowData
{
	public const int STRIDE = 80;

	public Vector4 tileData;

	public Matrix4x4 shadowMatrix;

	public AdditionalShadowData(Vector2 offset, float scale, float bias, float border, Matrix4x4 matrix)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		tileData.x = offset.x * scale + border;
		tileData.y = offset.y * scale + border;
		tileData.z = scale - border - border;
		tileData.w = bias;
		shadowMatrix = matrix;
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.Lighting;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class DeferredIndirectLightingPass
{
	private enum Pass
	{
		IndirectLighting,
		Combine
	}

	private static readonly ProfilingSampler drawIndirectLightingSampler = new ProfilingSampler("Draw Indirect Lighting");

	private static readonly ProfilingSampler combineIndirectLightingSampler = new ProfilingSampler("Combine Indirect Lighting");

	private static readonly int indirectDiffuseTextureId = Shader.PropertyToID("_IndirectDiffuseTexture");

	private static readonly int indirectSpecularTextureId = Shader.PropertyToID("_IndirectSpecularTexture");

	private static readonly int inverseViewProjectionMatrixId = Shader.PropertyToID("_InvViewProjection");

	private static readonly int gBuffer0Id = Shader.PropertyToID("_CameraGBufferTexture0");

	private static readonly int gBuffer1Id = Shader.PropertyToID("_CameraGBufferTexture1");

	private static readonly int gBuffer2Id = Shader.PropertyToID("_CameraGBufferTexture2");

	private static readonly int gBuffer3Id = Shader.PropertyToID("_CameraGBufferTexture3");

	private readonly RenderTargetIdentifier[] indirectLightingRenderTargets = (RenderTargetIdentifier[])(object)new RenderTargetIdentifier[2];

	private readonly TextureHandle[] gBufferTextureHandles = (TextureHandle[])(object)new TextureHandle[RustResourceDataContext.gBufferTextureCount];

	private TextureHandle indirectDiffuseHandle;

	private TextureHandle indirectSpecularHandle;

	private TextureHandle cameraColorHandle;

	private TextureHandle cameraDepthHandle;

	private Camera camera;

	private Material material;

	private void Setup(Camera camera, Material material)
	{
		this.camera = camera;
		this.material = material;
	}

	private void DrawIndirectLighting(RenderGraphContext context)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		Matrix4x4 val = GL.GetGPUProjectionMatrix(camera.projectionMatrix, true) * camera.worldToCameraMatrix;
		Matrix4x4 inverse = ((Matrix4x4)(ref val)).inverse;
		indirectLightingRenderTargets[0] = TextureHandle.op_Implicit(indirectDiffuseHandle);
		indirectLightingRenderTargets[1] = TextureHandle.op_Implicit(indirectSpecularHandle);
		cmd.SetGlobalMatrix(inverseViewProjectionMatrixId, inverse);
		cmd.GetTemporaryRT(indirectSpecularTextureId, camera.pixelWidth, camera.pixelHeight, 0, (FilterMode)0, (GraphicsFormat)48);
		cmd.SetRenderTarget(indirectLightingRenderTargets, TextureHandle.op_Implicit(cameraDepthHandle));
		cmd.SetGlobalTexture(gBuffer0Id, TextureHandle.op_Implicit(gBufferTextureHandles[0]));
		cmd.SetGlobalTexture(gBuffer1Id, TextureHandle.op_Implicit(gBufferTextureHandles[1]));
		cmd.SetGlobalTexture(gBuffer2Id, TextureHandle.op_Implicit(gBufferTextureHandles[2]));
		cmd.SetGlobalTexture(gBuffer3Id, TextureHandle.op_Implicit(gBufferTextureHandles[3]));
		cmd.ClearRenderTarget((RTClearFlags)1, Color.clear, 1f, 0u);
		cmd.DrawProcedural(Matrix4x4.identity, material, 0, (MeshTopology)0, 3);
	}

	private void CombineIndirectLighting(RenderGraphContext context)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		cmd.SetRenderTarget(TextureHandle.op_Implicit(cameraColorHandle), TextureHandle.op_Implicit(cameraDepthHandle));
		cmd.SetGlobalTexture(indirectDiffuseTextureId, TextureHandle.op_Implicit(indirectDiffuseHandle));
		cmd.SetGlobalTexture(indirectSpecularTextureId, TextureHandle.op_Implicit(indirectSpecularHandle));
		cmd.DrawProcedural(Matrix4x4.identity, material, 1, (MeshTopology)0, 3);
	}

	private static bool SkipPass(Camera camera)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Invalid comparison between Unknown and I4
		return (int)camera.cameraType == 16;
	}

	public static void Record_DrawIndirectLighting(RenderGraph renderGraph, ContextContainer frameData, Material material)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		if (SkipPass(rustCameraContext.Camera))
		{
			return;
		}
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		DeferredIndirectLightingPass deferredIndirectLightingPass = default(DeferredIndirectLightingPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<DeferredIndirectLightingPass>(drawIndirectLightingSampler.name, ref deferredIndirectLightingPass, drawIndirectLightingSampler);
		try
		{
			Vector2Int cameraBufferSize = rustCameraContext.CameraBufferSize;
			int x = ((Vector2Int)(ref cameraBufferSize)).x;
			cameraBufferSize = rustCameraContext.CameraBufferSize;
			TextureDesc val2 = new TextureDesc(x, ((Vector2Int)(ref cameraBufferSize)).y, false, false);
			val2.colorFormat = SystemInfo.GetGraphicsFormat((DefaultFormat)(rustCameraContext.CameraBufferSettings.allowHDR ? 1 : 0));
			val2.name = "Indirect Diffuse";
			TextureDesc val3 = val2;
			DeferredIndirectLightingPass deferredIndirectLightingPass2 = deferredIndirectLightingPass;
			TextureHandle val4 = renderGraph.CreateTexture(ref val3);
			rustResourceDataContext.IndirectDiffuseHandle = (deferredIndirectLightingPass2.indirectDiffuseHandle = ((RenderGraphBuilder)(ref val)).WriteTexture(ref val4));
			val3.name = "Indirect Specular";
			DeferredIndirectLightingPass deferredIndirectLightingPass3 = deferredIndirectLightingPass;
			val4 = renderGraph.CreateTexture(ref val3);
			rustResourceDataContext.IndirectSpecularHandle = (deferredIndirectLightingPass3.indirectSpecularHandle = ((RenderGraphBuilder)(ref val)).WriteTexture(ref val4));
			deferredIndirectLightingPass.Setup(rustCameraContext.Camera, material);
			for (int i = 0; i < deferredIndirectLightingPass.gBufferTextureHandles.Length; i++)
			{
				deferredIndirectLightingPass.gBufferTextureHandles[i] = ((RenderGraphBuilder)(ref val)).ReadTexture(ref rustResourceDataContext.GBuffer[i]);
			}
			val4 = rustResourceDataContext.CameraDepthTexture;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref val4);
			DeferredIndirectLightingPass deferredIndirectLightingPass4 = deferredIndirectLightingPass;
			val4 = rustResourceDataContext.CameraDepth;
			deferredIndirectLightingPass4.cameraDepthHandle = ((RenderGraphBuilder)(ref val)).ReadTexture(ref val4);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<DeferredIndirectLightingPass>((RenderFunc<DeferredIndirectLightingPass>)delegate(DeferredIndirectLightingPass pass, RenderGraphContext context)
			{
				pass.DrawIndirectLighting(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}

	public static void Record_CombineIndirectLighting(RenderGraph renderGraph, ContextContainer frameData, Material material)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		Camera val = frameData.Get<RustCameraContext>().Camera;
		if (SkipPass(val))
		{
			return;
		}
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		DeferredIndirectLightingPass deferredIndirectLightingPass = default(DeferredIndirectLightingPass);
		RenderGraphBuilder val2 = renderGraph.AddRenderPass<DeferredIndirectLightingPass>(combineIndirectLightingSampler.name, ref deferredIndirectLightingPass, combineIndirectLightingSampler);
		try
		{
			deferredIndirectLightingPass.Setup(val, material);
			DeferredIndirectLightingPass deferredIndirectLightingPass2 = deferredIndirectLightingPass;
			TextureHandle val3 = rustResourceDataContext.IndirectDiffuseHandle;
			deferredIndirectLightingPass2.indirectDiffuseHandle = ((RenderGraphBuilder)(ref val2)).ReadTexture(ref val3);
			DeferredIndirectLightingPass deferredIndirectLightingPass3 = deferredIndirectLightingPass;
			val3 = rustResourceDataContext.IndirectSpecularHandle;
			deferredIndirectLightingPass3.indirectSpecularHandle = ((RenderGraphBuilder)(ref val2)).ReadTexture(ref val3);
			DeferredIndirectLightingPass deferredIndirectLightingPass4 = deferredIndirectLightingPass;
			val3 = rustResourceDataContext.CameraColor;
			deferredIndirectLightingPass4.cameraColorHandle = ((RenderGraphBuilder)(ref val2)).ReadWriteTexture(ref val3);
			DeferredIndirectLightingPass deferredIndirectLightingPass5 = deferredIndirectLightingPass;
			val3 = rustResourceDataContext.CameraDepth;
			deferredIndirectLightingPass5.cameraDepthHandle = ((RenderGraphBuilder)(ref val2)).ReadTexture(ref val3);
			((RenderGraphBuilder)(ref val2)).SetRenderFunc<DeferredIndirectLightingPass>((RenderFunc<DeferredIndirectLightingPass>)delegate(DeferredIndirectLightingPass pass, RenderGraphContext context)
			{
				pass.CombineIndirectLighting(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val2)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using System.Collections.Generic;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.Lighting;
using Rust.RenderPipeline.Runtime.RenderingContext;
using Unity.Collections;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class DeferredLightingPass
{
	private enum ShaderPasses
	{
		StencilVolume,
		Lighting,
		DirectionalLighting
	}

	private const float STENCIL_SHAPE_GUARD = 1.06067f;

	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("Deferred Lighting");

	private static readonly int gBuffer0Id = Shader.PropertyToID("_CameraGBufferTexture0");

	private static readonly int gBuffer1Id = Shader.PropertyToID("_CameraGBufferTexture1");

	private static readonly int gBuffer2Id = Shader.PropertyToID("_CameraGBufferTexture2");

	private static readonly int inverseViewProjId = Shader.PropertyToID("_InverseViewProj");

	private static readonly int spotLightScaleId = Shader.PropertyToID("_SpotLightScale");

	private static readonly int spotLightBiasId = Shader.PropertyToID("_SpotLightBias");

	private static readonly int spotLightGuardId = Shader.PropertyToID("_SpotLightGuard");

	private static readonly int lightColorId = Shader.PropertyToID("_LightColor");

	private static readonly int lightPositionAndRangeId = Shader.PropertyToID("_LightPositionAndRange");

	private static readonly int lightDirectionAndMaskId = Shader.PropertyToID("_LightDirectionAndMask");

	private static readonly int lightSpotAngleId = Shader.PropertyToID("_LightSpotAngles");

	private static readonly int lightShadowDataId = Shader.PropertyToID("_LightShadowData");

	private readonly TextureHandle[] gBufferTextureHandles = (TextureHandle[])(object)new TextureHandle[RustResourceDataContext.gBufferTextureCount];

	private CullingResults cullingResults;

	private Mesh icoSphere;

	private Mesh icoHemisphere;

	private Material deferredLightingMaterial;

	private Camera camera;

	private CameraSettings cameraSettings;

	private Dictionary<Light, Vector4> lightShadowData;

	private static Mesh CreateSphereMesh()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_0405: Unknown result type (might be due to invalid IL or missing references)
		//IL_041c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_0470: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0491: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d0: Expected O, but got Unknown
		Vector3[] vertices = (Vector3[])(object)new Vector3[42]
		{
			new Vector3(0f, 0f, -1.07f),
			new Vector3(0.174f, -0.535f, -0.91f),
			new Vector3(-0.455f, -0.331f, -0.91f),
			new Vector3(0.562f, 0f, -0.91f),
			new Vector3(-0.455f, 0.331f, -0.91f),
			new Vector3(0.174f, 0.535f, -0.91f),
			new Vector3(-0.281f, -0.865f, -0.562f),
			new Vector3(0.736f, -0.535f, -0.562f),
			new Vector3(0.296f, -0.91f, -0.468f),
			new Vector3(-0.91f, 0f, -0.562f),
			new Vector3(-0.774f, -0.562f, -0.478f),
			new Vector3(0f, -1.07f, 0f),
			new Vector3(-0.629f, -0.865f, 0f),
			new Vector3(0.629f, -0.865f, 0f),
			new Vector3(-1.017f, -0.331f, 0f),
			new Vector3(0.957f, 0f, -0.478f),
			new Vector3(0.736f, 0.535f, -0.562f),
			new Vector3(1.017f, -0.331f, 0f),
			new Vector3(1.017f, 0.331f, 0f),
			new Vector3(-0.296f, -0.91f, 0.478f),
			new Vector3(0.281f, -0.865f, 0.562f),
			new Vector3(0.774f, -0.562f, 0.478f),
			new Vector3(-0.736f, -0.535f, 0.562f),
			new Vector3(0.91f, 0f, 0.562f),
			new Vector3(0.455f, -0.331f, 0.91f),
			new Vector3(-0.174f, -0.535f, 0.91f),
			new Vector3(0.629f, 0.865f, 0f),
			new Vector3(0.774f, 0.562f, 0.478f),
			new Vector3(0.455f, 0.331f, 0.91f),
			new Vector3(0f, 0f, 1.07f),
			new Vector3(-0.562f, 0f, 0.91f),
			new Vector3(-0.957f, 0f, 0.478f),
			new Vector3(0.281f, 0.865f, 0.562f),
			new Vector3(-0.174f, 0.535f, 0.91f),
			new Vector3(0.296f, 0.91f, -0.478f),
			new Vector3(-1.017f, 0.331f, 0f),
			new Vector3(-0.736f, 0.535f, 0.562f),
			new Vector3(-0.296f, 0.91f, 0.478f),
			new Vector3(0f, 1.07f, 0f),
			new Vector3(-0.281f, 0.865f, -0.562f),
			new Vector3(-0.774f, 0.562f, -0.478f),
			new Vector3(-0.629f, 0.865f, 0f)
		};
		int[] triangles = new int[240]
		{
			0, 1, 2, 0, 3, 1, 2, 4, 0, 0,
			5, 3, 0, 4, 5, 1, 6, 2, 3, 7,
			1, 1, 8, 6, 1, 7, 8, 9, 4, 2,
			2, 6, 10, 10, 9, 2, 8, 11, 6, 6,
			12, 10, 11, 12, 6, 7, 13, 8, 8, 13,
			11, 10, 14, 9, 10, 12, 14, 3, 15, 7,
			5, 16, 3, 3, 16, 15, 15, 17, 7, 17,
			13, 7, 16, 18, 15, 15, 18, 17, 11, 19,
			12, 13, 20, 11, 11, 20, 19, 17, 21, 13,
			13, 21, 20, 12, 19, 22, 12, 22, 14, 17,
			23, 21, 18, 23, 17, 21, 24, 20, 23, 24,
			21, 20, 25, 19, 19, 25, 22, 24, 25, 20,
			26, 18, 16, 18, 27, 23, 26, 27, 18, 28,
			24, 23, 27, 28, 23, 24, 29, 25, 28, 29,
			24, 25, 30, 22, 25, 29, 30, 14, 22, 31,
			22, 30, 31, 32, 28, 27, 26, 32, 27, 33,
			29, 28, 30, 29, 33, 33, 28, 32, 34, 26,
			16, 5, 34, 16, 14, 31, 35, 14, 35, 9,
			31, 30, 36, 30, 33, 36, 35, 31, 36, 37,
			33, 32, 36, 33, 37, 38, 32, 26, 34, 38,
			26, 38, 37, 32, 5, 39, 34, 39, 38, 34,
			4, 39, 5, 9, 40, 4, 9, 35, 40, 4,
			40, 39, 35, 36, 41, 41, 36, 37, 41, 37,
			38, 40, 35, 41, 40, 41, 39, 41, 38, 39
		};
		return new Mesh
		{
			indexFormat = (IndexFormat)0,
			vertices = vertices,
			triangles = triangles,
			hideFlags = (HideFlags)61
		};
	}

	private static Mesh CreateHemisphereMesh()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0341: Unknown result type (might be due to invalid IL or missing references)
		//IL_0358: Unknown result type (might be due to invalid IL or missing references)
		//IL_035d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0379: Unknown result type (might be due to invalid IL or missing references)
		//IL_0390: Unknown result type (might be due to invalid IL or missing references)
		//IL_0395: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0400: Unknown result type (might be due to invalid IL or missing references)
		//IL_0405: Unknown result type (might be due to invalid IL or missing references)
		//IL_041c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0421: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0454: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_0470: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_048c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0491: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d0: Expected O, but got Unknown
		Vector3[] vertices = (Vector3[])(object)new Vector3[42]
		{
			new Vector3(0f, 0f, 0f),
			new Vector3(1f, 0f, 0f),
			new Vector3(0.92388f, 0.382683f, 0f),
			new Vector3(0.707107f, 0.707107f, 0f),
			new Vector3(0.382683f, 0.92388f, 0f),
			new Vector3(-0f, 1f, 0f),
			new Vector3(-0.382684f, 0.92388f, 0f),
			new Vector3(-0.707107f, 0.707107f, 0f),
			new Vector3(-0.92388f, 0.382683f, 0f),
			new Vector3(-1f, -0f, 0f),
			new Vector3(-0.92388f, -0.382683f, 0f),
			new Vector3(-0.707107f, -0.707107f, 0f),
			new Vector3(-0.382683f, -0.92388f, 0f),
			new Vector3(0f, -1f, 0f),
			new Vector3(0.382684f, -0.923879f, 0f),
			new Vector3(0.707107f, -0.707107f, 0f),
			new Vector3(0.92388f, -0.382683f, 0f),
			new Vector3(0f, 0f, 1f),
			new Vector3(0.707107f, 0f, 0.707107f),
			new Vector3(0f, -0.707107f, 0.707107f),
			new Vector3(0f, 0.707107f, 0.707107f),
			new Vector3(-0.707107f, 0f, 0.707107f),
			new Vector3(0.816497f, -0.408248f, 0.408248f),
			new Vector3(0.408248f, -0.408248f, 0.816497f),
			new Vector3(0.408248f, -0.816497f, 0.408248f),
			new Vector3(0.408248f, 0.816497f, 0.408248f),
			new Vector3(0.408248f, 0.408248f, 0.816497f),
			new Vector3(0.816497f, 0.408248f, 0.408248f),
			new Vector3(-0.816497f, 0.408248f, 0.408248f),
			new Vector3(-0.408248f, 0.408248f, 0.816497f),
			new Vector3(-0.408248f, 0.816497f, 0.408248f),
			new Vector3(-0.408248f, -0.816497f, 0.408248f),
			new Vector3(-0.408248f, -0.408248f, 0.816497f),
			new Vector3(-0.816497f, -0.408248f, 0.408248f),
			new Vector3(0f, -0.92388f, 0.382683f),
			new Vector3(0.92388f, 0f, 0.382683f),
			new Vector3(0f, -0.382683f, 0.92388f),
			new Vector3(0.382683f, 0f, 0.92388f),
			new Vector3(0f, 0.92388f, 0.382683f),
			new Vector3(0f, 0.382683f, 0.92388f),
			new Vector3(-0.92388f, 0f, 0.382683f),
			new Vector3(-0.382683f, 0f, 0.92388f)
		};
		int[] triangles = new int[240]
		{
			0, 2, 1, 0, 3, 2, 0, 4, 3, 0,
			5, 4, 0, 6, 5, 0, 7, 6, 0, 8,
			7, 0, 9, 8, 0, 10, 9, 0, 11, 10,
			0, 12, 11, 0, 13, 12, 0, 14, 13, 0,
			15, 14, 0, 16, 15, 0, 1, 16, 22, 23,
			24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
			14, 24, 34, 35, 22, 16, 36, 23, 37, 2,
			27, 35, 38, 25, 4, 37, 26, 39, 6, 30,
			38, 40, 28, 8, 39, 29, 41, 10, 33, 40,
			34, 31, 12, 41, 32, 36, 15, 22, 24, 18,
			23, 22, 19, 24, 23, 3, 25, 27, 20, 26,
			25, 18, 27, 26, 7, 28, 30, 21, 29, 28,
			20, 30, 29, 11, 31, 33, 19, 32, 31, 21,
			33, 32, 13, 14, 34, 15, 24, 14, 19, 34,
			24, 1, 35, 16, 18, 22, 35, 15, 16, 22,
			17, 36, 37, 19, 23, 36, 18, 37, 23, 1,
			2, 35, 3, 27, 2, 18, 35, 27, 5, 38,
			4, 20, 25, 38, 3, 4, 25, 17, 37, 39,
			18, 26, 37, 20, 39, 26, 5, 6, 38, 7,
			30, 6, 20, 38, 30, 9, 40, 8, 21, 28,
			40, 7, 8, 28, 17, 39, 41, 20, 29, 39,
			21, 41, 29, 9, 10, 40, 11, 33, 10, 21,
			40, 33, 13, 34, 12, 19, 31, 34, 11, 12,
			31, 17, 41, 36, 21, 32, 41, 19, 36, 32
		};
		return new Mesh
		{
			indexFormat = (IndexFormat)0,
			vertices = vertices,
			triangles = triangles,
			hideFlags = (HideFlags)61
		};
	}

	private void Setup(Material deferredLightingMaterial, CullingResults cullingResults, ShadowSettings shadowSettings, int renderingLayerMask, Camera camera, CameraSettings cameraSettings)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		this.deferredLightingMaterial = deferredLightingMaterial;
		this.cullingResults = cullingResults;
		this.camera = camera;
		this.cameraSettings = cameraSettings;
		if ((Object)(object)icoSphere == (Object)null)
		{
			icoSphere = CreateSphereMesh();
		}
		if ((Object)(object)icoHemisphere == (Object)null)
		{
			icoHemisphere = CreateHemisphereMesh();
		}
	}

	private void Render(RenderGraphContext context)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		NativeArray<VisibleLight> visibleLights = ((CullingResults)(ref cullingResults)).visibleLights;
		CommandBuffer cmd = context.cmd;
		Matrix4x4 val = GL.GetGPUProjectionMatrix(camera.projectionMatrix, true) * camera.worldToCameraMatrix;
		Matrix4x4 inverse = ((Matrix4x4)(ref val)).inverse;
		cmd.SetGlobalMatrix(inverseViewProjId, inverse);
		cmd.SetGlobalTexture(gBuffer0Id, TextureHandle.op_Implicit(gBufferTextureHandles[0]));
		cmd.SetGlobalTexture(gBuffer1Id, TextureHandle.op_Implicit(gBufferTextureHandles[1]));
		cmd.SetGlobalTexture(gBuffer2Id, TextureHandle.op_Implicit(gBufferTextureHandles[2]));
		RenderPointLight(context, visibleLights);
		RenderSpotLight(context, visibleLights);
		RenderDirectionalLight(context, visibleLights);
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(context.cmd);
		context.cmd.Clear();
	}

	private void RenderPointLight(RenderGraphContext context, NativeArray<VisibleLight> visibleLights)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Invalid comparison between Unknown and I4
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		Matrix4x4 val2 = default(Matrix4x4);
		for (int i = 0; i < visibleLights.Length; i++)
		{
			VisibleLight visibleLight = visibleLights[i];
			if ((int)((VisibleLight)(ref visibleLight)).lightType == 2 && (((VisibleLight)(ref visibleLight)).light.renderingLayerMask & cameraSettings.renderingLayerMask) != 0)
			{
				Matrix4x4 localToWorldMatrix = ((VisibleLight)(ref visibleLight)).localToWorldMatrix;
				Vector3 val = Vector4.op_Implicit(((Matrix4x4)(ref localToWorldMatrix)).GetColumn(3));
				((Matrix4x4)(ref val2))..ctor(new Vector4(((VisibleLight)(ref visibleLight)).range, 0f, 0f, 0f), new Vector4(0f, ((VisibleLight)(ref visibleLight)).range, 0f, 0f), new Vector4(0f, 0f, ((VisibleLight)(ref visibleLight)).range, 0f), new Vector4(val.x, val.y, val.z, 1f));
				if (!lightShadowData.TryGetValue(((VisibleLight)(ref visibleLight)).light, out var value))
				{
					value = Vector4.zero;
				}
				AdditionalLightData additionalLightData = AdditionalLightData.CreatePointLight(ref visibleLight, ((VisibleLight)(ref visibleLight)).light, value);
				cmd.BeginSample("Point Light");
				cmd.SetGlobalVector(lightColorId, additionalLightData.color);
				cmd.SetGlobalVector(lightPositionAndRangeId, additionalLightData.position);
				cmd.SetGlobalVector(lightDirectionAndMaskId, additionalLightData.directionAndMask);
				cmd.SetGlobalVector(lightSpotAngleId, additionalLightData.spotAngle);
				cmd.SetGlobalVector(lightShadowDataId, additionalLightData.shadowData);
				cmd.DrawMesh(icoSphere, val2, deferredLightingMaterial, 0, 0);
				cmd.DrawMesh(icoSphere, val2, deferredLightingMaterial, 0, 1);
				cmd.EndSample("Point Light");
			}
		}
	}

	private void RenderSpotLight(RenderGraphContext context, NativeArray<VisibleLight> visibleLights)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		cmd.EnableShaderKeyword("_SPOT");
		for (int i = 0; i < visibleLights.Length; i++)
		{
			VisibleLight visibleLight = visibleLights[i];
			if ((int)((VisibleLight)(ref visibleLight)).lightType == 0 && (((VisibleLight)(ref visibleLight)).light.renderingLayerMask & cameraSettings.renderingLayerMask) != 0)
			{
				float num = (float)Math.PI / 180f * ((VisibleLight)(ref visibleLight)).spotAngle * 0.5f;
				float num2 = Mathf.Cos(num);
				float num3 = Mathf.Sin(num);
				float num4 = Mathf.Lerp(1f, 1.06067f, num3);
				if (!lightShadowData.TryGetValue(((VisibleLight)(ref visibleLight)).light, out var value))
				{
					value = Vector4.zero;
				}
				AdditionalLightData additionalLightData = AdditionalLightData.CreateSpotLight(ref visibleLight, ((VisibleLight)(ref visibleLight)).light, value);
				cmd.BeginSample("Spot Light");
				cmd.SetGlobalColor(lightColorId, Color.op_Implicit(additionalLightData.color));
				cmd.SetGlobalVector(lightPositionAndRangeId, additionalLightData.position);
				cmd.SetGlobalVector(lightDirectionAndMaskId, additionalLightData.directionAndMask);
				cmd.SetGlobalVector(lightSpotAngleId, additionalLightData.spotAngle);
				cmd.SetGlobalVector(lightShadowDataId, additionalLightData.shadowData);
				cmd.SetGlobalVector(spotLightScaleId, new Vector4(num3, num3, 1f - num2, ((VisibleLight)(ref visibleLight)).range));
				cmd.SetGlobalVector(spotLightBiasId, new Vector4(0f, 0f, num2, 0f));
				cmd.SetGlobalVector(spotLightGuardId, new Vector4(num4, num4, num4, num2 * ((VisibleLight)(ref visibleLight)).range));
				cmd.DrawMesh(icoHemisphere, ((VisibleLight)(ref visibleLight)).localToWorldMatrix, deferredLightingMaterial, 0, 0);
				cmd.DrawMesh(icoHemisphere, ((VisibleLight)(ref visibleLight)).localToWorldMatrix, deferredLightingMaterial, 0, 1);
				cmd.EndSample("Spot Light");
			}
		}
		cmd.DisableShaderKeyword("_SPOT");
	}

	private void RenderDirectionalLight(RenderGraphContext context, NativeArray<VisibleLight> visibleLights)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Invalid comparison between Unknown and I4
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		cmd.EnableShaderKeyword("_DIRECTIONAL");
		for (int i = 0; i < visibleLights.Length; i++)
		{
			VisibleLight visibleLight = visibleLights[i];
			if ((int)((VisibleLight)(ref visibleLight)).lightType == 1 && (((VisibleLight)(ref visibleLight)).light.renderingLayerMask & cameraSettings.renderingLayerMask) != 0)
			{
				if (!lightShadowData.TryGetValue(((VisibleLight)(ref visibleLight)).light, out var value))
				{
					value = Vector4.zero;
				}
				DirectionalLightData directionalLightData = new DirectionalLightData(ref visibleLight, ((VisibleLight)(ref visibleLight)).light, value);
				cmd.BeginSample("Directional Light");
				cmd.SetGlobalColor(lightColorId, Color.op_Implicit(directionalLightData.color));
				cmd.SetGlobalVector(lightDirectionAndMaskId, directionalLightData.directionAndMask);
				cmd.SetGlobalVector(lightShadowDataId, directionalLightData.shadowData);
				cmd.DrawProcedural(Matrix4x4.identity, deferredLightingMaterial, 2, (MeshTopology)0, 3);
				cmd.EndSample("Directional Light");
			}
		}
		cmd.DisableShaderKeyword("_DIRECTIONAL");
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData, Material deferredLightingMaterial)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		RustRenderingContext rustRenderingContext = frameData.Get<RustRenderingContext>();
		CameraSettings cameraSettings = rustCameraContext.CameraSettings;
		ShadowSettings shadows = rustRenderingContext.pipelineSettings.shadows;
		DeferredLightingPass deferredLightingPass = default(DeferredLightingPass);
		RenderGraphBuilder val = renderGraph.AddRenderPass<DeferredLightingPass>(profilingSampler.name, ref deferredLightingPass);
		try
		{
			deferredLightingPass.Setup(deferredLightingMaterial, rustRenderingContext.cullResults, shadows, rustCameraContext.CameraSettings.renderingLayerMask, rustCameraContext.Camera, cameraSettings);
			deferredLightingPass.lightShadowData = rustResourceDataContext.LightShadowData;
			for (int i = 0; i < rustResourceDataContext.GBuffer.Length - 1; i++)
			{
				deferredLightingPass.gBufferTextureHandles[i] = ((RenderGraphBuilder)(ref val)).ReadTexture(ref rustResourceDataContext.GBuffer[i]);
			}
			deferredLightingPass.gBufferTextureHandles[3] = ((RenderGraphBuilder)(ref val)).ReadWriteTexture(ref rustResourceDataContext.GBuffer[3]);
			TextureHandle cameraDepth = rustResourceDataContext.CameraDepth;
			((RenderGraphBuilder)(ref val)).ReadWriteTexture(ref cameraDepth);
			cameraDepth = rustResourceDataContext.CameraDepthTexture;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraDepth);
			cameraDepth = rustResourceDataContext.MainShadowsTexture;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraDepth);
			cameraDepth = rustResourceDataContext.AdditionalShadowsTexture;
			((RenderGraphBuilder)(ref val)).ReadTexture(ref cameraDepth);
			ComputeBufferHandle shadowMatricesBuffer = rustResourceDataContext.ShadowMatricesBuffer;
			((RenderGraphBuilder)(ref val)).ReadComputeBuffer(ref shadowMatricesBuffer);
			shadowMatricesBuffer = rustResourceDataContext.ShadowCascadesBuffer;
			((RenderGraphBuilder)(ref val)).ReadComputeBuffer(ref shadowMatricesBuffer);
			shadowMatricesBuffer = rustResourceDataContext.AdditionalShadowDataBuffer;
			((RenderGraphBuilder)(ref val)).ReadComputeBuffer(ref shadowMatricesBuffer);
			((RenderGraphBuilder)(ref val)).SetRenderFunc<DeferredLightingPass>((RenderFunc<DeferredLightingPass>)delegate(DeferredLightingPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref val)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using Rust.RenderPipeline.Runtime;
using UnityEngine;
using UnityEngine.Rendering;

public struct DirectionalLightData
{
	public const int STRIDE = 48;

	public Vector4 color;

	public Vector4 directionAndMask;

	public Vector4 shadowData;

	public DirectionalLightData(ref VisibleLight visibleLight, Light light, Vector4 shadowData)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		color = Color.op_Implicit(((VisibleLight)(ref visibleLight)).finalColor);
		Matrix4x4 localToWorldMatrix = ((VisibleLight)(ref visibleLight)).localToWorldMatrix;
		directionAndMask = -((Matrix4x4)(ref localToWorldMatrix)).GetColumn(2);
		directionAndMask.w = light.renderingLayerMask.ReinterpretAsFloat();
		this.shadowData = shadowData;
	}
}


using UnityEngine;

public struct DirectionalShadowCascade
{
	public const int STRIDE = 32;

	public Vector4 cullingSphere;

	public Vector4 data;

	public DirectionalShadowCascade(Vector4 cullingSphere, float tileSize, float filterSize)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		float num = 2f * cullingSphere.w / tileSize;
		filterSize *= num;
		cullingSphere.w -= filterSize;
		cullingSphere.w *= cullingSphere.w;
		this.cullingSphere = cullingSphere;
		data = new Vector4(1f / cullingSphere.w, filterSize * 1.4142137f);
	}
}


using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

[BurstCompile(/*Could not decode attribute arguments.*/)]
public struct ForwardPlusTilesJob : IJobFor
{
	[ReadOnly]
	public NativeArray<float4> lightBounds;

	[WriteOnly]
	[NativeDisableParallelForRestriction]
	public NativeArray<int> tileData;

	public int additionalLightCount;

	public float2 tileScreenUVSize;

	public int maxLightsPerTile;

	public int tilesPerRow;

	public int tileDataSize;

	public void Execute(int tileIndex)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		int num = tileIndex / tilesPerRow;
		int num2 = tileIndex - num * tilesPerRow;
		float4 val = math.float4((float)num2, (float)num, (float)(num2 + 1), (float)(num + 1)) * ((float2)(ref tileScreenUVSize)).xyxy;
		int num3 = tileIndex * tileDataSize;
		int num4 = num3;
		int num5 = 0;
		for (int i = 0; i < additionalLightCount; i++)
		{
			float4 val2 = lightBounds[i];
			if (math.all(math.float4(((float4)(ref val2)).xy, ((float4)(ref val)).xy) <= math.float4(((float4)(ref val)).zw, ((float4)(ref val2)).zw)))
			{
				tileData[++num4] = i;
				if (++num5 >= maxLightsPerTile)
				{
					break;
				}
			}
		}
		tileData[num3] = num5;
	}
}


using System;
using System.Collections.Generic;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.Lighting;
using Rust.RenderPipeline.Runtime.RenderingContext;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class LightingPass
{
	private const int MAX_DIRECTIONAL_LIGHT_COUNT = 4;

	private const int MAX_ADDITIONAL_LIGHT_COUNT = 128;

	private static readonly ProfilingSampler profilingSampler = new ProfilingSampler("Lighting");

	private static readonly DirectionalLightData[] directionalLightData = new DirectionalLightData[4];

	private static readonly AdditionalLightData[] additionalLightData = new AdditionalLightData[128];

	private static readonly int dirLightCountId = Shader.PropertyToID("_DirectionalLightCount");

	private static readonly int directionalLightDataId = Shader.PropertyToID("_DirectionalLightData");

	private static readonly int additionalLightCountId = Shader.PropertyToID("_AdditionalLightCount");

	private static readonly int additionalLightDataId = Shader.PropertyToID("_AdditionalLightData");

	private static readonly int tilesId = Shader.PropertyToID("_ForwardPlusTiles");

	private static readonly int tileSettingsId = Shader.PropertyToID("_ForwardPlusTileSettings");

	private CullingResults cullingResults;

	private readonly Shadows shadows = new Shadows();

	private int directionalLightCount;

	private int additionalLightCount;

	private ComputeBufferHandle directionalLightDataBuffer;

	private ComputeBufferHandle additionalLightDataBuffer;

	private ComputeBufferHandle tilesBuffer;

	private Vector2 screenUvToTileCoordinates;

	private Vector2Int tileCount;

	private int maxLightsPerTile;

	private int tileDataSize;

	private int maxTileDataSize;

	private NativeArray<float4> lightBounds;

	private NativeArray<int> tileData;

	private JobHandle forwardPlusJobHandle;

	private readonly Dictionary<Light, Vector4> lightShadowData = new Dictionary<Light, Vector4>();

	private int TileCount => ((Vector2Int)(ref tileCount)).x * ((Vector2Int)(ref tileCount)).y;

	private void Setup(CullingResults cullingResults, Vector2Int attachmentSize, ForwardPlusSettings forwardPlusSettings, ShadowSettings shadowSettings, int renderingLayerMask)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		this.cullingResults = cullingResults;
		shadows.Setup(cullingResults, shadowSettings);
		lightBounds = new NativeArray<float4>(128, (Allocator)3, (NativeArrayOptions)0);
		maxLightsPerTile = ((forwardPlusSettings.maxLightsPerTile <= 0) ? 31 : forwardPlusSettings.maxLightsPerTile);
		maxTileDataSize = (tileDataSize = maxLightsPerTile + 1);
		float num = ((forwardPlusSettings.tileSize <= ForwardPlusSettings.TileSize.Default) ? 64f : ((float)forwardPlusSettings.tileSize));
		screenUvToTileCoordinates.x = (float)((Vector2Int)(ref attachmentSize)).x / num;
		screenUvToTileCoordinates.y = (float)((Vector2Int)(ref attachmentSize)).y / num;
		((Vector2Int)(ref tileCount)).x = Mathf.CeilToInt(screenUvToTileCoordinates.x);
		((Vector2Int)(ref tileCount)).y = Mathf.CeilToInt(screenUvToTileCoordinates.y);
		SetupLights(renderingLayerMask);
	}

	private void SetupForwardPlus(int lightIndex, ref VisibleLight visibleLight)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		Rect screenRect = ((VisibleLight)(ref visibleLight)).screenRect;
		lightBounds[lightIndex] = math.float4(((Rect)(ref screenRect)).xMin, ((Rect)(ref screenRect)).yMin, ((Rect)(ref screenRect)).xMax, ((Rect)(ref screenRect)).yMax);
	}

	private void SetupLights(int renderingLayerMask)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_028e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Expected I4, but got Unknown
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		NativeArray<VisibleLight> visibleLights = ((CullingResults)(ref cullingResults)).visibleLights;
		int num = Mathf.Min(maxLightsPerTile, visibleLights.Length);
		tileDataSize = num + 1;
		directionalLightCount = (additionalLightCount = 0);
		lightShadowData.Clear();
		for (int i = 0; i < visibleLights.Length; i++)
		{
			VisibleLight visibleLight = visibleLights[i];
			Light light = ((VisibleLight)(ref visibleLight)).light;
			if ((light.renderingLayerMask & renderingLayerMask) == 0)
			{
				continue;
			}
			LightType lightType = ((VisibleLight)(ref visibleLight)).lightType;
			switch ((int)lightType)
			{
			case 1:
				if (directionalLightCount < 4)
				{
					lightShadowData[light] = Vector4.op_Implicit(shadows.ReserveDirectionalShadows(light, i));
					directionalLightData[directionalLightCount++] = new DirectionalLightData(ref visibleLight, light, lightShadowData[light]);
				}
				break;
			case 2:
				if (additionalLightCount < 128)
				{
					lightShadowData[light] = shadows.ReserveAdditionalShadows(light, i);
					SetupForwardPlus(additionalLightCount, ref visibleLight);
					additionalLightData[additionalLightCount++] = AdditionalLightData.CreatePointLight(ref visibleLight, light, lightShadowData[light]);
				}
				break;
			case 0:
				if (additionalLightCount < 128)
				{
					lightShadowData[light] = shadows.ReserveAdditionalShadows(light, i);
					SetupForwardPlus(additionalLightCount, ref visibleLight);
					additionalLightData[additionalLightCount++] = AdditionalLightData.CreateSpotLight(ref visibleLight, light, lightShadowData[light]);
				}
				break;
			}
		}
		tileData = new NativeArray<int>(TileCount * tileDataSize, (Allocator)3, (NativeArrayOptions)1);
		forwardPlusJobHandle = IJobForExtensions.ScheduleParallel<ForwardPlusTilesJob>(new ForwardPlusTilesJob
		{
			lightBounds = lightBounds,
			tileData = tileData,
			additionalLightCount = additionalLightCount,
			tileScreenUVSize = math.float2(1f / screenUvToTileCoordinates.x, 1f / screenUvToTileCoordinates.y),
			maxLightsPerTile = num,
			tilesPerRow = ((Vector2Int)(ref tileCount)).x,
			tileDataSize = tileDataSize
		}, TileCount, ((Vector2Int)(ref tileCount)).x, default(JobHandle));
	}

	private void Render(RenderGraphContext context)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		CommandBuffer cmd = context.cmd;
		cmd.SetGlobalInt(dirLightCountId, directionalLightCount);
		cmd.SetBufferData(ComputeBufferHandle.op_Implicit(directionalLightDataBuffer), (Array)directionalLightData, 0, 0, directionalLightCount);
		cmd.SetGlobalBuffer(directionalLightDataId, ComputeBufferHandle.op_Implicit(directionalLightDataBuffer));
		cmd.SetGlobalInt(additionalLightCountId, additionalLightCount);
		cmd.SetBufferData(ComputeBufferHandle.op_Implicit(additionalLightDataBuffer), (Array)additionalLightData, 0, 0, additionalLightCount);
		cmd.SetGlobalBuffer(additionalLightDataId, ComputeBufferHandle.op_Implicit(additionalLightDataBuffer));
		shadows.Render(context);
		((JobHandle)(ref forwardPlusJobHandle)).Complete();
		cmd.SetBufferData<int>(ComputeBufferHandle.op_Implicit(tilesBuffer), tileData, 0, 0, tileData.Length);
		cmd.SetGlobalBuffer(tilesId, ComputeBufferHandle.op_Implicit(tilesBuffer));
		cmd.SetGlobalVector(tileSettingsId, new Vector4(screenUvToTileCoordinates.x, screenUvToTileCoordinates.y, ((Vector2Int)(ref tileCount)).x.ReinterpretAsFloat(), tileDataSize.ReinterpretAsFloat()));
		((ScriptableRenderContext)(ref context.renderContext)).ExecuteCommandBuffer(cmd);
		cmd.Clear();
		lightBounds.Dispose();
		tileData.Dispose();
	}

	public static void Record(RenderGraph renderGraph, ContextContainer frameData)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		RustCameraContext rustCameraContext = frameData.Get<RustCameraContext>();
		RustRenderingContext rustRenderingContext = frameData.Get<RustRenderingContext>();
		CameraSettings cameraSettings = rustCameraContext.CameraSettings;
		ShadowSettings shadowSettings = rustRenderingContext.pipelineSettings.shadows;
		ForwardPlusSettings forwardPlus = rustRenderingContext.pipelineSettings.forwardPlus;
		int renderingLayerMask = (cameraSettings.maskLights ? cameraSettings.renderingLayerMask : (-1));
		LightingPass lightingPass = default(LightingPass);
		RenderGraphBuilder builder = renderGraph.AddRenderPass<LightingPass>("Lighting", ref lightingPass, profilingSampler);
		try
		{
			lightingPass.Setup(rustRenderingContext.cullResults, rustCameraContext.CameraBufferSize, forwardPlus, shadowSettings, renderingLayerMask);
			LightingPass lightingPass2 = lightingPass;
			ComputeBufferDesc val = new ComputeBufferDesc
			{
				name = "Directional Light Data",
				count = 4,
				stride = 48
			};
			ComputeBufferHandle val2 = renderGraph.CreateComputeBuffer(ref val);
			lightingPass2.directionalLightDataBuffer = ((RenderGraphBuilder)(ref builder)).WriteComputeBuffer(ref val2);
			LightingPass lightingPass3 = lightingPass;
			val = new ComputeBufferDesc
			{
				name = "Additional Light Data",
				count = 128,
				stride = 80
			};
			val2 = renderGraph.CreateComputeBuffer(ref val);
			lightingPass3.additionalLightDataBuffer = ((RenderGraphBuilder)(ref builder)).WriteComputeBuffer(ref val2);
			LightingPass lightingPass4 = lightingPass;
			val = new ComputeBufferDesc
			{
				name = "Forward+ Tiles",
				count = lightingPass.TileCount * lightingPass.maxTileDataSize,
				stride = 4
			};
			val2 = renderGraph.CreateComputeBuffer(ref val);
			lightingPass4.tilesBuffer = ((RenderGraphBuilder)(ref builder)).WriteComputeBuffer(ref val2);
			((RenderGraphBuilder)(ref builder)).SetRenderFunc<LightingPass>((RenderFunc<LightingPass>)delegate(LightingPass pass, RenderGraphContext context)
			{
				pass.Render(context);
			});
			lightingPass.shadows.InitResources(renderGraph, builder, frameData);
			((RenderGraphBuilder)(ref builder)).AllowPassCulling(false);
			rustResourceDataContext.DirectionalLightDataBuffer = lightingPass.directionalLightDataBuffer;
			rustResourceDataContext.AdditionalLightDataBuffer = lightingPass.additionalLightDataBuffer;
			rustResourceDataContext.LightTilesBuffer = lightingPass.tilesBuffer;
			rustResourceDataContext.LightShadowData = lightingPass.lightShadowData;
		}
		finally
		{
			((IDisposable)(RenderGraphBuilder)(ref builder)/*cast due to .constrained prefix*/).Dispose();
		}
	}
}


using System;
using Rust.RenderPipeline.Runtime;
using Rust.RenderPipeline.Runtime.Passes.Lighting;
using Rust.RenderPipeline.Runtime.RenderingContext;
using UnityEngine;
using UnityEngine.Experimental.Rendering.RenderGraphModule;
using UnityEngine.Rendering;

public class Shadows
{
	private struct ShadowedDirectionalLight
	{
		public int visibleLightIndex;

		public float slopeScaleBias;

		public float nearPlaneOffset;
	}

	private struct ShadowedAdditionalLight
	{
		public int visibleLightIndex;

		public float slopeScaleBias;

		public float normalBias;

		public bool isPoint;
	}

	private const float ROOT_TWO = 1.4142137f;

	private const int MAX_SHADOWED_DIRECTIONAL_LIGHT_COUNT = 4;

	private const int MAX_SHADOWED_ADDITIONAL_LIGHT_COUNT = 16;

	private const int MAX_CASCADES = 4;

	private static readonly int directionalShadowAtlasId = Shader.PropertyToID("_DirectionalShadowAtlas");

	private static readonly int directionalShadowMatricesId = Shader.PropertyToID("_DirectionalShadowMatrices");

	private static readonly int directionalShadowCascadesId = Shader.PropertyToID("_DirectionalShadowCascades");

	private static readonly int cascadeCountId = Shader.PropertyToID("_CascadeCount");

	private static readonly int additionalShadowAtlasId = Shader.PropertyToID("_AdditionalShadowAtlas");

	private static readonly int additionalShadowDataId = Shader.PropertyToID("_AdditionalShadowData");

	private static readonly int shadowAtlasSizeId = Shader.PropertyToID("_ShadowAtlasSize");

	private static readonly int shadowDistanceFadeId = Shader.PropertyToID("_ShadowDistanceFade");

	private static readonly int shadowPancakingId = Shader.PropertyToID("_ShadowPancaking");

	private static readonly DirectionalShadowCascade[] directionalShadowCascades = new DirectionalShadowCascade[4];

	private static readonly Matrix4x4[] directionalShadowMatrices = (Matrix4x4[])(object)new Matrix4x4[16];

	private static readonly AdditionalShadowData[] additionalShadowData = new AdditionalShadowData[16];

	private static readonly GlobalKeyword[] filterQualityKeywords = (GlobalKeyword[])(object)new GlobalKeyword[2]
	{
		GlobalKeyword.Create("_SHADOW_FILTER_MEDIUM"),
		GlobalKeyword.Create("_SHADOW_FILTER_HIGH")
	};

	private static readonly GlobalKeyword softCascadeBlendKeyword = GlobalKeyword.Create("_SOFT_CASCADE_BLEND");

	private readonly ShadowedDirectionalLight[] shadowedDirectionalLights = new ShadowedDirectionalLight[4];

	private readonly ShadowedAdditionalLight[] shadowedAdditionalLights = new ShadowedAdditionalLight[16];

	private CommandBuffer commandBuffer;

	private TextureHandle directionalAtlas;

	private TextureHandle additionalAtlas;

	private ComputeBufferHandle directionalShadowCascadesBuffer;

	private ComputeBufferHandle directionalShadowMatricesBuffer;

	private ComputeBufferHandle additionalShadowDataBuffer;

	private ScriptableRenderContext context;

	private CullingResults cullingResults;

	private ShadowSettings settings;

	private int shadowedDirectionalLightCount;

	private int shadowedAdditionalLightCount;

	private Vector4 atlasSizes;

	public void Setup(CullingResults cullingResults, ShadowSettings settings)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		this.cullingResults = cullingResults;
		this.settings = settings;
		shadowedDirectionalLightCount = (shadowedAdditionalLightCount = 0);
	}

	public void Render(RenderGraphContext context)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		commandBuffer = context.cmd;
		this.context = context.renderContext;
		if (shadowedDirectionalLightCount > 0)
		{
			RenderDirectionalShadows();
		}
		if (shadowedAdditionalLightCount > 0)
		{
			RenderAdditionalShadows();
		}
		SetKeywords(filterQualityKeywords, (int)(settings.filterQuality - 1));
		commandBuffer.SetGlobalBuffer(directionalShadowCascadesId, ComputeBufferHandle.op_Implicit(directionalShadowCascadesBuffer));
		commandBuffer.SetGlobalBuffer(directionalShadowMatricesId, ComputeBufferHandle.op_Implicit(directionalShadowMatricesBuffer));
		commandBuffer.SetGlobalBuffer(additionalShadowDataId, ComputeBufferHandle.op_Implicit(additionalShadowDataBuffer));
		commandBuffer.SetGlobalTexture(directionalShadowAtlasId, TextureHandle.op_Implicit(directionalAtlas));
		commandBuffer.SetGlobalTexture(additionalShadowAtlasId, TextureHandle.op_Implicit(additionalAtlas));
		commandBuffer.SetGlobalInt(cascadeCountId, (shadowedDirectionalLightCount > 0) ? settings.directional.cascadeCount : 0);
		float num = 1f - settings.directional.cascadeFade;
		commandBuffer.SetGlobalVector(shadowDistanceFadeId, new Vector4(1f / settings.maxDistance, 1f / settings.distanceFade, 1f / (1f - num * num)));
		commandBuffer.SetGlobalVector(shadowAtlasSizeId, atlasSizes);
		ExecuteCommandBuffer();
	}

	public Vector3 ReserveDirectionalShadows(Light light, int visibleLightIndex)
	{
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		Bounds val = default(Bounds);
		if (shadowedDirectionalLightCount < 4 && (int)light.shadows != 0 && light.shadowStrength > 0f && ((CullingResults)(ref cullingResults)).GetShadowCasterBounds(visibleLightIndex, ref val))
		{
			shadowedDirectionalLights[shadowedDirectionalLightCount] = new ShadowedDirectionalLight
			{
				visibleLightIndex = visibleLightIndex,
				slopeScaleBias = light.shadowBias,
				nearPlaneOffset = light.shadowNearPlane
			};
			return new Vector3(light.shadowStrength, (float)(settings.directional.cascadeCount * shadowedDirectionalLightCount++), 1f + light.shadowNormalBias);
		}
		return Vector3.zero;
	}

	public Vector4 ReserveAdditionalShadows(Light light, int visibleLightIndex)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Invalid comparison between Unknown and I4
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		if ((int)light.shadows == 0 || light.shadowStrength <= 0f)
		{
			return new Vector4(0f, 0f, 0f, -1f);
		}
		bool flag = (int)light.type == 2;
		int num = shadowedAdditionalLightCount + ((!flag) ? 1 : 6);
		Bounds val = default(Bounds);
		if (num > 16 || !((CullingResults)(ref cullingResults)).GetShadowCasterBounds(visibleLightIndex, ref val))
		{
			return new Vector4(0f - light.shadowStrength, 0f, 0f, -1f);
		}
		shadowedAdditionalLights[shadowedAdditionalLightCount] = new ShadowedAdditionalLight
		{
			visibleLightIndex = visibleLightIndex,
			slopeScaleBias = light.shadowBias,
			normalBias = 1f + light.shadowNormalBias,
			isPoint = flag
		};
		Vector4 result = new Vector4(light.shadowStrength, (float)shadowedAdditionalLightCount, flag ? 1f : 0f, -1f);
		shadowedAdditionalLightCount = num;
		return result;
	}

	private void RenderDirectionalShadows()
	{
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		int atlasSize = (int)settings.directional.atlasSize;
		atlasSizes.x = atlasSize;
		atlasSizes.y = 1f / (float)atlasSize;
		commandBuffer.SetRenderTarget(TextureHandle.op_Implicit(directionalAtlas), (RenderBufferLoadAction)2, (RenderBufferStoreAction)0);
		commandBuffer.ClearRenderTarget(true, false, Color.clear);
		commandBuffer.SetGlobalFloat(shadowPancakingId, 1f);
		commandBuffer.BeginSample("Directional Shadows");
		ExecuteCommandBuffer();
		int num = shadowedDirectionalLightCount * settings.directional.cascadeCount;
		int num2 = ((num <= 1) ? 1 : ((num <= 4) ? 2 : 4));
		int tileSize = atlasSize / num2;
		for (int i = 0; i < shadowedDirectionalLightCount; i++)
		{
			RenderDirectionalShadows(i, num2, tileSize);
		}
		commandBuffer.SetBufferData(ComputeBufferHandle.op_Implicit(directionalShadowCascadesBuffer), (Array)directionalShadowCascades, 0, 0, settings.directional.cascadeCount);
		commandBuffer.SetBufferData(ComputeBufferHandle.op_Implicit(directionalShadowMatricesBuffer), (Array)directionalShadowMatrices, 0, 0, shadowedDirectionalLightCount * settings.directional.cascadeCount);
		commandBuffer.SetKeyword(ref softCascadeBlendKeyword, settings.directional.softCascadeBlend);
		commandBuffer.EndSample("Directional Shadows");
		ExecuteCommandBuffer();
	}

	private void RenderDirectionalShadows(int index, int split, int tileSize)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		ShadowedDirectionalLight shadowedDirectionalLight = shadowedDirectionalLights[index];
		ShadowDrawingSettings val = default(ShadowDrawingSettings);
		((ShadowDrawingSettings)(ref val))..ctor(cullingResults, shadowedDirectionalLight.visibleLightIndex, (BatchCullingProjectionType)2);
		((ShadowDrawingSettings)(ref val)).useRenderingLayerMaskTest = true;
		ShadowDrawingSettings val2 = val;
		int cascadeCount = settings.directional.cascadeCount;
		int num = index * cascadeCount;
		Vector3 cascadeRatios = settings.directional.CascadeRatios;
		float shadowCascadeBlendCullingFactor = Mathf.Max(0f, 0.8f - settings.directional.cascadeFade);
		float scale = 1f / (float)split;
		Matrix4x4 val3 = default(Matrix4x4);
		Matrix4x4 val4 = default(Matrix4x4);
		ShadowSplitData splitData = default(ShadowSplitData);
		for (int i = 0; i < cascadeCount; i++)
		{
			((CullingResults)(ref cullingResults)).ComputeDirectionalShadowMatricesAndCullingPrimitives(shadowedDirectionalLight.visibleLightIndex, i, cascadeCount, cascadeRatios, tileSize, shadowedDirectionalLight.nearPlaneOffset, ref val3, ref val4, ref splitData);
			((ShadowSplitData)(ref splitData)).shadowCascadeBlendCullingFactor = shadowCascadeBlendCullingFactor;
			((ShadowDrawingSettings)(ref val2)).splitData = splitData;
			if (index == 0)
			{
				directionalShadowCascades[i] = new DirectionalShadowCascade(((ShadowSplitData)(ref splitData)).cullingSphere, tileSize, settings.DirectionalFilterSize);
			}
			int num2 = num + i;
			directionalShadowMatrices[num2] = ConvertToAtlasMatrix(val4 * val3, SetTileViewport(num2, split, tileSize), scale);
			commandBuffer.SetViewProjectionMatrices(val3, val4);
			commandBuffer.SetGlobalDepthBias(0f, shadowedDirectionalLight.slopeScaleBias);
			ExecuteCommandBuffer();
			((ScriptableRenderContext)(ref context)).DrawShadows(ref val2);
			commandBuffer.SetGlobalDepthBias(0f, 0f);
		}
	}

	private void RenderAdditionalShadows()
	{
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		int atlasSize = (int)settings.additional.atlasSize;
		atlasSizes.z = atlasSize;
		atlasSizes.w = 1f / (float)atlasSize;
		commandBuffer.SetRenderTarget(TextureHandle.op_Implicit(additionalAtlas), (RenderBufferLoadAction)2, (RenderBufferStoreAction)0);
		commandBuffer.ClearRenderTarget(true, false, Color.clear);
		commandBuffer.SetGlobalFloat(shadowPancakingId, 0f);
		commandBuffer.BeginSample("Additional Shadows");
		ExecuteCommandBuffer();
		int num = shadowedAdditionalLightCount;
		int num2 = ((num <= 1) ? 1 : ((num <= 4) ? 2 : 4));
		int tileSize = atlasSize / num2;
		int num3 = 0;
		while (num3 < shadowedAdditionalLightCount)
		{
			if (shadowedAdditionalLights[num3].isPoint)
			{
				RenderPointShadows(num3, num2, tileSize);
				num3 += 6;
			}
			else
			{
				RenderSpotShadows(num3, num2, tileSize);
				num3++;
			}
		}
		commandBuffer.SetBufferData(ComputeBufferHandle.op_Implicit(additionalShadowDataBuffer), (Array)additionalShadowData, 0, 0, shadowedAdditionalLightCount);
		commandBuffer.EndSample("Additional Shadows");
		ExecuteCommandBuffer();
	}

	private void RenderSpotShadows(int index, int split, int tileSize)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		ShadowedAdditionalLight shadowedAdditionalLight = shadowedAdditionalLights[index];
		ShadowDrawingSettings val = default(ShadowDrawingSettings);
		((ShadowDrawingSettings)(ref val))..ctor(cullingResults, shadowedAdditionalLight.visibleLightIndex, (BatchCullingProjectionType)1);
		((ShadowDrawingSettings)(ref val)).useRenderingLayerMaskTest = true;
		ShadowDrawingSettings val2 = val;
		Matrix4x4 val3 = default(Matrix4x4);
		Matrix4x4 val4 = default(Matrix4x4);
		ShadowSplitData splitData = default(ShadowSplitData);
		((CullingResults)(ref cullingResults)).ComputeSpotShadowMatricesAndCullingPrimitives(shadowedAdditionalLight.visibleLightIndex, ref val3, ref val4, ref splitData);
		((ShadowDrawingSettings)(ref val2)).splitData = splitData;
		float num = 2f / ((float)tileSize * val4.m00) * settings.AdditionalFilterSize;
		float bias = shadowedAdditionalLight.normalBias * num * 1.4142137f;
		Vector2 offset = SetTileViewport(index, split, tileSize);
		float scale = 1f / (float)split;
		additionalShadowData[index] = new AdditionalShadowData(offset, scale, bias, atlasSizes.w * 0.5f, ConvertToAtlasMatrix(val4 * val3, offset, scale));
		commandBuffer.SetViewProjectionMatrices(val3, val4);
		commandBuffer.SetGlobalDepthBias(0f, shadowedAdditionalLight.slopeScaleBias);
		ExecuteCommandBuffer();
		((ScriptableRenderContext)(ref context)).DrawShadows(ref val2);
		commandBuffer.SetGlobalDepthBias(0f, 0f);
	}

	private void RenderPointShadows(int index, int split, int tileSize)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		ShadowedAdditionalLight shadowedAdditionalLight = shadowedAdditionalLights[index];
		ShadowDrawingSettings val = default(ShadowDrawingSettings);
		((ShadowDrawingSettings)(ref val))..ctor(cullingResults, shadowedAdditionalLight.visibleLightIndex, (BatchCullingProjectionType)1);
		((ShadowDrawingSettings)(ref val)).useRenderingLayerMaskTest = true;
		ShadowDrawingSettings val2 = val;
		float num = 2f / (float)tileSize * ((float)settings.additional.filter + 1f);
		float num2 = shadowedAdditionalLight.normalBias * num * 1.4142137f;
		float scale = 1f / (float)split;
		Matrix4x4 val3 = default(Matrix4x4);
		Matrix4x4 val4 = default(Matrix4x4);
		ShadowSplitData splitData = default(ShadowSplitData);
		for (int i = 0; i < 6; i++)
		{
			float num3 = Mathf.Atan(1f + num2 + num) * 57.29578f * 2f - 90f;
			((CullingResults)(ref cullingResults)).ComputePointShadowMatricesAndCullingPrimitives(shadowedAdditionalLight.visibleLightIndex, (CubemapFace)i, num3, ref val3, ref val4, ref splitData);
			val3.m11 = 0f - val3.m11;
			val3.m12 = 0f - val3.m12;
			val3.m13 = 0f - val3.m13;
			((ShadowDrawingSettings)(ref val2)).splitData = splitData;
			int num4 = index + i;
			Vector2 offset = SetTileViewport(num4, split, tileSize);
			additionalShadowData[num4] = new AdditionalShadowData(offset, scale, num2, atlasSizes.w * 0.5f, ConvertToAtlasMatrix(val4 * val3, offset, scale));
			commandBuffer.SetViewProjectionMatrices(val3, val4);
			commandBuffer.SetGlobalDepthBias(0f, shadowedAdditionalLight.slopeScaleBias);
			ExecuteCommandBuffer();
			((ScriptableRenderContext)(ref context)).DrawShadows(ref val2);
			commandBuffer.SetGlobalDepthBias(0f, 0f);
		}
	}

	private void SetKeywords(GlobalKeyword[] keywords, int enabledIndex)
	{
		for (int i = 0; i < keywords.Length; i++)
		{
			commandBuffer.SetKeyword(ref keywords[i], i == enabledIndex);
		}
	}

	private Vector2 SetTileViewport(int index, int split, float tileSize)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor((float)(index % split), (float)(index / split));
		commandBuffer.SetViewport(new Rect(val.x * tileSize, val.y * tileSize, tileSize, tileSize));
		return val;
	}

	private Matrix4x4 ConvertToAtlasMatrix(Matrix4x4 m, Vector2 offset, float scale)
	{
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		if (SystemInfo.usesReversedZBuffer)
		{
			m.m20 = 0f - m.m20;
			m.m21 = 0f - m.m21;
			m.m22 = 0f - m.m22;
			m.m23 = 0f - m.m23;
		}
		m.m00 = (0.5f * (m.m00 + m.m30) + offset.x * m.m30) * scale;
		m.m01 = (0.5f * (m.m01 + m.m31) + offset.x * m.m31) * scale;
		m.m02 = (0.5f * (m.m02 + m.m32) + offset.x * m.m32) * scale;
		m.m03 = (0.5f * (m.m03 + m.m33) + offset.x * m.m33) * scale;
		m.m10 = (0.5f * (m.m10 + m.m30) + offset.y * m.m30) * scale;
		m.m11 = (0.5f * (m.m11 + m.m31) + offset.y * m.m31) * scale;
		m.m12 = (0.5f * (m.m12 + m.m32) + offset.y * m.m32) * scale;
		m.m13 = (0.5f * (m.m13 + m.m33) + offset.y * m.m33) * scale;
		m.m20 = 0.5f * (m.m20 + m.m30);
		m.m21 = 0.5f * (m.m21 + m.m31);
		m.m22 = 0.5f * (m.m22 + m.m32);
		m.m23 = 0.5f * (m.m23 + m.m33);
		return m;
	}

	public void InitResources(RenderGraph renderGraph, RenderGraphBuilder builder, ContextContainer frameData)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		int atlasSize = (int)settings.directional.atlasSize;
		TextureDesc val = default(TextureDesc);
		((TextureDesc)(ref val))..ctor(atlasSize, atlasSize, false, false);
		val.depthBufferBits = (DepthBits)32;
		val.isShadowMap = true;
		val.name = "Directional Shadow Atlas";
		TextureDesc val2 = val;
		TextureHandle val3;
		if (shadowedDirectionalLightCount <= 0)
		{
			val3 = renderGraph.defaultResources.defaultShadowTexture;
		}
		else
		{
			TextureHandle val4 = renderGraph.CreateTexture(ref val2);
			val3 = ((RenderGraphBuilder)(ref builder)).WriteTexture(ref val4);
		}
		directionalAtlas = val3;
		ComputeBufferDesc val5 = new ComputeBufferDesc
		{
			name = "Shadow Cascades",
			stride = 32,
			count = 4
		};
		ComputeBufferHandle val6 = renderGraph.CreateComputeBuffer(ref val5);
		directionalShadowCascadesBuffer = ((RenderGraphBuilder)(ref builder)).WriteComputeBuffer(ref val6);
		val5 = new ComputeBufferDesc
		{
			name = "Directional Shadow Matrices",
			stride = 64,
			count = 16
		};
		val6 = renderGraph.CreateComputeBuffer(ref val5);
		directionalShadowMatricesBuffer = ((RenderGraphBuilder)(ref builder)).WriteComputeBuffer(ref val6);
		atlasSize = (int)settings.additional.atlasSize;
		val2.width = (val2.height = atlasSize);
		val2.name = "Additional Shadow Atlas";
		TextureHandle val7;
		if (shadowedAdditionalLightCount <= 0)
		{
			val7 = renderGraph.defaultResources.defaultShadowTexture;
		}
		else
		{
			TextureHandle val4 = renderGraph.CreateTexture(ref val2);
			val7 = ((RenderGraphBuilder)(ref builder)).WriteTexture(ref val4);
		}
		additionalAtlas = val7;
		val5 = new ComputeBufferDesc
		{
			name = "Additional Shadow Data",
			stride = 80,
			count = 16
		};
		val6 = renderGraph.CreateComputeBuffer(ref val5);
		additionalShadowDataBuffer = ((RenderGraphBuilder)(ref builder)).WriteComputeBuffer(ref val6);
		RustResourceDataContext rustResourceDataContext = frameData.Get<RustResourceDataContext>();
		rustResourceDataContext.MainShadowsTexture = directionalAtlas;
		rustResourceDataContext.AdditionalShadowsTexture = additionalAtlas;
		rustResourceDataContext.ShadowCascadesBuffer = directionalShadowCascadesBuffer;
		rustResourceDataContext.ShadowMatricesBuffer = directionalShadowMatricesBuffer;
		rustResourceDataContext.AdditionalShadowDataBuffer = additionalShadowDataBuffer;
	}

	private void ExecuteCommandBuffer()
	{
		((ScriptableRenderContext)(ref context)).ExecuteCommandBuffer(commandBuffer);
		commandBuffer.Clear();
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using System;
using UnityEngine;

[Serializable]
public struct FxaaSettings
{
	public enum Quality
	{
		Low,
		Medium,
		High
	}

	public bool enabled;

	public Quality quality;

	[Range(0.0312f, 0.0833f)]
	public float fixedThreshold;

	[Range(0.063f, 0.333f)]
	public float relativeThreshold;

	[Range(0f, 1f)]
	public float subpixelBlending;
}


public enum BicubicRescalingMode
{
	Off,
	UpOnly,
	UpAndDown
}


private enum ShaderPasses
{
	GBufferRendering,
	IndirectLightingRendering,
	ForwardPlusTiles
}


private enum GBufferTarget
{
	None,
	GBuffer0,
	GBuffer1,
	GBuffer2,
	GBuffer3
}


private enum DeferredIndirectLightingTarget
{
	None,
	Diffuse,
	Specular
}


public enum RenderScaleMode
{
	Inherit,
	Multiply,
	Override
}


using System;
using UnityEngine.Rendering;

[Serializable]
public struct FinalBlendMode
{
	public BlendMode source;

	public BlendMode destination;
}


private static class TypeId<T>
{
	public static uint value = s_TypeCount++;
}


private struct Item
{
	public ContextItem storage;

	public bool isSet;
}


public enum TileSize
{
	Default = 0,
	_16 = 0x10,
	_32 = 0x20,
	_64 = 0x40,
	_128 = 0x80,
	_256 = 0x100
}


using System;
using UnityEngine;

[Serializable]
public struct BloomSettings
{
	public enum Mode
	{
		Additive,
		Scattering
	}

	public bool ignoreRenderScale;

	[Range(0f, 16f)]
	public int maxIterations;

	[Min(1f)]
	public int downscaleLimit;

	public bool bicubicUpsampling;

	[Min(0f)]
	public float threshold;

	[Range(0f, 1f)]
	public float thresholdKnee;

	[Min(0f)]
	public float intensity;

	public bool fadeFireflies;

	public Mode mode;

	[Range(0.05f, 0.95f)]
	public float scatter;
}


using System;
using UnityEngine;

[Serializable]
public struct ColorAdjustmentsSettings
{
	public float postExposure;

	[Range(-100f, 100f)]
	public float contrast;

	[ColorUsage(false, true)]
	public Color colorFilter;

	[Range(-180f, 180f)]
	public float hueShift;

	[Range(-100f, 100f)]
	public float saturation;
}


using System;
using UnityEngine;

[Serializable]
public struct ChannelMixerSettings
{
	public Vector3 red;

	public Vector3 green;

	public Vector3 blue;
}


using System;
using UnityEngine;

[Serializable]
public struct WhiteBalanceSettings
{
	[Range(-100f, 100f)]
	public float temperature;

	[Range(-100f, 100f)]
	public float tint;
}


using System;
using UnityEngine;

[Serializable]
public struct SplitToningSettings
{
	[ColorUsage(false)]
	public Color shadows;

	[ColorUsage(false)]
	public Color highlights;

	[Range(-100f, 100f)]
	public float balance;
}


using System;

[Serializable]
public struct ToneMappingSettings
{
	public enum Mode
	{
		None,
		ACES,
		Neutral,
		Reinhard
	}

	public Mode mode;
}


using System;
using UnityEngine;

[Serializable]
public struct ShadowsMidtonesHighlightsSettings
{
	[ColorUsage(false, true)]
	public Color shadows;

	[ColorUsage(false, true)]
	public Color midtones;

	[ColorUsage(false, true)]
	public Color highlights;

	[Range(0f, 2f)]
	public float shadowsStart;

	[Range(0f, 2f)]
	public float shadowsEnd;

	[Range(0f, 2f)]
	public float highlightsStart;

	[Range(0f, 2f)]
	public float highLightsEnd;
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit)]
private struct IntFloat
{
	[FieldOffset(0)]
	public int intValue;

	[FieldOffset(0)]
	public float floatValue;
}


using UnityEngine;
using UnityEngine.Rendering;

public readonly struct PipelineMaterials
{
	public readonly Material cameraRendererMaterial;

	public readonly Material cameraDebuggerMaterial;

	public readonly Material deferredLightingMaterial;

	public readonly Material deferredIndirectLightingMaterial;

	public PipelineMaterials(RustRenderPipelineSettings.PipelineShaders pipelineShaders)
	{
		cameraRendererMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.cameraRendererShader);
		cameraDebuggerMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.cameraDebuggerShader);
		deferredLightingMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.deferredLightingShader);
		deferredIndirectLightingMaterial = CoreUtils.CreateEngineMaterial(pipelineShaders.deferredIndirectLightingShader);
	}

	public void Dispose()
	{
		CoreUtils.Destroy((Object)(object)cameraRendererMaterial);
		CoreUtils.Destroy((Object)(object)cameraDebuggerMaterial);
		CoreUtils.Destroy((Object)(object)deferredLightingMaterial);
		CoreUtils.Destroy((Object)(object)deferredIndirectLightingMaterial);
	}
}


public enum ColorLutResolution
{
	_16 = 0x10,
	_32 = 0x20,
	_64 = 0x40
}


public enum RenderPath
{
	ForwardPlus,
	Deferred
}


using System;
using UnityEngine;

[Serializable]
public struct PipelineShaders
{
	public Shader cameraRendererShader;

	public Shader cameraDebuggerShader;

	public Shader deferredLightingShader;

	public Shader deferredIndirectLightingShader;

	public Shader coreBlit;

	public Shader coreBlitColorAndDepth;
}


using System;
using UnityEngine;

[Serializable]
public struct PipelineTextures
{
	public Texture blueNoise;

	public Texture preIntegratedFgdGgx;

	public Texture environmentBrdfLut;
}


public enum FilterQuality
{
	Low,
	Medium,
	High
}


public enum MapSize
{
	_256 = 0x100,
	_512 = 0x200,
	_1024 = 0x400,
	_2048 = 0x800,
	_4096 = 0x1000,
	_8192 = 0x2000
}


using System;
using UnityEngine;

[Serializable]
public struct DirectionalLight
{
	public MapSize atlasSize;

	[Range(1f, 4f)]
	public int cascadeCount;

	[Range(0f, 1f)]
	public float cascadeRatio1;

	[Range(0f, 1f)]
	public float cascadeRatio2;

	[Range(0f, 1f)]
	public float cascadeRatio3;

	[Range(0.001f, 1f)]
	public float cascadeFade;

	public bool softCascadeBlend;

	public Vector3 CascadeRatios => new Vector3(cascadeRatio1, cascadeRatio2, cascadeRatio3);
}


using System;
using UnityEngine;

[Serializable]
public struct AdditionalLight
{
	public MapSize atlasSize;

	public FilterMode filter;
}


internal enum ActiveID
{
	Camera,
	BackBuffer
}


public enum Pass
{
	BloomPrefilter,
	BloomPrefilterFireflies,
	BloomHorizontal,
	BloomVertical,
	BloomAdd,
	BloomScatter,
	BloomScatterFinal,
	ColorGradingNone,
	ColorGradingACES,
	ColorGradingNeutral,
	ColorGradingReinhard,
	ApplyColorGrading,
	ApplyColorGradingWithLuma,
	FXAA,
	FXAAWithLuma,
	FinalRescale,
	Copy
}


private enum ScaleMode
{
	None,
	Bilinear,
	Bicubic
}


private enum Pass
{
	IndirectLighting,
	Combine
}


private enum ShaderPasses
{
	StencilVolume,
	Lighting,
	DirectionalLighting
}


private struct ShadowedDirectionalLight
{
	public int visibleLightIndex;

	public float slopeScaleBias;

	public float nearPlaneOffset;
}


private struct ShadowedAdditionalLight
{
	public int visibleLightIndex;

	public float slopeScaleBias;

	public float normalBias;

	public bool isPoint;
}


public enum Quality
{
	Low,
	Medium,
	High
}


public enum Mode
{
	Additive,
	Scattering
}


public enum Mode
{
	None,
	ACES,
	Neutral,
	Reinhard
}


