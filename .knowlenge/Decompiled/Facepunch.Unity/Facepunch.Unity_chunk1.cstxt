using System.Collections.Generic;

public class IpPrefixTrie
{
	private class Node
	{
		public Dictionary<char, Node> Children = new Dictionary<char, Node>();

		public bool IsTerminal;
	}

	private readonly Node _root = new Node();

	public void Add(string prefix)
	{
		Node node = _root;
		foreach (char key in prefix)
		{
			if (!node.Children.TryGetValue(key, out var value))
			{
				value = (node.Children[key] = new Node());
			}
			node = value;
		}
		node.IsTerminal = true;
	}

	public bool Matches(string ip)
	{
		Node value = _root;
		foreach (char key in ip)
		{
			if (value.IsTerminal)
			{
				return true;
			}
			if (!value.Children.TryGetValue(key, out value))
			{
				return false;
			}
		}
		return value.IsTerminal;
	}
}


using System.Collections.Generic;

public class BanChecker
{
	private readonly HashSet<string> _exact = new HashSet<string>();

	private readonly IpPrefixTrie _trie = new IpPrefixTrie();

	public BanChecker(IEnumerable<string> banned)
	{
		foreach (string item in banned)
		{
			if (item.EndsWith("*"))
			{
				IpPrefixTrie trie = _trie;
				string text = item;
				trie.Add(text.Substring(0, text.Length - 1));
			}
			else
			{
				_exact.Add(item);
			}
		}
	}

	public bool IsBanned(string ip)
	{
		if (!_exact.Contains(ip))
		{
			return _trie.Matches(ip);
		}
		return true;
	}
}


using System;
using UnityEngine;

[Serializable]
public class SceneField
{
	[SerializeField]
	private Object sceneAsset;

	[SerializeField]
	private string sceneName = "";

	public string SceneName => sceneName;

	public static implicit operator string(SceneField sceneField)
	{
		return sceneField.SceneName;
	}
}


using UnityEngine;

public struct TimeSince
{
	private float time;

	public static implicit operator float(TimeSince ts)
	{
		return Time.time - ts.time;
	}

	public static implicit operator TimeSince(float ts)
	{
		TimeSince result = default(TimeSince);
		result.time = Time.time - ts;
		return result;
	}

	public override string ToString()
	{
		return (Time.time - time).ToString();
	}
}


using UnityEngine;

public struct TimeUntil
{
	private float time;

	public static implicit operator float(TimeUntil ts)
	{
		return ts.time - Time.time;
	}

	public static implicit operator TimeUntil(float ts)
	{
		TimeUntil result = default(TimeUntil);
		result.time = Time.time + ts;
		return result;
	}

	public override string ToString()
	{
		return (time - Time.time).ToString();
	}
}


using UnityEngine;

public struct TimeUntilWithDuration
{
	private float time;

	public float Duration;

	public static implicit operator float(TimeUntilWithDuration ts)
	{
		return ts.time - Time.time;
	}

	public static implicit operator TimeUntilWithDuration(float ts)
	{
		TimeUntilWithDuration result = default(TimeUntilWithDuration);
		result.time = Time.time + ts;
		result.Duration = ts;
		return result;
	}

	public override string ToString()
	{
		return time.ToString();
	}
}


using UnityEngine;

public struct RealTimeSince
{
	private float time;

	public static implicit operator float(RealTimeSince ts)
	{
		return Time.realtimeSinceStartup - ts.time;
	}

	public static implicit operator RealTimeSince(float ts)
	{
		RealTimeSince result = default(RealTimeSince);
		result.time = Time.realtimeSinceStartup - ts;
		return result;
	}

	public override string ToString()
	{
		return (Time.realtimeSinceStartup - time).ToString();
	}
}


using UnityEngine;

public struct RealTimeUntil
{
	private float time;

	public static implicit operator float(RealTimeUntil ts)
	{
		return ts.time - Time.realtimeSinceStartup;
	}

	public static implicit operator RealTimeUntil(float ts)
	{
		RealTimeUntil result = default(RealTimeUntil);
		result.time = Time.realtimeSinceStartup + ts;
		return result;
	}

	public override string ToString()
	{
		return (time - Time.realtimeSinceStartup).ToString();
	}
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[3334]
		{
			0, 0, 0, 3, 0, 0, 0, 44, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 85, 110, 105, 116, 121, 92,
			66, 117, 105, 108, 100, 73, 110, 102, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 63,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 70, 112, 65, 112, 105, 92, 65, 112,
			112, 108, 105, 99, 97, 116, 105, 111, 110, 46,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 85, 110, 105,
			116, 121, 92, 70, 112, 65, 112, 105, 92, 65,
			112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
			46, 99, 115, 0, 0, 0, 2, 0, 0, 0,
			56, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 85, 110, 105,
			116, 121, 92, 70, 112, 65, 112, 105, 92, 66,
			97, 115, 101, 73, 110, 116, 101, 103, 114, 97,
			116, 105, 111, 110, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 60, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 85, 110, 105, 116, 121, 92, 70, 112, 65,
			112, 105, 92, 66, 101, 110, 99, 104, 109, 97,
			114, 107, 92, 66, 101, 110, 99, 104, 109, 97,
			114, 107, 46, 99, 115, 0, 0, 0, 2, 0,
			0, 0, 65, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 70, 112, 65, 112, 105,
			92, 66, 101, 110, 99, 104, 109, 97, 114, 107,
			92, 66, 101, 110, 99, 104, 109, 97, 114, 107,
			84, 105, 109, 101, 114, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 49, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 85, 110, 105, 116, 121, 92, 70, 112,
			65, 112, 105, 92, 68, 97, 116, 97, 98, 97,
			115, 101, 46, 99, 115, 0, 0, 0, 4, 0,
			0, 0, 56, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 70, 112, 65, 112, 105,
			92, 69, 120, 99, 101, 112, 116, 105, 111, 110,
			82, 101, 112, 111, 114, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 58, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 85, 110, 105, 116, 121, 92, 70,
			112, 65, 112, 105, 92, 69, 120, 99, 101, 112,
			116, 105, 111, 110, 82, 101, 112, 111, 114, 116,
			101, 114, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 49, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 70, 112, 65, 112, 105,
			92, 70, 101, 101, 100, 98, 97, 99, 107, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 70, 112, 65, 112, 105, 92, 76, 101,
			97, 100, 101, 114, 98, 111, 97, 114, 100, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 49,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 70, 112, 65, 112, 105, 92, 77, 97,
			110, 105, 102, 101, 115, 116, 46, 99, 115, 0,
			0, 0, 1, 0, 0, 0, 55, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 85, 110, 105, 116, 121, 92, 70,
			112, 65, 112, 105, 92, 77, 111, 100, 101, 108,
			115, 92, 65, 112, 112, 73, 110, 102, 111, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 52,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 70, 112, 65, 112, 105, 92, 77, 111,
			100, 101, 108, 115, 92, 65, 117, 116, 104, 46,
			99, 115, 0, 0, 0, 8, 0, 0, 0, 56,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 70, 112, 65, 112, 105, 92, 77, 111,
			100, 101, 108, 115, 92, 68, 97, 116, 97, 98,
			97, 115, 101, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 60, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			85, 110, 105, 116, 121, 92, 70, 112, 65, 112,
			105, 92, 77, 111, 100, 101, 108, 115, 92, 70,
			101, 97, 116, 117, 114, 101, 115, 73, 110, 102,
			111, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 56, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 85, 110,
			105, 116, 121, 92, 70, 112, 65, 112, 105, 92,
			77, 111, 100, 101, 108, 115, 92, 70, 101, 101,
			100, 98, 97, 99, 107, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 52, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 85, 110, 105, 116, 121, 92, 70, 112,
			65, 112, 105, 92, 77, 111, 100, 101, 108, 115,
			92, 72, 101, 114, 111, 46, 99, 115, 0, 0,
			0, 3, 0, 0, 0, 59, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 85, 110, 105, 116, 121, 92, 70, 112,
			65, 112, 105, 92, 77, 111, 100, 101, 108, 115,
			92, 76, 101, 97, 100, 101, 114, 98, 111, 97,
			114, 100, 46, 99, 115, 0, 0, 0, 11, 0,
			0, 0, 56, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 70, 112, 65, 112, 105,
			92, 77, 111, 100, 101, 108, 115, 92, 77, 97,
			110, 105, 102, 101, 115, 116, 46, 99, 115, 0,
			0, 0, 3, 0, 0, 0, 54, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 85, 110, 105, 116, 121, 92, 70,
			112, 65, 112, 105, 92, 77, 111, 100, 101, 108,
			115, 92, 78, 111, 116, 105, 99, 101, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 58, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 85, 110, 105, 116, 121,
			92, 70, 112, 65, 112, 105, 92, 77, 111, 100,
			101, 108, 115, 92, 80, 108, 97, 121, 101, 114,
			76, 105, 115, 116, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 62, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 85, 110, 105, 116, 121, 92, 70, 112, 65,
			112, 105, 92, 77, 111, 100, 101, 108, 115, 92,
			83, 116, 111, 114, 101, 70, 101, 97, 116, 117,
			114, 105, 110, 103, 46, 99, 115, 0, 0, 0,
			3, 0, 0, 0, 65, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 85, 110, 105, 116, 121, 92, 70, 112, 65,
			112, 105, 92, 77, 111, 100, 101, 108, 115, 92,
			83, 121, 115, 116, 101, 109, 73, 110, 102, 111,
			114, 109, 97, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 64, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 85, 110, 105, 116, 121, 92,
			70, 112, 65, 112, 105, 92, 80, 101, 114, 102,
			111, 114, 109, 97, 110, 99, 101, 92, 80, 101,
			114, 102, 111, 114, 109, 97, 110, 99, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 66,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 70, 112, 65, 112, 105, 92, 80, 101,
			114, 102, 111, 114, 109, 97, 110, 99, 101, 92,
			80, 101, 114, 102, 111, 114, 109, 97, 110, 99,
			101, 85, 73, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 86, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			85, 110, 105, 116, 121, 92, 85, 110, 105, 116,
			121, 92, 65, 116, 116, 114, 105, 98, 117, 116,
			101, 115, 92, 73, 108, 50, 67, 112, 112, 69,
			97, 103, 101, 114, 83, 116, 97, 116, 105, 99,
			67, 108, 97, 115, 115, 67, 111, 110, 115, 116,
			114, 117, 99, 116, 105, 111, 110, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 75, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 85, 110, 105, 116, 121, 92,
			85, 110, 105, 116, 121, 92, 65, 116, 116, 114,
			105, 98, 117, 116, 101, 115, 92, 73, 110, 115,
			112, 101, 99, 116, 111, 114, 70, 108, 97, 103,
			115, 65, 116, 116, 114, 105, 98, 117, 116, 101,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			57, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 85, 110, 105,
			116, 121, 92, 85, 110, 105, 116, 121, 92, 67,
			108, 97, 115, 115, 92, 83, 99, 101, 110, 101,
			70, 105, 101, 108, 100, 46, 99, 115, 0, 0,
			0, 5, 0, 0, 0, 56, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 85, 110, 105, 116, 121, 92, 85, 110,
			105, 116, 121, 92, 67, 108, 97, 115, 115, 92,
			84, 105, 109, 101, 83, 105, 110, 99, 101, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 71,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 85, 110, 105, 116,
			121, 92, 85, 110, 105, 116, 121, 92, 67, 108,
			97, 115, 115, 92, 87, 97, 105, 116, 70, 111,
			114, 83, 101, 99, 111, 110, 100, 115, 82, 101,
			97, 108, 116, 105, 109, 101, 69, 120, 46, 99,
			115, 0, 0, 0, 2, 0, 0, 0, 65, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 85, 110, 105, 116, 121,
			92, 85, 110, 105, 116, 121, 92, 67, 108, 97,
			115, 115, 92, 87, 101, 105, 103, 104, 116, 101,
			100, 83, 116, 114, 105, 110, 103, 76, 105, 115,
			116, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 72, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 85, 110,
			105, 116, 121, 92, 85, 110, 105, 116, 121, 92,
			67, 111, 109, 112, 111, 110, 101, 110, 116, 92,
			65, 112, 112, 108, 105, 99, 97, 116, 105, 111,
			110, 67, 111, 110, 116, 114, 111, 108, 108, 101,
			114, 46, 99, 115, 0, 0, 0, 1, 0, 0,
			0, 67, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 85, 110,
			105, 116, 121, 92, 85, 110, 105, 116, 121, 92,
			67, 111, 109, 112, 111, 110, 101, 110, 116, 92,
			68, 101, 115, 116, 114, 111, 121, 73, 110, 83,
			101, 99, 111, 110, 100, 115, 46, 99, 115, 0,
			0, 0, 2, 0, 0, 0, 64, 92, 65, 115,
			115, 101, 116, 115, 92, 80, 108, 117, 103, 105,
			110, 115, 92, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 85, 110, 105, 116, 121, 92, 85,
			110, 105, 116, 121, 92, 67, 111, 109, 112, 111,
			110, 101, 110, 116, 92, 76, 105, 115, 116, 67,
			111, 109, 112, 111, 110, 101, 110, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 67, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 85, 110, 105, 116, 121,
			92, 85, 110, 105, 116, 121, 92, 69, 120, 116,
			101, 110, 115, 105, 111, 110, 92, 65, 110, 105,
			109, 97, 116, 105, 111, 110, 67, 117, 114, 118,
			101, 69, 120, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 73, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			85, 110, 105, 116, 121, 92, 85, 110, 105, 116,
			121, 92, 69, 120, 116, 101, 110, 115, 105, 111,
			110, 92, 66, 105, 110, 97, 114, 121, 82, 101,
			97, 100, 101, 114, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 73, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 85, 110, 105, 116, 121, 92, 85, 110, 105,
			116, 121, 92, 69, 120, 116, 101, 110, 115, 105,
			111, 110, 92, 66, 105, 110, 97, 114, 121, 87,
			114, 105, 116, 101, 114, 69, 120, 116, 101, 110,
			115, 105, 111, 110, 115, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 70, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 85, 110, 105, 116, 121, 92, 85, 110,
			105, 116, 121, 92, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 92, 67, 111, 109, 112, 111, 110,
			101, 110, 116, 69, 120, 116, 101, 110, 115, 105,
			111, 110, 115, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 71, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			85, 110, 105, 116, 121, 92, 85, 110, 105, 116,
			121, 92, 69, 120, 116, 101, 110, 115, 105, 111,
			110, 92, 71, 97, 109, 101, 79, 98, 106, 101,
			99, 116, 69, 120, 116, 101, 110, 115, 105, 111,
			110, 115, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 64, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 85, 110, 105, 116, 121,
			92, 69, 120, 116, 101, 110, 115, 105, 111, 110,
			92, 82, 97, 121, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 115, 46, 99, 115, 0, 0, 0,
			1, 0, 0, 0, 73, 92, 65, 115, 115, 101,
			116, 115, 92, 80, 108, 117, 103, 105, 110, 115,
			92, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 85, 110, 105, 116, 121, 92, 85, 110, 105,
			116, 121, 92, 69, 120, 116, 101, 110, 115, 105,
			111, 110, 92, 84, 114, 97, 110, 115, 102, 111,
			114, 109, 65, 99, 99, 101, 115, 115, 65, 114,
			114, 97, 121, 69, 120, 46, 99, 115, 0, 0,
			0, 1, 0, 0, 0, 67, 92, 65, 115, 115,
			101, 116, 115, 92, 80, 108, 117, 103, 105, 110,
			115, 92, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 85, 110, 105, 116, 121, 92, 85, 110,
			105, 116, 121, 92, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 92, 86, 101, 99, 116, 111, 114,
			69, 120, 116, 101, 110, 115, 105, 111, 110, 115,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			54, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 85, 110, 105,
			116, 121, 92, 85, 116, 105, 108, 105, 116, 121,
			92, 67, 111, 109, 109, 97, 110, 100, 76, 105,
			110, 101, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 52, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 85, 116, 105, 108, 105,
			116, 121, 92, 68, 101, 98, 117, 103, 68, 114,
			97, 119, 46, 99, 115, 0, 0, 0, 1, 0,
			0, 0, 48, 92, 65, 115, 115, 101, 116, 115,
			92, 80, 108, 117, 103, 105, 110, 115, 92, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 85,
			110, 105, 116, 121, 92, 85, 116, 105, 108, 105,
			116, 121, 92, 69, 112, 111, 99, 104, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 47, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 85, 110, 105, 116, 121,
			92, 85, 116, 105, 108, 105, 116, 121, 92, 77,
			111, 110, 111, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 52, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			85, 110, 105, 116, 121, 92, 85, 116, 105, 108,
			105, 116, 121, 92, 84, 104, 114, 101, 97, 100,
			105, 110, 103, 46, 99, 115, 0, 0, 0, 1,
			0, 0, 0, 50, 92, 65, 115, 115, 101, 116,
			115, 92, 80, 108, 117, 103, 105, 110, 115, 92,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			85, 110, 105, 116, 121, 92, 85, 116, 105, 108,
			105, 116, 121, 92, 87, 101, 98, 85, 116, 105,
			108, 46, 99, 115
		};
		result.TypesData = new byte[2716]
		{
			0, 0, 0, 0, 19, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 66, 117, 105, 108, 100,
			73, 110, 102, 111, 0, 0, 0, 0, 27, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 66,
			117, 105, 108, 100, 73, 110, 102, 111, 124, 83,
			99, 109, 73, 110, 102, 111, 0, 0, 0, 0,
			29, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 66, 117, 105, 108, 100, 73, 110, 102, 111,
			124, 66, 117, 105, 108, 100, 68, 101, 115, 99,
			1, 0, 0, 0, 21, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 65, 112, 112, 108, 105,
			99, 97, 116, 105, 111, 110, 1, 0, 0, 0,
			21, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			124, 65, 112, 112, 108, 105, 99, 97, 116, 105,
			111, 110, 1, 0, 0, 0, 21, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 124, 65, 112, 112,
			108, 105, 99, 97, 116, 105, 111, 110, 0, 0,
			0, 0, 25, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 124, 66, 97, 115, 101, 73, 110, 116,
			101, 103, 114, 97, 116, 105, 111, 110, 0, 0,
			0, 0, 23, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 124, 66, 101, 110, 99, 104, 109, 97,
			114, 107, 68, 97, 116, 97, 0, 0, 0, 0,
			24, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			124, 66, 101, 110, 99, 104, 109, 97, 114, 107,
			84, 105, 109, 101, 114, 0, 0, 0, 0, 30,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			66, 101, 110, 99, 104, 109, 97, 114, 107, 84,
			105, 109, 101, 114, 124, 83, 99, 111, 112, 101,
			0, 0, 0, 0, 18, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 68, 97, 116, 97, 98,
			97, 115, 101, 0, 0, 0, 0, 16, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 124, 82, 101,
			112, 111, 114, 116, 0, 0, 0, 0, 27, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 82,
			101, 112, 111, 114, 116, 124, 83, 116, 97, 99,
			107, 84, 114, 97, 99, 101, 0, 0, 0, 0,
			38, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 82, 101, 112, 111, 114, 116, 43, 83, 116,
			97, 99, 107, 84, 114, 97, 99, 101, 124, 83,
			116, 97, 99, 107, 70, 114, 97, 109, 101, 0,
			0, 0, 0, 21, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 82, 101, 112, 111, 114, 116,
			124, 85, 115, 101, 114, 0, 0, 0, 0, 27,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 124,
			69, 120, 99, 101, 112, 116, 105, 111, 110, 82,
			101, 112, 111, 114, 116, 101, 114, 0, 0, 0,
			0, 18, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 124, 70, 101, 101, 100, 98, 97, 99, 107,
			0, 0, 0, 0, 21, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 76, 101, 97, 100, 101,
			114, 98, 111, 97, 114, 100, 0, 0, 0, 0,
			18, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			124, 77, 97, 110, 105, 102, 101, 115, 116, 0,
			0, 0, 0, 24, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 77, 111, 100, 101, 108, 115,
			124, 65, 112, 112, 73, 110, 102, 111, 0, 0,
			0, 0, 21, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 77, 111, 100, 101, 108, 115, 124,
			65, 117, 116, 104, 0, 0, 0, 0, 30, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 77,
			111, 100, 101, 108, 115, 46, 68, 97, 116, 97,
			98, 97, 115, 101, 124, 66, 97, 115, 101, 0,
			0, 0, 0, 29, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 77, 111, 100, 101, 108, 115,
			46, 68, 97, 116, 97, 98, 97, 115, 101, 124,
			65, 100, 100, 0, 0, 0, 0, 32, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 77, 111,
			100, 101, 108, 115, 46, 68, 97, 116, 97, 98,
			97, 115, 101, 124, 82, 101, 109, 111, 118, 101,
			0, 0, 0, 0, 38, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 77, 111, 100, 101, 108,
			115, 46, 68, 97, 116, 97, 98, 97, 115, 101,
			124, 66, 97, 115, 101, 82, 101, 115, 112, 111,
			110, 115, 101, 0, 0, 0, 0, 37, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 77, 111,
			100, 101, 108, 115, 46, 68, 97, 116, 97, 98,
			97, 115, 101, 124, 65, 100, 100, 82, 101, 115,
			112, 111, 110, 115, 101, 0, 0, 0, 0, 39,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			77, 111, 100, 101, 108, 115, 46, 68, 97, 116,
			97, 98, 97, 115, 101, 124, 81, 117, 101, 114,
			121, 82, 101, 115, 112, 111, 110, 115, 101, 0,
			0, 0, 0, 32, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 77, 111, 100, 101, 108, 115,
			46, 68, 97, 116, 97, 98, 97, 115, 101, 124,
			82, 101, 115, 117, 108, 116, 0, 0, 0, 0,
			38, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 77, 111, 100, 101, 108, 115, 46, 68, 97,
			116, 97, 98, 97, 115, 101, 46, 82, 101, 115,
			117, 108, 116, 124, 69, 110, 116, 114, 121, 0,
			0, 0, 0, 29, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 77, 111, 100, 101, 108, 115,
			124, 70, 101, 97, 116, 117, 114, 101, 115, 73,
			110, 102, 111, 0, 0, 0, 0, 25, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 46, 77, 111,
			100, 101, 108, 115, 124, 70, 101, 101, 100, 98,
			97, 99, 107, 0, 0, 0, 0, 14, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 124, 72, 101,
			114, 111, 0, 0, 0, 0, 32, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 77, 111, 100,
			101, 108, 115, 46, 76, 101, 97, 100, 101, 114,
			98, 111, 97, 114, 100, 124, 65, 100, 100, 0,
			0, 0, 0, 33, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 77, 111, 100, 101, 108, 115,
			46, 76, 101, 97, 100, 101, 114, 98, 111, 97,
			114, 100, 124, 82, 97, 110, 107, 0, 0, 0,
			0, 34, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 77, 111, 100, 101, 108, 115, 46, 76,
			101, 97, 100, 101, 114, 98, 111, 97, 114, 100,
			124, 69, 110, 116, 114, 121, 0, 0, 0, 0,
			25, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 77, 111, 100, 101, 108, 115, 124, 77, 97,
			110, 105, 102, 101, 115, 116, 0, 0, 0, 0,
			35, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 77, 111, 100, 101, 108, 115, 46, 77, 97,
			110, 105, 102, 101, 115, 116, 124, 67, 104, 97,
			110, 103, 101, 115, 101, 116, 0, 0, 0, 0,
			36, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 77, 111, 100, 101, 108, 115, 46, 77, 97,
			110, 105, 102, 101, 115, 116, 124, 84, 119, 105,
			116, 99, 104, 68, 114, 111, 112, 0, 0, 0,
			0, 39, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 77, 111, 100, 101, 108, 115, 46, 77,
			97, 110, 105, 102, 101, 115, 116, 124, 65, 100,
			109, 105, 110, 105, 115, 116, 114, 97, 116, 111,
			114, 0, 0, 0, 0, 34, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 77, 111, 100, 101,
			108, 115, 46, 77, 97, 110, 105, 102, 101, 115,
			116, 124, 78, 101, 119, 115, 73, 110, 102, 111,
			0, 0, 0, 0, 43, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 77, 111, 100, 101, 108,
			115, 46, 77, 97, 110, 105, 102, 101, 115, 116,
			43, 78, 101, 119, 115, 73, 110, 102, 111, 124,
			66, 108, 111, 103, 73, 110, 102, 111, 0, 0,
			0, 0, 37, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 77, 111, 100, 101, 108, 115, 46,
			77, 97, 110, 105, 102, 101, 115, 116, 124, 83,
			101, 114, 118, 101, 114, 115, 73, 110, 102, 111,
			0, 0, 0, 0, 36, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 46, 77, 111, 100, 101, 108,
			115, 46, 77, 97, 110, 105, 102, 101, 115, 116,
			124, 83, 101, 114, 118, 101, 114, 68, 101, 115,
			99, 0, 0, 0, 0, 13, 124, 73, 112, 80,
			114, 101, 102, 105, 120, 84, 114, 105, 101, 0,
			0, 0, 0, 17, 73, 112, 80, 114, 101, 102,
			105, 120, 84, 114, 105, 101, 124, 78, 111, 100,
			101, 0, 0, 0, 0, 11, 124, 66, 97, 110,
			67, 104, 101, 99, 107, 101, 114, 0, 0, 0,
			0, 23, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 124, 65, 99, 99, 111, 117, 110, 116, 78,
			111, 116, 105, 99, 101, 0, 0, 0, 0, 42,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			65, 99, 99, 111, 117, 110, 116, 78, 111, 116,
			105, 99, 101, 124, 71, 101, 110, 101, 114, 97,
			108, 78, 111, 116, 105, 99, 101, 77, 111, 100,
			101, 108, 0, 0, 0, 0, 38, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 46, 65, 99, 99,
			111, 117, 110, 116, 78, 111, 116, 105, 99, 101,
			124, 66, 97, 110, 78, 111, 116, 105, 99, 101,
			77, 111, 100, 101, 108, 0, 0, 0, 0, 27,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			77, 111, 100, 101, 108, 115, 124, 80, 108, 97,
			121, 101, 114, 73, 110, 102, 111, 0, 0, 0,
			0, 31, 70, 97, 99, 101, 112, 117, 110, 99,
			104, 46, 77, 111, 100, 101, 108, 115, 124, 83,
			116, 111, 114, 101, 70, 101, 97, 116, 117, 114,
			105, 110, 103, 0, 0, 0, 0, 27, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 124, 83, 121,
			115, 116, 101, 109, 73, 110, 102, 111, 114, 109,
			97, 116, 105, 111, 110, 0, 0, 0, 0, 19,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 46,
			124, 72, 97, 114, 100, 119, 97, 114, 101, 0,
			0, 0, 0, 22, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 46, 124, 69, 110, 118, 105, 114,
			111, 110, 109, 101, 110, 116, 0, 0, 0, 0,
			21, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			124, 80, 101, 114, 102, 111, 114, 109, 97, 110,
			99, 101, 0, 0, 0, 0, 23, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 124, 80, 101, 114,
			102, 111, 114, 109, 97, 110, 99, 101, 85, 73,
			0, 0, 0, 0, 73, 85, 110, 105, 116, 121,
			46, 73, 76, 50, 67, 80, 80, 46, 67, 111,
			109, 112, 105, 108, 101, 114, 83, 101, 114, 118,
			105, 99, 101, 115, 124, 73, 108, 50, 67, 112,
			112, 69, 97, 103, 101, 114, 83, 116, 97, 116,
			105, 99, 67, 108, 97, 115, 115, 67, 111, 110,
			115, 116, 114, 117, 99, 116, 105, 111, 110, 65,
			116, 116, 114, 105, 98, 117, 116, 101, 0, 0,
			0, 0, 33, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 124, 73, 110, 115, 112, 101, 99, 116,
			111, 114, 70, 108, 97, 103, 115, 65, 116, 116,
			114, 105, 98, 117, 116, 101, 0, 0, 0, 0,
			11, 124, 83, 99, 101, 110, 101, 70, 105, 101,
			108, 100, 0, 0, 0, 0, 10, 124, 84, 105,
			109, 101, 83, 105, 110, 99, 101, 0, 0, 0,
			0, 10, 124, 84, 105, 109, 101, 85, 110, 116,
			105, 108, 0, 0, 0, 0, 22, 124, 84, 105,
			109, 101, 85, 110, 116, 105, 108, 87, 105, 116,
			104, 68, 117, 114, 97, 116, 105, 111, 110, 0,
			0, 0, 0, 14, 124, 82, 101, 97, 108, 84,
			105, 109, 101, 83, 105, 110, 99, 101, 0, 0,
			0, 0, 14, 124, 82, 101, 97, 108, 84, 105,
			109, 101, 85, 110, 116, 105, 108, 0, 0, 0,
			0, 36, 85, 110, 105, 116, 121, 69, 110, 103,
			105, 110, 101, 124, 87, 97, 105, 116, 70, 111,
			114, 83, 101, 99, 111, 110, 100, 115, 82, 101,
			97, 108, 116, 105, 109, 101, 69, 120, 0, 0,
			0, 0, 28, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 124, 87, 101, 105, 103, 104, 116, 101,
			100, 83, 116, 114, 105, 110, 103, 76, 105, 115,
			116, 0, 0, 0, 0, 38, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 46, 87, 101, 105, 103,
			104, 116, 101, 100, 83, 116, 114, 105, 110, 103,
			76, 105, 115, 116, 124, 67, 111, 110, 116, 97,
			105, 110, 101, 114, 0, 0, 0, 0, 44, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 124, 65,
			112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
			67, 111, 110, 116, 114, 111, 108, 108, 101, 114,
			77, 111, 110, 111, 98, 101, 104, 97, 118, 105,
			111, 117, 114, 0, 0, 0, 0, 26, 70, 97,
			99, 101, 112, 117, 110, 99, 104, 124, 68, 101,
			115, 116, 114, 111, 121, 73, 110, 83, 101, 99,
			111, 110, 100, 115, 1, 0, 0, 0, 23, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 124, 76,
			105, 115, 116, 67, 111, 109, 112, 111, 110, 101,
			110, 116, 1, 0, 0, 0, 23, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 124, 76, 105, 115,
			116, 67, 111, 109, 112, 111, 110, 101, 110, 116,
			0, 0, 0, 0, 26, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 65, 110, 105, 109, 97,
			116, 105, 111, 110, 67, 117, 114, 118, 101, 69,
			120, 0, 0, 0, 0, 32, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 124, 66, 105, 110, 97,
			114, 121, 82, 101, 97, 100, 101, 114, 69, 120,
			116, 101, 110, 115, 105, 111, 110, 115, 0, 0,
			0, 0, 32, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 124, 66, 105, 110, 97, 114, 121, 87,
			114, 105, 116, 101, 114, 69, 120, 116, 101, 110,
			115, 105, 111, 110, 115, 0, 0, 0, 0, 29,
			70, 97, 99, 101, 112, 117, 110, 99, 104, 124,
			67, 111, 109, 112, 111, 110, 101, 110, 116, 69,
			120, 116, 101, 110, 115, 105, 111, 110, 115, 0,
			0, 0, 0, 30, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 124, 71, 97, 109, 101, 79, 98,
			106, 101, 99, 116, 69, 120, 116, 101, 110, 115,
			105, 111, 110, 115, 0, 0, 0, 0, 30, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 46, 69,
			120, 116, 101, 110, 100, 124, 82, 97, 121, 69,
			120, 116, 101, 110, 115, 105, 111, 110, 115, 0,
			0, 0, 0, 32, 70, 97, 99, 101, 112, 117,
			110, 99, 104, 124, 84, 114, 97, 110, 115, 102,
			111, 114, 109, 65, 99, 99, 101, 115, 115, 65,
			114, 114, 97, 121, 69, 120, 0, 0, 0, 0,
			27, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			124, 86, 101, 99, 116, 111, 114, 51, 69, 120,
			116, 101, 110, 115, 105, 111, 110, 115, 0, 0,
			0, 0, 29, 70, 97, 99, 101, 112, 117, 110,
			99, 104, 46, 85, 116, 105, 108, 105, 116, 121,
			124, 67, 111, 109, 109, 97, 110, 100, 76, 105,
			110, 101, 0, 0, 0, 0, 19, 70, 97, 99,
			101, 112, 117, 110, 99, 104, 124, 68, 101, 98,
			117, 103, 68, 114, 97, 119, 0, 0, 0, 0,
			20, 70, 97, 99, 101, 112, 117, 110, 99, 104,
			46, 77, 97, 116, 104, 124, 69, 112, 111, 99,
			104, 0, 0, 0, 0, 14, 70, 97, 99, 101,
			112, 117, 110, 99, 104, 124, 77, 111, 110, 111,
			0, 0, 0, 0, 19, 70, 97, 99, 101, 112,
			117, 110, 99, 104, 124, 84, 104, 114, 101, 97,
			100, 105, 110, 103, 0, 0, 0, 0, 17, 70,
			97, 99, 101, 112, 117, 110, 99, 104, 124, 87,
			101, 98, 85, 116, 105, 108
		};
		result.TotalFiles = 49;
		result.TotalTypes = 85;
		result.IsEditorOnly = false;
		return result;
	}
}


using Facepunch;
using UnityEngine;
using UnityEngine.Assertions;

public class WaitForSecondsRealtimeEx : CustomYieldInstruction, IPooled
{
	private bool _isInPool;

	private float _waitUntilTime = -1f;

	public float WaitTime { get; set; }

	public override bool keepWaiting
	{
		get
		{
			Assert.IsFalse(_isInPool, "WaitForSecondsRealtimeEx.keepWaiting called on instance that is in the pool");
			if (_waitUntilTime < 0f)
			{
				_waitUntilTime = Time.realtimeSinceStartup + WaitTime;
			}
			bool num = Time.realtimeSinceStartup >= _waitUntilTime;
			if (num)
			{
				WaitForSecondsRealtimeEx waitForSecondsRealtimeEx = this;
				Pool.Free<WaitForSecondsRealtimeEx>(ref waitForSecondsRealtimeEx);
			}
			return !num;
		}
	}

	public void EnterPool()
	{
		_isInPool = true;
		_waitUntilTime = -1f;
	}

	public void LeavePool()
	{
		_isInPool = false;
		_waitUntilTime = -1f;
	}
}


using System;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
public class Il2CppEagerStaticClassConstructionAttribute : Attribute
{
}


using System;
using Facepunch;
using Facepunch.Math;
using Newtonsoft.Json;
using UnityEngine;

[JsonModel]
public class BuildInfo
{
	[JsonModel]
	public class ScmInfo
	{
		public string Type { get; set; } = "";

		public string ChangeId { get; set; } = "";

		public string Branch { get; set; } = "";

		public string Repo { get; set; } = "";

		public string Comment { get; set; } = "";

		public string Author { get; set; } = "";

		public string Date { get; set; } = "";
	}

	[JsonModel]
	public class BuildDesc
	{
		public string Id { get; set; } = "";

		public string Number { get; set; } = "";

		public string Tag { get; set; } = "";

		public string Url { get; set; } = "";

		public string Name { get; set; } = "";

		public string Node { get; set; } = "";
	}

	private static BuildInfo _current;

	public int Date { get; set; }

	[JsonIgnore]
	public DateTime BuildDate => Epoch.ToDateTime(Date).ToLocalTime();

	public ScmInfo Scm { get; set; }

	public BuildDesc Build { get; set; }

	public bool Valid { get; set; }

	public static BuildInfo Current
	{
		get
		{
			if (_current == null)
			{
				_current = new BuildInfo
				{
					Scm = new ScmInfo(),
					Build = new BuildDesc()
				};
				TextAsset val = Resources.Load<TextAsset>("BuildInfo");
				if (Object.op_Implicit((Object)(object)val))
				{
					_current = JsonConvert.DeserializeObject<BuildInfo>(val.text);
					_current.Valid = true;
				}
			}
			return _current;
		}
	}
}


using Facepunch;
using Facepunch.Models;
using UnityEngine;

public static class Application
{
	private static MonoBehaviour _controller;

	public static Facepunch.Models.Manifest Manifest;

	public static MonoBehaviour Controller
	{
		get
		{
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Expected O, but got Unknown
			if ((Object)(object)_controller == (Object)null)
			{
				GameObject val = new GameObject("Facepunch.Application");
				Object.DontDestroyOnLoad((Object)val);
				_controller = (MonoBehaviour)(object)val.AddComponent<ApplicationControllerMonobehaviour>();
			}
			return _controller;
		}
	}

	public static BaseIntegration Integration { get; set; }

	public static void Initialize(BaseIntegration integration)
	{
		Mono.FixHttpsValidation();
		Integration = integration;
		ExceptionReporter.InstallHooks();
		Facepunch.Manifest.Download();
	}
}


using Facepunch.Models;
using UnityEngine;
using UnityEngine.SceneManagement;

public abstract class BaseIntegration
{
	public abstract string PublicKey { get; }

	public virtual string Bucket => string.Empty;

	public virtual string UserId => string.Empty;

	public virtual string UserName => string.Empty;

	public virtual string ServerAddress => string.Empty;

	public virtual string ServerName => string.Empty;

	public virtual string LevelName
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			Scene activeScene = SceneManager.GetActiveScene();
			return ((Scene)(ref activeScene)).name;
		}
	}

	public virtual int MinutesPlayed => 0;

	public virtual Auth Auth => new Auth
	{
		Id = UserId,
		Name = UserName,
		Type = "none",
		Ticket = "none"
	};

	public virtual bool RestrictEditorFunctionality => true;

	public virtual bool LocalApi => false;

	public virtual string ApiUrl
	{
		get
		{
			if (!LocalApi)
			{
				return "https://api.facepunch.com/api/";
			}
			return "http://localhost:6005/api/";
		}
	}

	public virtual bool DebugOutput => Application.isEditor;

	public virtual void OnManifestFile(Manifest manifest)
	{
	}

	public virtual bool ShouldReportException(string message, string stackTrace, LogType type)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Invalid comparison between Unknown and I4
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		if (Application.isEditor)
		{
			return false;
		}
		if ((int)type == 4)
		{
			return true;
		}
		if ((int)type == 0)
		{
			return true;
		}
		return false;
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Facepunch;
using Facepunch.Models;
using Newtonsoft.Json;
using UnityEngine;

[JsonModel]
public class BenchmarkData
{
	public static BenchmarkData Current;

	public Dictionary<string, float> Results = new Dictionary<string, float>();

	public string ComputerName;

	public string BuildDate;

	public string BranchName;

	public string Changeset;

	public string BuildId;

	public bool Auto;

	public int Version;

	public AppInfo AppInfo;

	public SystemInformation SystemInfo;

	private int frames;

	private int hitches;

	private int freezes;

	private float lastTime;

	private double frameTimes;

	private float AvgMilliseconds => (float)(frameTimes / (double)frames * 1000.0);

	private float avgFrameRate => 1000f / AvgMilliseconds;

	public static BenchmarkData New()
	{
		return new BenchmarkData
		{
			ComputerName = Environment.MachineName,
			BuildDate = BuildInfo.Current.BuildDate.ToString(),
			BranchName = BuildInfo.Current.Scm.Branch,
			Changeset = BuildInfo.Current.Scm.ChangeId,
			BuildId = BuildInfo.Current.Build.Id,
			Auto = CommandLine.HasSwitch("+autobench"),
			Version = 2
		};
	}

	public async Task<string> Upload()
	{
		if (string.IsNullOrEmpty(Application.Manifest.BenchmarkUrl))
		{
			return null;
		}
		return await WebUtil.PostDataAsync(Application.Manifest.BenchmarkUrl, this);
	}

	public string WriteJSON()
	{
		if (!Directory.Exists("benchmark"))
		{
			Directory.CreateDirectory("benchmark");
		}
		string text = "benchmark/" + DateTime.Now.ToString("MM-dd-yyyy-h-mm-ss") + ".json";
		string value = JsonConvert.SerializeObject((object)Results, (Formatting)1);
		using FileStream stream = new FileStream(text, FileMode.OpenOrCreate);
		using StreamWriter streamWriter = new StreamWriter(stream);
		streamWriter.Write(value);
		return text;
	}

	public void ResetCounters()
	{
		frames = 0;
		hitches = 0;
		freezes = 0;
		lastTime = 0f;
		frameTimes = 0.0;
	}

	public void Frame()
	{
		float realtimeSinceStartup = Time.realtimeSinceStartup;
		if (lastTime > 0f)
		{
			float num = realtimeSinceStartup - lastTime;
			frameTimes += num;
			if ((double)num > 0.1)
			{
				hitches++;
			}
			if (num > 1f)
			{
				freezes++;
			}
		}
		frames++;
		lastTime = realtimeSinceStartup;
	}

	public void CompleteDemoBenchmark(string benchmarkLabel = "")
	{
		Results[benchmarkLabel + "frames"] = frames;
		Results[benchmarkLabel + "hitches"] = hitches;
		Results[benchmarkLabel + "freezes"] = freezes;
		Results[benchmarkLabel + "avgms"] = AvgMilliseconds;
		Results[benchmarkLabel + "avgfps"] = avgFrameRate;
		Results[benchmarkLabel + "gccollects"] = GC.CollectionCount(0);
		Results[benchmarkLabel + "gc;collects"] = GC.CollectionCount(0);
		Results[benchmarkLabel + "gc;totalmemory"] = (float)GC.GetTotalMemory(forceFullCollection: false) / 1000000f;
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using Facepunch;

public static class BenchmarkTimer
{
	public struct Scope : IDisposable
	{
		private Stopwatch timer;

		public Scope(Stopwatch timer)
		{
			this.timer = timer;
			this.timer?.Start();
		}

		void IDisposable.Dispose()
		{
			timer?.Stop();
		}
	}

	public static bool Enabled = false;

	public static Dictionary<string, Stopwatch> All = new Dictionary<string, Stopwatch>();

	public static Stopwatch Get(string name)
	{
		if (!Enabled)
		{
			return null;
		}
		if (All.TryGetValue(name, out var value))
		{
			return value;
		}
		value = new Stopwatch();
		All.Add(name, value);
		return value;
	}

	public static Scope Measure(string name)
	{
		if (!Enabled)
		{
			return new Scope(null);
		}
		return new Scope(Get(name));
	}
}


using System;
using System.Collections.Specialized;
using System.Linq;
using System.Net;
using System.Text;
using Facepunch;
using Facepunch.Models.Database;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public static class Database
{
	public static void Insert(string parent, object contents, Action<bool> onFinished)
	{
		Insert(parent, contents, (onFinished == null) ? null : ((Action<bool, string>)delegate(bool success, string id)
		{
			onFinished(success);
		}));
	}

	public static void Insert(string parent, object contents, Action<bool, string> onFinished = null)
	{
		if (Application.Manifest == null || string.IsNullOrEmpty(Application.Manifest.DatabaseUrl))
		{
			return;
		}
		Add add = new Add
		{
			Auth = Application.Integration.Auth,
			Content = JsonConvert.SerializeObject(contents),
			Parent = parent
		};
		NameValueCollection nameValueCollection = new NameValueCollection();
		nameValueCollection.Add("data", JsonConvert.SerializeObject((object)add));
		Uri address = new Uri(Application.Manifest.DatabaseUrl.Replace("{action}", "add"));
		WebClient webClient = new WebClient
		{
			Encoding = Encoding.UTF8
		};
		if (onFinished != null)
		{
			webClient.UploadValuesCompleted += delegate(object s, UploadValuesCompletedEventArgs e)
			{
				AddResponse addResponse = JsonConvert.DeserializeObject<AddResponse>(Encoding.UTF8.GetString(e.Result));
				onFinished(addResponse.Status == "ok", addResponse.Id);
			};
		}
		webClient.UploadValuesAsync(address, "POST", nameValueCollection);
	}

	public static void Remove(string parent, string id, Action<bool> onFinished = null)
	{
		if (Application.Manifest == null || string.IsNullOrEmpty(Application.Manifest.DatabaseUrl))
		{
			return;
		}
		Remove remove = new Remove
		{
			Auth = Application.Integration.Auth,
			Id = id,
			Parent = parent
		};
		NameValueCollection nameValueCollection = new NameValueCollection();
		nameValueCollection.Add("data", JsonConvert.SerializeObject((object)remove));
		Uri address = new Uri(Application.Manifest.DatabaseUrl.Replace("{action}", "remove"));
		WebClient webClient = new WebClient
		{
			Encoding = Encoding.UTF8
		};
		if (onFinished != null)
		{
			webClient.UploadValuesCompleted += delegate(object s, UploadValuesCompletedEventArgs e)
			{
				BaseResponse baseResponse = JsonConvert.DeserializeObject<BaseResponse>(Encoding.UTF8.GetString(e.Result));
				onFinished(baseResponse.Status == "ok");
			};
		}
		webClient.UploadValuesAsync(address, "POST", nameValueCollection);
	}

	public static Result<T> Query<T>(string parent, int limit, Action<Result<T>> onFinished = null)
	{
		Result<T> result = new Result<T>();
		result.Running = true;
		string text = Application.Manifest.DatabaseUrl.Replace("{action}", "query");
		text = text + "&parent=" + parent;
		text = text + "&limit=" + limit;
		WebClient webClient = new WebClient();
		webClient.Encoding = Encoding.UTF8;
		webClient.DownloadStringCompleted += delegate(object s, DownloadStringCompletedEventArgs e)
		{
			result.Running = false;
			try
			{
				QueryResponse[] source = JsonConvert.DeserializeObject<QueryResponse[]>(e.Result);
				result.Entries = source.Select((QueryResponse x) => new Result<T>.Entry
				{
					Id = x.Id,
					Created = x.Created,
					Updated = x.Updated,
					AuthorId = x.AuthorId,
					AuthType = x.AuthType,
					Content = JsonConvert.DeserializeObject<T>(x.Content)
				}).ToArray();
				result.Success = true;
			}
			catch (Exception)
			{
				result.Success = false;
			}
			if (onFinished != null)
			{
				Threading.QueueOnMainThread(delegate
				{
					onFinished(result);
				});
			}
		};
		webClient.DownloadStringAsync(new Uri(text));
		return result;
	}

	public static void Count(string parent, Action<int> onResult)
	{
		if (onResult == null)
		{
			throw new ArgumentNullException("onResult");
		}
		string text = Application.Manifest.DatabaseUrl.Replace("{action}", "count");
		text = text + "&parent=" + parent;
		WebClient webClient = new WebClient();
		webClient.Encoding = Encoding.UTF8;
		webClient.DownloadStringCompleted += delegate(object s, DownloadStringCompletedEventArgs e)
		{
			//IL_0021: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Invalid comparison between Unknown and I4
			int count = 0;
			try
			{
				JToken val = JToken.Parse(e.Result);
				if ((int)val.Type == 6)
				{
					count = (int)val;
				}
			}
			catch (Exception)
			{
				count = -1;
			}
			Threading.QueueOnMainThread(delegate
			{
				onResult(count);
			});
		};
		webClient.DownloadStringAsync(new Uri(text));
	}
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using Facepunch;

[JsonModel]
public class Report
{
	[JsonModel]
	public class StackTrace
	{
		[JsonModel]
		public class StackFrame
		{
			public int colno { get; set; }

			public string filename { get; private set; }

			public string function { get; private set; }

			public int lineno { get; private set; }

			public string module { get; private set; }

			public string context_line { get; private set; }

			public bool in_app { get; private set; }

			public StackFrame(System.Diagnostics.StackFrame x)
			{
				if (x != null)
				{
					lineno = x.GetFileLineNumber();
					colno = x.GetFileColumnNumber();
					if (lineno == 0)
					{
						lineno = x.GetILOffset();
					}
					MethodBase method = x.GetMethod();
					if (method != null)
					{
						module = ((method.DeclaringType != null) ? method.DeclaringType.FullName : null);
						function = method.Name;
						context_line = method.ToString();
					}
					else
					{
						module = "(unknown)";
						function = "(unknown)";
						context_line = "(unknown)";
					}
					filename = x.GetFileName();
					in_app = !IsSystemModuleName(module);
				}
			}

			public StackFrame(string x)
			{
				function = x;
			}

			private static bool IsSystemModuleName(string moduleName)
			{
				if (!string.IsNullOrEmpty(moduleName))
				{
					if (!moduleName.StartsWith("System.", StringComparison.Ordinal))
					{
						return moduleName.StartsWith("Microsoft.", StringComparison.Ordinal);
					}
					return true;
				}
				return false;
			}
		}

		public StackFrame[] frames { get; set; }

		public StackTrace()
		{
			System.Diagnostics.StackTrace stackTrace = new System.Diagnostics.StackTrace(0, fNeedFileInfo: true);
			frames = (from x in stackTrace.GetFrames()
				select new StackFrame(x)).ToArray();
		}

		public StackTrace(string unityStack)
		{
			frames = (from x in unityStack.Split(new char[2] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Reverse()
				select new StackFrame(x)).ToArray();
		}
	}

	[JsonModel]
	public class User
	{
		public string id { get; set; }

		public string username { get; set; }

		public string ip_address { get; set; } = "{{auto}}";
	}

	public string release { get; set; }

	public string message { get; set; }

	public string platform { get; set; }

	public string event_id { get; set; }

	public Dictionary<string, string> tags { get; set; }

	public StackTrace stacktrace { get; set; }

	public User user { get; set; }
}


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Facepunch;
using Facepunch.Extend;
using Facepunch.Math;
using Newtonsoft.Json;
using Rust;
using UnityEngine;
using UnityEngine.SceneManagement;

public class ExceptionReporter : MonoBehaviour
{
	private static readonly Stopwatch LastReportTime = Stopwatch.StartNew();

	private static int _reportsSentCounter;

	public static bool Disabled { get; set; }

	public static string PublicKey { get; private set; }

	public static string SecretKey { get; private set; }

	public static string Host { get; private set; }

	public static string ProjectId { get; private set; }

	public static int ReportMessageMaxLength { get; set; }

	private static Dictionary<string, string> Headers
	{
		get
		{
			string text = Epoch.Current.ToString();
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("X-Sentry-Auth", "Sentry sentry_version=5, sentry_client=FacepunchER/1.0, sentry_timestamp=" + text + ", sentry_key=" + PublicKey + ", sentry_secret=" + SecretKey);
			return dictionary;
		}
	}

	internal static void InstallHooks()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		Application.logMessageReceived += new LogCallback(OnLogMessage);
	}

	private static void OnLogMessage(string message, string stackTrace, LogType type)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Invalid comparison between Unknown and I4
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		if (Disabled || !Application.Integration.ShouldReportException(message, stackTrace, type))
		{
			return;
		}
		if (LastReportTime.Elapsed.TotalSeconds > 60.0)
		{
			LastReportTime.Reset();
			LastReportTime.Start();
			_reportsSentCounter = 0;
		}
		if (_reportsSentCounter >= 5)
		{
			return;
		}
		LastReportTime.Reset();
		LastReportTime.Start();
		_reportsSentCounter++;
		if ((int)type == 4)
		{
			if (message.Contains("NullReferenceException"))
			{
				string[] array = stackTrace.Split('\n');
				message = message + ": " + array[0];
			}
			if (message.Contains("IndexOutOfRangeException"))
			{
				string[] array2 = stackTrace.Split('\n');
				message = message + ": " + array2[0];
			}
			if (message.Contains("ArgumentOutOfRangeException"))
			{
				string[] array3 = stackTrace.Split('\n');
				message = message + ": " + array3[0];
			}
		}
		SendReport(message, stackTrace, type);
	}

	public static void InitializeFromUrl(string url)
	{
		string[] array = url.Replace("https://", "").Split('/', ':', '@');
		PublicKey = array[0];
		SecretKey = array[1];
		Host = array[2];
		ProjectId = array[3];
	}

	public static void SendReport(string exception, string stacktrace, LogType logType)
	{
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		if (!string.IsNullOrEmpty(Host) && !string.IsNullOrEmpty(ProjectId) && !string.IsNullOrEmpty(PublicKey) && !string.IsNullOrEmpty(SecretKey))
		{
			Report report = new Report();
			report.release = BuildInfo.Current.Scm.Branch.Replace("/", "-") + "#" + BuildInfo.Current.Scm.ChangeId;
			report.message = StringExtensions.Truncate(exception, ReportMessageMaxLength, "");
			report.platform = "csharp";
			report.event_id = Guid.NewGuid().ToString("N");
			report.stacktrace = new Report.StackTrace(stacktrace);
			report.user = new Report.User();
			report.tags = new Dictionary<string, string>();
			report.tags.Add("memory", Mathf.RoundToInt((float)(SystemInfo.systemMemorySize / 1024)) + "gb");
			report.tags.Add("operatingSystem", SystemInfo.operatingSystem);
			Dictionary<string, string> tags = report.tags;
			BatteryStatus batteryStatus = SystemInfo.batteryStatus;
			tags.Add("batteryStatus", ((object)(BatteryStatus)(ref batteryStatus)/*cast due to .constrained prefix*/).ToString());
			report.tags.Add("deviceModel", SystemInfo.deviceModel);
			report.tags.Add("processorType", SystemInfo.processorType);
			report.tags.Add("graphicsDeviceName", SystemInfo.graphicsDeviceName);
			report.tags.Add("graphicsMemorySize", Mathf.RoundToInt((float)(SystemInfo.graphicsMemorySize / 1024)) + "gb");
			report.tags.Add("architecture", (IntPtr.Size == 4) ? "x86" : "x64");
			Dictionary<string, string> tags2 = report.tags;
			Scene sceneAt = SceneManager.GetSceneAt(0);
			tags2.Add("scene", ((Scene)(ref sceneAt)).name);
			report.tags.Add("qualitylevel", QualitySettings.GetQualityLevel().ToString());
			report.tags.Add("level", ((object)(LogType)(ref logType)/*cast due to .constrained prefix*/).ToString().ToLower());
			if (Application.isQuitting)
			{
				report.tags.Add("quitting", "true");
			}
			report.tags.Add("realm", "SERVER");
			string s = JsonConvert.SerializeObject((object)report);
			new WWW("https://" + Host + "/api/" + ProjectId + "/store/", Encoding.ASCII.GetBytes(s), Headers);
		}
	}
}


using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Facepunch;
using Facepunch.Models;
using Newtonsoft.Json;

public static class Feedback
{
	public static async Task<string> Report(Facepunch.Models.Feedback feedback)
	{
		if (Application.Manifest == null)
		{
			return "manifest is null";
		}
		if (string.IsNullOrEmpty(Application.Manifest.ReportUrl))
		{
			return "no report url";
		}
		return "not supported on servers";
	}

	public static async Task<string> ServerReport(string endpoint, ulong fromPlayer, string key, Facepunch.Models.Feedback feedback)
	{
		if (string.IsNullOrEmpty(endpoint))
		{
			return "Failed to send report! No report endpoint url, set one on server.reportsserverendpoint";
		}
		if (!endpoint.StartsWith("http"))
		{
			return "Failed to send report! Invalid report endpoint url, missing http on endpoint: " + endpoint;
		}
		Dictionary<string, string> dictionary = new Dictionary<string, string>();
		dictionary.Add("data", JsonConvert.SerializeObject((object)feedback));
		dictionary.Add("userid", fromPlayer.ToString());
		if (!string.IsNullOrEmpty(key))
		{
			dictionary.Add("key", key);
		}
		try
		{
			return await WebUtil.PostAsync(endpoint, dictionary);
		}
		catch (Exception ex)
		{
			return "Failed to send report! Exception: " + ex.Message;
		}
	}
}


using System;
using System.Collections.Generic;
using Facepunch;
using Facepunch.Models;
using Facepunch.Models.Leaderboard;
using Newtonsoft.Json;
using UnityEngine;

public static class Leaderboard
{
	public static void Insert(string board, float score, bool OnlyIfLower = false, bool OnlyIfHigher = false, string extra = "", Action<string> result = null)
	{
		if (Application.Manifest != null && !string.IsNullOrEmpty(Application.Manifest.LeaderboardUrl))
		{
			if (Application.Integration.DebugOutput)
			{
				Debug.Log((object)$"[Leaderboard] Insert {board} {score}");
			}
			Add add = new Add
			{
				Parent = board,
				Auth = Application.Integration.Auth,
				Score = score,
				ReplaceIfHigher = OnlyIfHigher,
				ReplaceIfLower = OnlyIfLower,
				Extra = extra
			};
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("data", JsonConvert.SerializeObject((object)add));
			WebUtil.Post(Application.Manifest.LeaderboardUrl.Replace("{action}", "add"), dictionary, wait: false, result);
		}
	}

	public static void GetRank(string board, string userid, bool desc = true, string[] friends = null, Action<Rank> result = null)
	{
		if (Application.Manifest == null || string.IsNullOrEmpty(Application.Manifest.LeaderboardUrl))
		{
			return;
		}
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Leaderboard] Place " + board + " " + userid));
		}
		Auth auth = Application.Integration.Auth;
		if (auth == null)
		{
			return;
		}
		string text = Application.Manifest.LeaderboardUrl.Replace("{action}", "place");
		text = text + "&type=" + WebUtil.Escape(auth.Type);
		text = text + "&userid=" + WebUtil.Escape(userid);
		text = text + "&board=" + WebUtil.Escape(board);
		text += $"&desc={desc}";
		if (friends != null && friends.Length != 0)
		{
			text = text + "&friends=" + WebUtil.Escape(string.Join(";", friends));
		}
		WebUtil.Get(text, delegate(string txt)
		{
			if (result != null)
			{
				Rank obj = JsonConvert.DeserializeObject<Rank>(txt);
				result(obj);
			}
		});
	}

	public static void GetPage(string board, string country = null, string city = null, int skip = 0, int take = 20, bool desc = true, string[] friends = null, Action<Entry[]> result = null)
	{
		if (Application.Manifest == null || string.IsNullOrEmpty(Application.Manifest.LeaderboardUrl))
		{
			return;
		}
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Leaderboard] GetPage " + board));
		}
		Auth auth = Application.Integration.Auth;
		if (auth == null)
		{
			return;
		}
		string text = Application.Manifest.LeaderboardUrl.Replace("{action}", "page");
		text = text + "&type=" + WebUtil.Escape(auth.Type);
		text = text + "&board=" + WebUtil.Escape(board);
		text += $"&desc={desc}";
		text += $"&skip={skip}";
		text += $"&take={take}";
		if (!string.IsNullOrEmpty(country))
		{
			text = text + "&country=" + WebUtil.Escape(country);
		}
		if (!string.IsNullOrEmpty(city))
		{
			text = text + "&city=" + WebUtil.Escape(city);
		}
		if (friends != null && friends.Length != 0)
		{
			text = text + "&friends=" + WebUtil.Escape(string.Join(";", friends));
		}
		WebUtil.Get(text, delegate(string txt)
		{
			if (result != null)
			{
				Entry[] obj = JsonConvert.DeserializeObject<Entry[]>(txt);
				result(obj);
			}
		});
	}
}


using System;
using System.Collections;
using Facepunch;
using Facepunch.Models;
using UnityEngine;
using UnityEngine.Assertions;

public static class Manifest
{
	public static DateTime LastDownloaded { get; internal set; }

	public static string Contents { get; internal set; }

	internal static void Download()
	{
		if (string.IsNullOrEmpty(Application.Integration.PublicKey))
		{
			if (Application.Integration.DebugOutput)
			{
				Debug.LogWarning((object)"[manifest] Not downloading manifest - no public key");
			}
		}
		else
		{
			Application.Controller.StartCoroutine(AutoUpdateManifest());
		}
	}

	private static IEnumerator AutoUpdateManifest()
	{
		while (true)
		{
			UpdateManifest();
			yield return (object)new WaitForSecondsRealtime(3600f);
		}
	}

	public static void UpdateManifest()
	{
		string text = Application.Integration.ApiUrl + "public/manifest/?public_key=" + Application.Integration.PublicKey;
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Manifest] Fetching from \"" + text + "\""));
		}
		Uri arg = new Uri(text, UriKind.Absolute);
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)$"[Manifest] URI IS \"{arg}\"");
		}
		WebUtil.Get(text, delegate(string str)
		{
			if (string.IsNullOrEmpty(str))
			{
				if (Application.Integration.DebugOutput)
				{
					Debug.Log((object)"[Manifest] Empty Response, bailing.");
				}
			}
			else
			{
				LoadManifest(str);
			}
		});
	}

	private static void LoadManifest(string text)
	{
		LastDownloaded = DateTime.UtcNow;
		Contents = text;
		if (string.IsNullOrEmpty(text))
		{
			return;
		}
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)"[Manifest] Loading Manifest..");
		}
		try
		{
			Application.Manifest = Facepunch.Models.Manifest.FromJson(text);
			OnManifestLoaded(Application.Manifest);
		}
		catch (Exception ex)
		{
			Debug.LogWarning((object)("Exception when reading manifest (" + ex.Message + " / " + ex.StackTrace + ")"));
			if (ex.InnerException != null)
			{
				Debug.LogWarning((object)("(" + ex.InnerException.Message + " / " + ex.InnerException.StackTrace + ")"));
			}
		}
	}

	private static void OnManifestLoaded(Facepunch.Models.Manifest manifest)
	{
		Assert.IsNotNull<Facepunch.Models.Manifest>(manifest);
		Application.Integration.OnManifestFile(manifest);
	}
}


[JsonModel]
public class Hero
{
	public string Ident { get; set; }

	public string MediaUrl { get; set; }

	public string TitleText { get; set; }

	public string ActionText { get; set; }

	public string TargetUrl { get; set; }

	public string Conditions { get; set; }

	public double Chance { get; set; }
}


using System;
using Facepunch;
using Newtonsoft.Json;
using UnityEngine;

[JsonModel]
public class AccountNotice
{
	public class GeneralNoticeModel
	{
		[JsonProperty("Title")]
		public string Title { get; set; }

		[JsonProperty("Message")]
		public string Message { get; set; }
	}

	public class BanNoticeModel
	{
		[JsonProperty("BannedUserId")]
		public string BannedUserId { get; set; }

		[JsonProperty("BannedUserName")]
		public string BannedUserName { get; set; }

		[JsonProperty("FirstReport")]
		public DateTime FirstReport { get; set; }
	}

	public int NoticeId { get; set; }

	public DateTime Created { get; set; }

	public string Json { get; set; }

	public string Seen { get; set; }

	public int NotificationType { get; set; }

	public bool GlobalNotification { get; set; }

	[JsonIgnore]
	public object Parsed { get; private set; }

	public void ParseJson()
	{
		try
		{
			switch (NotificationType)
			{
			case 0:
			case 1:
			case 2:
				Parsed = JsonConvert.DeserializeObject<GeneralNoticeModel>(Json);
				break;
			case 3:
				Parsed = JsonConvert.DeserializeObject<BanNoticeModel>(Json);
				break;
			default:
				Debug.LogWarning((object)$"Unknown NotificationType: {NotificationType}, raw JSON: {Json}");
				Parsed = null;
				break;
			}
		}
		catch (Exception ex)
		{
			Debug.LogWarning((object)$"Failed to parse notice Json (Type {NotificationType}): {ex.Message}");
			Parsed = null;
		}
	}

	public override int GetHashCode()
	{
		return (((((17 * 23 + NoticeId.GetHashCode()) * 23 + Created.GetHashCode()) * 23 + ((Json != null) ? Json.GetHashCode() : 0)) * 23 + ((Seen != null) ? Seen.GetHashCode() : 0)) * 23 + NotificationType.GetHashCode()) * 23 + GlobalNotification.GetHashCode();
	}
}


using System;
using System.Runtime.InteropServices;
using Facepunch;
using UnityEngine;
using UnityEngine.Rendering;

[JsonModel]
public struct SystemInformation
{
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	[JsonModel]
	public struct Hardware
	{
		public string deviceName => SystemInfo.deviceName;

		public string operatingSystem => SystemInfo.operatingSystem;

		public string processorType => SystemInfo.processorType;

		public string processorCount => SystemInfo.processorCount.ToString();

		public string systemMemorySize => SystemInfo.systemMemorySize + "MB";

		public string graphicsDeviceName => SystemInfo.graphicsDeviceName;

		public string graphicsDeviceVersion => SystemInfo.graphicsDeviceVersion;

		public string graphicsMemorySize => SystemInfo.graphicsMemorySize + "MB";

		public string graphicsShaderLevel => SystemInfo.graphicsShaderLevel.ToString();

		public string graphicsDeviceType
		{
			get
			{
				//IL_0000: Unknown result type (might be due to invalid IL or missing references)
				//IL_0005: Unknown result type (might be due to invalid IL or missing references)
				GraphicsDeviceType val = SystemInfo.graphicsDeviceType;
				return ((object)(GraphicsDeviceType)(ref val)/*cast due to .constrained prefix*/).ToString();
			}
		}

		public string deviceUniqueIdentifier => SystemInfo.deviceUniqueIdentifier;

		public string graphicsDeviceVendor => SystemInfo.graphicsDeviceVendor;

		public bool graphicsMultiThreaded => SystemInfo.graphicsMultiThreaded;

		public int processorFrequency => SystemInfo.processorFrequency;

		public string processorArchitecture
		{
			get
			{
				if (IntPtr.Size == 4)
				{
					return "x86";
				}
				return "x64";
			}
		}
	}

	[StructLayout(LayoutKind.Sequential, Size = 1)]
	[JsonModel]
	public struct Environment
	{
		public string unityVersion => Application.unityVersion;

		public string version => Application.version;

		public string companyName => Application.companyName;

		public bool isEditor => Application.isEditor;

		public bool isPlayer => !Application.isEditor;

		public string systemLanguage
		{
			get
			{
				//IL_0000: Unknown result type (might be due to invalid IL or missing references)
				//IL_0005: Unknown result type (might be due to invalid IL or missing references)
				SystemLanguage val = Application.systemLanguage;
				return ((object)(SystemLanguage)(ref val)/*cast due to .constrained prefix*/).ToString();
			}
		}

		public int targetFrameRate => Application.targetFrameRate;

		public Resolution currentResolution => Screen.currentResolution;

		public int screenWidth => Screen.width;

		public int screenHeight => Screen.height;

		public bool fullScreen => Screen.fullScreen;

		public string anisotropicFiltering
		{
			get
			{
				//IL_0000: Unknown result type (might be due to invalid IL or missing references)
				//IL_0005: Unknown result type (might be due to invalid IL or missing references)
				AnisotropicFiltering val = QualitySettings.anisotropicFiltering;
				return ((object)(AnisotropicFiltering)(ref val)/*cast due to .constrained prefix*/).ToString();
			}
		}

		public string antiAliasing => QualitySettings.antiAliasing.ToString();

		public string qualityLevel => QualitySettings.GetQualityLevel().ToString();

		public string globalMaximumLOD => Shader.globalMaximumLOD.ToString();

		public string lodBias => QualitySettings.lodBias.ToString();

		public string maximumLODLevel => QualitySettings.maximumLODLevel.ToString();

		public string particleRaycastBudget => QualitySettings.particleRaycastBudget.ToString();

		public string pixelLightCount => QualitySettings.pixelLightCount.ToString();

		public string realtimeReflectionProbes => QualitySettings.realtimeReflectionProbes.ToString();

		public string shadowCascades => QualitySettings.shadowCascades.ToString();

		public string shadowDistance => QualitySettings.shadowDistance.ToString();

		public string softVegetation => QualitySettings.softVegetation.ToString();

		public string vSyncCount => QualitySettings.vSyncCount.ToString();
	}

	public Hardware hardware;

	public Environment environment;
}


using System;
using System.Diagnostics;
using Facepunch;

public static class Performance
{
	public static Func<int> GetMemoryUsage = null;

	public static Func<int> GetGarbageCollections = null;

	private static Stopwatch Stopwatch = Stopwatch.StartNew();

	private static int frames;

	public static int TargetFrameRate = 60;

	private static int[] frameBuckets = new int[6];

	private static float[] frameBucketFractions = new float[6];

	public static FrameRateCategory FrameRateCategory => CategorizeFrameRate(FrameCountLastSecond);

	public static int FrameCountLastSecond { get; private set; }

	public static double AvgFrameTimeLastSecond
	{
		get
		{
			if (FrameCountLastSecond <= 0)
			{
				return 1.0;
			}
			return 1000.0 / (double)FrameCountLastSecond;
		}
	}

	public static int MemoryUsage { get; private set; }

	public static int GarbageCollections { get; private set; }

	public static float SecondsSinceLastConnection { get; private set; }

	public static int[] CategorizedFrameCount => frameBuckets;

	internal static void Frame()
	{
		frames++;
		if (Stopwatch.Elapsed.TotalSeconds >= 1.0)
		{
			OneSecond(Stopwatch.Elapsed.TotalSeconds);
			Stopwatch.Reset();
			Stopwatch.Start();
		}
	}

	private static void OneSecond(double timelapse)
	{
		FrameCountLastSecond = frames;
		frames = 0;
		MemoryUsage = (int)((GetMemoryUsage != null) ? GetMemoryUsage() : (GC.GetTotalMemory(forceFullCollection: false) / 1024 / 1024));
		GarbageCollections = ((GetGarbageCollections != null) ? GetGarbageCollections() : GC.CollectionCount(0));
		UpdateFrameBuckets();
	}

	private static FrameRateCategory CategorizeFrameRate(int i)
	{
		if (i < TargetFrameRate / 4)
		{
			return FrameRateCategory.Unplayable;
		}
		if (i < TargetFrameRate / 2)
		{
			return FrameRateCategory.VeryBad;
		}
		if (i < TargetFrameRate - 10)
		{
			return FrameRateCategory.Bad;
		}
		if (i < TargetFrameRate + 10)
		{
			return FrameRateCategory.Average;
		}
		if (i < TargetFrameRate + 30)
		{
			return FrameRateCategory.Good;
		}
		return FrameRateCategory.VeryGood;
	}

	private static void UpdateFrameBuckets()
	{
		frameBuckets[(int)FrameRateCategory]++;
		int num = 0;
		for (int i = 0; i < frameBuckets.Length; i++)
		{
			num += frameBuckets[i];
		}
		for (int j = 0; j < frameBuckets.Length; j++)
		{
			frameBucketFractions[j] = (float)frameBuckets[j] / (float)num;
		}
	}

	public static int GetFrameCount(FrameRateCategory category)
	{
		return frameBuckets[(int)category];
	}

	public static float GetFrameFraction(FrameRateCategory category)
	{
		return frameBucketFractions[(int)category];
	}
}


public enum FrameRateCategory
{
	Unplayable,
	VeryBad,
	Bad,
	Average,
	Good,
	VeryGood,
	Count
}


using UnityEngine;
using UnityEngine.UI;

public class PerformanceUI : MonoBehaviour
{
	public LayoutElement[] rainbow;

	public Text info;

	public Text fps;

	public Text ms;

	public Text mb;

	public Text gc;

	private Canvas Canvas;

	private float updateTime;
}


using UnityEngine;

public class InspectorFlagsAttribute : PropertyAttribute
{
}


using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using UnityEngine;

[Serializable]
public class WeightedStringList
{
	[Serializable]
	public struct Container
	{
		public float Weight;

		public string Object;
	}

	public List<Container> Objects = new List<Container>();

	private float _total;

	private float Total
	{
		get
		{
			if (_total == 0f)
			{
				_total = Objects.Sum((Container x) => x.Weight);
			}
			return _total;
		}
	}

	public string Get(float f)
	{
		f *= Total;
		float num = 0f;
		for (int i = 0; i < Objects.Count; i++)
		{
			num += Objects[i].Weight;
			if (f <= num)
			{
				return Objects[i].Object;
			}
		}
		return Objects[Objects.Count - 1].Object;
	}

	public string GetRandom()
	{
		return Get(Random.Range(0f, 1f));
	}
}


using Facepunch;
using UnityEngine;

internal class ApplicationControllerMonobehaviour : MonoBehaviour
{
	public void OnApplicationQuit()
	{
	}

	public void Update()
	{
		Performance.Frame();
		Threading.RunQueuedFunctionsOnMainThread();
	}
}


using UnityEngine;

public class DestroyInSeconds : MonoBehaviour
{
	public float TimeToDie = 5f;

	public float TimeToDieVariance;

	private void Start()
	{
		Object.Destroy((Object)(object)((Component)this).gameObject, TimeToDie + Random.Range(TimeToDieVariance * -0.5f, TimeToDieVariance * 0.5f));
	}
}


using Facepunch;
using UnityEngine;

public abstract class ListComponent<T> : ListComponent where T : MonoBehaviour
{
	private static ListHashSet<T> instanceList = new ListHashSet<T>();

	public static ListHashSet<T> InstanceList => instanceList;

	public override void Setup()
	{
		if (!instanceList.Contains((T)(object)((this is T) ? this : null)))
		{
			instanceList.Add((T)(object)((this is T) ? this : null));
		}
	}

	public override void Clear()
	{
		instanceList.Remove((T)(object)((this is T) ? this : null));
	}
}


using UnityEngine;

public abstract class ListComponent : MonoBehaviour
{
	public abstract void Setup();

	public abstract void Clear();

	protected virtual void OnEnable()
	{
		Setup();
	}

	protected virtual void OnDisable()
	{
		Clear();
	}
}


using System;
using UnityEngine;

public static class AnimationCurveEx
{
	public static Keyframe First(this AnimationCurve curve)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		if (curve == null)
		{
			throw new NullReferenceException();
		}
		if (curve.length == 0)
		{
			throw new ArgumentOutOfRangeException();
		}
		return curve[0];
	}

	public static Keyframe Last(this AnimationCurve curve)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (curve == null)
		{
			throw new NullReferenceException();
		}
		if (curve.length == 0)
		{
			throw new ArgumentOutOfRangeException();
		}
		return curve[curve.length - 1];
	}
}


using System.IO;
using UnityEngine;

public static class BinaryReaderExtensions
{
	public static Vector3 ReadVector3(this BinaryReader o)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(o.ReadSingle(), o.ReadSingle(), o.ReadSingle());
	}
}


using System.IO;
using UnityEngine;

public static class BinaryWriterExtensions
{
	public static void Write(this BinaryWriter o, Vector3 vec)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		o.Write(vec.x);
		o.Write(vec.y);
		o.Write(vec.z);
	}
}


using UnityEngine;

public static class ComponentExtensions
{
	public static T Duplicate<T>(this T obj) where T : Component
	{
		return Object.Instantiate<GameObject>(((Component)obj).gameObject, ((Component)obj).transform.parent).GetComponent<T>();
	}

	public static T[] Duplicate<T>(this T obj, int amount, bool includeOriginalInArray = false) where T : Component
	{
		if (includeOriginalInArray)
		{
			amount++;
		}
		T[] array = new T[amount];
		for (int i = 0; i < amount; i++)
		{
			if (includeOriginalInArray && i == 0)
			{
				array[i] = obj;
			}
			else
			{
				array[i] = Duplicate(obj);
			}
		}
		return array;
	}

	public static void SetActive<T>(this T obj, bool active) where T : Component
	{
		((Component)obj).gameObject.SetActive(active);
	}

	public static Vector2 WorldToRectTransform<T>(this T obj, Vector2 worldPos) where T : Component
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		Rect worldRect = GetWorldRect(obj);
		worldPos.x = (worldPos.x - ((Rect)(ref worldRect)).xMin) / ((Rect)(ref worldRect)).width;
		worldPos.y = (worldPos.y - ((Rect)(ref worldRect)).yMin) / ((Rect)(ref worldRect)).height;
		return worldPos;
	}

	public static Rect GetWorldRect<T>(this T obj) where T : Component
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		Vector3[] array = (Vector3[])(object)new Vector3[4];
		((RectTransform)((Component)obj).transform).GetWorldCorners(array);
		return new Rect(Vector2.op_Implicit(array[0]), Vector2.op_Implicit(array[2] - array[0]));
	}

	public static bool GetComponent<T, U>(this T obj, out U value) where T : Component
	{
		value = ((Component)obj).GetComponent<U>();
		return value != null;
	}

	public static bool GetComponentInParent<T, U>(this T obj, out U value) where T : Component
	{
		value = ((Component)obj).GetComponentInParent<U>();
		return value != null;
	}

	public static bool GetComponentInChildren<T, U>(this T obj, out U value) where T : Component
	{
		value = ((Component)obj).GetComponentInChildren<U>();
		return value != null;
	}
}


using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public static class GameObjectExtensions
{
	public static void SetIgnoreCollisions(this GameObject self, GameObject other, bool ignore)
	{
		List<Collider> list = Pool.Get<List<Collider>>();
		List<Collider> list2 = Pool.Get<List<Collider>>();
		self.GetComponentsInChildren<Collider>(true, list);
		other.GetComponentsInChildren<Collider>(true, list2);
		foreach (Collider item in list)
		{
			foreach (Collider item2 in list2)
			{
				Physics.IgnoreCollision(item, item2, ignore);
			}
		}
		Pool.FreeUnmanaged<Collider>(ref list);
		Pool.FreeUnmanaged<Collider>(ref list2);
	}
}


using UnityEngine;
using UnityEngine.Jobs;

public static class TransformAccessArrayEx
{
	public static bool RemoveInstance(this ref TransformAccessArray array, Transform transform)
	{
		int num = -1;
		for (int i = 0; i < ((TransformAccessArray)(ref array)).length; i++)
		{
			if ((Object)(object)transform == (Object)(object)((Component)((TransformAccessArray)(ref array))[i]).transform)
			{
				num = i;
				break;
			}
		}
		bool num2 = num >= 0;
		if (num2)
		{
			((TransformAccessArray)(ref array)).RemoveAtSwapBack(num);
		}
		return num2;
	}
}


using UnityEngine;

public static class Vector3Extensions
{
	public static Vector3 XZ(this Vector3 o, float y = 0f)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(o.x, y, o.z);
	}

	public static Vector3 RemoveAxis(this Vector3 o, Vector3 axis)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		Vector3 normalized = ((Vector3)(ref axis)).normalized;
		return o - normalized * Vector3.Dot(o, normalized);
	}
}


using System;
using UnityEngine;

public static class DebugDraw
{
	public static void Point(Vector3 position, Color color, float scale = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		color = ((color == default(Color)) ? Color.white : color);
		Debug.DrawRay(position + Vector3.up * (scale * 0.5f), -Vector3.up * scale, color, duration, depthTest);
		Debug.DrawRay(position + Vector3.right * (scale * 0.5f), -Vector3.right * scale, color, duration, depthTest);
		Debug.DrawRay(position + Vector3.forward * (scale * 0.5f), -Vector3.forward * scale, color, duration, depthTest);
	}

	public static void Point(Vector3 position, float scale = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		Point(position, Color.white, scale, duration, depthTest);
	}

	public static void Bounds(Bounds bounds, Color color, float duration = 0f, bool depthTest = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		Vector3 center = ((Bounds)(ref bounds)).center;
		float x = ((Bounds)(ref bounds)).extents.x;
		float y = ((Bounds)(ref bounds)).extents.y;
		float z = ((Bounds)(ref bounds)).extents.z;
		Vector3 val = center + new Vector3(x, y, z);
		Vector3 val2 = center + new Vector3(x, y, 0f - z);
		Vector3 val3 = center + new Vector3(0f - x, y, z);
		Vector3 val4 = center + new Vector3(0f - x, y, 0f - z);
		Vector3 val5 = center + new Vector3(x, 0f - y, z);
		Vector3 val6 = center + new Vector3(x, 0f - y, 0f - z);
		Vector3 val7 = center + new Vector3(0f - x, 0f - y, z);
		Vector3 val8 = center + new Vector3(0f - x, 0f - y, 0f - z);
		Debug.DrawLine(val, val3, color, duration, depthTest);
		Debug.DrawLine(val, val2, color, duration, depthTest);
		Debug.DrawLine(val3, val4, color, duration, depthTest);
		Debug.DrawLine(val2, val4, color, duration, depthTest);
		Debug.DrawLine(val, val5, color, duration, depthTest);
		Debug.DrawLine(val2, val6, color, duration, depthTest);
		Debug.DrawLine(val3, val7, color, duration, depthTest);
		Debug.DrawLine(val4, val8, color, duration, depthTest);
		Debug.DrawLine(val5, val7, color, duration, depthTest);
		Debug.DrawLine(val5, val6, color, duration, depthTest);
		Debug.DrawLine(val7, val8, color, duration, depthTest);
		Debug.DrawLine(val8, val6, color, duration, depthTest);
	}

	public static void Normal(Vector3 point, Vector3 normal, float size, Color color, float duration = 0f, bool depthtest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		Line(point, point + ((Vector3)(ref normal)).normalized * size, color, duration, depthtest);
		Circle(point, ((Vector3)(ref normal)).normalized, color, size * 0.5f, duration, depthtest);
	}

	public static void Bounds(Bounds bounds, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		Bounds(bounds, Color.white, duration, depthTest);
	}

	public static void LocalCube(Transform transform, Vector3 size, Color color, Vector3 center = default(Vector3), float duration = 0f, bool depthTest = true)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = transform.TransformPoint(center + -size * 0.5f);
		Vector3 val2 = transform.TransformPoint(center + new Vector3(size.x, 0f - size.y, 0f - size.z) * 0.5f);
		Vector3 val3 = transform.TransformPoint(center + new Vector3(size.x, 0f - size.y, size.z) * 0.5f);
		Vector3 val4 = transform.TransformPoint(center + new Vector3(0f - size.x, 0f - size.y, size.z) * 0.5f);
		Vector3 val5 = transform.TransformPoint(center + new Vector3(0f - size.x, size.y, 0f - size.z) * 0.5f);
		Vector3 val6 = transform.TransformPoint(center + new Vector3(size.x, size.y, 0f - size.z) * 0.5f);
		Vector3 val7 = transform.TransformPoint(center + size * 0.5f);
		Vector3 val8 = transform.TransformPoint(center + new Vector3(0f - size.x, size.y, size.z) * 0.5f);
		Debug.DrawLine(val, val2, color, duration, depthTest);
		Debug.DrawLine(val2, val3, color, duration, depthTest);
		Debug.DrawLine(val3, val4, color, duration, depthTest);
		Debug.DrawLine(val4, val, color, duration, depthTest);
		Debug.DrawLine(val5, val6, color, duration, depthTest);
		Debug.DrawLine(val6, val7, color, duration, depthTest);
		Debug.DrawLine(val7, val8, color, duration, depthTest);
		Debug.DrawLine(val8, val5, color, duration, depthTest);
		Debug.DrawLine(val, val5, color, duration, depthTest);
		Debug.DrawLine(val2, val6, color, duration, depthTest);
		Debug.DrawLine(val3, val7, color, duration, depthTest);
		Debug.DrawLine(val4, val8, color, duration, depthTest);
	}

	public static void LocalCube(Transform transform, Vector3 size, Vector3 center = default(Vector3), float duration = 0f, bool depthTest = true)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		LocalCube(transform, size, Color.white, center, duration, depthTest);
	}

	public static void LocalCube(Matrix4x4 space, Vector3 size, Color color, Vector3 center = default(Vector3), float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		color = ((color == default(Color)) ? Color.white : color);
		Vector3 val = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + -size * 0.5f);
		Vector3 val2 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + new Vector3(size.x, 0f - size.y, 0f - size.z) * 0.5f);
		Vector3 val3 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + new Vector3(size.x, 0f - size.y, size.z) * 0.5f);
		Vector3 val4 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + new Vector3(0f - size.x, 0f - size.y, size.z) * 0.5f);
		Vector3 val5 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + new Vector3(0f - size.x, size.y, 0f - size.z) * 0.5f);
		Vector3 val6 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + new Vector3(size.x, size.y, 0f - size.z) * 0.5f);
		Vector3 val7 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + size * 0.5f);
		Vector3 val8 = ((Matrix4x4)(ref space)).MultiplyPoint3x4(center + new Vector3(0f - size.x, size.y, size.z) * 0.5f);
		Debug.DrawLine(val, val2, color, duration, depthTest);
		Debug.DrawLine(val2, val3, color, duration, depthTest);
		Debug.DrawLine(val3, val4, color, duration, depthTest);
		Debug.DrawLine(val4, val, color, duration, depthTest);
		Debug.DrawLine(val5, val6, color, duration, depthTest);
		Debug.DrawLine(val6, val7, color, duration, depthTest);
		Debug.DrawLine(val7, val8, color, duration, depthTest);
		Debug.DrawLine(val8, val5, color, duration, depthTest);
		Debug.DrawLine(val, val5, color, duration, depthTest);
		Debug.DrawLine(val2, val6, color, duration, depthTest);
		Debug.DrawLine(val3, val7, color, duration, depthTest);
		Debug.DrawLine(val4, val8, color, duration, depthTest);
	}

	public static void LocalCube(Matrix4x4 space, Vector3 size, Vector3 center = default(Vector3), float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		LocalCube(space, size, Color.white, center, duration, depthTest);
	}

	public static void Circle(Vector3 position, Vector3 up, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ((Vector3)(ref up)).normalized * radius;
		Vector3 val2 = Vector3.Slerp(val, -val, 0.5f);
		Vector3 val3 = Vector3.Cross(val, val2);
		Vector3 val4 = ((Vector3)(ref val3)).normalized * radius;
		Matrix4x4 val5 = default(Matrix4x4);
		((Matrix4x4)(ref val5))[0] = val4.x;
		((Matrix4x4)(ref val5))[1] = val4.y;
		((Matrix4x4)(ref val5))[2] = val4.z;
		((Matrix4x4)(ref val5))[4] = val.x;
		((Matrix4x4)(ref val5))[5] = val.y;
		((Matrix4x4)(ref val5))[6] = val.z;
		((Matrix4x4)(ref val5))[8] = val2.x;
		((Matrix4x4)(ref val5))[9] = val2.y;
		((Matrix4x4)(ref val5))[10] = val2.z;
		Vector3 val6 = position + ((Matrix4x4)(ref val5)).MultiplyPoint3x4(new Vector3(Mathf.Cos(0f), 0f, Mathf.Sin(0f)));
		Vector3 val7 = Vector3.zero;
		color = ((color == default(Color)) ? Color.white : color);
		for (int i = 0; i < 91; i++)
		{
			val7.x = Mathf.Cos((float)(i * 4) * ((float)Math.PI / 180f));
			val7.z = Mathf.Sin((float)(i * 4) * ((float)Math.PI / 180f));
			val7.y = 0f;
			val7 = position + ((Matrix4x4)(ref val5)).MultiplyPoint3x4(val7);
			Debug.DrawLine(val6, val7, color, duration, depthTest);
			val6 = val7;
		}
	}

	public static void Circle(Vector3 position, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		Circle(position, Vector3.up, color, radius, duration, depthTest);
	}

	public static void Circle(Vector3 position, Vector3 up, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Circle(position, up, Color.white, radius, duration, depthTest);
	}

	public static void Circle(Vector3 position, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		Circle(position, Vector3.up, Color.white, radius, duration, depthTest);
	}

	public static void Sphere(Vector3 position, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		float num = 10f;
		Vector3 val = default(Vector3);
		((Vector3)(ref val))..ctor(position.x, position.y + radius * Mathf.Sin(0f), position.z + radius * Mathf.Cos(0f));
		Vector3 val2 = default(Vector3);
		((Vector3)(ref val2))..ctor(position.x + radius * Mathf.Cos(0f), position.y, position.z + radius * Mathf.Sin(0f));
		Vector3 val3 = default(Vector3);
		((Vector3)(ref val3))..ctor(position.x + radius * Mathf.Cos(0f), position.y + radius * Mathf.Sin(0f), position.z);
		Vector3 val4 = default(Vector3);
		Vector3 val5 = default(Vector3);
		Vector3 val6 = default(Vector3);
		for (int i = 1; i < 37; i++)
		{
			((Vector3)(ref val4))..ctor(position.x, position.y + radius * Mathf.Sin(num * (float)i * ((float)Math.PI / 180f)), position.z + radius * Mathf.Cos(num * (float)i * ((float)Math.PI / 180f)));
			((Vector3)(ref val5))..ctor(position.x + radius * Mathf.Cos(num * (float)i * ((float)Math.PI / 180f)), position.y, position.z + radius * Mathf.Sin(num * (float)i * ((float)Math.PI / 180f)));
			((Vector3)(ref val6))..ctor(position.x + radius * Mathf.Cos(num * (float)i * ((float)Math.PI / 180f)), position.y + radius * Mathf.Sin(num * (float)i * ((float)Math.PI / 180f)), position.z);
			Debug.DrawLine(val, val4, color, duration, depthTest);
			Debug.DrawLine(val2, val5, color, duration, depthTest);
			Debug.DrawLine(val3, val6, color, duration, depthTest);
			val = val4;
			val2 = val5;
			val3 = val6;
		}
	}

	public static void Sphere(Vector3 position, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		Sphere(position, Color.white, radius, duration, depthTest);
	}

	public static void Cylinder(Vector3 start, Vector3 end, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = end - start;
		Vector3 val2 = ((Vector3)(ref val)).normalized * radius;
		Vector3 val3 = Vector3.Slerp(val2, -val2, 0.5f);
		val = Vector3.Cross(val2, val3);
		Vector3 val4 = ((Vector3)(ref val)).normalized * radius;
		Circle(start, val2, color, radius, duration, depthTest);
		Circle(end, -val2, color, radius, duration, depthTest);
		Circle((start + end) * 0.5f, val2, color, radius, duration, depthTest);
		Debug.DrawLine(start + val4, end + val4, color, duration, depthTest);
		Debug.DrawLine(start - val4, end - val4, color, duration, depthTest);
		Debug.DrawLine(start + val3, end + val3, color, duration, depthTest);
		Debug.DrawLine(start - val3, end - val3, color, duration, depthTest);
		Debug.DrawLine(start - val4, start + val4, color, duration, depthTest);
		Debug.DrawLine(start - val3, start + val3, color, duration, depthTest);
		Debug.DrawLine(end - val4, end + val4, color, duration, depthTest);
		Debug.DrawLine(end - val3, end + val3, color, duration, depthTest);
	}

	public static void Cylinder(Vector3 start, Vector3 end, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Cylinder(start, end, Color.white, radius, duration, depthTest);
	}

	public static void Cone(Vector3 position, Vector3 direction, Color color, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		float magnitude = ((Vector3)(ref direction)).magnitude;
		Vector3 val = direction;
		Vector3 val2 = Vector3.Slerp(val, -val, 0.5f);
		Vector3 val3 = Vector3.Cross(val, val2);
		Vector3 val4 = ((Vector3)(ref val3)).normalized * magnitude;
		direction = ((Vector3)(ref direction)).normalized;
		Vector3 val5 = Vector3.Slerp(val, val2, angle / 90f);
		Plane val6 = default(Plane);
		((Plane)(ref val6))..ctor(-direction, position + val);
		Ray val7 = default(Ray);
		((Ray)(ref val7))..ctor(position, val5);
		float num = default(float);
		((Plane)(ref val6)).Raycast(val7, ref num);
		Debug.DrawRay(position, ((Vector3)(ref val5)).normalized * num, color);
		val3 = Vector3.Slerp(val, -val2, angle / 90f);
		Debug.DrawRay(position, ((Vector3)(ref val3)).normalized * num, color, duration, depthTest);
		val3 = Vector3.Slerp(val, val4, angle / 90f);
		Debug.DrawRay(position, ((Vector3)(ref val3)).normalized * num, color, duration, depthTest);
		val3 = Vector3.Slerp(val, -val4, angle / 90f);
		Debug.DrawRay(position, ((Vector3)(ref val3)).normalized * num, color, duration, depthTest);
		Vector3 position2 = position + val;
		Vector3 up = direction;
		val3 = val - ((Vector3)(ref val5)).normalized * num;
		Circle(position2, up, color, ((Vector3)(ref val3)).magnitude, duration, depthTest);
		Vector3 position3 = position + val * 0.5f;
		Vector3 up2 = direction;
		val3 = val * 0.5f - ((Vector3)(ref val5)).normalized * (num * 0.5f);
		Circle(position3, up2, color, ((Vector3)(ref val3)).magnitude, duration, depthTest);
	}

	public static void Cone(Vector3 position, Vector3 direction, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Cone(position, direction, Color.white, angle, duration, depthTest);
	}

	public static void Cone(Vector3 position, Color color, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		Cone(position, Vector3.up, color, angle, duration, depthTest);
	}

	public static void Cone(Vector3 position, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		Cone(position, Vector3.up, Color.white, angle, duration, depthTest);
	}

	public static void Line(Vector3 position, Vector3 endposition, Color color, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Debug.DrawLine(position, endposition, color, duration, depthTest);
	}

	public static void Arrow(Vector3 position, Vector3 direction, Color color, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		Debug.DrawRay(position, direction, color, duration, depthTest);
		Cone(position + direction, -direction * 0.333f, color, 15f, duration, depthTest);
	}

	public static void Arrow(Vector3 position, Vector3 direction, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Arrow(position, direction, Color.white, duration, depthTest);
	}

	public static void Capsule(Vector3 start, Vector3 end, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_0281: Unknown result type (might be due to invalid IL or missing references)
		//IL_0286: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0300: Unknown result type (might be due to invalid IL or missing references)
		//IL_0301: Unknown result type (might be due to invalid IL or missing references)
		//IL_0306: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_0320: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_033d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = end - start;
		Vector3 val2 = ((Vector3)(ref val)).normalized * radius;
		Vector3 val3 = Vector3.Slerp(val2, -val2, 0.5f);
		val = Vector3.Cross(val2, val3);
		Vector3 val4 = ((Vector3)(ref val)).normalized * radius;
		val = start - end;
		float magnitude = ((Vector3)(ref val)).magnitude;
		float num = Mathf.Max(0f, magnitude * 0.5f - radius);
		Vector3 val5 = (end + start) * 0.5f;
		val = start - val5;
		start = val5 + ((Vector3)(ref val)).normalized * num;
		val = end - val5;
		end = val5 + ((Vector3)(ref val)).normalized * num;
		Circle(start, val2, color, radius, duration, depthTest);
		Circle(end, -val2, color, radius, duration, depthTest);
		Debug.DrawLine(start + val4, end + val4, color, duration, depthTest);
		Debug.DrawLine(start - val4, end - val4, color, duration, depthTest);
		Debug.DrawLine(start + val3, end + val3, color, duration, depthTest);
		Debug.DrawLine(start - val3, end - val3, color, duration, depthTest);
		for (int i = 1; i < 26; i++)
		{
			Debug.DrawLine(Vector3.Slerp(val4, -val2, (float)i / 25f) + start, Vector3.Slerp(val4, -val2, (float)(i - 1) / 25f) + start, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(-val4, -val2, (float)i / 25f) + start, Vector3.Slerp(-val4, -val2, (float)(i - 1) / 25f) + start, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(val3, -val2, (float)i / 25f) + start, Vector3.Slerp(val3, -val2, (float)(i - 1) / 25f) + start, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(-val3, -val2, (float)i / 25f) + start, Vector3.Slerp(-val3, -val2, (float)(i - 1) / 25f) + start, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(val4, val2, (float)i / 25f) + end, Vector3.Slerp(val4, val2, (float)(i - 1) / 25f) + end, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(-val4, val2, (float)i / 25f) + end, Vector3.Slerp(-val4, val2, (float)(i - 1) / 25f) + end, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(val3, val2, (float)i / 25f) + end, Vector3.Slerp(val3, val2, (float)(i - 1) / 25f) + end, color, duration, depthTest);
			Debug.DrawLine(Vector3.Slerp(-val3, val2, (float)i / 25f) + end, Vector3.Slerp(-val3, val2, (float)(i - 1) / 25f) + end, color, duration, depthTest);
		}
	}

	public static void Capsule(Vector3 start, Vector3 end, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Capsule(start, end, Color.white, radius, duration, depthTest);
	}
}


using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

internal static class Mono
{
	internal static void FixHttpsValidation()
	{
		ServicePointManager.ServerCertificateValidationCallback = (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) => true;
	}
}


using System;
using System.Collections.Generic;
using System.Threading;

public static class Threading
{
	private static int mainThread;

	private static List<Action> actions = new List<Action>();

	public static bool IsMainThread => Thread.CurrentThread.ManagedThreadId == mainThread;

	public static void QueueOnMainThread(Action action)
	{
		if (IsMainThread)
		{
			action();
			return;
		}
		lock (actions)
		{
			actions.Add(action);
		}
	}

	internal static void RunQueuedFunctionsOnMainThread()
	{
		mainThread = Thread.CurrentThread.ManagedThreadId;
		lock (actions)
		{
			foreach (Action action in actions)
			{
				action();
			}
			actions.Clear();
		}
	}
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Facepunch;
using Facepunch.Crypt;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;

public static class WebUtil
{
	public static string[] ValidVideoExtensions = new string[9] { ".dv", ".m4v", ".mov", ".mp4", ".mpg", ".mpeg", ".ogv", ".vp8", ".webm" };

	public static string[] ValidImageExtensions = new string[5] { ".bmp", ".jpg", ".jpeg", ".png", ".tga" };

	internal static void Get(string url, Action<string> result)
	{
		if (url.Contains("https://localhost"))
		{
			url = url.Replace("https://localhost", "http://localhost");
		}
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Get] \"" + url + "\""));
		}
		UnityWebRequest www = UnityWebRequest.Get(url);
		Application.Controller.StartCoroutine(DownloadStringCoroutine(www, result));
	}

	private static IEnumerator DownloadStringCoroutine(UnityWebRequest www, Action<string> result)
	{
		yield return www.SendWebRequest();
		if (www.isNetworkError)
		{
			Debug.LogWarning((object)("Error with download: " + www.error + " (" + www.url + ")"));
		}
		result(www.downloadHandler.text);
		www.Dispose();
	}

	public static async Task<string> DownloadFileTemp(string url, string[] validExtensions)
	{
		if (!Directory.Exists("temp"))
		{
			Directory.CreateDirectory("temp");
		}
		string extension = Path.GetExtension(url);
		if (!validExtensions.Contains(extension))
		{
			Debug.LogWarning((object)("Trying to download file with invalid extension: " + url));
			return null;
		}
		string targetName = "temp/" + Md5.Calculate(url.ToLower()) + extension;
		FileInfo fileInfo = new FileInfo(targetName);
		if (fileInfo.Exists)
		{
			return fileInfo.FullName;
		}
		UnityWebRequest request = UnityWebRequest.Get(url);
		try
		{
			request.SendWebRequest();
			while (!request.isDone)
			{
				await Task.Delay(100);
			}
			if (request.isNetworkError || request.isHttpError)
			{
				return null;
			}
			File.WriteAllBytes(targetName, request.downloadHandler.data);
			return fileInfo.FullName;
		}
		finally
		{
			((IDisposable)request)?.Dispose();
		}
	}

	private static void DownloadString(UnityWebRequest www, Action<string> result)
	{
		UnityWebRequestAsyncOperation val = www.SendWebRequest();
		Stopwatch stopwatch = Stopwatch.StartNew();
		while (!((AsyncOperation)val).isDone)
		{
			if (stopwatch.Elapsed.TotalSeconds > 10.0)
			{
				return;
			}
		}
		if (www.isNetworkError)
		{
			Debug.LogError((object)("Error with download: " + www.error));
		}
		else
		{
			result(www.downloadHandler.text);
		}
		www.Dispose();
	}

	internal static void Post(string url, Dictionary<string, string> data, bool wait, Action<string> result)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Expected O, but got Unknown
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Expected O, but got Unknown
		if (url.Contains("https://localhost"))
		{
			url = url.Replace("https://localhost", "http://localhost");
		}
		WWWForm val = new WWWForm();
		foreach (KeyValuePair<string, string> datum in data)
		{
			val.AddField(datum.Key, datum.Value);
		}
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Post] \"" + url + "\""));
		}
		WWW val2 = new WWW(url, val);
		if (wait)
		{
			Stopwatch stopwatch = Stopwatch.StartNew();
			while (!val2.isDone && !(stopwatch.Elapsed.TotalSeconds > 5.0))
			{
			}
			val2.Dispose();
		}
		else
		{
			Application.Controller.StartCoroutine(PostValuesCoroutine(val2, result));
		}
	}

	internal static async Task<string> PostAsync(string url, Dictionary<string, string> data)
	{
		if (url.Contains("https://localhost"))
		{
			url = url.Replace("https://localhost", "http://localhost");
		}
		WWWForm val = new WWWForm();
		foreach (KeyValuePair<string, string> datum in data)
		{
			val.AddField(datum.Key, datum.Value);
		}
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Post] \"" + url + "\""));
		}
		Stopwatch waitTime = Stopwatch.StartNew();
		UnityWebRequest request = UnityWebRequest.Post(url, val);
		try
		{
			request.SendWebRequest();
			while (!request.isDone)
			{
				if (waitTime.Elapsed.TotalSeconds > 30.0)
				{
					return "error: 30 seconds time out";
				}
				await Task.Delay(10);
			}
			if (request.isNetworkError || request.isHttpError)
			{
				return $"error [{request.isNetworkError}|{request.isHttpError}|{request.responseCode}|{request.downloadHandler.text}]";
			}
			return request.downloadHandler.text;
		}
		finally
		{
			((IDisposable)request)?.Dispose();
		}
	}

	internal static void PostData(string url, object dataObject, Action<string> result, bool wait = false)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Expected O, but got Unknown
		string text = JsonConvert.SerializeObject(dataObject, (Formatting)1);
		WWWForm val = new WWWForm();
		val.AddField("data", text);
		UnityWebRequest www = UnityWebRequest.Post(url, val);
		if (wait)
		{
			DownloadString(www, result);
		}
		else
		{
			Application.Controller.StartCoroutine(DownloadStringCoroutine(www, result));
		}
	}

	internal static async Task<string> PostDataAsync(string url, object dataObject)
	{
		string text = JsonConvert.SerializeObject(dataObject, (Formatting)1);
		WWWForm val = new WWWForm();
		val.AddField("data", text);
		UnityWebRequest www = UnityWebRequest.Post(url, val);
		UnityWebRequestAsyncOperation request = www.SendWebRequest();
		Stopwatch waitTime = Stopwatch.StartNew();
		while (!((AsyncOperation)request).isDone)
		{
			if (waitTime.Elapsed.TotalSeconds > 10.0)
			{
				return "timed out";
			}
			await Task.Delay(10);
		}
		if (www.isNetworkError)
		{
			Debug.LogError((object)("Error with download: " + www.error));
			return null;
		}
		string text2 = www.downloadHandler.text;
		www.Dispose();
		return text2;
	}

	private static IEnumerator PostValuesCoroutine(WWW www, Action<string> result)
	{
		yield return www;
		if (www.error == null)
		{
			result?.Invoke(www.text);
		}
		if (Application.Integration.DebugOutput)
		{
			if (www.error != null)
			{
				Debug.LogWarning((object)("[Post] Error: \"" + www.error + "\" - \"" + www.text + "\" "));
			}
			else
			{
				Debug.Log((object)("[Post] Response: \"" + www.text + "\""));
			}
		}
		www.Dispose();
	}

	internal static string Escape(string type)
	{
		return UnityWebRequest.EscapeURL(type);
	}
}


using System;

public static class Epoch
{
	private static readonly DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

	public static int Current => (int)DateTime.UtcNow.Subtract(epoch).TotalSeconds;

	public static DateTime ToDateTime(long unixTime)
	{
		DateTime dateTime = epoch;
		return dateTime.AddSeconds(unixTime);
	}

	public static int FromDateTime(DateTime time)
	{
		return (int)time.Subtract(epoch).TotalSeconds;
	}

	public static DateTime GetLocalTime(long unixTimestamp)
	{
		return ToDateTime(unixTimestamp).ToLocalTime();
	}

	public static string GetLocalHour(long unixTimestamp)
	{
		DateTime dateTime = ToDateTime(unixTimestamp).ToLocalTime();
		int num = dateTime.Hour % 12;
		num = ((num == 0) ? 12 : num);
		string arg = ((dateTime.Hour >= 12) ? "PM" : "AM");
		return $"{num} {arg}";
	}
}


using System;
using System.Collections.Generic;
using Facepunch.Extend;

public static class CommandLine
{
	private static bool initialized = false;

	private static string commandline = "";

	private static Dictionary<string, string> switches = new Dictionary<string, string>();

	public static string Full
	{
		get
		{
			Initalize();
			return commandline;
		}
	}

	public static void Force(string val)
	{
		commandline = val;
		initialized = false;
	}

	private static void Initalize()
	{
		if (initialized)
		{
			return;
		}
		initialized = true;
		string[] commandLineArgs;
		if (commandline == "")
		{
			commandLineArgs = Environment.GetCommandLineArgs();
			foreach (string text in commandLineArgs)
			{
				commandline = commandline + "\"" + text + "\" ";
			}
		}
		if (commandline == "")
		{
			return;
		}
		string text2 = "";
		commandLineArgs = StringExtensions.SplitQuotesStrings(commandline, int.MaxValue);
		foreach (string text3 in commandLineArgs)
		{
			if (text3.Length == 0)
			{
				continue;
			}
			if (text3[0] == '-' || text3[0] == '+')
			{
				if (text2 != "" && !switches.ContainsKey(text2))
				{
					switches.Add(text2, "");
				}
				text2 = text3;
			}
			else if (text2 != "")
			{
				if (!switches.ContainsKey(text2))
				{
					switches.Add(text2, text3);
				}
				text2 = "";
			}
		}
		if (text2 != "" && !switches.ContainsKey(text2))
		{
			switches.Add(text2, "");
		}
	}

	public static bool HasSwitch(string strName)
	{
		Initalize();
		return switches.ContainsKey(strName);
	}

	public static string GetSwitch(string strName, string strDefault)
	{
		Initalize();
		string value = "";
		if (!switches.TryGetValue(strName, out value))
		{
			return strDefault;
		}
		return value;
	}

	public static int GetSwitchInt(string strName, int iDefault)
	{
		Initalize();
		string value = "";
		if (!switches.TryGetValue(strName, out value))
		{
			return iDefault;
		}
		int result = iDefault;
		if (!int.TryParse(value, out result))
		{
			return iDefault;
		}
		return result;
	}

	public static Dictionary<string, string> GetSwitches()
	{
		Initalize();
		return switches;
	}
}


using UnityEngine;

public static class RayExtensions
{
	public static Vector3 ClosestPoint(this Ray ray, Vector3 position)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ((Ray)(ref ray)).origin - position;
		return val - Vector3.Dot(val, ((Ray)(ref ray)).direction) * ((Ray)(ref ray)).direction;
	}

	public static float ClosestDistance(this Ray ray, Vector3 position)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ClosestPoint(ray, position);
		return ((Vector3)(ref val)).magnitude;
	}
}


using System;
using Facepunch;
using UnityEngine;

[JsonModel]
public struct AppInfo
{
	public int Version => 3;

	public BuildInfo Build => BuildInfo.Current;

	public string Name => SystemInfo.deviceName;

	public string Os => SystemInfo.operatingSystem;

	public string Cpu => SystemInfo.processorType;

	public int CpuCount => SystemInfo.processorCount;

	public int Mem => SystemInfo.graphicsMemorySize;

	public string Gpu => SystemInfo.graphicsDeviceName;

	public int GpuMem => SystemInfo.graphicsMemorySize;

	public string Arch
	{
		get
		{
			if (IntPtr.Size != 4)
			{
				return "x64";
			}
			return "x86";
		}
	}

	public string UserId => Application.Integration.UserId;

	public string UserName => Application.Integration.UserName;

	public string ServerAddress => Application.Integration.ServerAddress;

	public string ServerName => Application.Integration.ServerName;

	public string LevelName => Application.Integration.LevelName;

	public string LevelPos
	{
		get
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			if (!((Object)(object)Camera.main == (Object)null))
			{
				Vector3 position = ((Component)Camera.main).transform.position;
				return ((object)(Vector3)(ref position)/*cast due to .constrained prefix*/).ToString();
			}
			return "0 0 0";
		}
	}

	public string LevelRot
	{
		get
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			if (!((Object)(object)Camera.main == (Object)null))
			{
				Vector3 eulerAngles = ((Component)Camera.main).transform.eulerAngles;
				return ((object)(Vector3)(ref eulerAngles)/*cast due to .constrained prefix*/).ToString();
			}
			return "0 0 0";
		}
	}

	public int MinutesPlayed => Application.Integration.MinutesPlayed;

	public string Image { get; set; }
}


using Facepunch.Models;

[JsonModel]
public class Auth
{
	public string Type;

	public string Id;

	public string Ticket;

	public string Name;

	public static Auth Steam(string ticket, ulong steamId, string username)
	{
		return new Auth
		{
			Type = "steam",
			Name = username,
			Id = steamId.ToString(),
			Ticket = ticket
		};
	}
}


using Newtonsoft.Json;

[JsonModel]
public class FeaturesInfo
{
	[JsonProperty("client_analytics")]
	public bool ClientAnalytics;

	[JsonProperty("server_analytics")]
	public bool ServerAnalytics;
}


using System.Collections.Generic;
using Facepunch.Models;

[JsonModel]
public struct Feedback
{
	public string Subject;

	public string Message;

	public ReportType Type;

	public string TargetReportType;

	public string TargetId;

	public string TargetName;

	public string TargetEntity;

	public List<ulong> UsersInRange;

	public AppInfo AppInfo;
}


public enum ReportType
{
	General = 0,
	Bug = 1,
	Cheat = 2,
	Abuse = 3,
	Idea = 4,
	OffensiveContent = 5,
	BreakingServerRules = 6,
	FIRST = 0,
	LAST = 6
}


using System;
using Facepunch;
using Facepunch.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine;

[JsonModel]
public class Manifest
{
	[JsonModel]
	public class Changeset
	{
		public int Main;

		public int Staging;
	}

	[JsonModel]
	public class TwitchDrop
	{
		public string Title;

		public string Subtitle;

		public string RoundNumber;

		public string StartTimeUtc;

		public string EndTimeUtc;

		public string HeroBackground;
	}

	[JsonModel]
	public class Administrator
	{
		public string UserId;

		public string Level;
	}

	[JsonModel]
	public class NewsInfo
	{
		[JsonModel]
		public class BlogInfo
		{
			public DateTime Date;

			public string ShortName;

			public string Title;

			public string HeaderImage;

			public string SummaryHtml;

			public string Url;

			public string Tags;
		}

		public BlogInfo[] Blogs;
	}

	[JsonModel]
	public class ServersInfo
	{
		public ServerDesc[] Official;

		private BanChecker _banChecker = new BanChecker(Array.Empty<string>());

		private string[] _banned = Array.Empty<string>();

		public string[] Banned
		{
			get
			{
				return _banned;
			}
			set
			{
				_banned = value ?? Array.Empty<string>();
				_banChecker = new BanChecker(_banned);
			}
		}

		public bool IsBannedServer(string ip)
		{
			TimeWarning val = TimeWarning.New("Manifest.IsBannedServer", 0);
			try
			{
				return _banChecker.IsBanned(ip);
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
	}

	[JsonModel]
	public class ServerDesc
	{
		public string Address;

		public int Port;
	}

	public NewsInfo News;

	public ServersInfo Servers;

	public FeaturesInfo Features = new FeaturesInfo();

	public string ExceptionReportingUrl;

	public string BenchmarkUrl;

	public string AnalyticUrl;

	public string DatabaseUrl;

	public string LeaderboardUrl;

	public string ReportUrl;

	public string AccountUrl;

	public Hero[] Heroes;

	public StoreFeaturing[] FeaturedItems;

	public DateTime SkinsLastUpdated;

	public Administrator[] Administrators;

	public Changeset Changesets;

	public TwitchDrop TwitchDrops;

	public JObject Metadata;

	internal static Facepunch.Models.Manifest FromJson(string text)
	{
		if (Application.Integration.DebugOutput)
		{
			Debug.Log((object)("[Manifest] " + text));
		}
		Facepunch.Models.Manifest manifest = JsonConvert.DeserializeObject<Facepunch.Models.Manifest>(text);
		if (manifest == null)
		{
			return null;
		}
		if (manifest.Servers == null)
		{
			return null;
		}
		if (manifest.Features == null)
		{
			manifest.Features = new FeaturesInfo();
		}
		return manifest;
	}
}


[JsonModel]
public struct PlayerInfo
{
	public string Name { get; set; }

	public string Id { get; set; }
}


[JsonModel]
public class StoreFeaturing
{
	public int ItemID { get; set; }

	public string HeaderText { get; set; }

	public string TitleText { get; set; }

	public string SubtitleText { get; set; }

	public string ImageUrl { get; set; }

	public string VideoUrl { get; set; }

	public string TargetUrl { get; set; }

	public int Priority { get; set; }
}


using Facepunch.Models;

[JsonModel]
public class Add
{
	public string Parent;

	public float Score;

	public string Extra;

	public bool ReplaceIfHigher;

	public bool ReplaceIfLower;

	public Auth Auth;

	public int Version => 2;
}


using System;

[JsonModel]
public class Rank
{
	public float Score;

	public int GlobalCount;

	public int GlobalRank;

	public string Country;

	public int CountryCount;

	public int CountryRank;

	public string City;

	public int CityCount;

	public int CityRank;

	public int FriendRank;

	public DateTime Created;
}


using System;

[JsonModel]
public class Entry
{
	public int Rank;

	public float Score;

	public string UserId;

	public string Name;

	public string Country;

	public string City;

	public DateTime Created;
}


using Facepunch.Models;

[JsonModel]
public class Base
{
	public string Parent;

	public Auth Auth;

	public int Version => 2;
}


using Facepunch.Models.Database;

[JsonModel]
public class Add : Base
{
	public string Content;
}


using Facepunch.Models.Database;

[JsonModel]
public class Remove : Base
{
	public string Id;
}


[JsonModel]
internal class BaseResponse
{
	public string Status;

	public string Reason;
}


using Facepunch.Models.Database;

[JsonModel]
internal class AddResponse : BaseResponse
{
	public string Id;
}


using System;

[JsonModel]
internal class QueryResponse
{
	public string Content;

	public string Id;

	public DateTime Created;

	public DateTime Updated;

	public string AuthorId;

	public string AuthType;
}


using System;
using Facepunch.Models.Database;

[JsonModel]
public class Result<T>
{
	[JsonModel]
	public class Entry
	{
		public T Content;

		public string Id;

		public DateTime Created;

		public DateTime Updated;

		public string AuthorId;

		public string AuthorName;

		public string AuthType;
	}

	public bool Running;

	public bool Success;

	public Entry[] Entries;
}


using System.Collections.Generic;

private class Node
{
	public Dictionary<char, Node> Children = new Dictionary<char, Node>();

	public bool IsTerminal;
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


[JsonModel]
public class ScmInfo
{
	public string Type { get; set; } = "";

	public string ChangeId { get; set; } = "";

	public string Branch { get; set; } = "";

	public string Repo { get; set; } = "";

	public string Comment { get; set; } = "";

	public string Author { get; set; } = "";

	public string Date { get; set; } = "";
}


[JsonModel]
public class BuildDesc
{
	public string Id { get; set; } = "";

	public string Number { get; set; } = "";

	public string Tag { get; set; } = "";

	public string Url { get; set; } = "";

	public string Name { get; set; } = "";

	public string Node { get; set; } = "";
}


using System;
using System.Diagnostics;

public struct Scope : IDisposable
{
	private Stopwatch timer;

	public Scope(Stopwatch timer)
	{
		this.timer = timer;
		this.timer?.Start();
	}

	void IDisposable.Dispose()
	{
		timer?.Stop();
	}
}


using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;

[JsonModel]
public class StackTrace
{
	[JsonModel]
	public class StackFrame
	{
		public int colno { get; set; }

		public string filename { get; private set; }

		public string function { get; private set; }

		public int lineno { get; private set; }

		public string module { get; private set; }

		public string context_line { get; private set; }

		public bool in_app { get; private set; }

		public StackFrame(System.Diagnostics.StackFrame x)
		{
			if (x != null)
			{
				lineno = x.GetFileLineNumber();
				colno = x.GetFileColumnNumber();
				if (lineno == 0)
				{
					lineno = x.GetILOffset();
				}
				MethodBase method = x.GetMethod();
				if (method != null)
				{
					module = ((method.DeclaringType != null) ? method.DeclaringType.FullName : null);
					function = method.Name;
					context_line = method.ToString();
				}
				else
				{
					module = "(unknown)";
					function = "(unknown)";
					context_line = "(unknown)";
				}
				filename = x.GetFileName();
				in_app = !IsSystemModuleName(module);
			}
		}

		public StackFrame(string x)
		{
			function = x;
		}

		private static bool IsSystemModuleName(string moduleName)
		{
			if (!string.IsNullOrEmpty(moduleName))
			{
				if (!moduleName.StartsWith("System.", StringComparison.Ordinal))
				{
					return moduleName.StartsWith("Microsoft.", StringComparison.Ordinal);
				}
				return true;
			}
			return false;
		}
	}

	public StackFrame[] frames { get; set; }

	public StackTrace()
	{
		System.Diagnostics.StackTrace stackTrace = new System.Diagnostics.StackTrace(0, fNeedFileInfo: true);
		frames = (from x in stackTrace.GetFrames()
			select new StackFrame(x)).ToArray();
	}

	public StackTrace(string unityStack)
	{
		frames = (from x in unityStack.Split(new char[2] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Reverse()
			select new StackFrame(x)).ToArray();
	}
}


[JsonModel]
public class User
{
	public string id { get; set; }

	public string username { get; set; }

	public string ip_address { get; set; } = "{{auto}}";
}


using Newtonsoft.Json;

public class GeneralNoticeModel
{
	[JsonProperty("Title")]
	public string Title { get; set; }

	[JsonProperty("Message")]
	public string Message { get; set; }
}


using System;
using Newtonsoft.Json;

public class BanNoticeModel
{
	[JsonProperty("BannedUserId")]
	public string BannedUserId { get; set; }

	[JsonProperty("BannedUserName")]
	public string BannedUserName { get; set; }

	[JsonProperty("FirstReport")]
	public DateTime FirstReport { get; set; }
}


using System;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.Rendering;

[StructLayout(LayoutKind.Sequential, Size = 1)]
[JsonModel]
public struct Hardware
{
	public string deviceName => SystemInfo.deviceName;

	public string operatingSystem => SystemInfo.operatingSystem;

	public string processorType => SystemInfo.processorType;

	public string processorCount => SystemInfo.processorCount.ToString();

	public string systemMemorySize => SystemInfo.systemMemorySize + "MB";

	public string graphicsDeviceName => SystemInfo.graphicsDeviceName;

	public string graphicsDeviceVersion => SystemInfo.graphicsDeviceVersion;

	public string graphicsMemorySize => SystemInfo.graphicsMemorySize + "MB";

	public string graphicsShaderLevel => SystemInfo.graphicsShaderLevel.ToString();

	public string graphicsDeviceType
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			GraphicsDeviceType val = SystemInfo.graphicsDeviceType;
			return ((object)(GraphicsDeviceType)(ref val)/*cast due to .constrained prefix*/).ToString();
		}
	}

	public string deviceUniqueIdentifier => SystemInfo.deviceUniqueIdentifier;

	public string graphicsDeviceVendor => SystemInfo.graphicsDeviceVendor;

	public bool graphicsMultiThreaded => SystemInfo.graphicsMultiThreaded;

	public int processorFrequency => SystemInfo.processorFrequency;

	public string processorArchitecture
	{
		get
		{
			if (IntPtr.Size == 4)
			{
				return "x86";
			}
			return "x64";
		}
	}
}


using System.Runtime.InteropServices;
using UnityEngine;

[StructLayout(LayoutKind.Sequential, Size = 1)]
[JsonModel]
public struct Environment
{
	public string unityVersion => Application.unityVersion;

	public string version => Application.version;

	public string companyName => Application.companyName;

	public bool isEditor => Application.isEditor;

	public bool isPlayer => !Application.isEditor;

	public string systemLanguage
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			SystemLanguage val = Application.systemLanguage;
			return ((object)(SystemLanguage)(ref val)/*cast due to .constrained prefix*/).ToString();
		}
	}

	public int targetFrameRate => Application.targetFrameRate;

	public Resolution currentResolution => Screen.currentResolution;

	public int screenWidth => Screen.width;

	public int screenHeight => Screen.height;

	public bool fullScreen => Screen.fullScreen;

	public string anisotropicFiltering
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			AnisotropicFiltering val = QualitySettings.anisotropicFiltering;
			return ((object)(AnisotropicFiltering)(ref val)/*cast due to .constrained prefix*/).ToString();
		}
	}

	public string antiAliasing => QualitySettings.antiAliasing.ToString();

	public string qualityLevel => QualitySettings.GetQualityLevel().ToString();

	public string globalMaximumLOD => Shader.globalMaximumLOD.ToString();

	public string lodBias => QualitySettings.lodBias.ToString();

	public string maximumLODLevel => QualitySettings.maximumLODLevel.ToString();

	public string particleRaycastBudget => QualitySettings.particleRaycastBudget.ToString();

	public string pixelLightCount => QualitySettings.pixelLightCount.ToString();

	public string realtimeReflectionProbes => QualitySettings.realtimeReflectionProbes.ToString();

	public string shadowCascades => QualitySettings.shadowCascades.ToString();

	public string shadowDistance => QualitySettings.shadowDistance.ToString();

	public string softVegetation => QualitySettings.softVegetation.ToString();

	public string vSyncCount => QualitySettings.vSyncCount.ToString();
}


using System;

[Serializable]
public struct Container
{
	public float Weight;

	public string Object;
}


[JsonModel]
public class Changeset
{
	public int Main;

	public int Staging;
}


[JsonModel]
public class TwitchDrop
{
	public string Title;

	public string Subtitle;

	public string RoundNumber;

	public string StartTimeUtc;

	public string EndTimeUtc;

	public string HeroBackground;
}


[JsonModel]
public class Administrator
{
	public string UserId;

	public string Level;
}


using System;

[JsonModel]
public class NewsInfo
{
	[JsonModel]
	public class BlogInfo
	{
		public DateTime Date;

		public string ShortName;

		public string Title;

		public string HeaderImage;

		public string SummaryHtml;

		public string Url;

		public string Tags;
	}

	public BlogInfo[] Blogs;
}


using System;

[JsonModel]
public class ServersInfo
{
	public ServerDesc[] Official;

	private BanChecker _banChecker = new BanChecker(Array.Empty<string>());

	private string[] _banned = Array.Empty<string>();

	public string[] Banned
	{
		get
		{
			return _banned;
		}
		set
		{
			_banned = value ?? Array.Empty<string>();
			_banChecker = new BanChecker(_banned);
		}
	}

	public bool IsBannedServer(string ip)
	{
		TimeWarning val = TimeWarning.New("Manifest.IsBannedServer", 0);
		try
		{
			return _banChecker.IsBanned(ip);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}


[JsonModel]
public class ServerDesc
{
	public string Address;

	public int Port;
}


using System;

[JsonModel]
public class Entry
{
	public T Content;

	public string Id;

	public DateTime Created;

	public DateTime Updated;

	public string AuthorId;

	public string AuthorName;

	public string AuthType;
}


using System;
using System.Diagnostics;
using System.Reflection;

[JsonModel]
public class StackFrame
{
	public int colno { get; set; }

	public string filename { get; private set; }

	public string function { get; private set; }

	public int lineno { get; private set; }

	public string module { get; private set; }

	public string context_line { get; private set; }

	public bool in_app { get; private set; }

	public StackFrame(System.Diagnostics.StackFrame x)
	{
		if (x != null)
		{
			lineno = x.GetFileLineNumber();
			colno = x.GetFileColumnNumber();
			if (lineno == 0)
			{
				lineno = x.GetILOffset();
			}
			MethodBase method = x.GetMethod();
			if (method != null)
			{
				module = ((method.DeclaringType != null) ? method.DeclaringType.FullName : null);
				function = method.Name;
				context_line = method.ToString();
			}
			else
			{
				module = "(unknown)";
				function = "(unknown)";
				context_line = "(unknown)";
			}
			filename = x.GetFileName();
			in_app = !IsSystemModuleName(module);
		}
	}

	public StackFrame(string x)
	{
		function = x;
	}

	private static bool IsSystemModuleName(string moduleName)
	{
		if (!string.IsNullOrEmpty(moduleName))
		{
			if (!moduleName.StartsWith("System.", StringComparison.Ordinal))
			{
				return moduleName.StartsWith("Microsoft.", StringComparison.Ordinal);
			}
			return true;
		}
		return false;
	}
}


using System;

[JsonModel]
public class BlogInfo
{
	public DateTime Date;

	public string ShortName;

	public string Title;

	public string HeaderImage;

	public string SummaryHtml;

	public string Url;

	public string Tags;
}


