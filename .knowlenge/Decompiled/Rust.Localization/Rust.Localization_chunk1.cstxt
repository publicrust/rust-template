using System;
using System.Globalization;
using UnityEngine;

public static class Translate
{
	[Serializable]
	public class Phrase
	{
		public string token;

		[TextArea(3, 20)]
		public string english;

		private static readonly Memoized<Phrase, string> ImplicitPhraseCache = new Memoized<Phrase, string>((Func<string, Phrase>)((string s) => new Phrase("", s)));

		public virtual string translated
		{
			get
			{
				if (string.IsNullOrEmpty(token))
				{
					return english;
				}
				return Get(token, english);
			}
		}

		public bool IsValid()
		{
			return !string.IsNullOrEmpty(token);
		}

		public Phrase(string t = "", string eng = "")
		{
			token = t;
			english = eng;
		}

		public static implicit operator Phrase(string b)
		{
			return ImplicitPhraseCache.Get(b);
		}
	}

	private static string language = CultureInfo.InstalledUICulture.TwoLetterISOLanguageName;

	[ClientVar(ClientAdmin = true)]
	public static string overrideCulture;

	public static string Get(string key, string def = null)
	{
		return def ?? ("#" + key);
	}

	public static string GetLanguage()
	{
		return language;
	}

	public static bool CurrentLanguageIsRTL()
	{
		if (!(GetLanguage() == "ar"))
		{
			return GetLanguage() == "he";
		}
		return true;
	}

	[ClientVar]
	public static void printCultureInfo(Arg arg)
	{
		CultureInfo currentCulture = GetCurrentCulture();
		string text = "";
		if (!string.IsNullOrEmpty(overrideCulture))
		{
			text = text + "Override Culture: " + overrideCulture + "\n\n";
		}
		text = text + "Installed UI Culture: " + currentCulture.Name + " (" + currentCulture.DisplayName + ")\n";
		try
		{
			RegionInfo regionInfo = new RegionInfo(currentCulture.Name);
			NumberFormatInfo numberFormat = currentCulture.NumberFormat;
			text = text + "Region: " + regionInfo.TwoLetterISORegionName + " (" + regionInfo.DisplayName + ")\nCurrency: " + regionInfo.ISOCurrencySymbol + " (" + regionInfo.CurrencySymbol + ")\nDecimal: '" + numberFormat.NumberDecimalSeparator + "'Group: '" + numberFormat.NumberGroupSeparator + "'\nCurrency Format: " + 1234.56.ToString("C", numberFormat) + "\nNumber Format: " + 1234.56.ToString("N", numberFormat);
		}
		catch
		{
			text += "(No region info available)";
		}
		arg.ReplyWith(text);
	}

	public static CultureInfo GetCurrentCulture()
	{
		CultureInfo result = CultureInfo.InvariantCulture;
		if (!string.IsNullOrEmpty(overrideCulture))
		{
			try
			{
				result = new CultureInfo(overrideCulture);
			}
			catch
			{
			}
		}
		else
		{
			result = CultureInfo.InstalledUICulture;
		}
		return result;
	}
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[108]
		{
			0, 0, 0, 1, 0, 0, 0, 46, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 76,
			111, 99, 97, 108, 105, 122, 97, 116, 105, 111,
			110, 92, 73, 76, 111, 99, 97, 108, 105, 122,
			101, 46, 99, 115, 0, 0, 0, 2, 0, 0,
			0, 46, 92, 65, 115, 115, 101, 116, 115, 92,
			80, 108, 117, 103, 105, 110, 115, 92, 82, 117,
			115, 116, 46, 76, 111, 99, 97, 108, 105, 122,
			97, 116, 105, 111, 110, 92, 84, 114, 97, 110,
			115, 108, 97, 116, 101, 46, 99, 115
		};
		result.TypesData = new byte[68]
		{
			0, 0, 0, 0, 27, 82, 117, 115, 116, 46,
			76, 111, 99, 97, 108, 105, 122, 97, 116, 105,
			111, 110, 124, 73, 76, 111, 99, 97, 108, 105,
			122, 101, 0, 0, 0, 0, 10, 124, 84, 114,
			97, 110, 115, 108, 97, 116, 101, 0, 0, 0,
			0, 16, 84, 114, 97, 110, 115, 108, 97, 116,
			101, 124, 80, 104, 114, 97, 115, 101
		};
		result.TotalFiles = 2;
		result.TotalTypes = 3;
		result.IsEditorOnly = false;
		return result;
	}
}


public interface ILocalize
{
	string LanguageToken { get; }

	string LanguageEnglish { get; }
}


using System;
using UnityEngine;

[Serializable]
public class Phrase
{
	public string token;

	[TextArea(3, 20)]
	public string english;

	private static readonly Memoized<Phrase, string> ImplicitPhraseCache = new Memoized<Phrase, string>((Func<string, Phrase>)((string s) => new Phrase("", s)));

	public virtual string translated
	{
		get
		{
			if (string.IsNullOrEmpty(token))
			{
				return english;
			}
			return Get(token, english);
		}
	}

	public bool IsValid()
	{
		return !string.IsNullOrEmpty(token);
	}

	public Phrase(string t = "", string eng = "")
	{
		token = t;
		english = eng;
	}

	public static implicit operator Phrase(string b)
	{
		return ImplicitPhraseCache.Get(b);
	}
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


