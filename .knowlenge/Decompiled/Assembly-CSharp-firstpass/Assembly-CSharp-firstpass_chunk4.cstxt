using System;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

public sealed class RTCAdminInterface : Handle
{
	public const int CopyusertokenbyindexApiLatest = 2;

	public const int CopyusertokenbyuseridApiLatest = 2;

	public const int KickApiLatest = 1;

	public const int QueryjoinroomtokenApiLatest = 2;

	public const int SetparticipanthardmuteApiLatest = 1;

	public const int UsertokenApiLatest = 1;

	public RTCAdminInterface()
	{
	}

	public RTCAdminInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyUserTokenByIndex(ref CopyUserTokenByIndexOptions options, out UserToken? outUserToken)
	{
		CopyUserTokenByIndexOptionsInternal options2 = default(CopyUserTokenByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outUserToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_RTCAdmin_CopyUserTokenByIndex(base.InnerHandle, ref options2, ref outUserToken2);
		Helper.Dispose(ref options2);
		Helper.Get<UserTokenInternal, UserToken>(outUserToken2, out outUserToken);
		if (outUserToken.HasValue)
		{
			Bindings.EOS_RTCAdmin_UserToken_Release(outUserToken2);
		}
		return result;
	}

	public Result CopyUserTokenByUserId(ref CopyUserTokenByUserIdOptions options, out UserToken? outUserToken)
	{
		CopyUserTokenByUserIdOptionsInternal options2 = default(CopyUserTokenByUserIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outUserToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_RTCAdmin_CopyUserTokenByUserId(base.InnerHandle, ref options2, ref outUserToken2);
		Helper.Dispose(ref options2);
		Helper.Get<UserTokenInternal, UserToken>(outUserToken2, out outUserToken);
		if (outUserToken.HasValue)
		{
			Bindings.EOS_RTCAdmin_UserToken_Release(outUserToken2);
		}
		return result;
	}

	public void Kick(ref KickOptions options, object clientData, OnKickCompleteCallback completionDelegate)
	{
		KickOptionsInternal options2 = default(KickOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnKickCompleteCallbackInternal onKickCompleteCallbackInternal = OnKickCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onKickCompleteCallbackInternal);
		Bindings.EOS_RTCAdmin_Kick(base.InnerHandle, ref options2, clientDataAddress, onKickCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryJoinRoomToken(ref QueryJoinRoomTokenOptions options, object clientData, OnQueryJoinRoomTokenCompleteCallback completionDelegate)
	{
		QueryJoinRoomTokenOptionsInternal options2 = default(QueryJoinRoomTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryJoinRoomTokenCompleteCallbackInternal onQueryJoinRoomTokenCompleteCallbackInternal = OnQueryJoinRoomTokenCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryJoinRoomTokenCompleteCallbackInternal);
		Bindings.EOS_RTCAdmin_QueryJoinRoomToken(base.InnerHandle, ref options2, clientDataAddress, onQueryJoinRoomTokenCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void SetParticipantHardMute(ref SetParticipantHardMuteOptions options, object clientData, OnSetParticipantHardMuteCompleteCallback completionDelegate)
	{
		SetParticipantHardMuteOptionsInternal options2 = default(SetParticipantHardMuteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSetParticipantHardMuteCompleteCallbackInternal onSetParticipantHardMuteCompleteCallbackInternal = OnSetParticipantHardMuteCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSetParticipantHardMuteCompleteCallbackInternal);
		Bindings.EOS_RTCAdmin_SetParticipantHardMute(base.InnerHandle, ref options2, clientDataAddress, onSetParticipantHardMuteCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnKickCompleteCallbackInternal))]
	internal static void OnKickCompleteCallbackInternalImplementation(ref KickCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<KickCompleteCallbackInfoInternal, OnKickCompleteCallback, KickCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryJoinRoomTokenCompleteCallbackInternal))]
	internal static void OnQueryJoinRoomTokenCompleteCallbackInternalImplementation(ref QueryJoinRoomTokenCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryJoinRoomTokenCompleteCallbackInfoInternal, OnQueryJoinRoomTokenCompleteCallback, QueryJoinRoomTokenCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSetParticipantHardMuteCompleteCallbackInternal))]
	internal static void OnSetParticipantHardMuteCompleteCallbackInternalImplementation(ref SetParticipantHardMuteCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SetParticipantHardMuteCompleteCallbackInfoInternal, OnSetParticipantHardMuteCompleteCallback, SetParticipantHardMuteCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

public struct SetParticipantHardMuteCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SetParticipantHardMuteCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetParticipantHardMuteCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SetParticipantHardMuteCompleteCallbackInfo>, ISettable<SetParticipantHardMuteCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref SetParticipantHardMuteCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref SetParticipantHardMuteCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out SetParticipantHardMuteCompleteCallbackInfo output)
	{
		output = default(SetParticipantHardMuteCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SetParticipantHardMuteOptions
{
	public Utf8String RoomName { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public bool Mute { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetParticipantHardMuteOptionsInternal : ISettable<SetParticipantHardMuteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RoomName;

	private IntPtr m_TargetUserId;

	private int m_Mute;

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public bool Mute
	{
		set
		{
			Helper.Set(value, ref m_Mute);
		}
	}

	public void Set(ref SetParticipantHardMuteOptions other)
	{
		m_ApiVersion = 1;
		RoomName = other.RoomName;
		TargetUserId = other.TargetUserId;
		Mute = other.Mute;
	}

	public void Set(ref SetParticipantHardMuteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			RoomName = other.Value.RoomName;
			TargetUserId = other.Value.TargetUserId;
			Mute = other.Value.Mute;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

public struct UserToken
{
	public ProductUserId ProductUserId { get; set; }

	public Utf8String Token { get; set; }

	internal void Set(ref UserTokenInternal other)
	{
		ProductUserId = other.ProductUserId;
		Token = other.Token;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UserTokenInternal : IGettable<UserToken>, ISettable<UserToken>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ProductUserId;

	private IntPtr m_Token;

	public ProductUserId ProductUserId
	{
		get
		{
			Helper.Get(m_ProductUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductUserId);
		}
	}

	public Utf8String Token
	{
		get
		{
			Helper.Get(m_Token, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Token);
		}
	}

	public void Set(ref UserToken other)
	{
		m_ApiVersion = 1;
		ProductUserId = other.ProductUserId;
		Token = other.Token;
	}

	public void Set(ref UserToken? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ProductUserId = other.Value.ProductUserId;
			Token = other.Value.Token;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ProductUserId);
		Helper.Dispose(ref m_Token);
	}

	public void Get(out UserToken output)
	{
		output = default(UserToken);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct AddNotifyDisconnectedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyDisconnectedOptionsInternal : ISettable<AddNotifyDisconnectedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyDisconnectedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyDisconnectedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyParticipantStatusChangedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyParticipantStatusChangedOptionsInternal : ISettable<AddNotifyParticipantStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyParticipantStatusChangedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyParticipantStatusChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyRoomStatisticsUpdatedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyRoomStatisticsUpdatedOptionsInternal : ISettable<AddNotifyRoomStatisticsUpdatedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyRoomStatisticsUpdatedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyRoomStatisticsUpdatedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct BlockParticipantCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool Blocked { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref BlockParticipantCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Blocked = other.Blocked;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BlockParticipantCallbackInfoInternal : ICallbackInfoInternal, IGettable<BlockParticipantCallbackInfo>, ISettable<BlockParticipantCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_Blocked;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool Blocked
	{
		get
		{
			Helper.Get(m_Blocked, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Blocked);
		}
	}

	public void Set(ref BlockParticipantCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Blocked = other.Blocked;
	}

	public void Set(ref BlockParticipantCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			Blocked = other.Value.Blocked;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out BlockParticipantCallbackInfo output)
	{
		output = default(BlockParticipantCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct BlockParticipantOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool Blocked { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BlockParticipantOptionsInternal : ISettable<BlockParticipantOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_Blocked;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool Blocked
	{
		set
		{
			Helper.Set(value, ref m_Blocked);
		}
	}

	public void Set(ref BlockParticipantOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Blocked = other.Blocked;
	}

	public void Set(ref BlockParticipantOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			Blocked = other.Value.Blocked;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct DisconnectedCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DisconnectedCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DisconnectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<DisconnectedCallbackInfo>, ISettable<DisconnectedCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref DisconnectedCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref DisconnectedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out DisconnectedCallbackInfo output)
	{
		output = default(DisconnectedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct JoinRoomCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public Option[] RoomOptions { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref JoinRoomCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		RoomOptions = other.RoomOptions;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinRoomCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinRoomCallbackInfo>, ISettable<JoinRoomCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private uint m_RoomOptionsCount;

	private IntPtr m_RoomOptions;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public Option[] RoomOptions
	{
		get
		{
			Helper.Get<OptionInternal, Option>(m_RoomOptions, out var to, m_RoomOptionsCount);
			return to;
		}
		set
		{
			Helper.Set<Option, OptionInternal>(ref value, ref m_RoomOptions, out m_RoomOptionsCount);
		}
	}

	public void Set(ref JoinRoomCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		RoomOptions = other.RoomOptions;
	}

	public void Set(ref JoinRoomCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			RoomOptions = other.Value.RoomOptions;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_RoomOptions);
	}

	public void Get(out JoinRoomCallbackInfo output)
	{
		output = default(JoinRoomCallbackInfo);
		output.Set(ref this);
	}
}


using System;

[Flags]
public enum JoinRoomFlags : uint
{
	None = 0u,
	EnableEcho = 1u,
	EnableDatachannel = 4u
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct JoinRoomOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public Utf8String ClientBaseUrl { get; set; }

	public Utf8String ParticipantToken { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public JoinRoomFlags Flags { get; set; }

	public bool ManualAudioInputEnabled { get; set; }

	public bool ManualAudioOutputEnabled { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinRoomOptionsInternal : ISettable<JoinRoomOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ClientBaseUrl;

	private IntPtr m_ParticipantToken;

	private IntPtr m_ParticipantId;

	private JoinRoomFlags m_Flags;

	private int m_ManualAudioInputEnabled;

	private int m_ManualAudioOutputEnabled;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public Utf8String ClientBaseUrl
	{
		set
		{
			Helper.Set(value, ref m_ClientBaseUrl);
		}
	}

	public Utf8String ParticipantToken
	{
		set
		{
			Helper.Set(value, ref m_ParticipantToken);
		}
	}

	public ProductUserId ParticipantId
	{
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public JoinRoomFlags Flags
	{
		set
		{
			m_Flags = value;
		}
	}

	public bool ManualAudioInputEnabled
	{
		set
		{
			Helper.Set(value, ref m_ManualAudioInputEnabled);
		}
	}

	public bool ManualAudioOutputEnabled
	{
		set
		{
			Helper.Set(value, ref m_ManualAudioOutputEnabled);
		}
	}

	public void Set(ref JoinRoomOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ClientBaseUrl = other.ClientBaseUrl;
		ParticipantToken = other.ParticipantToken;
		ParticipantId = other.ParticipantId;
		Flags = other.Flags;
		ManualAudioInputEnabled = other.ManualAudioInputEnabled;
		ManualAudioOutputEnabled = other.ManualAudioOutputEnabled;
	}

	public void Set(ref JoinRoomOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ClientBaseUrl = other.Value.ClientBaseUrl;
			ParticipantToken = other.Value.ParticipantToken;
			ParticipantId = other.Value.ParticipantId;
			Flags = other.Value.Flags;
			ManualAudioInputEnabled = other.Value.ManualAudioInputEnabled;
			ManualAudioOutputEnabled = other.Value.ManualAudioOutputEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ClientBaseUrl);
		Helper.Dispose(ref m_ParticipantToken);
		Helper.Dispose(ref m_ParticipantId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct LeaveRoomCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LeaveRoomCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaveRoomCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveRoomCallbackInfo>, ISettable<LeaveRoomCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref LeaveRoomCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref LeaveRoomCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out LeaveRoomCallbackInfo output)
	{
		output = default(LeaveRoomCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct LeaveRoomOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaveRoomOptionsInternal : ISettable<LeaveRoomOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref LeaveRoomOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref LeaveRoomOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices.RTC;

public delegate void OnBlockParticipantCallback(ref BlockParticipantCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTC;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnBlockParticipantCallbackInternal(ref BlockParticipantCallbackInfoInternal data);


using Epic.OnlineServices.RTC;

public delegate void OnDisconnectedCallback(ref DisconnectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTC;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDisconnectedCallbackInternal(ref DisconnectedCallbackInfoInternal data);


using Epic.OnlineServices.RTC;

public delegate void OnJoinRoomCallback(ref JoinRoomCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTC;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinRoomCallbackInternal(ref JoinRoomCallbackInfoInternal data);


using Epic.OnlineServices.RTC;

public delegate void OnLeaveRoomCallback(ref LeaveRoomCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTC;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveRoomCallbackInternal(ref LeaveRoomCallbackInfoInternal data);


using Epic.OnlineServices.RTC;

public delegate void OnParticipantStatusChangedCallback(ref ParticipantStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTC;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnParticipantStatusChangedCallbackInternal(ref ParticipantStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices.RTC;

public delegate void OnRoomStatisticsUpdatedCallback(ref RoomStatisticsUpdatedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTC;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRoomStatisticsUpdatedCallbackInternal(ref RoomStatisticsUpdatedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct Option
{
	public Utf8String Key { get; set; }

	public Utf8String Value { get; set; }

	internal void Set(ref OptionInternal other)
	{
		Key = other.Key;
		Value = other.Value;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OptionInternal : IGettable<Option>, ISettable<Option>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private IntPtr m_Value;

	public Utf8String Key
	{
		get
		{
			Helper.Get(m_Key, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public Utf8String Value
	{
		get
		{
			Helper.Get(m_Value, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Value);
		}
	}

	public void Set(ref Option other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		Value = other.Value;
	}

	public void Set(ref Option? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}

	public void Get(out Option output)
	{
		output = default(Option);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct ParticipantMetadata
{
	public Utf8String Key { get; set; }

	public Utf8String Value { get; set; }

	internal void Set(ref ParticipantMetadataInternal other)
	{
		Key = other.Key;
		Value = other.Value;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ParticipantMetadataInternal : IGettable<ParticipantMetadata>, ISettable<ParticipantMetadata>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private IntPtr m_Value;

	public Utf8String Key
	{
		get
		{
			Helper.Get(m_Key, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public Utf8String Value
	{
		get
		{
			Helper.Get(m_Value, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Value);
		}
	}

	public void Set(ref ParticipantMetadata other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		Value = other.Value;
	}

	public void Set(ref ParticipantMetadata? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}

	public void Get(out ParticipantMetadata output)
	{
		output = default(ParticipantMetadata);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct ParticipantStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public RTCParticipantStatus ParticipantStatus { get; set; }

	public ParticipantMetadata[] ParticipantMetadata { get; set; }

	public bool ParticipantInBlocklist { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref ParticipantStatusChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		ParticipantStatus = other.ParticipantStatus;
		ParticipantMetadata = other.ParticipantMetadata;
		ParticipantInBlocklist = other.ParticipantInBlocklist;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ParticipantStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<ParticipantStatusChangedCallbackInfo>, ISettable<ParticipantStatusChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private RTCParticipantStatus m_ParticipantStatus;

	private uint m_ParticipantMetadataCount;

	private IntPtr m_ParticipantMetadata;

	private int m_ParticipantInBlocklist;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public RTCParticipantStatus ParticipantStatus
	{
		get
		{
			return m_ParticipantStatus;
		}
		set
		{
			m_ParticipantStatus = value;
		}
	}

	public ParticipantMetadata[] ParticipantMetadata
	{
		get
		{
			Helper.Get<ParticipantMetadataInternal, ParticipantMetadata>(m_ParticipantMetadata, out var to, m_ParticipantMetadataCount);
			return to;
		}
		set
		{
			Helper.Set<ParticipantMetadata, ParticipantMetadataInternal>(ref value, ref m_ParticipantMetadata, out m_ParticipantMetadataCount);
		}
	}

	public bool ParticipantInBlocklist
	{
		get
		{
			Helper.Get(m_ParticipantInBlocklist, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantInBlocklist);
		}
	}

	public void Set(ref ParticipantStatusChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		ParticipantStatus = other.ParticipantStatus;
		ParticipantMetadata = other.ParticipantMetadata;
		ParticipantInBlocklist = other.ParticipantInBlocklist;
	}

	public void Set(ref ParticipantStatusChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			ParticipantStatus = other.Value.ParticipantStatus;
			ParticipantMetadata = other.Value.ParticipantMetadata;
			ParticipantInBlocklist = other.Value.ParticipantInBlocklist;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
		Helper.Dispose(ref m_ParticipantMetadata);
	}

	public void Get(out ParticipantStatusChangedCallbackInfo output)
	{
		output = default(ParticipantStatusChangedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

public struct RoomStatisticsUpdatedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public Utf8String Statistic { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref RoomStatisticsUpdatedInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Statistic = other.Statistic;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RoomStatisticsUpdatedInfoInternal : ICallbackInfoInternal, IGettable<RoomStatisticsUpdatedInfo>, ISettable<RoomStatisticsUpdatedInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_Statistic;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public Utf8String Statistic
	{
		get
		{
			Helper.Get(m_Statistic, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Statistic);
		}
	}

	public void Set(ref RoomStatisticsUpdatedInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Statistic = other.Statistic;
	}

	public void Set(ref RoomStatisticsUpdatedInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Statistic = other.Value.Statistic;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_Statistic);
	}

	public void Get(out RoomStatisticsUpdatedInfo output)
	{
		output = default(RoomStatisticsUpdatedInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;
using Epic.OnlineServices.RTCAudio;
using Epic.OnlineServices.RTCData;

public sealed class RTCInterface : Handle
{
	public const int AddnotifydisconnectedApiLatest = 1;

	public const int AddnotifyparticipantstatuschangedApiLatest = 1;

	public const int AddnotifyroomstatisticsupdatedApiLatest = 1;

	public const int BlockparticipantApiLatest = 1;

	public const int JoinroomApiLatest = 1;

	public const int LeaveroomApiLatest = 1;

	public const int OptionApiLatest = 1;

	public const int OptionKeyMaxcharcount = 256;

	public const int OptionValueMaxcharcount = 256;

	public const int ParticipantmetadataApiLatest = 1;

	public const int ParticipantmetadataKeyMaxcharcount = 256;

	public const int ParticipantmetadataValueMaxcharcount = 256;

	public const int SetroomsettingApiLatest = 1;

	public const int SetsettingApiLatest = 1;

	public RTCInterface()
	{
	}

	public RTCInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyDisconnected(ref AddNotifyDisconnectedOptions options, object clientData, OnDisconnectedCallback completionDelegate)
	{
		AddNotifyDisconnectedOptionsInternal options2 = default(AddNotifyDisconnectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDisconnectedCallbackInternal onDisconnectedCallbackInternal = OnDisconnectedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDisconnectedCallbackInternal);
		ulong num = Bindings.EOS_RTC_AddNotifyDisconnected(base.InnerHandle, ref options2, clientDataAddress, onDisconnectedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyParticipantStatusChanged(ref AddNotifyParticipantStatusChangedOptions options, object clientData, OnParticipantStatusChangedCallback completionDelegate)
	{
		AddNotifyParticipantStatusChangedOptionsInternal options2 = default(AddNotifyParticipantStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnParticipantStatusChangedCallbackInternal onParticipantStatusChangedCallbackInternal = OnParticipantStatusChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onParticipantStatusChangedCallbackInternal);
		ulong num = Bindings.EOS_RTC_AddNotifyParticipantStatusChanged(base.InnerHandle, ref options2, clientDataAddress, onParticipantStatusChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyRoomStatisticsUpdated(ref AddNotifyRoomStatisticsUpdatedOptions options, object clientData, OnRoomStatisticsUpdatedCallback statisticsUpdateHandler)
	{
		AddNotifyRoomStatisticsUpdatedOptionsInternal options2 = default(AddNotifyRoomStatisticsUpdatedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRoomStatisticsUpdatedCallbackInternal onRoomStatisticsUpdatedCallbackInternal = OnRoomStatisticsUpdatedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, statisticsUpdateHandler, onRoomStatisticsUpdatedCallbackInternal);
		ulong num = Bindings.EOS_RTC_AddNotifyRoomStatisticsUpdated(base.InnerHandle, ref options2, clientDataAddress, onRoomStatisticsUpdatedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public void BlockParticipant(ref BlockParticipantOptions options, object clientData, OnBlockParticipantCallback completionDelegate)
	{
		BlockParticipantOptionsInternal options2 = default(BlockParticipantOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnBlockParticipantCallbackInternal onBlockParticipantCallbackInternal = OnBlockParticipantCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onBlockParticipantCallbackInternal);
		Bindings.EOS_RTC_BlockParticipant(base.InnerHandle, ref options2, clientDataAddress, onBlockParticipantCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public RTCAudioInterface GetAudioInterface()
	{
		Helper.Get(Bindings.EOS_RTC_GetAudioInterface(base.InnerHandle), out RTCAudioInterface to);
		return to;
	}

	public RTCDataInterface GetDataInterface()
	{
		Helper.Get(Bindings.EOS_RTC_GetDataInterface(base.InnerHandle), out RTCDataInterface to);
		return to;
	}

	public void JoinRoom(ref JoinRoomOptions options, object clientData, OnJoinRoomCallback completionDelegate)
	{
		JoinRoomOptionsInternal options2 = default(JoinRoomOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinRoomCallbackInternal onJoinRoomCallbackInternal = OnJoinRoomCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onJoinRoomCallbackInternal);
		Bindings.EOS_RTC_JoinRoom(base.InnerHandle, ref options2, clientDataAddress, onJoinRoomCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void LeaveRoom(ref LeaveRoomOptions options, object clientData, OnLeaveRoomCallback completionDelegate)
	{
		LeaveRoomOptionsInternal options2 = default(LeaveRoomOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLeaveRoomCallbackInternal onLeaveRoomCallbackInternal = OnLeaveRoomCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLeaveRoomCallbackInternal);
		Bindings.EOS_RTC_LeaveRoom(base.InnerHandle, ref options2, clientDataAddress, onLeaveRoomCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyDisconnected(ulong notificationId)
	{
		Bindings.EOS_RTC_RemoveNotifyDisconnected(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyParticipantStatusChanged(ulong notificationId)
	{
		Bindings.EOS_RTC_RemoveNotifyParticipantStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyRoomStatisticsUpdated(ulong notificationId)
	{
		Bindings.EOS_RTC_RemoveNotifyRoomStatisticsUpdated(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SetRoomSetting(ref SetRoomSettingOptions options)
	{
		SetRoomSettingOptionsInternal options2 = default(SetRoomSettingOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTC_SetRoomSetting(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetSetting(ref SetSettingOptions options)
	{
		SetSettingOptionsInternal options2 = default(SetSettingOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTC_SetSetting(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnBlockParticipantCallbackInternal))]
	internal static void OnBlockParticipantCallbackInternalImplementation(ref BlockParticipantCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<BlockParticipantCallbackInfoInternal, OnBlockParticipantCallback, BlockParticipantCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnDisconnectedCallbackInternal))]
	internal static void OnDisconnectedCallbackInternalImplementation(ref DisconnectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<DisconnectedCallbackInfoInternal, OnDisconnectedCallback, DisconnectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinRoomCallbackInternal))]
	internal static void OnJoinRoomCallbackInternalImplementation(ref JoinRoomCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinRoomCallbackInfoInternal, OnJoinRoomCallback, JoinRoomCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveRoomCallbackInternal))]
	internal static void OnLeaveRoomCallbackInternalImplementation(ref LeaveRoomCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LeaveRoomCallbackInfoInternal, OnLeaveRoomCallback, LeaveRoomCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnParticipantStatusChangedCallbackInternal))]
	internal static void OnParticipantStatusChangedCallbackInternalImplementation(ref ParticipantStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<ParticipantStatusChangedCallbackInfoInternal, OnParticipantStatusChangedCallback, ParticipantStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRoomStatisticsUpdatedCallbackInternal))]
	internal static void OnRoomStatisticsUpdatedCallbackInternalImplementation(ref RoomStatisticsUpdatedInfoInternal data)
	{
		if (Helper.TryGetCallback<RoomStatisticsUpdatedInfoInternal, OnRoomStatisticsUpdatedCallback, RoomStatisticsUpdatedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum RTCParticipantStatus
{
	Joined,
	Left
}


using Epic.OnlineServices;

public struct SetRoomSettingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public Utf8String SettingName { get; set; }

	public Utf8String SettingValue { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetRoomSettingOptionsInternal : ISettable<SetRoomSettingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_SettingName;

	private IntPtr m_SettingValue;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public Utf8String SettingName
	{
		set
		{
			Helper.Set(value, ref m_SettingName);
		}
	}

	public Utf8String SettingValue
	{
		set
		{
			Helper.Set(value, ref m_SettingValue);
		}
	}

	public void Set(ref SetRoomSettingOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		SettingName = other.SettingName;
		SettingValue = other.SettingValue;
	}

	public void Set(ref SetRoomSettingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			SettingName = other.Value.SettingName;
			SettingValue = other.Value.SettingValue;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_SettingName);
		Helper.Dispose(ref m_SettingValue);
	}
}


using Epic.OnlineServices;

public struct SetSettingOptions
{
	public Utf8String SettingName { get; set; }

	public Utf8String SettingValue { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTC;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetSettingOptionsInternal : ISettable<SetSettingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SettingName;

	private IntPtr m_SettingValue;

	public Utf8String SettingName
	{
		set
		{
			Helper.Set(value, ref m_SettingName);
		}
	}

	public Utf8String SettingValue
	{
		set
		{
			Helper.Set(value, ref m_SettingValue);
		}
	}

	public void Set(ref SetSettingOptions other)
	{
		m_ApiVersion = 1;
		SettingName = other.SettingName;
		SettingValue = other.SettingValue;
	}

	public void Set(ref SetSettingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SettingName = other.Value.SettingName;
			SettingValue = other.Value.SettingValue;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SettingName);
		Helper.Dispose(ref m_SettingValue);
	}
}


using Epic.OnlineServices.Reports;

public delegate void OnSendPlayerBehaviorReportCompleteCallback(ref SendPlayerBehaviorReportCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Reports;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendPlayerBehaviorReportCompleteCallbackInternal(ref SendPlayerBehaviorReportCompleteCallbackInfoInternal data);


public enum PlayerReportsCategory
{
	Invalid,
	Cheating,
	Exploiting,
	OffensiveProfile,
	VerbalAbuse,
	Scamming,
	Spamming,
	Other
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Reports;

public sealed class ReportsInterface : Handle
{
	public const int ReportcontextMaxLength = 4096;

	public const int ReportmessageMaxLength = 512;

	public const int SendplayerbehaviorreportApiLatest = 2;

	public ReportsInterface()
	{
	}

	public ReportsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void SendPlayerBehaviorReport(ref SendPlayerBehaviorReportOptions options, object clientData, OnSendPlayerBehaviorReportCompleteCallback completionDelegate)
	{
		SendPlayerBehaviorReportOptionsInternal options2 = default(SendPlayerBehaviorReportOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendPlayerBehaviorReportCompleteCallbackInternal onSendPlayerBehaviorReportCompleteCallbackInternal = OnSendPlayerBehaviorReportCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSendPlayerBehaviorReportCompleteCallbackInternal);
		Bindings.EOS_Reports_SendPlayerBehaviorReport(base.InnerHandle, ref options2, clientDataAddress, onSendPlayerBehaviorReportCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnSendPlayerBehaviorReportCompleteCallbackInternal))]
	internal static void OnSendPlayerBehaviorReportCompleteCallbackInternalImplementation(ref SendPlayerBehaviorReportCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendPlayerBehaviorReportCompleteCallbackInfoInternal, OnSendPlayerBehaviorReportCompleteCallback, SendPlayerBehaviorReportCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Reports;

public struct SendPlayerBehaviorReportCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SendPlayerBehaviorReportCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Reports;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendPlayerBehaviorReportCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendPlayerBehaviorReportCompleteCallbackInfo>, ISettable<SendPlayerBehaviorReportCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref SendPlayerBehaviorReportCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref SendPlayerBehaviorReportCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out SendPlayerBehaviorReportCompleteCallbackInfo output)
	{
		output = default(SendPlayerBehaviorReportCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Reports;

public struct SendPlayerBehaviorReportOptions
{
	public ProductUserId ReporterUserId { get; set; }

	public ProductUserId ReportedUserId { get; set; }

	public PlayerReportsCategory Category { get; set; }

	public Utf8String Message { get; set; }

	public Utf8String Context { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Reports;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendPlayerBehaviorReportOptionsInternal : ISettable<SendPlayerBehaviorReportOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ReporterUserId;

	private IntPtr m_ReportedUserId;

	private PlayerReportsCategory m_Category;

	private IntPtr m_Message;

	private IntPtr m_Context;

	public ProductUserId ReporterUserId
	{
		set
		{
			Helper.Set(value, ref m_ReporterUserId);
		}
	}

	public ProductUserId ReportedUserId
	{
		set
		{
			Helper.Set(value, ref m_ReportedUserId);
		}
	}

	public PlayerReportsCategory Category
	{
		set
		{
			m_Category = value;
		}
	}

	public Utf8String Message
	{
		set
		{
			Helper.Set(value, ref m_Message);
		}
	}

	public Utf8String Context
	{
		set
		{
			Helper.Set(value, ref m_Context);
		}
	}

	public void Set(ref SendPlayerBehaviorReportOptions other)
	{
		m_ApiVersion = 2;
		ReporterUserId = other.ReporterUserId;
		ReportedUserId = other.ReportedUserId;
		Category = other.Category;
		Message = other.Message;
		Context = other.Context;
	}

	public void Set(ref SendPlayerBehaviorReportOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			ReporterUserId = other.Value.ReporterUserId;
			ReportedUserId = other.Value.ReportedUserId;
			Category = other.Value.Category;
			Message = other.Value.Message;
			Context = other.Value.Context;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ReporterUserId);
		Helper.Dispose(ref m_ReportedUserId);
		Helper.Dispose(ref m_Message);
		Helper.Dispose(ref m_Context);
	}
}


using Epic.OnlineServices;

public struct AddProgressionOptions
{
	public uint SnapshotId { get; set; }

	public Utf8String Key { get; set; }

	public Utf8String Value { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddProgressionOptionsInternal : ISettable<AddProgressionOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_SnapshotId;

	private IntPtr m_Key;

	private IntPtr m_Value;

	public uint SnapshotId
	{
		set
		{
			m_SnapshotId = value;
		}
	}

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public Utf8String Value
	{
		set
		{
			Helper.Set(value, ref m_Value);
		}
	}

	public void Set(ref AddProgressionOptions other)
	{
		m_ApiVersion = 1;
		SnapshotId = other.SnapshotId;
		Key = other.Key;
		Value = other.Value;
	}

	public void Set(ref AddProgressionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SnapshotId = other.Value.SnapshotId;
			Key = other.Value.Key;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}
}


using Epic.OnlineServices;

public struct BeginSnapshotOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BeginSnapshotOptionsInternal : ISettable<BeginSnapshotOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref BeginSnapshotOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref BeginSnapshotOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

public struct DeleteSnapshotCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DeleteSnapshotCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteSnapshotCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteSnapshotCallbackInfo>, ISettable<DeleteSnapshotCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref DeleteSnapshotCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
	}

	public void Set(ref DeleteSnapshotCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			LocalUserId = other.Value.LocalUserId;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out DeleteSnapshotCallbackInfo output)
	{
		output = default(DeleteSnapshotCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DeleteSnapshotOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteSnapshotOptionsInternal : ISettable<DeleteSnapshotOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DeleteSnapshotOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DeleteSnapshotOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


public struct EndSnapshotOptions
{
	public uint SnapshotId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EndSnapshotOptionsInternal : ISettable<EndSnapshotOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_SnapshotId;

	public uint SnapshotId
	{
		set
		{
			m_SnapshotId = value;
		}
	}

	public void Set(ref EndSnapshotOptions other)
	{
		m_ApiVersion = 1;
		SnapshotId = other.SnapshotId;
	}

	public void Set(ref EndSnapshotOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SnapshotId = other.Value.SnapshotId;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.ProgressionSnapshot;

public delegate void OnDeleteSnapshotCallback(ref DeleteSnapshotCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.ProgressionSnapshot;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteSnapshotCallbackInternal(ref DeleteSnapshotCallbackInfoInternal data);


using Epic.OnlineServices.ProgressionSnapshot;

public delegate void OnSubmitSnapshotCallback(ref SubmitSnapshotCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.ProgressionSnapshot;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSubmitSnapshotCallbackInternal(ref SubmitSnapshotCallbackInfoInternal data);


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

public sealed class ProgressionSnapshotInterface : Handle
{
	public const int AddprogressionApiLatest = 1;

	public const int BeginsnapshotApiLatest = 1;

	public const int DeletesnapshotApiLatest = 1;

	public const int EndsnapshotApiLatest = 1;

	public const int InvalidProgressionsnapshotid = 0;

	public const int SubmitsnapshotApiLatest = 1;

	public ProgressionSnapshotInterface()
	{
	}

	public ProgressionSnapshotInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AddProgression(ref AddProgressionOptions options)
	{
		AddProgressionOptionsInternal options2 = default(AddProgressionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_ProgressionSnapshot_AddProgression(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result BeginSnapshot(ref BeginSnapshotOptions options, out uint outSnapshotId)
	{
		BeginSnapshotOptionsInternal options2 = default(BeginSnapshotOptionsInternal);
		options2.Set(ref options);
		outSnapshotId = Helper.GetDefault<uint>();
		Result result = Bindings.EOS_ProgressionSnapshot_BeginSnapshot(base.InnerHandle, ref options2, ref outSnapshotId);
		Helper.Dispose(ref options2);
		return result;
	}

	public void DeleteSnapshot(ref DeleteSnapshotOptions options, object clientData, OnDeleteSnapshotCallback completionDelegate)
	{
		DeleteSnapshotOptionsInternal options2 = default(DeleteSnapshotOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDeleteSnapshotCallbackInternal onDeleteSnapshotCallbackInternal = OnDeleteSnapshotCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDeleteSnapshotCallbackInternal);
		Bindings.EOS_ProgressionSnapshot_DeleteSnapshot(base.InnerHandle, ref options2, clientDataAddress, onDeleteSnapshotCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result EndSnapshot(ref EndSnapshotOptions options)
	{
		EndSnapshotOptionsInternal options2 = default(EndSnapshotOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_ProgressionSnapshot_EndSnapshot(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void SubmitSnapshot(ref SubmitSnapshotOptions options, object clientData, OnSubmitSnapshotCallback completionDelegate)
	{
		SubmitSnapshotOptionsInternal options2 = default(SubmitSnapshotOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSubmitSnapshotCallbackInternal onSubmitSnapshotCallbackInternal = OnSubmitSnapshotCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSubmitSnapshotCallbackInternal);
		Bindings.EOS_ProgressionSnapshot_SubmitSnapshot(base.InnerHandle, ref options2, clientDataAddress, onSubmitSnapshotCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnDeleteSnapshotCallbackInternal))]
	internal static void OnDeleteSnapshotCallbackInternalImplementation(ref DeleteSnapshotCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteSnapshotCallbackInfoInternal, OnDeleteSnapshotCallback, DeleteSnapshotCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSubmitSnapshotCallbackInternal))]
	internal static void OnSubmitSnapshotCallbackInternalImplementation(ref SubmitSnapshotCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SubmitSnapshotCallbackInfoInternal, OnSubmitSnapshotCallback, SubmitSnapshotCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

public struct SubmitSnapshotCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public uint SnapshotId { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SubmitSnapshotCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		SnapshotId = other.SnapshotId;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SubmitSnapshotCallbackInfoInternal : ICallbackInfoInternal, IGettable<SubmitSnapshotCallbackInfo>, ISettable<SubmitSnapshotCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private uint m_SnapshotId;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public uint SnapshotId
	{
		get
		{
			return m_SnapshotId;
		}
		set
		{
			m_SnapshotId = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref SubmitSnapshotCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		SnapshotId = other.SnapshotId;
		ClientData = other.ClientData;
	}

	public void Set(ref SubmitSnapshotCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			SnapshotId = other.Value.SnapshotId;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out SubmitSnapshotCallbackInfo output)
	{
		output = default(SubmitSnapshotCallbackInfo);
		output.Set(ref this);
	}
}


public struct SubmitSnapshotOptions
{
	public uint SnapshotId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.ProgressionSnapshot;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SubmitSnapshotOptionsInternal : ISettable<SubmitSnapshotOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_SnapshotId;

	public uint SnapshotId
	{
		set
		{
			m_SnapshotId = value;
		}
	}

	public void Set(ref SubmitSnapshotOptions other)
	{
		m_ApiVersion = 1;
		SnapshotId = other.SnapshotId;
	}

	public void Set(ref SubmitSnapshotOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SnapshotId = other.Value.SnapshotId;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyJoinGameAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyJoinGameAcceptedOptionsInternal : ISettable<AddNotifyJoinGameAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyJoinGameAcceptedOptions other)
	{
		m_ApiVersion = 2;
	}

	public void Set(ref AddNotifyJoinGameAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyOnPresenceChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyOnPresenceChangedOptionsInternal : ISettable<AddNotifyOnPresenceChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyOnPresenceChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyOnPresenceChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyPresenceOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyPresenceOptionsInternal : ISettable<CopyPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref CopyPresenceOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref CopyPresenceOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CreatePresenceModificationOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreatePresenceModificationOptionsInternal : ISettable<CreatePresenceModificationOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CreatePresenceModificationOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CreatePresenceModificationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct DataRecord
{
	public Utf8String Key { get; set; }

	public Utf8String Value { get; set; }

	internal void Set(ref DataRecordInternal other)
	{
		Key = other.Key;
		Value = other.Value;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DataRecordInternal : IGettable<DataRecord>, ISettable<DataRecord>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private IntPtr m_Value;

	public Utf8String Key
	{
		get
		{
			Helper.Get(m_Key, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public Utf8String Value
	{
		get
		{
			Helper.Get(m_Value, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Value);
		}
	}

	public void Set(ref DataRecord other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		Value = other.Value;
	}

	public void Set(ref DataRecord? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}

	public void Get(out DataRecord output)
	{
		output = default(DataRecord);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetJoinInfoOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetJoinInfoOptionsInternal : ISettable<GetJoinInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref GetJoinInfoOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref GetJoinInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct HasPresenceOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct HasPresenceOptionsInternal : ISettable<HasPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref HasPresenceOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref HasPresenceOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct Info
{
	public Status Status { get; set; }

	public EpicAccountId UserId { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String ProductVersion { get; set; }

	public Utf8String Platform { get; set; }

	public Utf8String RichText { get; set; }

	public DataRecord[] Records { get; set; }

	public Utf8String ProductName { get; set; }

	public Utf8String IntegratedPlatform { get; set; }

	internal void Set(ref InfoInternal other)
	{
		Status = other.Status;
		UserId = other.UserId;
		ProductId = other.ProductId;
		ProductVersion = other.ProductVersion;
		Platform = other.Platform;
		RichText = other.RichText;
		Records = other.Records;
		ProductName = other.ProductName;
		IntegratedPlatform = other.IntegratedPlatform;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct InfoInternal : IGettable<Info>, ISettable<Info>, IDisposable
{
	private int m_ApiVersion;

	private Status m_Status;

	private IntPtr m_UserId;

	private IntPtr m_ProductId;

	private IntPtr m_ProductVersion;

	private IntPtr m_Platform;

	private IntPtr m_RichText;

	private int m_RecordsCount;

	private IntPtr m_Records;

	private IntPtr m_ProductName;

	private IntPtr m_IntegratedPlatform;

	public Status Status
	{
		get
		{
			return m_Status;
		}
		set
		{
			m_Status = value;
		}
	}

	public EpicAccountId UserId
	{
		get
		{
			Helper.Get(m_UserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String ProductId
	{
		get
		{
			Helper.Get(m_ProductId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductId);
		}
	}

	public Utf8String ProductVersion
	{
		get
		{
			Helper.Get(m_ProductVersion, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductVersion);
		}
	}

	public Utf8String Platform
	{
		get
		{
			Helper.Get(m_Platform, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Platform);
		}
	}

	public Utf8String RichText
	{
		get
		{
			Helper.Get(m_RichText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RichText);
		}
	}

	public DataRecord[] Records
	{
		get
		{
			Helper.Get<DataRecordInternal, DataRecord>(m_Records, out var to, m_RecordsCount);
			return to;
		}
		set
		{
			Helper.Set<DataRecord, DataRecordInternal>(ref value, ref m_Records, out m_RecordsCount);
		}
	}

	public Utf8String ProductName
	{
		get
		{
			Helper.Get(m_ProductName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductName);
		}
	}

	public Utf8String IntegratedPlatform
	{
		get
		{
			Helper.Get(m_IntegratedPlatform, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IntegratedPlatform);
		}
	}

	public void Set(ref Info other)
	{
		m_ApiVersion = 3;
		Status = other.Status;
		UserId = other.UserId;
		ProductId = other.ProductId;
		ProductVersion = other.ProductVersion;
		Platform = other.Platform;
		RichText = other.RichText;
		Records = other.Records;
		ProductName = other.ProductName;
		IntegratedPlatform = other.IntegratedPlatform;
	}

	public void Set(ref Info? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			Status = other.Value.Status;
			UserId = other.Value.UserId;
			ProductId = other.Value.ProductId;
			ProductVersion = other.Value.ProductVersion;
			Platform = other.Value.Platform;
			RichText = other.Value.RichText;
			Records = other.Value.Records;
			ProductName = other.Value.ProductName;
			IntegratedPlatform = other.Value.IntegratedPlatform;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_ProductId);
		Helper.Dispose(ref m_ProductVersion);
		Helper.Dispose(ref m_Platform);
		Helper.Dispose(ref m_RichText);
		Helper.Dispose(ref m_Records);
		Helper.Dispose(ref m_ProductName);
		Helper.Dispose(ref m_IntegratedPlatform);
	}

	public void Get(out Info output)
	{
		output = default(Info);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct JoinGameAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String JoinInfo { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public ulong UiEventId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref JoinGameAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		JoinInfo = other.JoinInfo;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		UiEventId = other.UiEventId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinGameAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinGameAcceptedCallbackInfo>, ISettable<JoinGameAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_JoinInfo;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private ulong m_UiEventId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String JoinInfo
	{
		get
		{
			Helper.Get(m_JoinInfo, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_JoinInfo);
		}
	}

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ulong UiEventId
	{
		get
		{
			return m_UiEventId;
		}
		set
		{
			m_UiEventId = value;
		}
	}

	public void Set(ref JoinGameAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		JoinInfo = other.JoinInfo;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		UiEventId = other.UiEventId;
	}

	public void Set(ref JoinGameAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			JoinInfo = other.Value.JoinInfo;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			UiEventId = other.Value.UiEventId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_JoinInfo);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out JoinGameAcceptedCallbackInfo output)
	{
		output = default(JoinGameAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Presence;

public delegate void OnJoinGameAcceptedCallback(ref JoinGameAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinGameAcceptedCallbackInternal(ref JoinGameAcceptedCallbackInfoInternal data);


using Epic.OnlineServices.Presence;

public delegate void OnPresenceChangedCallback(ref PresenceChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPresenceChangedCallbackInternal(ref PresenceChangedCallbackInfoInternal data);


using Epic.OnlineServices.Presence;

public delegate void OnQueryPresenceCompleteCallback(ref QueryPresenceCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryPresenceCompleteCallbackInternal(ref QueryPresenceCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct PresenceChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId PresenceUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref PresenceChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PresenceUserId = other.PresenceUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<PresenceChangedCallbackInfo>, ISettable<PresenceChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_PresenceUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId PresenceUserId
	{
		get
		{
			Helper.Get(m_PresenceUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PresenceUserId);
		}
	}

	public void Set(ref PresenceChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PresenceUserId = other.PresenceUserId;
	}

	public void Set(ref PresenceChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			PresenceUserId = other.Value.PresenceUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PresenceUserId);
	}

	public void Get(out PresenceChangedCallbackInfo output)
	{
		output = default(PresenceChangedCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public sealed class PresenceInterface : Handle
{
	public const int AddnotifyjoingameacceptedApiLatest = 2;

	public const int AddnotifyonpresencechangedApiLatest = 1;

	public const int CopypresenceApiLatest = 3;

	public const int CreatepresencemodificationApiLatest = 1;

	public const int DataMaxKeyLength = 64;

	public const int DataMaxKeys = 32;

	public const int DataMaxValueLength = 255;

	public const int DatarecordApiLatest = 1;

	public const int DeletedataApiLatest = 1;

	public const int GetjoininfoApiLatest = 1;

	public const int HaspresenceApiLatest = 1;

	public const int InfoApiLatest = 3;

	public static readonly Utf8String KeyPlatformPresence = "EOS_PlatformPresence";

	public const int QuerypresenceApiLatest = 1;

	public const int RichTextMaxValueLength = 255;

	public const int SetdataApiLatest = 1;

	public const int SetpresenceApiLatest = 1;

	public const int SetrawrichtextApiLatest = 1;

	public const int SetstatusApiLatest = 1;

	public PresenceInterface()
	{
	}

	public PresenceInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyJoinGameAccepted(ref AddNotifyJoinGameAcceptedOptions options, object clientData, OnJoinGameAcceptedCallback notificationFn)
	{
		AddNotifyJoinGameAcceptedOptionsInternal options2 = default(AddNotifyJoinGameAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinGameAcceptedCallbackInternal onJoinGameAcceptedCallbackInternal = OnJoinGameAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onJoinGameAcceptedCallbackInternal);
		ulong num = Bindings.EOS_Presence_AddNotifyJoinGameAccepted(base.InnerHandle, ref options2, clientDataAddress, onJoinGameAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyOnPresenceChanged(ref AddNotifyOnPresenceChangedOptions options, object clientData, OnPresenceChangedCallback notificationHandler)
	{
		AddNotifyOnPresenceChangedOptionsInternal options2 = default(AddNotifyOnPresenceChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPresenceChangedCallbackInternal onPresenceChangedCallbackInternal = OnPresenceChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationHandler, onPresenceChangedCallbackInternal);
		ulong num = Bindings.EOS_Presence_AddNotifyOnPresenceChanged(base.InnerHandle, ref options2, clientDataAddress, onPresenceChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyPresence(ref CopyPresenceOptions options, out Info? outPresence)
	{
		CopyPresenceOptionsInternal options2 = default(CopyPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr outPresence2 = IntPtr.Zero;
		Result result = Bindings.EOS_Presence_CopyPresence(base.InnerHandle, ref options2, ref outPresence2);
		Helper.Dispose(ref options2);
		Helper.Get<InfoInternal, Info>(outPresence2, out outPresence);
		if (outPresence.HasValue)
		{
			Bindings.EOS_Presence_Info_Release(outPresence2);
		}
		return result;
	}

	public Result CreatePresenceModification(ref CreatePresenceModificationOptions options, out PresenceModification outPresenceModificationHandle)
	{
		CreatePresenceModificationOptionsInternal options2 = default(CreatePresenceModificationOptionsInternal);
		options2.Set(ref options);
		IntPtr outPresenceModificationHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Presence_CreatePresenceModification(base.InnerHandle, ref options2, ref outPresenceModificationHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outPresenceModificationHandle2, out outPresenceModificationHandle);
		return result;
	}

	public Result GetJoinInfo(ref GetJoinInfoOptions options, out Utf8String outBuffer)
	{
		GetJoinInfoOptionsInternal options2 = default(GetJoinInfoOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 256;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Presence_GetJoinInfo(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public bool HasPresence(ref HasPresenceOptions options)
	{
		HasPresenceOptionsInternal options2 = default(HasPresenceOptionsInternal);
		options2.Set(ref options);
		int from = Bindings.EOS_Presence_HasPresence(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out var to);
		return to;
	}

	public void QueryPresence(ref QueryPresenceOptions options, object clientData, OnQueryPresenceCompleteCallback completionDelegate)
	{
		QueryPresenceOptionsInternal options2 = default(QueryPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryPresenceCompleteCallbackInternal onQueryPresenceCompleteCallbackInternal = OnQueryPresenceCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryPresenceCompleteCallbackInternal);
		Bindings.EOS_Presence_QueryPresence(base.InnerHandle, ref options2, clientDataAddress, onQueryPresenceCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyJoinGameAccepted(ulong inId)
	{
		Bindings.EOS_Presence_RemoveNotifyJoinGameAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyOnPresenceChanged(ulong notificationId)
	{
		Bindings.EOS_Presence_RemoveNotifyOnPresenceChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void SetPresence(ref SetPresenceOptions options, object clientData, SetPresenceCompleteCallback completionDelegate)
	{
		SetPresenceOptionsInternal options2 = default(SetPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		SetPresenceCompleteCallbackInternal setPresenceCompleteCallbackInternal = SetPresenceCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, setPresenceCompleteCallbackInternal);
		Bindings.EOS_Presence_SetPresence(base.InnerHandle, ref options2, clientDataAddress, setPresenceCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnJoinGameAcceptedCallbackInternal))]
	internal static void OnJoinGameAcceptedCallbackInternalImplementation(ref JoinGameAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<JoinGameAcceptedCallbackInfoInternal, OnJoinGameAcceptedCallback, JoinGameAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPresenceChangedCallbackInternal))]
	internal static void OnPresenceChangedCallbackInternalImplementation(ref PresenceChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<PresenceChangedCallbackInfoInternal, OnPresenceChangedCallback, PresenceChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryPresenceCompleteCallbackInternal))]
	internal static void OnQueryPresenceCompleteCallbackInternalImplementation(ref QueryPresenceCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryPresenceCallbackInfoInternal, OnQueryPresenceCompleteCallback, QueryPresenceCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(SetPresenceCompleteCallbackInternal))]
	internal static void SetPresenceCompleteCallbackInternalImplementation(ref SetPresenceCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SetPresenceCallbackInfoInternal, SetPresenceCompleteCallback, SetPresenceCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public sealed class PresenceModification : Handle
{
	public const int PresencemodificationDatarecordidApiLatest = 1;

	public const int PresencemodificationDeletedataApiLatest = 1;

	public const int PresencemodificationJoininfoMaxLength = 255;

	public const int PresencemodificationSetdataApiLatest = 1;

	public const int PresencemodificationSetjoininfoApiLatest = 1;

	public const int PresencemodificationSetrawrichtextApiLatest = 1;

	public const int PresencemodificationSetstatusApiLatest = 1;

	public PresenceModification()
	{
	}

	public PresenceModification(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result DeleteData(ref PresenceModificationDeleteDataOptions options)
	{
		PresenceModificationDeleteDataOptionsInternal options2 = default(PresenceModificationDeleteDataOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_DeleteData(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_PresenceModification_Release(base.InnerHandle);
	}

	public Result SetData(ref PresenceModificationSetDataOptions options)
	{
		PresenceModificationSetDataOptionsInternal options2 = default(PresenceModificationSetDataOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetData(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetJoinInfo(ref PresenceModificationSetJoinInfoOptions options)
	{
		PresenceModificationSetJoinInfoOptionsInternal options2 = default(PresenceModificationSetJoinInfoOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetJoinInfo(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetRawRichText(ref PresenceModificationSetRawRichTextOptions options)
	{
		PresenceModificationSetRawRichTextOptionsInternal options2 = default(PresenceModificationSetRawRichTextOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetRawRichText(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetStatus(ref PresenceModificationSetStatusOptions options)
	{
		PresenceModificationSetStatusOptionsInternal options2 = default(PresenceModificationSetStatusOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_PresenceModification_SetStatus(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct PresenceModificationDataRecordId
{
	public Utf8String Key { get; set; }

	internal void Set(ref PresenceModificationDataRecordIdInternal other)
	{
		Key = other.Key;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceModificationDataRecordIdInternal : IGettable<PresenceModificationDataRecordId>, ISettable<PresenceModificationDataRecordId>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public Utf8String Key
	{
		get
		{
			Helper.Get(m_Key, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public void Set(ref PresenceModificationDataRecordId other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
	}

	public void Set(ref PresenceModificationDataRecordId? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}

	public void Get(out PresenceModificationDataRecordId output)
	{
		output = default(PresenceModificationDataRecordId);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Presence;

public struct PresenceModificationDeleteDataOptions
{
	public PresenceModificationDataRecordId[] Records { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceModificationDeleteDataOptionsInternal : ISettable<PresenceModificationDeleteDataOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_RecordsCount;

	private IntPtr m_Records;

	public PresenceModificationDataRecordId[] Records
	{
		set
		{
			Helper.Set<PresenceModificationDataRecordId, PresenceModificationDataRecordIdInternal>(ref value, ref m_Records, out m_RecordsCount);
		}
	}

	public void Set(ref PresenceModificationDeleteDataOptions other)
	{
		m_ApiVersion = 1;
		Records = other.Records;
	}

	public void Set(ref PresenceModificationDeleteDataOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Records = other.Value.Records;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Records);
	}
}


using Epic.OnlineServices.Presence;

public struct PresenceModificationSetDataOptions
{
	public DataRecord[] Records { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceModificationSetDataOptionsInternal : ISettable<PresenceModificationSetDataOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_RecordsCount;

	private IntPtr m_Records;

	public DataRecord[] Records
	{
		set
		{
			Helper.Set<DataRecord, DataRecordInternal>(ref value, ref m_Records, out m_RecordsCount);
		}
	}

	public void Set(ref PresenceModificationSetDataOptions other)
	{
		m_ApiVersion = 1;
		Records = other.Records;
	}

	public void Set(ref PresenceModificationSetDataOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Records = other.Value.Records;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Records);
	}
}


using Epic.OnlineServices;

public struct PresenceModificationSetJoinInfoOptions
{
	public Utf8String JoinInfo { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceModificationSetJoinInfoOptionsInternal : ISettable<PresenceModificationSetJoinInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_JoinInfo;

	public Utf8String JoinInfo
	{
		set
		{
			Helper.Set(value, ref m_JoinInfo);
		}
	}

	public void Set(ref PresenceModificationSetJoinInfoOptions other)
	{
		m_ApiVersion = 1;
		JoinInfo = other.JoinInfo;
	}

	public void Set(ref PresenceModificationSetJoinInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			JoinInfo = other.Value.JoinInfo;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_JoinInfo);
	}
}


using Epic.OnlineServices;

public struct PresenceModificationSetRawRichTextOptions
{
	public Utf8String RichText { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceModificationSetRawRichTextOptionsInternal : ISettable<PresenceModificationSetRawRichTextOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RichText;

	public Utf8String RichText
	{
		set
		{
			Helper.Set(value, ref m_RichText);
		}
	}

	public void Set(ref PresenceModificationSetRawRichTextOptions other)
	{
		m_ApiVersion = 1;
		RichText = other.RichText;
	}

	public void Set(ref PresenceModificationSetRawRichTextOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			RichText = other.Value.RichText;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RichText);
	}
}


using Epic.OnlineServices.Presence;

public struct PresenceModificationSetStatusOptions
{
	public Status Status { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PresenceModificationSetStatusOptionsInternal : ISettable<PresenceModificationSetStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private Status m_Status;

	public Status Status
	{
		set
		{
			m_Status = value;
		}
	}

	public void Set(ref PresenceModificationSetStatusOptions other)
	{
		m_ApiVersion = 1;
		Status = other.Status;
	}

	public void Set(ref PresenceModificationSetStatusOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Status = other.Value.Status;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct QueryPresenceCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryPresenceCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryPresenceCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryPresenceCallbackInfo>, ISettable<QueryPresenceCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref QueryPresenceCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref QueryPresenceCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out QueryPresenceCallbackInfo output)
	{
		output = default(QueryPresenceCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryPresenceOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryPresenceOptionsInternal : ISettable<QueryPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref QueryPresenceOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref QueryPresenceOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct SetPresenceCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SetPresenceCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetPresenceCallbackInfoInternal : ICallbackInfoInternal, IGettable<SetPresenceCallbackInfo>, ISettable<SetPresenceCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref SetPresenceCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref SetPresenceCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out SetPresenceCallbackInfo output)
	{
		output = default(SetPresenceCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Presence;

public delegate void SetPresenceCompleteCallback(ref SetPresenceCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Presence;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void SetPresenceCompleteCallbackInternal(ref SetPresenceCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

public struct SetPresenceOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public PresenceModification PresenceModificationHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Presence;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetPresenceOptionsInternal : ISettable<SetPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_PresenceModificationHandle;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public PresenceModification PresenceModificationHandle
	{
		set
		{
			Helper.Set(value, ref m_PresenceModificationHandle);
		}
	}

	public void Set(ref SetPresenceOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		PresenceModificationHandle = other.PresenceModificationHandle;
	}

	public void Set(ref SetPresenceOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			PresenceModificationHandle = other.Value.PresenceModificationHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PresenceModificationHandle);
	}
}


public enum Status
{
	Offline,
	Online,
	Away,
	ExtendedAway,
	DoNotDisturb
}


using Epic.OnlineServices;

public struct CopyFileMetadataAtIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyFileMetadataAtIndexOptionsInternal : ISettable<CopyFileMetadataAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref CopyFileMetadataAtIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref CopyFileMetadataAtIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyFileMetadataByFilenameOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyFileMetadataByFilenameOptionsInternal : ISettable<CopyFileMetadataByFilenameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref CopyFileMetadataByFilenameOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref CopyFileMetadataByFilenameOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct DeleteCacheCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DeleteCacheCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteCacheCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteCacheCallbackInfo>, ISettable<DeleteCacheCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DeleteCacheCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DeleteCacheCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out DeleteCacheCallbackInfo output)
	{
		output = default(DeleteCacheCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DeleteCacheOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteCacheOptionsInternal : ISettable<DeleteCacheOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DeleteCacheOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DeleteCacheOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct DeleteFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DeleteFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteFileCallbackInfo>, ISettable<DeleteFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DeleteFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DeleteFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out DeleteFileCallbackInfo output)
	{
		output = default(DeleteFileCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DeleteFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteFileOptionsInternal : ISettable<DeleteFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref DeleteFileOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref DeleteFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct DuplicateFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DuplicateFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DuplicateFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<DuplicateFileCallbackInfo>, ISettable<DuplicateFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DuplicateFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DuplicateFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out DuplicateFileCallbackInfo output)
	{
		output = default(DuplicateFileCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DuplicateFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String SourceFilename { get; set; }

	public Utf8String DestinationFilename { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DuplicateFileOptionsInternal : ISettable<DuplicateFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SourceFilename;

	private IntPtr m_DestinationFilename;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String SourceFilename
	{
		set
		{
			Helper.Set(value, ref m_SourceFilename);
		}
	}

	public Utf8String DestinationFilename
	{
		set
		{
			Helper.Set(value, ref m_DestinationFilename);
		}
	}

	public void Set(ref DuplicateFileOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SourceFilename = other.SourceFilename;
		DestinationFilename = other.DestinationFilename;
	}

	public void Set(ref DuplicateFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SourceFilename = other.Value.SourceFilename;
			DestinationFilename = other.Value.DestinationFilename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SourceFilename);
		Helper.Dispose(ref m_DestinationFilename);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct FileMetadata
{
	public uint FileSizeBytes { get; set; }

	public Utf8String MD5Hash { get; set; }

	public Utf8String Filename { get; set; }

	public DateTimeOffset? LastModifiedTime { get; set; }

	public uint UnencryptedDataSizeBytes { get; set; }

	internal void Set(ref FileMetadataInternal other)
	{
		FileSizeBytes = other.FileSizeBytes;
		MD5Hash = other.MD5Hash;
		Filename = other.Filename;
		LastModifiedTime = other.LastModifiedTime;
		UnencryptedDataSizeBytes = other.UnencryptedDataSizeBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct FileMetadataInternal : IGettable<FileMetadata>, ISettable<FileMetadata>, IDisposable
{
	private int m_ApiVersion;

	private uint m_FileSizeBytes;

	private IntPtr m_MD5Hash;

	private IntPtr m_Filename;

	private long m_LastModifiedTime;

	private uint m_UnencryptedDataSizeBytes;

	public uint FileSizeBytes
	{
		get
		{
			return m_FileSizeBytes;
		}
		set
		{
			m_FileSizeBytes = value;
		}
	}

	public Utf8String MD5Hash
	{
		get
		{
			Helper.Get(m_MD5Hash, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_MD5Hash);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public DateTimeOffset? LastModifiedTime
	{
		get
		{
			Helper.Get(m_LastModifiedTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LastModifiedTime);
		}
	}

	public uint UnencryptedDataSizeBytes
	{
		get
		{
			return m_UnencryptedDataSizeBytes;
		}
		set
		{
			m_UnencryptedDataSizeBytes = value;
		}
	}

	public void Set(ref FileMetadata other)
	{
		m_ApiVersion = 3;
		FileSizeBytes = other.FileSizeBytes;
		MD5Hash = other.MD5Hash;
		Filename = other.Filename;
		LastModifiedTime = other.LastModifiedTime;
		UnencryptedDataSizeBytes = other.UnencryptedDataSizeBytes;
	}

	public void Set(ref FileMetadata? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			FileSizeBytes = other.Value.FileSizeBytes;
			MD5Hash = other.Value.MD5Hash;
			Filename = other.Value.Filename;
			LastModifiedTime = other.Value.LastModifiedTime;
			UnencryptedDataSizeBytes = other.Value.UnencryptedDataSizeBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_MD5Hash);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out FileMetadata output)
	{
		output = default(FileMetadata);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct FileTransferProgressCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint BytesTransferred { get; set; }

	public uint TotalFileSizeBytes { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref FileTransferProgressCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		BytesTransferred = other.BytesTransferred;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct FileTransferProgressCallbackInfoInternal : ICallbackInfoInternal, IGettable<FileTransferProgressCallbackInfo>, ISettable<FileTransferProgressCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_BytesTransferred;

	private uint m_TotalFileSizeBytes;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint BytesTransferred
	{
		get
		{
			return m_BytesTransferred;
		}
		set
		{
			m_BytesTransferred = value;
		}
	}

	public uint TotalFileSizeBytes
	{
		get
		{
			return m_TotalFileSizeBytes;
		}
		set
		{
			m_TotalFileSizeBytes = value;
		}
	}

	public void Set(ref FileTransferProgressCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		BytesTransferred = other.BytesTransferred;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
	}

	public void Set(ref FileTransferProgressCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			BytesTransferred = other.Value.BytesTransferred;
			TotalFileSizeBytes = other.Value.TotalFileSizeBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out FileTransferProgressCallbackInfo output)
	{
		output = default(FileTransferProgressCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetFileMetadataCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetFileMetadataCountOptionsInternal : ISettable<GetFileMetadataCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetFileMetadataCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetFileMetadataCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnDeleteCacheCompleteCallback(ref DeleteCacheCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteCacheCompleteCallbackInternal(ref DeleteCacheCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnDeleteFileCompleteCallback(ref DeleteFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteFileCompleteCallbackInternal(ref DeleteFileCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnDuplicateFileCompleteCallback(ref DuplicateFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDuplicateFileCompleteCallbackInternal(ref DuplicateFileCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnFileTransferProgressCallback(ref FileTransferProgressCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnFileTransferProgressCallbackInternal(ref FileTransferProgressCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnQueryFileCompleteCallback(ref QueryFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFileCompleteCallbackInternal(ref QueryFileCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnQueryFileListCompleteCallback(ref QueryFileListCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFileListCompleteCallbackInternal(ref QueryFileListCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnReadFileCompleteCallback(ref ReadFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnReadFileCompleteCallbackInternal(ref ReadFileCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate ReadResult OnReadFileDataCallback(ref ReadFileDataCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate ReadResult OnReadFileDataCallbackInternal(ref ReadFileDataCallbackInfoInternal data);


using Epic.OnlineServices.PlayerDataStorage;

public delegate void OnWriteFileCompleteCallback(ref WriteFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnWriteFileCompleteCallbackInternal(ref WriteFileCallbackInfoInternal data);


using System;
using Epic.OnlineServices.PlayerDataStorage;

public delegate WriteResult OnWriteFileDataCallback(ref WriteFileDataCallbackInfo data, out ArraySegment<byte> outDataBuffer);


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices.PlayerDataStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate WriteResult OnWriteFileDataCallbackInternal(ref WriteFileDataCallbackInfoInternal data, IntPtr outDataBuffer, ref uint outDataWritten);


using System;
using Epic.OnlineServices;

public sealed class PlayerDataStorageFileTransferRequest : Handle
{
	public PlayerDataStorageFileTransferRequest()
	{
	}

	public PlayerDataStorageFileTransferRequest(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CancelRequest()
	{
		return Bindings.EOS_PlayerDataStorageFileTransferRequest_CancelRequest(base.InnerHandle);
	}

	public Result GetFileRequestState()
	{
		return Bindings.EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState(base.InnerHandle);
	}

	public Result GetFilename(out Utf8String outStringBuffer)
	{
		int outStringLength = 64;
		IntPtr value = Helper.AddAllocation(outStringLength);
		Result result = Bindings.EOS_PlayerDataStorageFileTransferRequest_GetFilename(base.InnerHandle, (uint)outStringLength, value, ref outStringLength);
		Helper.Get(value, out outStringBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_PlayerDataStorageFileTransferRequest_Release(base.InnerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public sealed class PlayerDataStorageInterface : Handle
{
	public const int CopyfilemetadataatindexApiLatest = 1;

	public const int CopyfilemetadataatindexoptionsApiLatest = 1;

	public const int CopyfilemetadatabyfilenameApiLatest = 1;

	public const int CopyfilemetadatabyfilenameoptionsApiLatest = 1;

	public const int DeletecacheApiLatest = 1;

	public const int DeletecacheoptionsApiLatest = 1;

	public const int DeletefileApiLatest = 1;

	public const int DeletefileoptionsApiLatest = 1;

	public const int DuplicatefileApiLatest = 1;

	public const int DuplicatefileoptionsApiLatest = 1;

	public const int FilemetadataApiLatest = 3;

	public const int FilenameMaxLengthBytes = 64;

	public const int GetfilemetadatacountApiLatest = 1;

	public const int GetfilemetadatacountoptionsApiLatest = 1;

	public const int QueryfileApiLatest = 1;

	public const int QueryfilelistApiLatest = 2;

	public const int QueryfilelistoptionsApiLatest = 2;

	public const int QueryfileoptionsApiLatest = 1;

	public const int ReadfileApiLatest = 2;

	public const int ReadfileoptionsApiLatest = 2;

	public const int TimeUndefined = -1;

	public const int WritefileApiLatest = 2;

	public const int WritefileoptionsApiLatest = 2;

	public PlayerDataStorageInterface()
	{
	}

	public PlayerDataStorageInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyFileMetadataAtIndex(ref CopyFileMetadataAtIndexOptions copyFileMetadataOptions, out FileMetadata? outMetadata)
	{
		CopyFileMetadataAtIndexOptionsInternal copyFileMetadataOptions2 = default(CopyFileMetadataAtIndexOptionsInternal);
		copyFileMetadataOptions2.Set(ref copyFileMetadataOptions);
		IntPtr outMetadata2 = IntPtr.Zero;
		Result result = Bindings.EOS_PlayerDataStorage_CopyFileMetadataAtIndex(base.InnerHandle, ref copyFileMetadataOptions2, ref outMetadata2);
		Helper.Dispose(ref copyFileMetadataOptions2);
		Helper.Get<FileMetadataInternal, FileMetadata>(outMetadata2, out outMetadata);
		if (outMetadata.HasValue)
		{
			Bindings.EOS_PlayerDataStorage_FileMetadata_Release(outMetadata2);
		}
		return result;
	}

	public Result CopyFileMetadataByFilename(ref CopyFileMetadataByFilenameOptions copyFileMetadataOptions, out FileMetadata? outMetadata)
	{
		CopyFileMetadataByFilenameOptionsInternal copyFileMetadataOptions2 = default(CopyFileMetadataByFilenameOptionsInternal);
		copyFileMetadataOptions2.Set(ref copyFileMetadataOptions);
		IntPtr outMetadata2 = IntPtr.Zero;
		Result result = Bindings.EOS_PlayerDataStorage_CopyFileMetadataByFilename(base.InnerHandle, ref copyFileMetadataOptions2, ref outMetadata2);
		Helper.Dispose(ref copyFileMetadataOptions2);
		Helper.Get<FileMetadataInternal, FileMetadata>(outMetadata2, out outMetadata);
		if (outMetadata.HasValue)
		{
			Bindings.EOS_PlayerDataStorage_FileMetadata_Release(outMetadata2);
		}
		return result;
	}

	public Result DeleteCache(ref DeleteCacheOptions options, object clientData, OnDeleteCacheCompleteCallback completionCallback)
	{
		DeleteCacheOptionsInternal options2 = default(DeleteCacheOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDeleteCacheCompleteCallbackInternal onDeleteCacheCompleteCallbackInternal = OnDeleteCacheCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onDeleteCacheCompleteCallbackInternal);
		Result result = Bindings.EOS_PlayerDataStorage_DeleteCache(base.InnerHandle, ref options2, clientDataAddress, onDeleteCacheCompleteCallbackInternal);
		Helper.Dispose(ref options2);
		return result;
	}

	public void DeleteFile(ref DeleteFileOptions deleteOptions, object clientData, OnDeleteFileCompleteCallback completionCallback)
	{
		DeleteFileOptionsInternal deleteOptions2 = default(DeleteFileOptionsInternal);
		deleteOptions2.Set(ref deleteOptions);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDeleteFileCompleteCallbackInternal onDeleteFileCompleteCallbackInternal = OnDeleteFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onDeleteFileCompleteCallbackInternal);
		Bindings.EOS_PlayerDataStorage_DeleteFile(base.InnerHandle, ref deleteOptions2, clientDataAddress, onDeleteFileCompleteCallbackInternal);
		Helper.Dispose(ref deleteOptions2);
	}

	public void DuplicateFile(ref DuplicateFileOptions duplicateOptions, object clientData, OnDuplicateFileCompleteCallback completionCallback)
	{
		DuplicateFileOptionsInternal duplicateOptions2 = default(DuplicateFileOptionsInternal);
		duplicateOptions2.Set(ref duplicateOptions);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDuplicateFileCompleteCallbackInternal onDuplicateFileCompleteCallbackInternal = OnDuplicateFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onDuplicateFileCompleteCallbackInternal);
		Bindings.EOS_PlayerDataStorage_DuplicateFile(base.InnerHandle, ref duplicateOptions2, clientDataAddress, onDuplicateFileCompleteCallbackInternal);
		Helper.Dispose(ref duplicateOptions2);
	}

	public Result GetFileMetadataCount(ref GetFileMetadataCountOptions getFileMetadataCountOptions, out int outFileMetadataCount)
	{
		GetFileMetadataCountOptionsInternal getFileMetadataCountOptions2 = default(GetFileMetadataCountOptionsInternal);
		getFileMetadataCountOptions2.Set(ref getFileMetadataCountOptions);
		outFileMetadataCount = Helper.GetDefault<int>();
		Result result = Bindings.EOS_PlayerDataStorage_GetFileMetadataCount(base.InnerHandle, ref getFileMetadataCountOptions2, ref outFileMetadataCount);
		Helper.Dispose(ref getFileMetadataCountOptions2);
		return result;
	}

	public void QueryFile(ref QueryFileOptions queryFileOptions, object clientData, OnQueryFileCompleteCallback completionCallback)
	{
		QueryFileOptionsInternal queryFileOptions2 = default(QueryFileOptionsInternal);
		queryFileOptions2.Set(ref queryFileOptions);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryFileCompleteCallbackInternal onQueryFileCompleteCallbackInternal = OnQueryFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onQueryFileCompleteCallbackInternal);
		Bindings.EOS_PlayerDataStorage_QueryFile(base.InnerHandle, ref queryFileOptions2, clientDataAddress, onQueryFileCompleteCallbackInternal);
		Helper.Dispose(ref queryFileOptions2);
	}

	public void QueryFileList(ref QueryFileListOptions queryFileListOptions, object clientData, OnQueryFileListCompleteCallback completionCallback)
	{
		QueryFileListOptionsInternal queryFileListOptions2 = default(QueryFileListOptionsInternal);
		queryFileListOptions2.Set(ref queryFileListOptions);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryFileListCompleteCallbackInternal onQueryFileListCompleteCallbackInternal = OnQueryFileListCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onQueryFileListCompleteCallbackInternal);
		Bindings.EOS_PlayerDataStorage_QueryFileList(base.InnerHandle, ref queryFileListOptions2, clientDataAddress, onQueryFileListCompleteCallbackInternal);
		Helper.Dispose(ref queryFileListOptions2);
	}

	public PlayerDataStorageFileTransferRequest ReadFile(ref ReadFileOptions readOptions, object clientData, OnReadFileCompleteCallback completionCallback)
	{
		ReadFileOptionsInternal readOptions2 = default(ReadFileOptionsInternal);
		readOptions2.Set(ref readOptions);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnReadFileCompleteCallbackInternal onReadFileCompleteCallbackInternal = OnReadFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onReadFileCompleteCallbackInternal, readOptions.ReadFileDataCallback, ReadFileOptionsInternal.ReadFileDataCallback, readOptions.FileTransferProgressCallback, ReadFileOptionsInternal.FileTransferProgressCallback);
		IntPtr from = Bindings.EOS_PlayerDataStorage_ReadFile(base.InnerHandle, ref readOptions2, clientDataAddress, onReadFileCompleteCallbackInternal);
		Helper.Dispose(ref readOptions2);
		Helper.Get(from, out PlayerDataStorageFileTransferRequest to);
		return to;
	}

	public PlayerDataStorageFileTransferRequest WriteFile(ref WriteFileOptions writeOptions, object clientData, OnWriteFileCompleteCallback completionCallback)
	{
		WriteFileOptionsInternal writeOptions2 = default(WriteFileOptionsInternal);
		writeOptions2.Set(ref writeOptions);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnWriteFileCompleteCallbackInternal onWriteFileCompleteCallbackInternal = OnWriteFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onWriteFileCompleteCallbackInternal, writeOptions.WriteFileDataCallback, WriteFileOptionsInternal.WriteFileDataCallback, writeOptions.FileTransferProgressCallback, WriteFileOptionsInternal.FileTransferProgressCallback);
		IntPtr from = Bindings.EOS_PlayerDataStorage_WriteFile(base.InnerHandle, ref writeOptions2, clientDataAddress, onWriteFileCompleteCallbackInternal);
		Helper.Dispose(ref writeOptions2);
		Helper.Get(from, out PlayerDataStorageFileTransferRequest to);
		return to;
	}

	[MonoPInvokeCallback(typeof(OnDeleteCacheCompleteCallbackInternal))]
	internal static void OnDeleteCacheCompleteCallbackInternalImplementation(ref DeleteCacheCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteCacheCallbackInfoInternal, OnDeleteCacheCompleteCallback, DeleteCacheCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnDeleteFileCompleteCallbackInternal))]
	internal static void OnDeleteFileCompleteCallbackInternalImplementation(ref DeleteFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteFileCallbackInfoInternal, OnDeleteFileCompleteCallback, DeleteFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnDuplicateFileCompleteCallbackInternal))]
	internal static void OnDuplicateFileCompleteCallbackInternalImplementation(ref DuplicateFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DuplicateFileCallbackInfoInternal, OnDuplicateFileCompleteCallback, DuplicateFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnFileTransferProgressCallbackInternal))]
	internal static void OnFileTransferProgressCallbackInternalImplementation(ref FileTransferProgressCallbackInfoInternal data)
	{
		if (Helper.TryGetStructCallback<FileTransferProgressCallbackInfoInternal, OnFileTransferProgressCallback, FileTransferProgressCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFileCompleteCallbackInternal))]
	internal static void OnQueryFileCompleteCallbackInternalImplementation(ref QueryFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFileCallbackInfoInternal, OnQueryFileCompleteCallback, QueryFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFileListCompleteCallbackInternal))]
	internal static void OnQueryFileListCompleteCallbackInternalImplementation(ref QueryFileListCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFileListCallbackInfoInternal, OnQueryFileListCompleteCallback, QueryFileListCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnReadFileCompleteCallbackInternal))]
	internal static void OnReadFileCompleteCallbackInternalImplementation(ref ReadFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<ReadFileCallbackInfoInternal, OnReadFileCompleteCallback, ReadFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnReadFileDataCallbackInternal))]
	internal static ReadResult OnReadFileDataCallbackInternalImplementation(ref ReadFileDataCallbackInfoInternal data)
	{
		if (Helper.TryGetStructCallback<ReadFileDataCallbackInfoInternal, OnReadFileDataCallback, ReadFileDataCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			return callback(ref callbackInfo);
		}
		return Helper.GetDefault<ReadResult>();
	}

	[MonoPInvokeCallback(typeof(OnWriteFileCompleteCallbackInternal))]
	internal static void OnWriteFileCompleteCallbackInternalImplementation(ref WriteFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<WriteFileCallbackInfoInternal, OnWriteFileCompleteCallback, WriteFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnWriteFileDataCallbackInternal))]
	internal static WriteResult OnWriteFileDataCallbackInternalImplementation(ref WriteFileDataCallbackInfoInternal data, IntPtr outDataBuffer, ref uint outDataWritten)
	{
		if (Helper.TryGetStructCallback<WriteFileDataCallbackInfoInternal, OnWriteFileDataCallback, WriteFileDataCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			ArraySegment<byte> outDataBuffer2;
			WriteResult result = callback(ref callbackInfo, out outDataBuffer2);
			Helper.Get(outDataBuffer2, out outDataWritten);
			Helper.Copy(outDataBuffer2, outDataBuffer);
			return result;
		}
		return Helper.GetDefault<WriteResult>();
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct QueryFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFileCallbackInfo>, ISettable<QueryFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryFileCallbackInfo output)
	{
		output = default(QueryFileCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct QueryFileListCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public uint FileCount { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryFileListCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		FileCount = other.FileCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileListCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFileListCallbackInfo>, ISettable<QueryFileListCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private uint m_FileCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint FileCount
	{
		get
		{
			return m_FileCount;
		}
		set
		{
			m_FileCount = value;
		}
	}

	public void Set(ref QueryFileListCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		FileCount = other.FileCount;
	}

	public void Set(ref QueryFileListCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			FileCount = other.Value.FileCount;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryFileListCallbackInfo output)
	{
		output = default(QueryFileListCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryFileListOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileListOptionsInternal : ISettable<QueryFileListOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryFileListOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryFileListOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct QueryFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileOptionsInternal : ISettable<QueryFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref QueryFileOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref QueryFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct ReadFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref ReadFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReadFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileCallbackInfo>, ISettable<ReadFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref ReadFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref ReadFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out ReadFileCallbackInfo output)
	{
		output = default(ReadFileCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct ReadFileDataCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint TotalFileSizeBytes { get; set; }

	public bool IsLastChunk { get; set; }

	public ArraySegment<byte> DataChunk { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref ReadFileDataCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
		IsLastChunk = other.IsLastChunk;
		DataChunk = other.DataChunk;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReadFileDataCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileDataCallbackInfo>, ISettable<ReadFileDataCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_TotalFileSizeBytes;

	private int m_IsLastChunk;

	private uint m_DataChunkLengthBytes;

	private IntPtr m_DataChunk;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint TotalFileSizeBytes
	{
		get
		{
			return m_TotalFileSizeBytes;
		}
		set
		{
			m_TotalFileSizeBytes = value;
		}
	}

	public bool IsLastChunk
	{
		get
		{
			Helper.Get(m_IsLastChunk, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsLastChunk);
		}
	}

	public ArraySegment<byte> DataChunk
	{
		get
		{
			Helper.Get(m_DataChunk, out var to, m_DataChunkLengthBytes);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DataChunk, out m_DataChunkLengthBytes);
		}
	}

	public void Set(ref ReadFileDataCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
		IsLastChunk = other.IsLastChunk;
		DataChunk = other.DataChunk;
	}

	public void Set(ref ReadFileDataCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			TotalFileSizeBytes = other.Value.TotalFileSizeBytes;
			IsLastChunk = other.Value.IsLastChunk;
			DataChunk = other.Value.DataChunk;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
		Helper.Dispose(ref m_DataChunk);
	}

	public void Get(out ReadFileDataCallbackInfo output)
	{
		output = default(ReadFileDataCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct ReadFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint ReadChunkLengthBytes { get; set; }

	public OnReadFileDataCallback ReadFileDataCallback { get; set; }

	public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReadFileOptionsInternal : ISettable<ReadFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_ReadChunkLengthBytes;

	private IntPtr m_ReadFileDataCallback;

	private IntPtr m_FileTransferProgressCallback;

	private static OnReadFileDataCallbackInternal s_ReadFileDataCallback;

	private static OnFileTransferProgressCallbackInternal s_FileTransferProgressCallback;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint ReadChunkLengthBytes
	{
		set
		{
			m_ReadChunkLengthBytes = value;
		}
	}

	public static OnReadFileDataCallbackInternal ReadFileDataCallback
	{
		get
		{
			if (s_ReadFileDataCallback == null)
			{
				s_ReadFileDataCallback = PlayerDataStorageInterface.OnReadFileDataCallbackInternalImplementation;
			}
			return s_ReadFileDataCallback;
		}
	}

	public static OnFileTransferProgressCallbackInternal FileTransferProgressCallback
	{
		get
		{
			if (s_FileTransferProgressCallback == null)
			{
				s_FileTransferProgressCallback = PlayerDataStorageInterface.OnFileTransferProgressCallbackInternalImplementation;
			}
			return s_FileTransferProgressCallback;
		}
	}

	public void Set(ref ReadFileOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		ReadChunkLengthBytes = other.ReadChunkLengthBytes;
		m_ReadFileDataCallback = ((other.ReadFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(ReadFileDataCallback) : IntPtr.Zero);
		m_FileTransferProgressCallback = ((other.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(FileTransferProgressCallback) : IntPtr.Zero);
	}

	public void Set(ref ReadFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			ReadChunkLengthBytes = other.Value.ReadChunkLengthBytes;
			m_ReadFileDataCallback = ((other.Value.ReadFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(ReadFileDataCallback) : IntPtr.Zero);
			m_FileTransferProgressCallback = ((other.Value.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(FileTransferProgressCallback) : IntPtr.Zero);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
		Helper.Dispose(ref m_ReadFileDataCallback);
		Helper.Dispose(ref m_FileTransferProgressCallback);
	}
}


public enum ReadResult
{
	ContinueReading = 1,
	FailRequest,
	CancelRequest
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct WriteFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref WriteFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct WriteFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<WriteFileCallbackInfo>, ISettable<WriteFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref WriteFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref WriteFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out WriteFileCallbackInfo output)
	{
		output = default(WriteFileCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct WriteFileDataCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint DataBufferLengthBytes { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref WriteFileDataCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		DataBufferLengthBytes = other.DataBufferLengthBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct WriteFileDataCallbackInfoInternal : ICallbackInfoInternal, IGettable<WriteFileDataCallbackInfo>, ISettable<WriteFileDataCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_DataBufferLengthBytes;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint DataBufferLengthBytes
	{
		get
		{
			return m_DataBufferLengthBytes;
		}
		set
		{
			m_DataBufferLengthBytes = value;
		}
	}

	public void Set(ref WriteFileDataCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		DataBufferLengthBytes = other.DataBufferLengthBytes;
	}

	public void Set(ref WriteFileDataCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			DataBufferLengthBytes = other.Value.DataBufferLengthBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out WriteFileDataCallbackInfo output)
	{
		output = default(WriteFileDataCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

public struct WriteFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint ChunkLengthBytes { get; set; }

	public OnWriteFileDataCallback WriteFileDataCallback { get; set; }

	public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.PlayerDataStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct WriteFileOptionsInternal : ISettable<WriteFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_ChunkLengthBytes;

	private IntPtr m_WriteFileDataCallback;

	private IntPtr m_FileTransferProgressCallback;

	private static OnWriteFileDataCallbackInternal s_WriteFileDataCallback;

	private static OnFileTransferProgressCallbackInternal s_FileTransferProgressCallback;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint ChunkLengthBytes
	{
		set
		{
			m_ChunkLengthBytes = value;
		}
	}

	public static OnWriteFileDataCallbackInternal WriteFileDataCallback
	{
		get
		{
			if (s_WriteFileDataCallback == null)
			{
				s_WriteFileDataCallback = PlayerDataStorageInterface.OnWriteFileDataCallbackInternalImplementation;
			}
			return s_WriteFileDataCallback;
		}
	}

	public static OnFileTransferProgressCallbackInternal FileTransferProgressCallback
	{
		get
		{
			if (s_FileTransferProgressCallback == null)
			{
				s_FileTransferProgressCallback = PlayerDataStorageInterface.OnFileTransferProgressCallbackInternalImplementation;
			}
			return s_FileTransferProgressCallback;
		}
	}

	public void Set(ref WriteFileOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		ChunkLengthBytes = other.ChunkLengthBytes;
		m_WriteFileDataCallback = ((other.WriteFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(WriteFileDataCallback) : IntPtr.Zero);
		m_FileTransferProgressCallback = ((other.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(FileTransferProgressCallback) : IntPtr.Zero);
	}

	public void Set(ref WriteFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			ChunkLengthBytes = other.Value.ChunkLengthBytes;
			m_WriteFileDataCallback = ((other.Value.WriteFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(WriteFileDataCallback) : IntPtr.Zero);
			m_FileTransferProgressCallback = ((other.Value.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(FileTransferProgressCallback) : IntPtr.Zero);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
		Helper.Dispose(ref m_WriteFileDataCallback);
		Helper.Dispose(ref m_FileTransferProgressCallback);
	}
}


public enum WriteResult
{
	ContinueWriting = 1,
	CompleteRequest,
	FailRequest,
	CancelRequest
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AcceptConnectionOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AcceptConnectionOptionsInternal : ISettable<AcceptConnectionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref AcceptConnectionOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref AcceptConnectionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyIncomingPacketQueueFullOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyIncomingPacketQueueFullOptionsInternal : ISettable<AddNotifyIncomingPacketQueueFullOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyIncomingPacketQueueFullOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyIncomingPacketQueueFullOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionClosedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPeerConnectionClosedOptionsInternal : ISettable<AddNotifyPeerConnectionClosedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref AddNotifyPeerConnectionClosedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref AddNotifyPeerConnectionClosedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionEstablishedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPeerConnectionEstablishedOptionsInternal : ISettable<AddNotifyPeerConnectionEstablishedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref AddNotifyPeerConnectionEstablishedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref AddNotifyPeerConnectionEstablishedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionInterruptedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPeerConnectionInterruptedOptionsInternal : ISettable<AddNotifyPeerConnectionInterruptedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref AddNotifyPeerConnectionInterruptedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref AddNotifyPeerConnectionInterruptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct AddNotifyPeerConnectionRequestOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPeerConnectionRequestOptionsInternal : ISettable<AddNotifyPeerConnectionRequestOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref AddNotifyPeerConnectionRequestOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref AddNotifyPeerConnectionRequestOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct ClearPacketQueueOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ClearPacketQueueOptionsInternal : ISettable<ClearPacketQueueOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref ClearPacketQueueOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref ClearPacketQueueOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct CloseConnectionOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CloseConnectionOptionsInternal : ISettable<CloseConnectionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref CloseConnectionOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref CloseConnectionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct CloseConnectionsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SocketId? SocketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CloseConnectionsOptionsInternal : ISettable<CloseConnectionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SocketId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SocketId? SocketId
	{
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref CloseConnectionsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref CloseConnectionsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SocketId);
	}
}


public enum ConnectionClosedReason
{
	Unknown,
	ClosedByLocalUser,
	ClosedByPeer,
	TimedOut,
	TooManyConnections,
	InvalidMessage,
	InvalidData,
	ConnectionFailed,
	ConnectionClosed,
	NegotiationFailed,
	UnexpectedError,
	ConnectionIgnored
}


public enum ConnectionEstablishedType
{
	NewConnection,
	Reconnection
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetNATTypeOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetNATTypeOptionsInternal : ISettable<GetNATTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetNATTypeOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetNATTypeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetPacketQueueInfoOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetPacketQueueInfoOptionsInternal : ISettable<GetPacketQueueInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetPacketQueueInfoOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetPacketQueueInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetPortRangeOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetPortRangeOptionsInternal : ISettable<GetPortRangeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetPortRangeOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetPortRangeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetRelayControlOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetRelayControlOptionsInternal : ISettable<GetRelayControlOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetRelayControlOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetRelayControlOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public enum NATType
{
	Unknown,
	Open,
	Moderate,
	Strict
}


public enum NetworkConnectionType
{
	NoConnection,
	DirectConnection,
	RelayedConnection
}


using Epic.OnlineServices.P2P;

public delegate void OnIncomingConnectionRequestCallback(ref OnIncomingConnectionRequestInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnIncomingConnectionRequestCallbackInternal(ref OnIncomingConnectionRequestInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnIncomingConnectionRequestInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnIncomingConnectionRequestInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnIncomingConnectionRequestInfoInternal : ICallbackInfoInternal, IGettable<OnIncomingConnectionRequestInfo>, ISettable<OnIncomingConnectionRequestInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		get
		{
			Helper.Get(m_RemoteUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		get
		{
			Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to);
			return to;
		}
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref OnIncomingConnectionRequestInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref OnIncomingConnectionRequestInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}

	public void Get(out OnIncomingConnectionRequestInfo output)
	{
		output = default(OnIncomingConnectionRequestInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnIncomingPacketQueueFullCallback(ref OnIncomingPacketQueueFullInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnIncomingPacketQueueFullCallbackInternal(ref OnIncomingPacketQueueFullInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnIncomingPacketQueueFullInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong PacketQueueMaxSizeBytes { get; set; }

	public ulong PacketQueueCurrentSizeBytes { get; set; }

	public ProductUserId OverflowPacketLocalUserId { get; set; }

	public byte OverflowPacketChannel { get; set; }

	public uint OverflowPacketSizeBytes { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnIncomingPacketQueueFullInfoInternal other)
	{
		ClientData = other.ClientData;
		PacketQueueMaxSizeBytes = other.PacketQueueMaxSizeBytes;
		PacketQueueCurrentSizeBytes = other.PacketQueueCurrentSizeBytes;
		OverflowPacketLocalUserId = other.OverflowPacketLocalUserId;
		OverflowPacketChannel = other.OverflowPacketChannel;
		OverflowPacketSizeBytes = other.OverflowPacketSizeBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnIncomingPacketQueueFullInfoInternal : ICallbackInfoInternal, IGettable<OnIncomingPacketQueueFullInfo>, ISettable<OnIncomingPacketQueueFullInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private ulong m_PacketQueueMaxSizeBytes;

	private ulong m_PacketQueueCurrentSizeBytes;

	private IntPtr m_OverflowPacketLocalUserId;

	private byte m_OverflowPacketChannel;

	private uint m_OverflowPacketSizeBytes;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ulong PacketQueueMaxSizeBytes
	{
		get
		{
			return m_PacketQueueMaxSizeBytes;
		}
		set
		{
			m_PacketQueueMaxSizeBytes = value;
		}
	}

	public ulong PacketQueueCurrentSizeBytes
	{
		get
		{
			return m_PacketQueueCurrentSizeBytes;
		}
		set
		{
			m_PacketQueueCurrentSizeBytes = value;
		}
	}

	public ProductUserId OverflowPacketLocalUserId
	{
		get
		{
			Helper.Get(m_OverflowPacketLocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OverflowPacketLocalUserId);
		}
	}

	public byte OverflowPacketChannel
	{
		get
		{
			return m_OverflowPacketChannel;
		}
		set
		{
			m_OverflowPacketChannel = value;
		}
	}

	public uint OverflowPacketSizeBytes
	{
		get
		{
			return m_OverflowPacketSizeBytes;
		}
		set
		{
			m_OverflowPacketSizeBytes = value;
		}
	}

	public void Set(ref OnIncomingPacketQueueFullInfo other)
	{
		ClientData = other.ClientData;
		PacketQueueMaxSizeBytes = other.PacketQueueMaxSizeBytes;
		PacketQueueCurrentSizeBytes = other.PacketQueueCurrentSizeBytes;
		OverflowPacketLocalUserId = other.OverflowPacketLocalUserId;
		OverflowPacketChannel = other.OverflowPacketChannel;
		OverflowPacketSizeBytes = other.OverflowPacketSizeBytes;
	}

	public void Set(ref OnIncomingPacketQueueFullInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			PacketQueueMaxSizeBytes = other.Value.PacketQueueMaxSizeBytes;
			PacketQueueCurrentSizeBytes = other.Value.PacketQueueCurrentSizeBytes;
			OverflowPacketLocalUserId = other.Value.OverflowPacketLocalUserId;
			OverflowPacketChannel = other.Value.OverflowPacketChannel;
			OverflowPacketSizeBytes = other.Value.OverflowPacketSizeBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_OverflowPacketLocalUserId);
	}

	public void Get(out OnIncomingPacketQueueFullInfo output)
	{
		output = default(OnIncomingPacketQueueFullInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnPeerConnectionEstablishedCallback(ref OnPeerConnectionEstablishedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerConnectionEstablishedCallbackInternal(ref OnPeerConnectionEstablishedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnPeerConnectionEstablishedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public ConnectionEstablishedType ConnectionType { get; set; }

	public NetworkConnectionType NetworkType { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnPeerConnectionEstablishedInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
		ConnectionType = other.ConnectionType;
		NetworkType = other.NetworkType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnPeerConnectionEstablishedInfoInternal : ICallbackInfoInternal, IGettable<OnPeerConnectionEstablishedInfo>, ISettable<OnPeerConnectionEstablishedInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	private ConnectionEstablishedType m_ConnectionType;

	private NetworkConnectionType m_NetworkType;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		get
		{
			Helper.Get(m_RemoteUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		get
		{
			Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to);
			return to;
		}
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public ConnectionEstablishedType ConnectionType
	{
		get
		{
			return m_ConnectionType;
		}
		set
		{
			m_ConnectionType = value;
		}
	}

	public NetworkConnectionType NetworkType
	{
		get
		{
			return m_NetworkType;
		}
		set
		{
			m_NetworkType = value;
		}
	}

	public void Set(ref OnPeerConnectionEstablishedInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
		ConnectionType = other.ConnectionType;
		NetworkType = other.NetworkType;
	}

	public void Set(ref OnPeerConnectionEstablishedInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
			ConnectionType = other.Value.ConnectionType;
			NetworkType = other.Value.NetworkType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}

	public void Get(out OnPeerConnectionEstablishedInfo output)
	{
		output = default(OnPeerConnectionEstablishedInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnPeerConnectionInterruptedCallback(ref OnPeerConnectionInterruptedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerConnectionInterruptedCallbackInternal(ref OnPeerConnectionInterruptedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnPeerConnectionInterruptedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnPeerConnectionInterruptedInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnPeerConnectionInterruptedInfoInternal : ICallbackInfoInternal, IGettable<OnPeerConnectionInterruptedInfo>, ISettable<OnPeerConnectionInterruptedInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		get
		{
			Helper.Get(m_RemoteUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		get
		{
			Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to);
			return to;
		}
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public void Set(ref OnPeerConnectionInterruptedInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
	}

	public void Set(ref OnPeerConnectionInterruptedInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}

	public void Get(out OnPeerConnectionInterruptedInfo output)
	{
		output = default(OnPeerConnectionInterruptedInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnQueryNATTypeCompleteCallback(ref OnQueryNATTypeCompleteInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryNATTypeCompleteCallbackInternal(ref OnQueryNATTypeCompleteInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnQueryNATTypeCompleteInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public NATType NATType { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryNATTypeCompleteInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		NATType = other.NATType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryNATTypeCompleteInfoInternal : ICallbackInfoInternal, IGettable<OnQueryNATTypeCompleteInfo>, ISettable<OnQueryNATTypeCompleteInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private NATType m_NATType;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public NATType NATType
	{
		get
		{
			return m_NATType;
		}
		set
		{
			m_NATType = value;
		}
	}

	public void Set(ref OnQueryNATTypeCompleteInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		NATType = other.NATType;
	}

	public void Set(ref OnQueryNATTypeCompleteInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			NATType = other.Value.NATType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnQueryNATTypeCompleteInfo output)
	{
		output = default(OnQueryNATTypeCompleteInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.P2P;

public delegate void OnRemoteConnectionClosedCallback(ref OnRemoteConnectionClosedInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.P2P;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRemoteConnectionClosedCallbackInternal(ref OnRemoteConnectionClosedInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct OnRemoteConnectionClosedInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public ConnectionClosedReason Reason { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnRemoteConnectionClosedInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
		Reason = other.Reason;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnRemoteConnectionClosedInfoInternal : ICallbackInfoInternal, IGettable<OnRemoteConnectionClosedInfo>, ISettable<OnRemoteConnectionClosedInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	private IntPtr m_SocketId;

	private ConnectionClosedReason m_Reason;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		get
		{
			Helper.Get(m_RemoteUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public SocketId? SocketId
	{
		get
		{
			Helper.Get<SocketIdInternal, SocketId>(m_SocketId, out SocketId? to);
			return to;
		}
		set
		{
			Helper.Set<SocketId, SocketIdInternal>(ref value, ref m_SocketId);
		}
	}

	public ConnectionClosedReason Reason
	{
		get
		{
			return m_Reason;
		}
		set
		{
			m_Reason = value;
		}
	}

	public void Set(ref OnRemoteConnectionClosedInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		SocketId = other.SocketId;
		Reason = other.Reason;
	}

	public void Set(ref OnRemoteConnectionClosedInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			SocketId = other.Value.SocketId;
			Reason = other.Value.Reason;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
	}

	public void Get(out OnRemoteConnectionClosedInfo output)
	{
		output = default(OnRemoteConnectionClosedInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public sealed class P2PInterface : Handle
{
	public const int AcceptconnectionApiLatest = 1;

	public const int AddnotifyincomingpacketqueuefullApiLatest = 1;

	public const int AddnotifypeerconnectionclosedApiLatest = 1;

	public const int AddnotifypeerconnectionestablishedApiLatest = 1;

	public const int AddnotifypeerconnectioninterruptedApiLatest = 1;

	public const int AddnotifypeerconnectionrequestApiLatest = 1;

	public const int ClearpacketqueueApiLatest = 1;

	public const int CloseconnectionApiLatest = 1;

	public const int CloseconnectionsApiLatest = 1;

	public const int GetnattypeApiLatest = 1;

	public const int GetnextreceivedpacketsizeApiLatest = 2;

	public const int GetpacketqueueinfoApiLatest = 1;

	public const int GetportrangeApiLatest = 1;

	public const int GetrelaycontrolApiLatest = 1;

	public const int MaxConnections = 32;

	public const int MaxPacketSize = 1170;

	public const int MaxQueueSizeUnlimited = 0;

	public const int QuerynattypeApiLatest = 1;

	public const int ReceivepacketApiLatest = 2;

	public const int SendpacketApiLatest = 3;

	public const int SetpacketqueuesizeApiLatest = 1;

	public const int SetportrangeApiLatest = 1;

	public const int SetrelaycontrolApiLatest = 1;

	public const int SocketidApiLatest = 1;

	public const int SocketidSocketnameSize = 33;

	public P2PInterface()
	{
	}

	public P2PInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AcceptConnection(ref AcceptConnectionOptions options)
	{
		AcceptConnectionOptionsInternal options2 = default(AcceptConnectionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_AcceptConnection(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ulong AddNotifyIncomingPacketQueueFull(ref AddNotifyIncomingPacketQueueFullOptions options, object clientData, OnIncomingPacketQueueFullCallback incomingPacketQueueFullHandler)
	{
		AddNotifyIncomingPacketQueueFullOptionsInternal options2 = default(AddNotifyIncomingPacketQueueFullOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnIncomingPacketQueueFullCallbackInternal onIncomingPacketQueueFullCallbackInternal = OnIncomingPacketQueueFullCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, incomingPacketQueueFullHandler, onIncomingPacketQueueFullCallbackInternal);
		ulong num = Bindings.EOS_P2P_AddNotifyIncomingPacketQueueFull(base.InnerHandle, ref options2, clientDataAddress, onIncomingPacketQueueFullCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionClosed(ref AddNotifyPeerConnectionClosedOptions options, object clientData, OnRemoteConnectionClosedCallback connectionClosedHandler)
	{
		AddNotifyPeerConnectionClosedOptionsInternal options2 = default(AddNotifyPeerConnectionClosedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRemoteConnectionClosedCallbackInternal onRemoteConnectionClosedCallbackInternal = OnRemoteConnectionClosedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, connectionClosedHandler, onRemoteConnectionClosedCallbackInternal);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionClosed(base.InnerHandle, ref options2, clientDataAddress, onRemoteConnectionClosedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionEstablished(ref AddNotifyPeerConnectionEstablishedOptions options, object clientData, OnPeerConnectionEstablishedCallback connectionEstablishedHandler)
	{
		AddNotifyPeerConnectionEstablishedOptionsInternal options2 = default(AddNotifyPeerConnectionEstablishedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPeerConnectionEstablishedCallbackInternal onPeerConnectionEstablishedCallbackInternal = OnPeerConnectionEstablishedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, connectionEstablishedHandler, onPeerConnectionEstablishedCallbackInternal);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionEstablished(base.InnerHandle, ref options2, clientDataAddress, onPeerConnectionEstablishedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionInterrupted(ref AddNotifyPeerConnectionInterruptedOptions options, object clientData, OnPeerConnectionInterruptedCallback connectionInterruptedHandler)
	{
		AddNotifyPeerConnectionInterruptedOptionsInternal options2 = default(AddNotifyPeerConnectionInterruptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPeerConnectionInterruptedCallbackInternal onPeerConnectionInterruptedCallbackInternal = OnPeerConnectionInterruptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, connectionInterruptedHandler, onPeerConnectionInterruptedCallbackInternal);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionInterrupted(base.InnerHandle, ref options2, clientDataAddress, onPeerConnectionInterruptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyPeerConnectionRequest(ref AddNotifyPeerConnectionRequestOptions options, object clientData, OnIncomingConnectionRequestCallback connectionRequestHandler)
	{
		AddNotifyPeerConnectionRequestOptionsInternal options2 = default(AddNotifyPeerConnectionRequestOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnIncomingConnectionRequestCallbackInternal onIncomingConnectionRequestCallbackInternal = OnIncomingConnectionRequestCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, connectionRequestHandler, onIncomingConnectionRequestCallbackInternal);
		ulong num = Bindings.EOS_P2P_AddNotifyPeerConnectionRequest(base.InnerHandle, ref options2, clientDataAddress, onIncomingConnectionRequestCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result ClearPacketQueue(ref ClearPacketQueueOptions options)
	{
		ClearPacketQueueOptionsInternal options2 = default(ClearPacketQueueOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_ClearPacketQueue(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result CloseConnection(ref CloseConnectionOptions options)
	{
		CloseConnectionOptionsInternal options2 = default(CloseConnectionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_CloseConnection(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result CloseConnections(ref CloseConnectionsOptions options)
	{
		CloseConnectionsOptionsInternal options2 = default(CloseConnectionsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_CloseConnections(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetNATType(ref GetNATTypeOptions options, out NATType outNATType)
	{
		GetNATTypeOptionsInternal options2 = default(GetNATTypeOptionsInternal);
		options2.Set(ref options);
		outNATType = Helper.GetDefault<NATType>();
		Result result = Bindings.EOS_P2P_GetNATType(base.InnerHandle, ref options2, ref outNATType);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetNextReceivedPacketSize(ref GetNextReceivedPacketSizeOptions options, out uint outPacketSizeBytes)
	{
		GetNextReceivedPacketSizeOptionsInternal options2 = default(GetNextReceivedPacketSizeOptionsInternal);
		options2.Set(ref options);
		outPacketSizeBytes = Helper.GetDefault<uint>();
		Result result = Bindings.EOS_P2P_GetNextReceivedPacketSize(base.InnerHandle, ref options2, ref outPacketSizeBytes);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetPacketQueueInfo(ref GetPacketQueueInfoOptions options, out PacketQueueInfo outPacketQueueInfo)
	{
		GetPacketQueueInfoOptionsInternal options2 = default(GetPacketQueueInfoOptionsInternal);
		options2.Set(ref options);
		PacketQueueInfoInternal outPacketQueueInfo2 = Helper.GetDefault<PacketQueueInfoInternal>();
		Result result = Bindings.EOS_P2P_GetPacketQueueInfo(base.InnerHandle, ref options2, ref outPacketQueueInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<PacketQueueInfoInternal, PacketQueueInfo>(ref outPacketQueueInfo2, out outPacketQueueInfo);
		return result;
	}

	public Result GetPortRange(ref GetPortRangeOptions options, out ushort outPort, out ushort outNumAdditionalPortsToTry)
	{
		GetPortRangeOptionsInternal options2 = default(GetPortRangeOptionsInternal);
		options2.Set(ref options);
		outPort = Helper.GetDefault<ushort>();
		outNumAdditionalPortsToTry = Helper.GetDefault<ushort>();
		Result result = Bindings.EOS_P2P_GetPortRange(base.InnerHandle, ref options2, ref outPort, ref outNumAdditionalPortsToTry);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetRelayControl(ref GetRelayControlOptions options, out RelayControl outRelayControl)
	{
		GetRelayControlOptionsInternal options2 = default(GetRelayControlOptionsInternal);
		options2.Set(ref options);
		outRelayControl = Helper.GetDefault<RelayControl>();
		Result result = Bindings.EOS_P2P_GetRelayControl(base.InnerHandle, ref options2, ref outRelayControl);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryNATType(ref QueryNATTypeOptions options, object clientData, OnQueryNATTypeCompleteCallback completionDelegate)
	{
		QueryNATTypeOptionsInternal options2 = default(QueryNATTypeOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryNATTypeCompleteCallbackInternal onQueryNATTypeCompleteCallbackInternal = OnQueryNATTypeCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryNATTypeCompleteCallbackInternal);
		Bindings.EOS_P2P_QueryNATType(base.InnerHandle, ref options2, clientDataAddress, onQueryNATTypeCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyIncomingPacketQueueFull(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyIncomingPacketQueueFull(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionClosed(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionClosed(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionEstablished(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionEstablished(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionInterrupted(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionInterrupted(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerConnectionRequest(ulong notificationId)
	{
		Bindings.EOS_P2P_RemoveNotifyPeerConnectionRequest(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SendPacket(ref SendPacketOptions options)
	{
		SendPacketOptionsInternal options2 = default(SendPacketOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SendPacket(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPacketQueueSize(ref SetPacketQueueSizeOptions options)
	{
		SetPacketQueueSizeOptionsInternal options2 = default(SetPacketQueueSizeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SetPacketQueueSize(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPortRange(ref SetPortRangeOptions options)
	{
		SetPortRangeOptionsInternal options2 = default(SetPortRangeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SetPortRange(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetRelayControl(ref SetRelayControlOptions options)
	{
		SetRelayControlOptionsInternal options2 = default(SetRelayControlOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_P2P_SetRelayControl(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnIncomingConnectionRequestCallbackInternal))]
	internal static void OnIncomingConnectionRequestCallbackInternalImplementation(ref OnIncomingConnectionRequestInfoInternal data)
	{
		if (Helper.TryGetCallback<OnIncomingConnectionRequestInfoInternal, OnIncomingConnectionRequestCallback, OnIncomingConnectionRequestInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnIncomingPacketQueueFullCallbackInternal))]
	internal static void OnIncomingPacketQueueFullCallbackInternalImplementation(ref OnIncomingPacketQueueFullInfoInternal data)
	{
		if (Helper.TryGetCallback<OnIncomingPacketQueueFullInfoInternal, OnIncomingPacketQueueFullCallback, OnIncomingPacketQueueFullInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerConnectionEstablishedCallbackInternal))]
	internal static void OnPeerConnectionEstablishedCallbackInternalImplementation(ref OnPeerConnectionEstablishedInfoInternal data)
	{
		if (Helper.TryGetCallback<OnPeerConnectionEstablishedInfoInternal, OnPeerConnectionEstablishedCallback, OnPeerConnectionEstablishedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerConnectionInterruptedCallbackInternal))]
	internal static void OnPeerConnectionInterruptedCallbackInternalImplementation(ref OnPeerConnectionInterruptedInfoInternal data)
	{
		if (Helper.TryGetCallback<OnPeerConnectionInterruptedInfoInternal, OnPeerConnectionInterruptedCallback, OnPeerConnectionInterruptedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryNATTypeCompleteCallbackInternal))]
	internal static void OnQueryNATTypeCompleteCallbackInternalImplementation(ref OnQueryNATTypeCompleteInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryNATTypeCompleteInfoInternal, OnQueryNATTypeCompleteCallback, OnQueryNATTypeCompleteInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRemoteConnectionClosedCallbackInternal))]
	internal static void OnRemoteConnectionClosedCallbackInternalImplementation(ref OnRemoteConnectionClosedInfoInternal data)
	{
		if (Helper.TryGetCallback<OnRemoteConnectionClosedInfoInternal, OnRemoteConnectionClosedCallback, OnRemoteConnectionClosedInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	public Result ReceivePacket(ref ReceivePacketOptions options, ref ProductUserId outPeerId, ref SocketId outSocketId, out byte outChannel, ArraySegment<byte> outData, out uint outBytesWritten)
	{
		bool wasCacheValid = outSocketId.PrepareForUpdate();
		IntPtr value = Helper.AddPinnedBuffer(outSocketId.m_AllBytes);
		IntPtr value2 = Helper.AddPinnedBuffer(outData);
		ReceivePacketOptionsInternal options2 = new ReceivePacketOptionsInternal(ref options);
		try
		{
			IntPtr outPeerId2 = IntPtr.Zero;
			outChannel = Helper.GetDefault<byte>();
			outBytesWritten = 0u;
			Result result = Bindings.EOS_P2P_ReceivePacket(base.InnerHandle, ref options2, ref outPeerId2, value, ref outChannel, value2, ref outBytesWritten);
			if (outPeerId == null)
			{
				Helper.Get(outPeerId2, out outPeerId);
			}
			else if (outPeerId.InnerHandle != outPeerId2)
			{
				outPeerId.InnerHandle = outPeerId2;
			}
			outSocketId.CheckIfChanged(wasCacheValid);
			return result;
		}
		finally
		{
			Helper.Dispose(ref value);
			Helper.Dispose(ref value2);
			options2.Dispose();
		}
	}
}


using Epic.OnlineServices.P2P;

public struct PacketQueueInfo
{
	public ulong IncomingPacketQueueMaxSizeBytes { get; set; }

	public ulong IncomingPacketQueueCurrentSizeBytes { get; set; }

	public ulong IncomingPacketQueueCurrentPacketCount { get; set; }

	public ulong OutgoingPacketQueueMaxSizeBytes { get; set; }

	public ulong OutgoingPacketQueueCurrentSizeBytes { get; set; }

	public ulong OutgoingPacketQueueCurrentPacketCount { get; set; }

	internal void Set(ref PacketQueueInfoInternal other)
	{
		IncomingPacketQueueMaxSizeBytes = other.IncomingPacketQueueMaxSizeBytes;
		IncomingPacketQueueCurrentSizeBytes = other.IncomingPacketQueueCurrentSizeBytes;
		IncomingPacketQueueCurrentPacketCount = other.IncomingPacketQueueCurrentPacketCount;
		OutgoingPacketQueueMaxSizeBytes = other.OutgoingPacketQueueMaxSizeBytes;
		OutgoingPacketQueueCurrentSizeBytes = other.OutgoingPacketQueueCurrentSizeBytes;
		OutgoingPacketQueueCurrentPacketCount = other.OutgoingPacketQueueCurrentPacketCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PacketQueueInfoInternal : IGettable<PacketQueueInfo>, ISettable<PacketQueueInfo>, IDisposable
{
	private ulong m_IncomingPacketQueueMaxSizeBytes;

	private ulong m_IncomingPacketQueueCurrentSizeBytes;

	private ulong m_IncomingPacketQueueCurrentPacketCount;

	private ulong m_OutgoingPacketQueueMaxSizeBytes;

	private ulong m_OutgoingPacketQueueCurrentSizeBytes;

	private ulong m_OutgoingPacketQueueCurrentPacketCount;

	public ulong IncomingPacketQueueMaxSizeBytes
	{
		get
		{
			return m_IncomingPacketQueueMaxSizeBytes;
		}
		set
		{
			m_IncomingPacketQueueMaxSizeBytes = value;
		}
	}

	public ulong IncomingPacketQueueCurrentSizeBytes
	{
		get
		{
			return m_IncomingPacketQueueCurrentSizeBytes;
		}
		set
		{
			m_IncomingPacketQueueCurrentSizeBytes = value;
		}
	}

	public ulong IncomingPacketQueueCurrentPacketCount
	{
		get
		{
			return m_IncomingPacketQueueCurrentPacketCount;
		}
		set
		{
			m_IncomingPacketQueueCurrentPacketCount = value;
		}
	}

	public ulong OutgoingPacketQueueMaxSizeBytes
	{
		get
		{
			return m_OutgoingPacketQueueMaxSizeBytes;
		}
		set
		{
			m_OutgoingPacketQueueMaxSizeBytes = value;
		}
	}

	public ulong OutgoingPacketQueueCurrentSizeBytes
	{
		get
		{
			return m_OutgoingPacketQueueCurrentSizeBytes;
		}
		set
		{
			m_OutgoingPacketQueueCurrentSizeBytes = value;
		}
	}

	public ulong OutgoingPacketQueueCurrentPacketCount
	{
		get
		{
			return m_OutgoingPacketQueueCurrentPacketCount;
		}
		set
		{
			m_OutgoingPacketQueueCurrentPacketCount = value;
		}
	}

	public void Set(ref PacketQueueInfo other)
	{
		IncomingPacketQueueMaxSizeBytes = other.IncomingPacketQueueMaxSizeBytes;
		IncomingPacketQueueCurrentSizeBytes = other.IncomingPacketQueueCurrentSizeBytes;
		IncomingPacketQueueCurrentPacketCount = other.IncomingPacketQueueCurrentPacketCount;
		OutgoingPacketQueueMaxSizeBytes = other.OutgoingPacketQueueMaxSizeBytes;
		OutgoingPacketQueueCurrentSizeBytes = other.OutgoingPacketQueueCurrentSizeBytes;
		OutgoingPacketQueueCurrentPacketCount = other.OutgoingPacketQueueCurrentPacketCount;
	}

	public void Set(ref PacketQueueInfo? other)
	{
		if (other.HasValue)
		{
			IncomingPacketQueueMaxSizeBytes = other.Value.IncomingPacketQueueMaxSizeBytes;
			IncomingPacketQueueCurrentSizeBytes = other.Value.IncomingPacketQueueCurrentSizeBytes;
			IncomingPacketQueueCurrentPacketCount = other.Value.IncomingPacketQueueCurrentPacketCount;
			OutgoingPacketQueueMaxSizeBytes = other.Value.OutgoingPacketQueueMaxSizeBytes;
			OutgoingPacketQueueCurrentSizeBytes = other.Value.OutgoingPacketQueueCurrentSizeBytes;
			OutgoingPacketQueueCurrentPacketCount = other.Value.OutgoingPacketQueueCurrentPacketCount;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out PacketQueueInfo output)
	{
		output = default(PacketQueueInfo);
		output.Set(ref this);
	}
}


public enum PacketReliability
{
	UnreliableUnordered,
	ReliableUnordered,
	ReliableOrdered
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct QueryNATTypeOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryNATTypeOptionsInternal : ISettable<QueryNATTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref QueryNATTypeOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref QueryNATTypeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public enum RelayControl
{
	NoRelays,
	AllowRelays,
	ForceRelays
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

public struct SendPacketOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId RemoteUserId { get; set; }

	public SocketId? SocketId { get; set; }

	public byte Channel { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public bool AllowDelayedDelivery { get; set; }

	public PacketReliability Reliability { get; set; }

	public bool DisableAutoAcceptConnection { get; set; }
}


public struct SetPacketQueueSizeOptions
{
	public ulong IncomingPacketQueueMaxSizeBytes { get; set; }

	public ulong OutgoingPacketQueueMaxSizeBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetPacketQueueSizeOptionsInternal : ISettable<SetPacketQueueSizeOptions>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_IncomingPacketQueueMaxSizeBytes;

	private ulong m_OutgoingPacketQueueMaxSizeBytes;

	public ulong IncomingPacketQueueMaxSizeBytes
	{
		set
		{
			m_IncomingPacketQueueMaxSizeBytes = value;
		}
	}

	public ulong OutgoingPacketQueueMaxSizeBytes
	{
		set
		{
			m_OutgoingPacketQueueMaxSizeBytes = value;
		}
	}

	public void Set(ref SetPacketQueueSizeOptions other)
	{
		m_ApiVersion = 1;
		IncomingPacketQueueMaxSizeBytes = other.IncomingPacketQueueMaxSizeBytes;
		OutgoingPacketQueueMaxSizeBytes = other.OutgoingPacketQueueMaxSizeBytes;
	}

	public void Set(ref SetPacketQueueSizeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			IncomingPacketQueueMaxSizeBytes = other.Value.IncomingPacketQueueMaxSizeBytes;
			OutgoingPacketQueueMaxSizeBytes = other.Value.OutgoingPacketQueueMaxSizeBytes;
		}
	}

	public void Dispose()
	{
	}
}


public struct SetPortRangeOptions
{
	public ushort Port { get; set; }

	public ushort MaxAdditionalPortsToTry { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetPortRangeOptionsInternal : ISettable<SetPortRangeOptions>, IDisposable
{
	private int m_ApiVersion;

	private ushort m_Port;

	private ushort m_MaxAdditionalPortsToTry;

	public ushort Port
	{
		set
		{
			m_Port = value;
		}
	}

	public ushort MaxAdditionalPortsToTry
	{
		set
		{
			m_MaxAdditionalPortsToTry = value;
		}
	}

	public void Set(ref SetPortRangeOptions other)
	{
		m_ApiVersion = 1;
		Port = other.Port;
		MaxAdditionalPortsToTry = other.MaxAdditionalPortsToTry;
	}

	public void Set(ref SetPortRangeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Port = other.Value.Port;
			MaxAdditionalPortsToTry = other.Value.MaxAdditionalPortsToTry;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.P2P;

public struct SetRelayControlOptions
{
	public RelayControl RelayControl { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetRelayControlOptionsInternal : ISettable<SetRelayControlOptions>, IDisposable
{
	private int m_ApiVersion;

	private RelayControl m_RelayControl;

	public RelayControl RelayControl
	{
		set
		{
			m_RelayControl = value;
		}
	}

	public void Set(ref SetRelayControlOptions other)
	{
		m_ApiVersion = 1;
		RelayControl = other.RelayControl;
	}

	public void Set(ref SetRelayControlOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			RelayControl = other.Value.RelayControl;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SocketIdInternal : IGettable<SocketId>, ISettable<SocketId>, IDisposable
{
	private int m_ApiVersion;

	[MarshalAs(UnmanagedType.ByValArray, SizeConst = 33)]
	private byte[] m_SocketName;

	public string SocketName
	{
		get
		{
			Helper.Get(m_SocketName, out string to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SocketName, 33);
		}
	}

	public void Set(ref SocketId other)
	{
		m_ApiVersion = 1;
		SocketName = other.SocketName;
	}

	public void Set(ref SocketId? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SocketName = other.Value.SocketName;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out SocketId output)
	{
		output = default(SocketId);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetNextReceivedPacketSizeOptions
{
	internal byte[] m_RequestedChannel;

	public ProductUserId LocalUserId { get; set; }

	public byte? RequestedChannel
	{
		get
		{
			if (m_RequestedChannel == null)
			{
				return null;
			}
			return m_RequestedChannel[0];
		}
		set
		{
			if (value.HasValue)
			{
				if (m_RequestedChannel == null)
				{
					m_RequestedChannel = new byte[1];
				}
				m_RequestedChannel[0] = value.Value;
			}
			else
			{
				m_RequestedChannel = null;
			}
		}
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetNextReceivedPacketSizeOptionsInternal : ISettable<GetNextReceivedPacketSizeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RequestedChannel;

	public void Set(ref GetNextReceivedPacketSizeOptions other)
	{
		m_ApiVersion = 2;
		m_LocalUserId = other.LocalUserId.InnerHandle;
		m_RequestedChannel = IntPtr.Zero;
		if (other.RequestedChannel.HasValue)
		{
			m_RequestedChannel = Helper.AddPinnedBuffer(other.m_RequestedChannel);
		}
	}

	public void Set(ref GetNextReceivedPacketSizeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			m_LocalUserId = other.Value.LocalUserId.InnerHandle;
			m_RequestedChannel = IntPtr.Zero;
			if (other.Value.RequestedChannel.HasValue)
			{
				m_RequestedChannel = Helper.AddPinnedBuffer(other.Value.m_RequestedChannel);
			}
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RequestedChannel);
	}
}


using System.Runtime.InteropServices;
using Epic.OnlineServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
public struct ReceivePacketOptions
{
	internal byte[] m_RequestedChannel;

	public ProductUserId LocalUserId { get; set; }

	public uint MaxDataSizeBytes { get; set; }

	public byte? RequestedChannel
	{
		get
		{
			if (m_RequestedChannel == null)
			{
				return null;
			}
			return m_RequestedChannel[0];
		}
		set
		{
			if (value.HasValue)
			{
				if (m_RequestedChannel == null)
				{
					m_RequestedChannel = new byte[1];
				}
				m_RequestedChannel[0] = value.Value;
			}
			else
			{
				m_RequestedChannel = null;
			}
		}
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReceivePacketOptionsInternal : IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_MaxDataSizeBytes;

	public IntPtr m_RequestedChannel;

	public ReceivePacketOptionsInternal(ref ReceivePacketOptions other)
	{
		m_ApiVersion = 2;
		m_RequestedChannel = IntPtr.Zero;
		if (other.RequestedChannel.HasValue)
		{
			m_RequestedChannel = Helper.AddPinnedBuffer(other.m_RequestedChannel);
		}
		m_LocalUserId = other.LocalUserId.InnerHandle;
		m_MaxDataSizeBytes = other.MaxDataSizeBytes;
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RequestedChannel);
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.P2P;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendPacketOptionsInternal : ISettable<SendPacketOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RemoteUserId;

	internal IntPtr m_SocketId;

	private byte m_Channel;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	private int m_AllowDelayedDelivery;

	private PacketReliability m_Reliability;

	private int m_DisableAutoAcceptConnection;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId RemoteUserId
	{
		set
		{
			Helper.Set(value, ref m_RemoteUserId);
		}
	}

	public byte Channel
	{
		set
		{
			m_Channel = value;
		}
	}

	public ArraySegment<byte> Data
	{
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public bool AllowDelayedDelivery
	{
		set
		{
			Helper.Set(value, ref m_AllowDelayedDelivery);
		}
	}

	public PacketReliability Reliability
	{
		set
		{
			m_Reliability = value;
		}
	}

	public bool DisableAutoAcceptConnection
	{
		set
		{
			Helper.Set(value, ref m_DisableAutoAcceptConnection);
		}
	}

	public void Set(ref SendPacketOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		RemoteUserId = other.RemoteUserId;
		m_SocketId = IntPtr.Zero;
		if (other.SocketId.HasValue)
		{
			m_SocketId = Helper.AddPinnedBuffer(other.SocketId.Value.m_AllBytes);
		}
		Channel = other.Channel;
		Data = other.Data;
		AllowDelayedDelivery = other.AllowDelayedDelivery;
		Reliability = other.Reliability;
		DisableAutoAcceptConnection = other.DisableAutoAcceptConnection;
	}

	public void Set(ref SendPacketOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			RemoteUserId = other.Value.RemoteUserId;
			m_SocketId = IntPtr.Zero;
			if (other.Value.SocketId.HasValue)
			{
				m_SocketId = Helper.AddPinnedBuffer(other.Value.SocketId.Value.m_AllBytes);
			}
			Channel = other.Value.Channel;
			Data = other.Value.Data;
			AllowDelayedDelivery = other.Value.AllowDelayedDelivery;
			Reliability = other.Value.Reliability;
			DisableAutoAcceptConnection = other.Value.DisableAutoAcceptConnection;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RemoteUserId);
		Helper.Dispose(ref m_SocketId);
		Helper.Dispose(ref m_Data);
	}
}


using System;
using System.Text;
using Epic.OnlineServices.P2P;

public struct SocketId
{
	public static readonly SocketId Empty;

	private const int MaxSocketNameLength = 32;

	private const int ApiVersionLength = 4;

	private const int NullTerminatorSpace = 1;

	private const int TotalSizeInBytes = 37;

	private bool m_CacheValid;

	private string m_CachedSocketName;

	internal byte[] m_AllBytes;

	internal byte[] m_SwapBuffer;

	public string SocketName
	{
		get
		{
			if (m_CacheValid)
			{
				return m_CachedSocketName;
			}
			if (m_AllBytes == null)
			{
				return null;
			}
			RebuildStringFromBuffer();
			return m_CachedSocketName;
		}
		set
		{
			m_CachedSocketName = value;
			if (value == null)
			{
				m_CacheValid = true;
				return;
			}
			EnsureStorage();
			int num = Math.Min(32, value.Length);
			Encoding.ASCII.GetBytes(value, 0, num, m_AllBytes, 4);
			m_AllBytes[num + 4] = 0;
			m_CacheValid = true;
		}
	}

	internal void Set(ref SocketIdInternal other)
	{
		SocketName = other.SocketName;
	}

	internal bool PrepareForUpdate()
	{
		bool cacheValid = m_CacheValid;
		m_CacheValid = false;
		EnsureStorage();
		CopyIdToSwapBuffer();
		return cacheValid;
	}

	internal void CheckIfChanged(bool wasCacheValid)
	{
		if (!wasCacheValid || m_SwapBuffer == null || m_AllBytes == null)
		{
			return;
		}
		bool flag = true;
		for (int i = 0; i < m_SwapBuffer.Length; i++)
		{
			if (m_AllBytes[4 + i] != m_SwapBuffer[i])
			{
				flag = false;
				break;
			}
		}
		if (flag)
		{
			m_CacheValid = true;
		}
	}

	private void RebuildStringFromBuffer()
	{
		EnsureStorage();
		int i;
		for (i = 4; i < m_AllBytes.Length && m_AllBytes[i] != 0; i++)
		{
		}
		m_CachedSocketName = Encoding.ASCII.GetString(m_AllBytes, 4, i - 4);
		m_CacheValid = true;
	}

	private void EnsureStorage()
	{
		if (m_AllBytes == null || m_AllBytes.Length < 37)
		{
			m_AllBytes = new byte[37];
			m_SwapBuffer = new byte[33];
			Array.Copy(BitConverter.GetBytes(1), 0, m_AllBytes, 0, 4);
		}
	}

	private void CopyIdToSwapBuffer()
	{
		Array.Copy(m_AllBytes, 4, m_SwapBuffer, 0, m_SwapBuffer.Length);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct CopyModInfoOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModEnumerationType Type { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyModInfoOptionsInternal : ISettable<CopyModInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ModEnumerationType m_Type;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ModEnumerationType Type
	{
		set
		{
			m_Type = value;
		}
	}

	public void Set(ref CopyModInfoOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Type = other.Type;
	}

	public void Set(ref CopyModInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Type = other.Value.Type;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct EnumerateModsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModEnumerationType Type { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref EnumerateModsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Type = other.Type;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EnumerateModsCallbackInfoInternal : ICallbackInfoInternal, IGettable<EnumerateModsCallbackInfo>, ISettable<EnumerateModsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private ModEnumerationType m_Type;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ModEnumerationType Type
	{
		get
		{
			return m_Type;
		}
		set
		{
			m_Type = value;
		}
	}

	public void Set(ref EnumerateModsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Type = other.Type;
	}

	public void Set(ref EnumerateModsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			LocalUserId = other.Value.LocalUserId;
			ClientData = other.Value.ClientData;
			Type = other.Value.Type;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out EnumerateModsCallbackInfo output)
	{
		output = default(EnumerateModsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct EnumerateModsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModEnumerationType Type { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EnumerateModsOptionsInternal : ISettable<EnumerateModsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ModEnumerationType m_Type;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ModEnumerationType Type
	{
		set
		{
			m_Type = value;
		}
	}

	public void Set(ref EnumerateModsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Type = other.Type;
	}

	public void Set(ref EnumerateModsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Type = other.Value.Type;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct InstallModCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModIdentifier? Mod { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref InstallModCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Mod = other.Mod;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct InstallModCallbackInfoInternal : ICallbackInfoInternal, IGettable<InstallModCallbackInfo>, ISettable<InstallModCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private IntPtr m_Mod;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ModIdentifier? Mod
	{
		get
		{
			Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out ModIdentifier? to);
			return to;
		}
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
		}
	}

	public void Set(ref InstallModCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Mod = other.Mod;
	}

	public void Set(ref InstallModCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			LocalUserId = other.Value.LocalUserId;
			ClientData = other.Value.ClientData;
			Mod = other.Value.Mod;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_Mod);
	}

	public void Get(out InstallModCallbackInfo output)
	{
		output = default(InstallModCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct InstallModOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModIdentifier? Mod { get; set; }

	public bool RemoveAfterExit { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct InstallModOptionsInternal : ISettable<InstallModOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Mod;

	private int m_RemoveAfterExit;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ModIdentifier? Mod
	{
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
		}
	}

	public bool RemoveAfterExit
	{
		set
		{
			Helper.Set(value, ref m_RemoveAfterExit);
		}
	}

	public void Set(ref InstallModOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Mod = other.Mod;
		RemoveAfterExit = other.RemoveAfterExit;
	}

	public void Set(ref InstallModOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Mod = other.Value.Mod;
			RemoveAfterExit = other.Value.RemoveAfterExit;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Mod);
	}
}


public enum ModEnumerationType
{
	Installed,
	AllAvailable
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct ModIdentifier
{
	public Utf8String NamespaceId { get; set; }

	public Utf8String ItemId { get; set; }

	public Utf8String ArtifactId { get; set; }

	public Utf8String Title { get; set; }

	public Utf8String Version { get; set; }

	internal void Set(ref ModIdentifierInternal other)
	{
		NamespaceId = other.NamespaceId;
		ItemId = other.ItemId;
		ArtifactId = other.ArtifactId;
		Title = other.Title;
		Version = other.Version;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ModIdentifierInternal : IGettable<ModIdentifier>, ISettable<ModIdentifier>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_NamespaceId;

	private IntPtr m_ItemId;

	private IntPtr m_ArtifactId;

	private IntPtr m_Title;

	private IntPtr m_Version;

	public Utf8String NamespaceId
	{
		get
		{
			Helper.Get(m_NamespaceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_NamespaceId);
		}
	}

	public Utf8String ItemId
	{
		get
		{
			Helper.Get(m_ItemId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ItemId);
		}
	}

	public Utf8String ArtifactId
	{
		get
		{
			Helper.Get(m_ArtifactId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ArtifactId);
		}
	}

	public Utf8String Title
	{
		get
		{
			Helper.Get(m_Title, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Title);
		}
	}

	public Utf8String Version
	{
		get
		{
			Helper.Get(m_Version, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Version);
		}
	}

	public void Set(ref ModIdentifier other)
	{
		m_ApiVersion = 1;
		NamespaceId = other.NamespaceId;
		ItemId = other.ItemId;
		ArtifactId = other.ArtifactId;
		Title = other.Title;
		Version = other.Version;
	}

	public void Set(ref ModIdentifier? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			NamespaceId = other.Value.NamespaceId;
			ItemId = other.Value.ItemId;
			ArtifactId = other.Value.ArtifactId;
			Title = other.Value.Title;
			Version = other.Value.Version;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_NamespaceId);
		Helper.Dispose(ref m_ItemId);
		Helper.Dispose(ref m_ArtifactId);
		Helper.Dispose(ref m_Title);
		Helper.Dispose(ref m_Version);
	}

	public void Get(out ModIdentifier output)
	{
		output = default(ModIdentifier);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Mods;

public struct ModInfo
{
	public ModIdentifier[] Mods { get; set; }

	public ModEnumerationType Type { get; set; }

	internal void Set(ref ModInfoInternal other)
	{
		Mods = other.Mods;
		Type = other.Type;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ModInfoInternal : IGettable<ModInfo>, ISettable<ModInfo>, IDisposable
{
	private int m_ApiVersion;

	private int m_ModsCount;

	private IntPtr m_Mods;

	private ModEnumerationType m_Type;

	public ModIdentifier[] Mods
	{
		get
		{
			Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mods, out var to, m_ModsCount);
			return to;
		}
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mods, out m_ModsCount);
		}
	}

	public ModEnumerationType Type
	{
		get
		{
			return m_Type;
		}
		set
		{
			m_Type = value;
		}
	}

	public void Set(ref ModInfo other)
	{
		m_ApiVersion = 1;
		Mods = other.Mods;
		Type = other.Type;
	}

	public void Set(ref ModInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Mods = other.Value.Mods;
			Type = other.Value.Type;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Mods);
	}

	public void Get(out ModInfo output)
	{
		output = default(ModInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public sealed class ModsInterface : Handle
{
	public const int CopymodinfoApiLatest = 1;

	public const int EnumeratemodsApiLatest = 1;

	public const int InstallmodApiLatest = 1;

	public const int ModIdentifierApiLatest = 1;

	public const int ModinfoApiLatest = 1;

	public const int UninstallmodApiLatest = 1;

	public const int UpdatemodApiLatest = 1;

	public ModsInterface()
	{
	}

	public ModsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyModInfo(ref CopyModInfoOptions options, out ModInfo? outEnumeratedMods)
	{
		CopyModInfoOptionsInternal options2 = default(CopyModInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outEnumeratedMods2 = IntPtr.Zero;
		Result result = Bindings.EOS_Mods_CopyModInfo(base.InnerHandle, ref options2, ref outEnumeratedMods2);
		Helper.Dispose(ref options2);
		Helper.Get<ModInfoInternal, ModInfo>(outEnumeratedMods2, out outEnumeratedMods);
		if (outEnumeratedMods.HasValue)
		{
			Bindings.EOS_Mods_ModInfo_Release(outEnumeratedMods2);
		}
		return result;
	}

	public void EnumerateMods(ref EnumerateModsOptions options, object clientData, OnEnumerateModsCallback completionDelegate)
	{
		EnumerateModsOptionsInternal options2 = default(EnumerateModsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnEnumerateModsCallbackInternal onEnumerateModsCallbackInternal = OnEnumerateModsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onEnumerateModsCallbackInternal);
		Bindings.EOS_Mods_EnumerateMods(base.InnerHandle, ref options2, clientDataAddress, onEnumerateModsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void InstallMod(ref InstallModOptions options, object clientData, OnInstallModCallback completionDelegate)
	{
		InstallModOptionsInternal options2 = default(InstallModOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnInstallModCallbackInternal onInstallModCallbackInternal = OnInstallModCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onInstallModCallbackInternal);
		Bindings.EOS_Mods_InstallMod(base.InnerHandle, ref options2, clientDataAddress, onInstallModCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UninstallMod(ref UninstallModOptions options, object clientData, OnUninstallModCallback completionDelegate)
	{
		UninstallModOptionsInternal options2 = default(UninstallModOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUninstallModCallbackInternal onUninstallModCallbackInternal = OnUninstallModCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUninstallModCallbackInternal);
		Bindings.EOS_Mods_UninstallMod(base.InnerHandle, ref options2, clientDataAddress, onUninstallModCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateMod(ref UpdateModOptions options, object clientData, OnUpdateModCallback completionDelegate)
	{
		UpdateModOptionsInternal options2 = default(UpdateModOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateModCallbackInternal onUpdateModCallbackInternal = OnUpdateModCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateModCallbackInternal);
		Bindings.EOS_Mods_UpdateMod(base.InnerHandle, ref options2, clientDataAddress, onUpdateModCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnEnumerateModsCallbackInternal))]
	internal static void OnEnumerateModsCallbackInternalImplementation(ref EnumerateModsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<EnumerateModsCallbackInfoInternal, OnEnumerateModsCallback, EnumerateModsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnInstallModCallbackInternal))]
	internal static void OnInstallModCallbackInternalImplementation(ref InstallModCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<InstallModCallbackInfoInternal, OnInstallModCallback, InstallModCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUninstallModCallbackInternal))]
	internal static void OnUninstallModCallbackInternalImplementation(ref UninstallModCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UninstallModCallbackInfoInternal, OnUninstallModCallback, UninstallModCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateModCallbackInternal))]
	internal static void OnUpdateModCallbackInternalImplementation(ref UpdateModCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateModCallbackInfoInternal, OnUpdateModCallback, UpdateModCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices.Mods;

public delegate void OnEnumerateModsCallback(ref EnumerateModsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnEnumerateModsCallbackInternal(ref EnumerateModsCallbackInfoInternal data);


using Epic.OnlineServices.Mods;

public delegate void OnInstallModCallback(ref InstallModCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnInstallModCallbackInternal(ref InstallModCallbackInfoInternal data);


using Epic.OnlineServices.Mods;

public delegate void OnUninstallModCallback(ref UninstallModCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUninstallModCallbackInternal(ref UninstallModCallbackInfoInternal data);


using Epic.OnlineServices.Mods;

public delegate void OnUpdateModCallback(ref UpdateModCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Mods;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateModCallbackInternal(ref UpdateModCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UninstallModCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModIdentifier? Mod { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UninstallModCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Mod = other.Mod;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UninstallModCallbackInfoInternal : ICallbackInfoInternal, IGettable<UninstallModCallbackInfo>, ISettable<UninstallModCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private IntPtr m_Mod;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ModIdentifier? Mod
	{
		get
		{
			Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out ModIdentifier? to);
			return to;
		}
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
		}
	}

	public void Set(ref UninstallModCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Mod = other.Mod;
	}

	public void Set(ref UninstallModCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			LocalUserId = other.Value.LocalUserId;
			ClientData = other.Value.ClientData;
			Mod = other.Value.Mod;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_Mod);
	}

	public void Get(out UninstallModCallbackInfo output)
	{
		output = default(UninstallModCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UninstallModOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModIdentifier? Mod { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UninstallModOptionsInternal : ISettable<UninstallModOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Mod;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ModIdentifier? Mod
	{
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
		}
	}

	public void Set(ref UninstallModOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Mod = other.Mod;
	}

	public void Set(ref UninstallModOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Mod = other.Value.Mod;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Mod);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UpdateModCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public object ClientData { get; set; }

	public ModIdentifier? Mod { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateModCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Mod = other.Mod;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateModCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateModCallbackInfo>, ISettable<UpdateModCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_LocalUserId;

	private IntPtr m_ClientData;

	private IntPtr m_Mod;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ModIdentifier? Mod
	{
		get
		{
			Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out ModIdentifier? to);
			return to;
		}
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
		}
	}

	public void Set(ref UpdateModCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		LocalUserId = other.LocalUserId;
		ClientData = other.ClientData;
		Mod = other.Mod;
	}

	public void Set(ref UpdateModCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			LocalUserId = other.Value.LocalUserId;
			ClientData = other.Value.ClientData;
			Mod = other.Value.Mod;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_Mod);
	}

	public void Get(out UpdateModCallbackInfo output)
	{
		output = default(UpdateModCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

public struct UpdateModOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public ModIdentifier? Mod { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Mods;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateModOptionsInternal : ISettable<UpdateModOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Mod;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ModIdentifier? Mod
	{
		set
		{
			Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
		}
	}

	public void Set(ref UpdateModOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Mod = other.Mod;
	}

	public void Set(ref UpdateModOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Mod = other.Value.Mod;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Mod);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public struct BeginPlayerSessionOptions
{
	public BeginPlayerSessionOptionsAccountId AccountId { get; set; }

	public Utf8String DisplayName { get; set; }

	public UserControllerType ControllerType { get; set; }

	public Utf8String ServerIp { get; set; }

	public Utf8String GameSessionId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BeginPlayerSessionOptionsInternal : ISettable<BeginPlayerSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private BeginPlayerSessionOptionsAccountIdInternal m_AccountId;

	private IntPtr m_DisplayName;

	private UserControllerType m_ControllerType;

	private IntPtr m_ServerIp;

	private IntPtr m_GameSessionId;

	public BeginPlayerSessionOptionsAccountId AccountId
	{
		set
		{
			Helper.Set(ref value, ref m_AccountId);
		}
	}

	public Utf8String DisplayName
	{
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public UserControllerType ControllerType
	{
		set
		{
			m_ControllerType = value;
		}
	}

	public Utf8String ServerIp
	{
		set
		{
			Helper.Set(value, ref m_ServerIp);
		}
	}

	public Utf8String GameSessionId
	{
		set
		{
			Helper.Set(value, ref m_GameSessionId);
		}
	}

	public void Set(ref BeginPlayerSessionOptions other)
	{
		m_ApiVersion = 1;
		AccountId = other.AccountId;
		DisplayName = other.DisplayName;
		ControllerType = other.ControllerType;
		ServerIp = other.ServerIp;
		GameSessionId = other.GameSessionId;
	}

	public void Set(ref BeginPlayerSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AccountId = other.Value.AccountId;
			DisplayName = other.Value.DisplayName;
			ControllerType = other.Value.ControllerType;
			ServerIp = other.Value.ServerIp;
			GameSessionId = other.Value.GameSessionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_ServerIp);
		Helper.Dispose(ref m_GameSessionId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public struct BeginPlayerSessionOptionsAccountId
{
	private MetricsAccountIdType m_AccountIdType;

	private EpicAccountId m_Epic;

	private Utf8String m_External;

	public MetricsAccountIdType AccountIdType
	{
		get
		{
			return m_AccountIdType;
		}
		private set
		{
			m_AccountIdType = value;
		}
	}

	public EpicAccountId Epic
	{
		get
		{
			Helper.Get(m_Epic, out var to, m_AccountIdType, MetricsAccountIdType.Epic);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Epic, MetricsAccountIdType.Epic, ref m_AccountIdType);
		}
	}

	public Utf8String External
	{
		get
		{
			Helper.Get(m_External, out var to, m_AccountIdType, MetricsAccountIdType.External);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_External, MetricsAccountIdType.External, ref m_AccountIdType);
		}
	}

	public static implicit operator BeginPlayerSessionOptionsAccountId(EpicAccountId value)
	{
		BeginPlayerSessionOptionsAccountId result = default(BeginPlayerSessionOptionsAccountId);
		result.Epic = value;
		return result;
	}

	public static implicit operator BeginPlayerSessionOptionsAccountId(Utf8String value)
	{
		BeginPlayerSessionOptionsAccountId result = default(BeginPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}

	public static implicit operator BeginPlayerSessionOptionsAccountId(string value)
	{
		BeginPlayerSessionOptionsAccountId result = default(BeginPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}

	internal void Set(ref BeginPlayerSessionOptionsAccountIdInternal other)
	{
		Epic = other.Epic;
		External = other.External;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

[StructLayout(LayoutKind.Explicit, Pack = 4)]
internal struct BeginPlayerSessionOptionsAccountIdInternal : IGettable<BeginPlayerSessionOptionsAccountId>, ISettable<BeginPlayerSessionOptionsAccountId>, IDisposable
{
	[FieldOffset(0)]
	private MetricsAccountIdType m_AccountIdType;

	[FieldOffset(4)]
	private IntPtr m_Epic;

	[FieldOffset(4)]
	private IntPtr m_External;

	public EpicAccountId Epic
	{
		get
		{
			Helper.Get(m_Epic, out EpicAccountId to, m_AccountIdType, MetricsAccountIdType.Epic);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Epic, MetricsAccountIdType.Epic, ref m_AccountIdType, this);
		}
	}

	public Utf8String External
	{
		get
		{
			Helper.Get(m_External, out Utf8String to, m_AccountIdType, MetricsAccountIdType.External);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_External, MetricsAccountIdType.External, ref m_AccountIdType, this);
		}
	}

	public void Set(ref BeginPlayerSessionOptionsAccountId other)
	{
		Epic = other.Epic;
		External = other.External;
	}

	public void Set(ref BeginPlayerSessionOptionsAccountId? other)
	{
		if (other.HasValue)
		{
			Epic = other.Value.Epic;
			External = other.Value.External;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Epic);
		Helper.Dispose(ref m_External, m_AccountIdType, MetricsAccountIdType.External);
	}

	public void Get(out BeginPlayerSessionOptionsAccountId output)
	{
		output = default(BeginPlayerSessionOptionsAccountId);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Metrics;

public struct EndPlayerSessionOptions
{
	public EndPlayerSessionOptionsAccountId AccountId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EndPlayerSessionOptionsInternal : ISettable<EndPlayerSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private EndPlayerSessionOptionsAccountIdInternal m_AccountId;

	public EndPlayerSessionOptionsAccountId AccountId
	{
		set
		{
			Helper.Set(ref value, ref m_AccountId);
		}
	}

	public void Set(ref EndPlayerSessionOptions other)
	{
		m_ApiVersion = 1;
		AccountId = other.AccountId;
	}

	public void Set(ref EndPlayerSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AccountId = other.Value.AccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public struct EndPlayerSessionOptionsAccountId
{
	private MetricsAccountIdType m_AccountIdType;

	private EpicAccountId m_Epic;

	private Utf8String m_External;

	public MetricsAccountIdType AccountIdType
	{
		get
		{
			return m_AccountIdType;
		}
		private set
		{
			m_AccountIdType = value;
		}
	}

	public EpicAccountId Epic
	{
		get
		{
			Helper.Get(m_Epic, out var to, m_AccountIdType, MetricsAccountIdType.Epic);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Epic, MetricsAccountIdType.Epic, ref m_AccountIdType);
		}
	}

	public Utf8String External
	{
		get
		{
			Helper.Get(m_External, out var to, m_AccountIdType, MetricsAccountIdType.External);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_External, MetricsAccountIdType.External, ref m_AccountIdType);
		}
	}

	public static implicit operator EndPlayerSessionOptionsAccountId(EpicAccountId value)
	{
		EndPlayerSessionOptionsAccountId result = default(EndPlayerSessionOptionsAccountId);
		result.Epic = value;
		return result;
	}

	public static implicit operator EndPlayerSessionOptionsAccountId(Utf8String value)
	{
		EndPlayerSessionOptionsAccountId result = default(EndPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}

	public static implicit operator EndPlayerSessionOptionsAccountId(string value)
	{
		EndPlayerSessionOptionsAccountId result = default(EndPlayerSessionOptionsAccountId);
		result.External = value;
		return result;
	}

	internal void Set(ref EndPlayerSessionOptionsAccountIdInternal other)
	{
		Epic = other.Epic;
		External = other.External;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

[StructLayout(LayoutKind.Explicit, Pack = 4)]
internal struct EndPlayerSessionOptionsAccountIdInternal : IGettable<EndPlayerSessionOptionsAccountId>, ISettable<EndPlayerSessionOptionsAccountId>, IDisposable
{
	[FieldOffset(0)]
	private MetricsAccountIdType m_AccountIdType;

	[FieldOffset(4)]
	private IntPtr m_Epic;

	[FieldOffset(4)]
	private IntPtr m_External;

	public EpicAccountId Epic
	{
		get
		{
			Helper.Get(m_Epic, out EpicAccountId to, m_AccountIdType, MetricsAccountIdType.Epic);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Epic, MetricsAccountIdType.Epic, ref m_AccountIdType, this);
		}
	}

	public Utf8String External
	{
		get
		{
			Helper.Get(m_External, out Utf8String to, m_AccountIdType, MetricsAccountIdType.External);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_External, MetricsAccountIdType.External, ref m_AccountIdType, this);
		}
	}

	public void Set(ref EndPlayerSessionOptionsAccountId other)
	{
		Epic = other.Epic;
		External = other.External;
	}

	public void Set(ref EndPlayerSessionOptionsAccountId? other)
	{
		if (other.HasValue)
		{
			Epic = other.Value.Epic;
			External = other.Value.External;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Epic);
		Helper.Dispose(ref m_External, m_AccountIdType, MetricsAccountIdType.External);
	}

	public void Get(out EndPlayerSessionOptionsAccountId output)
	{
		output = default(EndPlayerSessionOptionsAccountId);
		output.Set(ref this);
	}
}


public enum MetricsAccountIdType
{
	Epic,
	External
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Metrics;

public sealed class MetricsInterface : Handle
{
	public const int BeginplayersessionApiLatest = 1;

	public const int EndplayersessionApiLatest = 1;

	public MetricsInterface()
	{
	}

	public MetricsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result BeginPlayerSession(ref BeginPlayerSessionOptions options)
	{
		BeginPlayerSessionOptionsInternal options2 = default(BeginPlayerSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Metrics_BeginPlayerSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result EndPlayerSession(ref EndPlayerSessionOptions options)
	{
		EndPlayerSessionOptionsInternal options2 = default(EndPlayerSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Metrics_EndPlayerSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


public enum UserControllerType
{
	Unknown,
	MouseKeyboard,
	GamepadControl,
	TouchControl
}


public enum LogCategory
{
	Core = 0,
	Auth = 1,
	Friends = 2,
	Presence = 3,
	UserInfo = 4,
	HttpSerialization = 5,
	Ecom = 6,
	P2P = 7,
	Sessions = 8,
	RateLimiter = 9,
	PlayerDataStorage = 10,
	Analytics = 11,
	Messaging = 12,
	Connect = 13,
	Overlay = 14,
	Achievements = 15,
	Stats = 16,
	Ui = 17,
	Lobby = 18,
	Leaderboards = 19,
	Keychain = 20,
	IntegratedPlatform = 21,
	TitleStorage = 22,
	Mods = 23,
	AntiCheat = 24,
	Reports = 25,
	Sanctions = 26,
	ProgressionSnapshots = 27,
	Kws = 28,
	Rtc = 29,
	RTCAdmin = 30,
	CustomInvites = 31,
	AllCategories = int.MaxValue
}


using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

public sealed class LoggingInterface
{
	public static Result SetCallback(LogMessageFunc callback)
	{
		LogMessageFuncInternal logMessageFuncInternal = LogMessageFuncInternalImplementation;
		Helper.AddStaticCallback("LogMessageFuncInternalImplementation", callback, logMessageFuncInternal);
		return Bindings.EOS_Logging_SetCallback(logMessageFuncInternal);
	}

	public static Result SetLogLevel(LogCategory logCategory, LogLevel logLevel)
	{
		return Bindings.EOS_Logging_SetLogLevel(logCategory, logLevel);
	}

	[MonoPInvokeCallback(typeof(LogMessageFuncInternal))]
	internal static void LogMessageFuncInternalImplementation(ref LogMessageInternal message)
	{
		if (Helper.TryGetStaticCallback<LogMessageFunc>("LogMessageFuncInternalImplementation", out var callback))
		{
			Helper.Get<LogMessageInternal, LogMessage>(ref message, out var to);
			callback(ref to);
		}
	}
}


public enum LogLevel
{
	Off = 0,
	Fatal = 100,
	Error = 200,
	Warning = 300,
	Info = 400,
	Verbose = 500,
	VeryVerbose = 600
}


using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

public struct LogMessage
{
	public Utf8String Category { get; set; }

	public Utf8String Message { get; set; }

	public LogLevel Level { get; set; }

	internal void Set(ref LogMessageInternal other)
	{
		Category = other.Category;
		Message = other.Message;
		Level = other.Level;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Logging;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogMessageInternal : IGettable<LogMessage>, ISettable<LogMessage>, IDisposable
{
	private IntPtr m_Category;

	private IntPtr m_Message;

	private LogLevel m_Level;

	public Utf8String Category
	{
		get
		{
			Helper.Get(m_Category, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Category);
		}
	}

	public Utf8String Message
	{
		get
		{
			Helper.Get(m_Message, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Message);
		}
	}

	public LogLevel Level
	{
		get
		{
			return m_Level;
		}
		set
		{
			m_Level = value;
		}
	}

	public void Set(ref LogMessage other)
	{
		Category = other.Category;
		Message = other.Message;
		Level = other.Level;
	}

	public void Set(ref LogMessage? other)
	{
		if (other.HasValue)
		{
			Category = other.Value.Category;
			Message = other.Value.Message;
			Level = other.Value.Level;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Category);
		Helper.Dispose(ref m_Message);
	}

	public void Get(out LogMessage output)
	{
		output = default(LogMessage);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Logging;

public delegate void LogMessageFunc(ref LogMessage message);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Logging;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void LogMessageFuncInternal(ref LogMessageInternal message);


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyJoinLobbyAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyJoinLobbyAcceptedOptionsInternal : ISettable<AddNotifyJoinLobbyAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyJoinLobbyAcceptedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyJoinLobbyAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLeaveLobbyRequestedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLeaveLobbyRequestedOptionsInternal : ISettable<AddNotifyLeaveLobbyRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLeaveLobbyRequestedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLeaveLobbyRequestedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyInviteAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLobbyInviteAcceptedOptionsInternal : ISettable<AddNotifyLobbyInviteAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyInviteAcceptedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLobbyInviteAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyInviteReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLobbyInviteReceivedOptionsInternal : ISettable<AddNotifyLobbyInviteReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyInviteReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLobbyInviteReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyInviteRejectedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLobbyInviteRejectedOptionsInternal : ISettable<AddNotifyLobbyInviteRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyInviteRejectedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLobbyInviteRejectedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyMemberStatusReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLobbyMemberStatusReceivedOptionsInternal : ISettable<AddNotifyLobbyMemberStatusReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyMemberStatusReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLobbyMemberStatusReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyMemberUpdateReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLobbyMemberUpdateReceivedOptionsInternal : ISettable<AddNotifyLobbyMemberUpdateReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyMemberUpdateReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLobbyMemberUpdateReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLobbyUpdateReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLobbyUpdateReceivedOptionsInternal : ISettable<AddNotifyLobbyUpdateReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLobbyUpdateReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLobbyUpdateReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct AddNotifyRTCRoomConnectionChangedOptions
{
	internal Utf8String LobbyId_DEPRECATED { get; set; }

	internal ProductUserId LocalUserId_DEPRECATED { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyRTCRoomConnectionChangedOptionsInternal : ISettable<AddNotifyRTCRoomConnectionChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId_DEPRECATED;

	private IntPtr m_LocalUserId_DEPRECATED;

	public Utf8String LobbyId_DEPRECATED
	{
		set
		{
			Helper.Set(value, ref m_LobbyId_DEPRECATED);
		}
	}

	public ProductUserId LocalUserId_DEPRECATED
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId_DEPRECATED);
		}
	}

	public void Set(ref AddNotifyRTCRoomConnectionChangedOptions other)
	{
		m_ApiVersion = 2;
		LobbyId_DEPRECATED = other.LobbyId_DEPRECATED;
		LocalUserId_DEPRECATED = other.LocalUserId_DEPRECATED;
	}

	public void Set(ref AddNotifyRTCRoomConnectionChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LobbyId_DEPRECATED = other.Value.LobbyId_DEPRECATED;
			LocalUserId_DEPRECATED = other.Value.LocalUserId_DEPRECATED;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId_DEPRECATED);
		Helper.Dispose(ref m_LocalUserId_DEPRECATED);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySendLobbyNativeInviteRequestedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifySendLobbyNativeInviteRequestedOptionsInternal : ISettable<AddNotifySendLobbyNativeInviteRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySendLobbyNativeInviteRequestedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifySendLobbyNativeInviteRequestedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Lobby;

public struct Attribute
{
	public AttributeData? Data { get; set; }

	public LobbyAttributeVisibility Visibility { get; set; }

	internal void Set(ref AttributeInternal other)
	{
		Data = other.Data;
		Visibility = other.Visibility;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AttributeInternal : IGettable<Epic.OnlineServices.Lobby.Attribute>, ISettable<Epic.OnlineServices.Lobby.Attribute>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Data;

	private LobbyAttributeVisibility m_Visibility;

	public AttributeData? Data
	{
		get
		{
			Helper.Get<AttributeDataInternal, AttributeData>(m_Data, out AttributeData? to);
			return to;
		}
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_Data);
		}
	}

	public LobbyAttributeVisibility Visibility
	{
		get
		{
			return m_Visibility;
		}
		set
		{
			m_Visibility = value;
		}
	}

	public void Set(ref Epic.OnlineServices.Lobby.Attribute other)
	{
		m_ApiVersion = 1;
		Data = other.Data;
		Visibility = other.Visibility;
	}

	public void Set(ref Epic.OnlineServices.Lobby.Attribute? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Data = other.Value.Data;
			Visibility = other.Value.Visibility;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Data);
	}

	public void Get(out Epic.OnlineServices.Lobby.Attribute output)
	{
		output = default(Epic.OnlineServices.Lobby.Attribute);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct AttributeData
{
	public Utf8String Key { get; set; }

	public AttributeDataValue Value { get; set; }

	internal void Set(ref AttributeDataInternal other)
	{
		Key = other.Key;
		Value = other.Value;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AttributeDataInternal : IGettable<AttributeData>, ISettable<AttributeData>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private AttributeDataValueInternal m_Value;

	public Utf8String Key
	{
		get
		{
			Helper.Get(m_Key, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public AttributeDataValue Value
	{
		get
		{
			Helper.Get<AttributeDataValueInternal, AttributeDataValue>(ref m_Value, out var to);
			return to;
		}
		set
		{
			Helper.Set(ref value, ref m_Value);
		}
	}

	public void Set(ref AttributeData other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		Value = other.Value;
	}

	public void Set(ref AttributeData? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}

	public void Get(out AttributeData output)
	{
		output = default(AttributeData);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct AttributeDataValue
{
	private long? m_AsInt64;

	private double? m_AsDouble;

	private bool? m_AsBool;

	private Utf8String m_AsUtf8;

	private AttributeType m_ValueType;

	public long? AsInt64
	{
		get
		{
			Helper.Get(m_AsInt64, out var to, m_ValueType, AttributeType.Int64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsInt64, AttributeType.Int64, ref m_ValueType);
		}
	}

	public double? AsDouble
	{
		get
		{
			Helper.Get(m_AsDouble, out var to, m_ValueType, AttributeType.Double);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsDouble, AttributeType.Double, ref m_ValueType);
		}
	}

	public bool? AsBool
	{
		get
		{
			Helper.Get(m_AsBool, out var to, m_ValueType, AttributeType.Boolean);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsBool, AttributeType.Boolean, ref m_ValueType);
		}
	}

	public Utf8String AsUtf8
	{
		get
		{
			Helper.Get(m_AsUtf8, out var to, m_ValueType, AttributeType.String);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsUtf8, AttributeType.String, ref m_ValueType);
		}
	}

	public AttributeType ValueType
	{
		get
		{
			return m_ValueType;
		}
		private set
		{
			m_ValueType = value;
		}
	}

	public static implicit operator AttributeDataValue(long value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsInt64 = value;
		return result;
	}

	public static implicit operator AttributeDataValue(double value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsDouble = value;
		return result;
	}

	public static implicit operator AttributeDataValue(bool value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsBool = value;
		return result;
	}

	public static implicit operator AttributeDataValue(Utf8String value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsUtf8 = value;
		return result;
	}

	public static implicit operator AttributeDataValue(string value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsUtf8 = value;
		return result;
	}

	internal void Set(ref AttributeDataValueInternal other)
	{
		AsInt64 = other.AsInt64;
		AsDouble = other.AsDouble;
		AsBool = other.AsBool;
		AsUtf8 = other.AsUtf8;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Explicit, Pack = 8)]
internal struct AttributeDataValueInternal : IGettable<AttributeDataValue>, ISettable<AttributeDataValue>, IDisposable
{
	[FieldOffset(0)]
	private long m_AsInt64;

	[FieldOffset(0)]
	private double m_AsDouble;

	[FieldOffset(0)]
	private int m_AsBool;

	[FieldOffset(0)]
	private IntPtr m_AsUtf8;

	[FieldOffset(8)]
	private AttributeType m_ValueType;

	public long? AsInt64
	{
		get
		{
			Helper.Get(m_AsInt64, out long? to, m_ValueType, AttributeType.Int64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsInt64, AttributeType.Int64, ref m_ValueType, this);
		}
	}

	public double? AsDouble
	{
		get
		{
			Helper.Get(m_AsDouble, out double? to, m_ValueType, AttributeType.Double);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsDouble, AttributeType.Double, ref m_ValueType, this);
		}
	}

	public bool? AsBool
	{
		get
		{
			Helper.Get(m_AsBool, out bool? to, m_ValueType, AttributeType.Boolean);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsBool, AttributeType.Boolean, ref m_ValueType, this);
		}
	}

	public Utf8String AsUtf8
	{
		get
		{
			Helper.Get(m_AsUtf8, out Utf8String to, m_ValueType, AttributeType.String);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsUtf8, AttributeType.String, ref m_ValueType, this);
		}
	}

	public void Set(ref AttributeDataValue other)
	{
		AsInt64 = other.AsInt64;
		AsDouble = other.AsDouble;
		AsBool = other.AsBool;
		AsUtf8 = other.AsUtf8;
	}

	public void Set(ref AttributeDataValue? other)
	{
		if (other.HasValue)
		{
			AsInt64 = other.Value.AsInt64;
			AsDouble = other.Value.AsDouble;
			AsBool = other.Value.AsBool;
			AsUtf8 = other.Value.AsUtf8;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AsUtf8, m_ValueType, AttributeType.String);
	}

	public void Get(out AttributeDataValue output)
	{
		output = default(AttributeDataValue);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct CopyLobbyDetailsHandleByInviteIdOptions
{
	public Utf8String InviteId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLobbyDetailsHandleByInviteIdOptionsInternal : ISettable<CopyLobbyDetailsHandleByInviteIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_InviteId;

	public Utf8String InviteId
	{
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref CopyLobbyDetailsHandleByInviteIdOptions other)
	{
		m_ApiVersion = 1;
		InviteId = other.InviteId;
	}

	public void Set(ref CopyLobbyDetailsHandleByInviteIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_InviteId);
	}
}


public struct CopyLobbyDetailsHandleByUiEventIdOptions
{
	public ulong UiEventId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLobbyDetailsHandleByUiEventIdOptionsInternal : ISettable<CopyLobbyDetailsHandleByUiEventIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_UiEventId;

	public ulong UiEventId
	{
		set
		{
			m_UiEventId = value;
		}
	}

	public void Set(ref CopyLobbyDetailsHandleByUiEventIdOptions other)
	{
		m_ApiVersion = 1;
		UiEventId = other.UiEventId;
	}

	public void Set(ref CopyLobbyDetailsHandleByUiEventIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UiEventId = other.Value.UiEventId;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyLobbyDetailsHandleOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLobbyDetailsHandleOptionsInternal : ISettable<CopyLobbyDetailsHandleOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CopyLobbyDetailsHandleOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CopyLobbyDetailsHandleOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct CreateLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref CreateLobbyCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateLobbyCallbackInfo>, ISettable<CreateLobbyCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref CreateLobbyCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref CreateLobbyCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out CreateLobbyCallbackInfo output)
	{
		output = default(CreateLobbyCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct CreateLobbyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint MaxLobbyMembers { get; set; }

	public LobbyPermissionLevel PermissionLevel { get; set; }

	public bool PresenceEnabled { get; set; }

	public bool AllowInvites { get; set; }

	public Utf8String BucketId { get; set; }

	public bool DisableHostMigration { get; set; }

	public bool EnableRTCRoom { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }

	public Utf8String LobbyId { get; set; }

	public bool EnableJoinById { get; set; }

	public bool RejoinAfterKickRequiresInvite { get; set; }

	public uint[] AllowedPlatformIds { get; set; }

	public bool CrossplayOptOut { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateLobbyOptionsInternal : ISettable<CreateLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_MaxLobbyMembers;

	private LobbyPermissionLevel m_PermissionLevel;

	private int m_PresenceEnabled;

	private int m_AllowInvites;

	private IntPtr m_BucketId;

	private int m_DisableHostMigration;

	private int m_EnableRTCRoom;

	private IntPtr m_LocalRTCOptions;

	private IntPtr m_LobbyId;

	private int m_EnableJoinById;

	private int m_RejoinAfterKickRequiresInvite;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	private int m_CrossplayOptOut;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint MaxLobbyMembers
	{
		set
		{
			m_MaxLobbyMembers = value;
		}
	}

	public LobbyPermissionLevel PermissionLevel
	{
		set
		{
			m_PermissionLevel = value;
		}
	}

	public bool PresenceEnabled
	{
		set
		{
			Helper.Set(value, ref m_PresenceEnabled);
		}
	}

	public bool AllowInvites
	{
		set
		{
			Helper.Set(value, ref m_AllowInvites);
		}
	}

	public Utf8String BucketId
	{
		set
		{
			Helper.Set(value, ref m_BucketId);
		}
	}

	public bool DisableHostMigration
	{
		set
		{
			Helper.Set(value, ref m_DisableHostMigration);
		}
	}

	public bool EnableRTCRoom
	{
		set
		{
			Helper.Set(value, ref m_EnableRTCRoom);
		}
	}

	public LocalRTCOptions? LocalRTCOptions
	{
		set
		{
			Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(ref value, ref m_LocalRTCOptions);
		}
	}

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public bool EnableJoinById
	{
		set
		{
			Helper.Set(value, ref m_EnableJoinById);
		}
	}

	public bool RejoinAfterKickRequiresInvite
	{
		set
		{
			Helper.Set(value, ref m_RejoinAfterKickRequiresInvite);
		}
	}

	public uint[] AllowedPlatformIds
	{
		set
		{
			Helper.Set(value, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount);
		}
	}

	public bool CrossplayOptOut
	{
		set
		{
			Helper.Set(value, ref m_CrossplayOptOut);
		}
	}

	public void Set(ref CreateLobbyOptions other)
	{
		m_ApiVersion = 9;
		LocalUserId = other.LocalUserId;
		MaxLobbyMembers = other.MaxLobbyMembers;
		PermissionLevel = other.PermissionLevel;
		PresenceEnabled = other.PresenceEnabled;
		AllowInvites = other.AllowInvites;
		BucketId = other.BucketId;
		DisableHostMigration = other.DisableHostMigration;
		EnableRTCRoom = other.EnableRTCRoom;
		LocalRTCOptions = other.LocalRTCOptions;
		LobbyId = other.LobbyId;
		EnableJoinById = other.EnableJoinById;
		RejoinAfterKickRequiresInvite = other.RejoinAfterKickRequiresInvite;
		AllowedPlatformIds = other.AllowedPlatformIds;
		CrossplayOptOut = other.CrossplayOptOut;
	}

	public void Set(ref CreateLobbyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 9;
			LocalUserId = other.Value.LocalUserId;
			MaxLobbyMembers = other.Value.MaxLobbyMembers;
			PermissionLevel = other.Value.PermissionLevel;
			PresenceEnabled = other.Value.PresenceEnabled;
			AllowInvites = other.Value.AllowInvites;
			BucketId = other.Value.BucketId;
			DisableHostMigration = other.Value.DisableHostMigration;
			EnableRTCRoom = other.Value.EnableRTCRoom;
			LocalRTCOptions = other.Value.LocalRTCOptions;
			LobbyId = other.Value.LobbyId;
			EnableJoinById = other.Value.EnableJoinById;
			RejoinAfterKickRequiresInvite = other.Value.RejoinAfterKickRequiresInvite;
			AllowedPlatformIds = other.Value.AllowedPlatformIds;
			CrossplayOptOut = other.Value.CrossplayOptOut;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_BucketId);
		Helper.Dispose(ref m_LocalRTCOptions);
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_AllowedPlatformIds);
	}
}


public struct CreateLobbySearchOptions
{
	public uint MaxResults { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateLobbySearchOptionsInternal : ISettable<CreateLobbySearchOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxResults;

	public uint MaxResults
	{
		set
		{
			m_MaxResults = value;
		}
	}

	public void Set(ref CreateLobbySearchOptions other)
	{
		m_ApiVersion = 1;
		MaxResults = other.MaxResults;
	}

	public void Set(ref CreateLobbySearchOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MaxResults = other.Value.MaxResults;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct DestroyLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DestroyLobbyCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DestroyLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<DestroyLobbyCallbackInfo>, ISettable<DestroyLobbyCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref DestroyLobbyCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref DestroyLobbyCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out DestroyLobbyCallbackInfo output)
	{
		output = default(DestroyLobbyCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DestroyLobbyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DestroyLobbyOptionsInternal : ISettable<DestroyLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref DestroyLobbyOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref DestroyLobbyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices;

public struct GetConnectStringOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetConnectStringOptionsInternal : ISettable<GetConnectStringOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref GetConnectStringOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref GetConnectStringOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices;

public struct GetInviteCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetInviteCountOptionsInternal : ISettable<GetInviteCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetInviteCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetInviteCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetInviteIdByIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetInviteIdByIndexOptionsInternal : ISettable<GetInviteIdByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref GetInviteIdByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref GetInviteIdByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetRTCRoomNameOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetRTCRoomNameOptionsInternal : ISettable<GetRTCRoomNameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetRTCRoomNameOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetRTCRoomNameOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct HardMuteMemberCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref HardMuteMemberCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct HardMuteMemberCallbackInfoInternal : ICallbackInfoInternal, IGettable<HardMuteMemberCallbackInfo>, ISettable<HardMuteMemberCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref HardMuteMemberCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref HardMuteMemberCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out HardMuteMemberCallbackInfo output)
	{
		output = default(HardMuteMemberCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct HardMuteMemberOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public bool HardMute { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct HardMuteMemberOptionsInternal : ISettable<HardMuteMemberOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private int m_HardMute;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public bool HardMute
	{
		set
		{
			Helper.Set(value, ref m_HardMute);
		}
	}

	public void Set(ref HardMuteMemberOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		HardMute = other.HardMute;
	}

	public void Set(ref HardMuteMemberOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			HardMute = other.Value.HardMute;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct IsRTCRoomConnectedOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IsRTCRoomConnectedOptionsInternal : ISettable<IsRTCRoomConnectedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref IsRTCRoomConnectedOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref IsRTCRoomConnectedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ulong UiEventId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref JoinLobbyAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		UiEventId = other.UiEventId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinLobbyAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinLobbyAcceptedCallbackInfo>, ISettable<JoinLobbyAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private ulong m_UiEventId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ulong UiEventId
	{
		get
		{
			return m_UiEventId;
		}
		set
		{
			m_UiEventId = value;
		}
	}

	public void Set(ref JoinLobbyAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		UiEventId = other.UiEventId;
	}

	public void Set(ref JoinLobbyAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			UiEventId = other.Value.UiEventId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out JoinLobbyAcceptedCallbackInfo output)
	{
		output = default(JoinLobbyAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyByIdCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref JoinLobbyByIdCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinLobbyByIdCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinLobbyByIdCallbackInfo>, ISettable<JoinLobbyByIdCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref JoinLobbyByIdCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref JoinLobbyByIdCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out JoinLobbyByIdCallbackInfo output)
	{
		output = default(JoinLobbyByIdCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyByIdOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool PresenceEnabled { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }

	public bool CrossplayOptOut { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinLobbyByIdOptionsInternal : ISettable<JoinLobbyByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private int m_PresenceEnabled;

	private IntPtr m_LocalRTCOptions;

	private int m_CrossplayOptOut;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public bool PresenceEnabled
	{
		set
		{
			Helper.Set(value, ref m_PresenceEnabled);
		}
	}

	public LocalRTCOptions? LocalRTCOptions
	{
		set
		{
			Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(ref value, ref m_LocalRTCOptions);
		}
	}

	public bool CrossplayOptOut
	{
		set
		{
			Helper.Set(value, ref m_CrossplayOptOut);
		}
	}

	public void Set(ref JoinLobbyByIdOptions other)
	{
		m_ApiVersion = 2;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		PresenceEnabled = other.PresenceEnabled;
		LocalRTCOptions = other.LocalRTCOptions;
		CrossplayOptOut = other.CrossplayOptOut;
	}

	public void Set(ref JoinLobbyByIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
			PresenceEnabled = other.Value.PresenceEnabled;
			LocalRTCOptions = other.Value.LocalRTCOptions;
			CrossplayOptOut = other.Value.CrossplayOptOut;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LocalRTCOptions);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref JoinLobbyCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinLobbyCallbackInfo>, ISettable<JoinLobbyCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref JoinLobbyCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref JoinLobbyCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out JoinLobbyCallbackInfo output)
	{
		output = default(JoinLobbyCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct JoinLobbyOptions
{
	public LobbyDetails LobbyDetailsHandle { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool PresenceEnabled { get; set; }

	public LocalRTCOptions? LocalRTCOptions { get; set; }

	public bool CrossplayOptOut { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinLobbyOptionsInternal : ISettable<JoinLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyDetailsHandle;

	private IntPtr m_LocalUserId;

	private int m_PresenceEnabled;

	private IntPtr m_LocalRTCOptions;

	private int m_CrossplayOptOut;

	public LobbyDetails LobbyDetailsHandle
	{
		set
		{
			Helper.Set(value, ref m_LobbyDetailsHandle);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public bool PresenceEnabled
	{
		set
		{
			Helper.Set(value, ref m_PresenceEnabled);
		}
	}

	public LocalRTCOptions? LocalRTCOptions
	{
		set
		{
			Helper.Set<LocalRTCOptions, LocalRTCOptionsInternal>(ref value, ref m_LocalRTCOptions);
		}
	}

	public bool CrossplayOptOut
	{
		set
		{
			Helper.Set(value, ref m_CrossplayOptOut);
		}
	}

	public void Set(ref JoinLobbyOptions other)
	{
		m_ApiVersion = 4;
		LobbyDetailsHandle = other.LobbyDetailsHandle;
		LocalUserId = other.LocalUserId;
		PresenceEnabled = other.PresenceEnabled;
		LocalRTCOptions = other.LocalRTCOptions;
		CrossplayOptOut = other.CrossplayOptOut;
	}

	public void Set(ref JoinLobbyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			LobbyDetailsHandle = other.Value.LobbyDetailsHandle;
			LocalUserId = other.Value.LocalUserId;
			PresenceEnabled = other.Value.PresenceEnabled;
			LocalRTCOptions = other.Value.LocalRTCOptions;
			CrossplayOptOut = other.Value.CrossplayOptOut;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyDetailsHandle);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LocalRTCOptions);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct KickMemberCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref KickMemberCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct KickMemberCallbackInfoInternal : ICallbackInfoInternal, IGettable<KickMemberCallbackInfo>, ISettable<KickMemberCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref KickMemberCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref KickMemberCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out KickMemberCallbackInfo output)
	{
		output = default(KickMemberCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct KickMemberOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct KickMemberOptionsInternal : ISettable<KickMemberOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref KickMemberOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref KickMemberOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LeaveLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LeaveLobbyCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaveLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveLobbyCallbackInfo>, ISettable<LeaveLobbyCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LeaveLobbyCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LeaveLobbyCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out LeaveLobbyCallbackInfo output)
	{
		output = default(LeaveLobbyCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct LeaveLobbyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaveLobbyOptionsInternal : ISettable<LeaveLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LeaveLobbyOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LeaveLobbyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LeaveLobbyRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LeaveLobbyRequestedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaveLobbyRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveLobbyRequestedCallbackInfo>, ISettable<LeaveLobbyRequestedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LeaveLobbyRequestedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LeaveLobbyRequestedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out LeaveLobbyRequestedCallbackInfo output)
	{
		output = default(LeaveLobbyRequestedCallbackInfo);
		output.Set(ref this);
	}
}


public enum LobbyAttributeVisibility
{
	Public,
	Private
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbyDetails : Handle
{
	public const int LobbydetailsCopyattributebyindexApiLatest = 1;

	public const int LobbydetailsCopyattributebykeyApiLatest = 1;

	public const int LobbydetailsCopyinfoApiLatest = 1;

	public const int LobbydetailsCopymemberattributebyindexApiLatest = 1;

	public const int LobbydetailsCopymemberattributebykeyApiLatest = 1;

	public const int LobbydetailsCopymemberinfoApiLatest = 1;

	public const int LobbydetailsGetattributecountApiLatest = 1;

	public const int LobbydetailsGetlobbyownerApiLatest = 1;

	public const int LobbydetailsGetmemberattributecountApiLatest = 1;

	public const int LobbydetailsGetmemberbyindexApiLatest = 1;

	public const int LobbydetailsGetmembercountApiLatest = 1;

	public const int LobbydetailsInfoApiLatest = 3;

	public const int LobbydetailsMemberinfoApiLatest = 1;

	public LobbyDetails()
	{
	}

	public LobbyDetails(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyAttributeByIndex(ref LobbyDetailsCopyAttributeByIndexOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyAttributeByIndexOptionsInternal options2 = default(LobbyDetailsCopyAttributeByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyAttributeByIndex(base.InnerHandle, ref options2, ref outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute.HasValue)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyAttributeByKey(ref LobbyDetailsCopyAttributeByKeyOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyAttributeByKeyOptionsInternal options2 = default(LobbyDetailsCopyAttributeByKeyOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyAttributeByKey(base.InnerHandle, ref options2, ref outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute.HasValue)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyInfo(ref LobbyDetailsCopyInfoOptions options, out LobbyDetailsInfo? outLobbyDetailsInfo)
	{
		LobbyDetailsCopyInfoOptionsInternal options2 = default(LobbyDetailsCopyInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyInfo(base.InnerHandle, ref options2, ref outLobbyDetailsInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<LobbyDetailsInfoInternal, LobbyDetailsInfo>(outLobbyDetailsInfo2, out outLobbyDetailsInfo);
		if (outLobbyDetailsInfo.HasValue)
		{
			Bindings.EOS_LobbyDetails_Info_Release(outLobbyDetailsInfo2);
		}
		return result;
	}

	public Result CopyMemberAttributeByIndex(ref LobbyDetailsCopyMemberAttributeByIndexOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyMemberAttributeByIndexOptionsInternal options2 = default(LobbyDetailsCopyMemberAttributeByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyMemberAttributeByIndex(base.InnerHandle, ref options2, ref outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute.HasValue)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyMemberAttributeByKey(ref LobbyDetailsCopyMemberAttributeByKeyOptions options, out Epic.OnlineServices.Lobby.Attribute? outAttribute)
	{
		LobbyDetailsCopyMemberAttributeByKeyOptionsInternal options2 = default(LobbyDetailsCopyMemberAttributeByKeyOptionsInternal);
		options2.Set(ref options);
		IntPtr outAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyMemberAttributeByKey(base.InnerHandle, ref options2, ref outAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<AttributeInternal, Epic.OnlineServices.Lobby.Attribute>(outAttribute2, out outAttribute);
		if (outAttribute.HasValue)
		{
			Bindings.EOS_Lobby_Attribute_Release(outAttribute2);
		}
		return result;
	}

	public Result CopyMemberInfo(ref LobbyDetailsCopyMemberInfoOptions options, out LobbyDetailsMemberInfo? outLobbyDetailsMemberInfo)
	{
		LobbyDetailsCopyMemberInfoOptionsInternal options2 = default(LobbyDetailsCopyMemberInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsMemberInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbyDetails_CopyMemberInfo(base.InnerHandle, ref options2, ref outLobbyDetailsMemberInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<LobbyDetailsMemberInfoInternal, LobbyDetailsMemberInfo>(outLobbyDetailsMemberInfo2, out outLobbyDetailsMemberInfo);
		if (outLobbyDetailsMemberInfo.HasValue)
		{
			Bindings.EOS_LobbyDetails_MemberInfo_Release(outLobbyDetailsMemberInfo2);
		}
		return result;
	}

	public uint GetAttributeCount(ref LobbyDetailsGetAttributeCountOptions options)
	{
		LobbyDetailsGetAttributeCountOptionsInternal options2 = default(LobbyDetailsGetAttributeCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbyDetails_GetAttributeCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ProductUserId GetLobbyOwner(ref LobbyDetailsGetLobbyOwnerOptions options)
	{
		LobbyDetailsGetLobbyOwnerOptionsInternal options2 = default(LobbyDetailsGetLobbyOwnerOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_LobbyDetails_GetLobbyOwner(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public uint GetMemberAttributeCount(ref LobbyDetailsGetMemberAttributeCountOptions options)
	{
		LobbyDetailsGetMemberAttributeCountOptionsInternal options2 = default(LobbyDetailsGetMemberAttributeCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbyDetails_GetMemberAttributeCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ProductUserId GetMemberByIndex(ref LobbyDetailsGetMemberByIndexOptions options)
	{
		LobbyDetailsGetMemberByIndexOptionsInternal options2 = default(LobbyDetailsGetMemberByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_LobbyDetails_GetMemberByIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public uint GetMemberCount(ref LobbyDetailsGetMemberCountOptions options)
	{
		LobbyDetailsGetMemberCountOptionsInternal options2 = default(LobbyDetailsGetMemberCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbyDetails_GetMemberCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_LobbyDetails_Release(base.InnerHandle);
	}
}


public struct LobbyDetailsCopyAttributeByIndexOptions
{
	public uint AttrIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsCopyAttributeByIndexOptionsInternal : ISettable<LobbyDetailsCopyAttributeByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AttrIndex;

	public uint AttrIndex
	{
		set
		{
			m_AttrIndex = value;
		}
	}

	public void Set(ref LobbyDetailsCopyAttributeByIndexOptions other)
	{
		m_ApiVersion = 1;
		AttrIndex = other.AttrIndex;
	}

	public void Set(ref LobbyDetailsCopyAttributeByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AttrIndex = other.Value.AttrIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyAttributeByKeyOptions
{
	public Utf8String AttrKey { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsCopyAttributeByKeyOptionsInternal : ISettable<LobbyDetailsCopyAttributeByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AttrKey;

	public Utf8String AttrKey
	{
		set
		{
			Helper.Set(value, ref m_AttrKey);
		}
	}

	public void Set(ref LobbyDetailsCopyAttributeByKeyOptions other)
	{
		m_ApiVersion = 1;
		AttrKey = other.AttrKey;
	}

	public void Set(ref LobbyDetailsCopyAttributeByKeyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AttrKey = other.Value.AttrKey;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AttrKey);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsCopyInfoOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsCopyInfoOptionsInternal : ISettable<LobbyDetailsCopyInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsCopyInfoOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref LobbyDetailsCopyInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyMemberAttributeByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint AttrIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsCopyMemberAttributeByIndexOptionsInternal : ISettable<LobbyDetailsCopyMemberAttributeByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_AttrIndex;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint AttrIndex
	{
		set
		{
			m_AttrIndex = value;
		}
	}

	public void Set(ref LobbyDetailsCopyMemberAttributeByIndexOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		AttrIndex = other.AttrIndex;
	}

	public void Set(ref LobbyDetailsCopyMemberAttributeByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			AttrIndex = other.Value.AttrIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyMemberAttributeByKeyOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String AttrKey { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsCopyMemberAttributeByKeyOptionsInternal : ISettable<LobbyDetailsCopyMemberAttributeByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_AttrKey;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String AttrKey
	{
		set
		{
			Helper.Set(value, ref m_AttrKey);
		}
	}

	public void Set(ref LobbyDetailsCopyMemberAttributeByKeyOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		AttrKey = other.AttrKey;
	}

	public void Set(ref LobbyDetailsCopyMemberAttributeByKeyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			AttrKey = other.Value.AttrKey;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AttrKey);
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsCopyMemberInfoOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsCopyMemberInfoOptionsInternal : ISettable<LobbyDetailsCopyMemberInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref LobbyDetailsCopyMemberInfoOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref LobbyDetailsCopyMemberInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsGetAttributeCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsGetAttributeCountOptionsInternal : ISettable<LobbyDetailsGetAttributeCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsGetAttributeCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref LobbyDetailsGetAttributeCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsGetLobbyOwnerOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsGetLobbyOwnerOptionsInternal : ISettable<LobbyDetailsGetLobbyOwnerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsGetLobbyOwnerOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref LobbyDetailsGetLobbyOwnerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct LobbyDetailsGetMemberAttributeCountOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsGetMemberAttributeCountOptionsInternal : ISettable<LobbyDetailsGetMemberAttributeCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref LobbyDetailsGetMemberAttributeCountOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref LobbyDetailsGetMemberAttributeCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


public struct LobbyDetailsGetMemberByIndexOptions
{
	public uint MemberIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsGetMemberByIndexOptionsInternal : ISettable<LobbyDetailsGetMemberByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MemberIndex;

	public uint MemberIndex
	{
		set
		{
			m_MemberIndex = value;
		}
	}

	public void Set(ref LobbyDetailsGetMemberByIndexOptions other)
	{
		m_ApiVersion = 1;
		MemberIndex = other.MemberIndex;
	}

	public void Set(ref LobbyDetailsGetMemberByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MemberIndex = other.Value.MemberIndex;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbyDetailsGetMemberCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsGetMemberCountOptionsInternal : ISettable<LobbyDetailsGetMemberCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbyDetailsGetMemberCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref LobbyDetailsGetMemberCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyDetailsInfo
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LobbyOwnerUserId { get; set; }

	public LobbyPermissionLevel PermissionLevel { get; set; }

	public uint AvailableSlots { get; set; }

	public uint MaxMembers { get; set; }

	public bool AllowInvites { get; set; }

	public Utf8String BucketId { get; set; }

	public bool AllowHostMigration { get; set; }

	public bool RTCRoomEnabled { get; set; }

	public bool AllowJoinById { get; set; }

	public bool RejoinAfterKickRequiresInvite { get; set; }

	public bool PresenceEnabled { get; set; }

	public uint[] AllowedPlatformIds { get; set; }

	internal void Set(ref LobbyDetailsInfoInternal other)
	{
		LobbyId = other.LobbyId;
		LobbyOwnerUserId = other.LobbyOwnerUserId;
		PermissionLevel = other.PermissionLevel;
		AvailableSlots = other.AvailableSlots;
		MaxMembers = other.MaxMembers;
		AllowInvites = other.AllowInvites;
		BucketId = other.BucketId;
		AllowHostMigration = other.AllowHostMigration;
		RTCRoomEnabled = other.RTCRoomEnabled;
		AllowJoinById = other.AllowJoinById;
		RejoinAfterKickRequiresInvite = other.RejoinAfterKickRequiresInvite;
		PresenceEnabled = other.PresenceEnabled;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsInfoInternal : IGettable<LobbyDetailsInfo>, ISettable<LobbyDetailsInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LobbyOwnerUserId;

	private LobbyPermissionLevel m_PermissionLevel;

	private uint m_AvailableSlots;

	private uint m_MaxMembers;

	private int m_AllowInvites;

	private IntPtr m_BucketId;

	private int m_AllowHostMigration;

	private int m_RTCRoomEnabled;

	private int m_AllowJoinById;

	private int m_RejoinAfterKickRequiresInvite;

	private int m_PresenceEnabled;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LobbyOwnerUserId
	{
		get
		{
			Helper.Get(m_LobbyOwnerUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyOwnerUserId);
		}
	}

	public LobbyPermissionLevel PermissionLevel
	{
		get
		{
			return m_PermissionLevel;
		}
		set
		{
			m_PermissionLevel = value;
		}
	}

	public uint AvailableSlots
	{
		get
		{
			return m_AvailableSlots;
		}
		set
		{
			m_AvailableSlots = value;
		}
	}

	public uint MaxMembers
	{
		get
		{
			return m_MaxMembers;
		}
		set
		{
			m_MaxMembers = value;
		}
	}

	public bool AllowInvites
	{
		get
		{
			Helper.Get(m_AllowInvites, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowInvites);
		}
	}

	public Utf8String BucketId
	{
		get
		{
			Helper.Get(m_BucketId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_BucketId);
		}
	}

	public bool AllowHostMigration
	{
		get
		{
			Helper.Get(m_AllowHostMigration, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowHostMigration);
		}
	}

	public bool RTCRoomEnabled
	{
		get
		{
			Helper.Get(m_RTCRoomEnabled, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RTCRoomEnabled);
		}
	}

	public bool AllowJoinById
	{
		get
		{
			Helper.Get(m_AllowJoinById, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowJoinById);
		}
	}

	public bool RejoinAfterKickRequiresInvite
	{
		get
		{
			Helper.Get(m_RejoinAfterKickRequiresInvite, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RejoinAfterKickRequiresInvite);
		}
	}

	public bool PresenceEnabled
	{
		get
		{
			Helper.Get(m_PresenceEnabled, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PresenceEnabled);
		}
	}

	public uint[] AllowedPlatformIds
	{
		get
		{
			Helper.Get(m_AllowedPlatformIds, out uint[] to, m_AllowedPlatformIdsCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount);
		}
	}

	public void Set(ref LobbyDetailsInfo other)
	{
		m_ApiVersion = 3;
		LobbyId = other.LobbyId;
		LobbyOwnerUserId = other.LobbyOwnerUserId;
		PermissionLevel = other.PermissionLevel;
		AvailableSlots = other.AvailableSlots;
		MaxMembers = other.MaxMembers;
		AllowInvites = other.AllowInvites;
		BucketId = other.BucketId;
		AllowHostMigration = other.AllowHostMigration;
		RTCRoomEnabled = other.RTCRoomEnabled;
		AllowJoinById = other.AllowJoinById;
		RejoinAfterKickRequiresInvite = other.RejoinAfterKickRequiresInvite;
		PresenceEnabled = other.PresenceEnabled;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}

	public void Set(ref LobbyDetailsInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LobbyId = other.Value.LobbyId;
			LobbyOwnerUserId = other.Value.LobbyOwnerUserId;
			PermissionLevel = other.Value.PermissionLevel;
			AvailableSlots = other.Value.AvailableSlots;
			MaxMembers = other.Value.MaxMembers;
			AllowInvites = other.Value.AllowInvites;
			BucketId = other.Value.BucketId;
			AllowHostMigration = other.Value.AllowHostMigration;
			RTCRoomEnabled = other.Value.RTCRoomEnabled;
			AllowJoinById = other.Value.AllowJoinById;
			RejoinAfterKickRequiresInvite = other.Value.RejoinAfterKickRequiresInvite;
			PresenceEnabled = other.Value.PresenceEnabled;
			AllowedPlatformIds = other.Value.AllowedPlatformIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LobbyOwnerUserId);
		Helper.Dispose(ref m_BucketId);
		Helper.Dispose(ref m_AllowedPlatformIds);
	}

	public void Get(out LobbyDetailsInfo output)
	{
		output = default(LobbyDetailsInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyDetailsMemberInfo
{
	public ProductUserId UserId { get; set; }

	public uint Platform { get; set; }

	public bool AllowsCrossplay { get; set; }

	internal void Set(ref LobbyDetailsMemberInfoInternal other)
	{
		UserId = other.UserId;
		Platform = other.Platform;
		AllowsCrossplay = other.AllowsCrossplay;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyDetailsMemberInfoInternal : IGettable<LobbyDetailsMemberInfo>, ISettable<LobbyDetailsMemberInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private uint m_Platform;

	private int m_AllowsCrossplay;

	public ProductUserId UserId
	{
		get
		{
			Helper.Get(m_UserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public uint Platform
	{
		get
		{
			return m_Platform;
		}
		set
		{
			m_Platform = value;
		}
	}

	public bool AllowsCrossplay
	{
		get
		{
			Helper.Get(m_AllowsCrossplay, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowsCrossplay);
		}
	}

	public void Set(ref LobbyDetailsMemberInfo other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		Platform = other.Platform;
		AllowsCrossplay = other.AllowsCrossplay;
	}

	public void Set(ref LobbyDetailsMemberInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			Platform = other.Value.Platform;
			AllowsCrossplay = other.Value.AllowsCrossplay;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}

	public void Get(out LobbyDetailsMemberInfo output)
	{
		output = default(LobbyDetailsMemberInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbyInterface : Handle
{
	public const int AddnotifyjoinlobbyacceptedApiLatest = 1;

	public const int AddnotifyleavelobbyrequestedApiLatest = 1;

	public const int AddnotifylobbyinviteacceptedApiLatest = 1;

	public const int AddnotifylobbyinvitereceivedApiLatest = 1;

	public const int AddnotifylobbyinviterejectedApiLatest = 1;

	public const int AddnotifylobbymemberstatusreceivedApiLatest = 1;

	public const int AddnotifylobbymemberupdatereceivedApiLatest = 1;

	public const int AddnotifylobbyupdatereceivedApiLatest = 1;

	public const int AddnotifyrtcroomconnectionchangedApiLatest = 2;

	public const int AddnotifysendlobbynativeinviterequestedApiLatest = 1;

	public const int AttributeApiLatest = 1;

	public const int AttributedataApiLatest = 1;

	public const int CopylobbydetailshandleApiLatest = 1;

	public const int CopylobbydetailshandlebyinviteidApiLatest = 1;

	public const int CopylobbydetailshandlebyuieventidApiLatest = 1;

	public const int CreatelobbyApiLatest = 9;

	public const int CreatelobbysearchApiLatest = 1;

	public const int DestroylobbyApiLatest = 1;

	public const int GetconnectstringApiLatest = 1;

	public const int GetconnectstringBufferSize = 256;

	public const int GetinvitecountApiLatest = 1;

	public const int GetinviteidbyindexApiLatest = 1;

	public const int GetrtcroomnameApiLatest = 1;

	public const int HardmutememberApiLatest = 1;

	public const int InviteidMaxLength = 64;

	public const int IsrtcroomconnectedApiLatest = 1;

	public const int JoinlobbyApiLatest = 4;

	public const int JoinlobbybyidApiLatest = 2;

	public const int KickmemberApiLatest = 1;

	public const int LeavelobbyApiLatest = 1;

	public const int LocalrtcoptionsApiLatest = 1;

	public const int MaxLobbies = 16;

	public const int MaxLobbyMembers = 64;

	public const int MaxLobbyidoverrideLength = 60;

	public const int MaxSearchResults = 200;

	public const int MinLobbyidoverrideLength = 4;

	public const int ParseconnectstringApiLatest = 1;

	public const int ParseconnectstringBufferSize = 256;

	public const int PromotememberApiLatest = 1;

	public const int QueryinvitesApiLatest = 1;

	public const int RejectinviteApiLatest = 1;

	public static readonly Utf8String SearchBucketId = "bucket";

	public static readonly Utf8String SearchMincurrentmembers = "mincurrentmembers";

	public static readonly Utf8String SearchMinslotsavailable = "minslotsavailable";

	public const int SendinviteApiLatest = 1;

	public const int UpdatelobbyApiLatest = 1;

	public const int UpdatelobbymodificationApiLatest = 1;

	public LobbyInterface()
	{
	}

	public LobbyInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyJoinLobbyAccepted(ref AddNotifyJoinLobbyAcceptedOptions options, object clientData, OnJoinLobbyAcceptedCallback notificationFn)
	{
		AddNotifyJoinLobbyAcceptedOptionsInternal options2 = default(AddNotifyJoinLobbyAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinLobbyAcceptedCallbackInternal onJoinLobbyAcceptedCallbackInternal = OnJoinLobbyAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onJoinLobbyAcceptedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyJoinLobbyAccepted(base.InnerHandle, ref options2, clientDataAddress, onJoinLobbyAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLeaveLobbyRequested(ref AddNotifyLeaveLobbyRequestedOptions options, object clientData, OnLeaveLobbyRequestedCallback notificationFn)
	{
		AddNotifyLeaveLobbyRequestedOptionsInternal options2 = default(AddNotifyLeaveLobbyRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLeaveLobbyRequestedCallbackInternal onLeaveLobbyRequestedCallbackInternal = OnLeaveLobbyRequestedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLeaveLobbyRequestedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLeaveLobbyRequested(base.InnerHandle, ref options2, clientDataAddress, onLeaveLobbyRequestedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLobbyInviteAccepted(ref AddNotifyLobbyInviteAcceptedOptions options, object clientData, OnLobbyInviteAcceptedCallback notificationFn)
	{
		AddNotifyLobbyInviteAcceptedOptionsInternal options2 = default(AddNotifyLobbyInviteAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLobbyInviteAcceptedCallbackInternal onLobbyInviteAcceptedCallbackInternal = OnLobbyInviteAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLobbyInviteAcceptedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyInviteAccepted(base.InnerHandle, ref options2, clientDataAddress, onLobbyInviteAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLobbyInviteReceived(ref AddNotifyLobbyInviteReceivedOptions options, object clientData, OnLobbyInviteReceivedCallback notificationFn)
	{
		AddNotifyLobbyInviteReceivedOptionsInternal options2 = default(AddNotifyLobbyInviteReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLobbyInviteReceivedCallbackInternal onLobbyInviteReceivedCallbackInternal = OnLobbyInviteReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLobbyInviteReceivedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyInviteReceived(base.InnerHandle, ref options2, clientDataAddress, onLobbyInviteReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLobbyInviteRejected(ref AddNotifyLobbyInviteRejectedOptions options, object clientData, OnLobbyInviteRejectedCallback notificationFn)
	{
		AddNotifyLobbyInviteRejectedOptionsInternal options2 = default(AddNotifyLobbyInviteRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLobbyInviteRejectedCallbackInternal onLobbyInviteRejectedCallbackInternal = OnLobbyInviteRejectedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLobbyInviteRejectedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyInviteRejected(base.InnerHandle, ref options2, clientDataAddress, onLobbyInviteRejectedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLobbyMemberStatusReceived(ref AddNotifyLobbyMemberStatusReceivedOptions options, object clientData, OnLobbyMemberStatusReceivedCallback notificationFn)
	{
		AddNotifyLobbyMemberStatusReceivedOptionsInternal options2 = default(AddNotifyLobbyMemberStatusReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLobbyMemberStatusReceivedCallbackInternal onLobbyMemberStatusReceivedCallbackInternal = OnLobbyMemberStatusReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLobbyMemberStatusReceivedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyMemberStatusReceived(base.InnerHandle, ref options2, clientDataAddress, onLobbyMemberStatusReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLobbyMemberUpdateReceived(ref AddNotifyLobbyMemberUpdateReceivedOptions options, object clientData, OnLobbyMemberUpdateReceivedCallback notificationFn)
	{
		AddNotifyLobbyMemberUpdateReceivedOptionsInternal options2 = default(AddNotifyLobbyMemberUpdateReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLobbyMemberUpdateReceivedCallbackInternal onLobbyMemberUpdateReceivedCallbackInternal = OnLobbyMemberUpdateReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLobbyMemberUpdateReceivedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(base.InnerHandle, ref options2, clientDataAddress, onLobbyMemberUpdateReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLobbyUpdateReceived(ref AddNotifyLobbyUpdateReceivedOptions options, object clientData, OnLobbyUpdateReceivedCallback notificationFn)
	{
		AddNotifyLobbyUpdateReceivedOptionsInternal options2 = default(AddNotifyLobbyUpdateReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLobbyUpdateReceivedCallbackInternal onLobbyUpdateReceivedCallbackInternal = OnLobbyUpdateReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLobbyUpdateReceivedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyLobbyUpdateReceived(base.InnerHandle, ref options2, clientDataAddress, onLobbyUpdateReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyRTCRoomConnectionChanged(ref AddNotifyRTCRoomConnectionChangedOptions options, object clientData, OnRTCRoomConnectionChangedCallback notificationFn)
	{
		AddNotifyRTCRoomConnectionChangedOptionsInternal options2 = default(AddNotifyRTCRoomConnectionChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRTCRoomConnectionChangedCallbackInternal onRTCRoomConnectionChangedCallbackInternal = OnRTCRoomConnectionChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onRTCRoomConnectionChangedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifyRTCRoomConnectionChanged(base.InnerHandle, ref options2, clientDataAddress, onRTCRoomConnectionChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifySendLobbyNativeInviteRequested(ref AddNotifySendLobbyNativeInviteRequestedOptions options, object clientData, OnSendLobbyNativeInviteRequestedCallback notificationFn)
	{
		AddNotifySendLobbyNativeInviteRequestedOptionsInternal options2 = default(AddNotifySendLobbyNativeInviteRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendLobbyNativeInviteRequestedCallbackInternal onSendLobbyNativeInviteRequestedCallbackInternal = OnSendLobbyNativeInviteRequestedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onSendLobbyNativeInviteRequestedCallbackInternal);
		ulong num = Bindings.EOS_Lobby_AddNotifySendLobbyNativeInviteRequested(base.InnerHandle, ref options2, clientDataAddress, onSendLobbyNativeInviteRequestedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyLobbyDetailsHandle(ref CopyLobbyDetailsHandleOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		CopyLobbyDetailsHandleOptionsInternal options2 = default(CopyLobbyDetailsHandleOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CopyLobbyDetailsHandle(base.InnerHandle, ref options2, ref outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public Result CopyLobbyDetailsHandleByInviteId(ref CopyLobbyDetailsHandleByInviteIdOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		CopyLobbyDetailsHandleByInviteIdOptionsInternal options2 = default(CopyLobbyDetailsHandleByInviteIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CopyLobbyDetailsHandleByInviteId(base.InnerHandle, ref options2, ref outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public Result CopyLobbyDetailsHandleByUiEventId(ref CopyLobbyDetailsHandleByUiEventIdOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		CopyLobbyDetailsHandleByUiEventIdOptionsInternal options2 = default(CopyLobbyDetailsHandleByUiEventIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(base.InnerHandle, ref options2, ref outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public void CreateLobby(ref CreateLobbyOptions options, object clientData, OnCreateLobbyCallback completionDelegate)
	{
		CreateLobbyOptionsInternal options2 = default(CreateLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCreateLobbyCallbackInternal onCreateLobbyCallbackInternal = OnCreateLobbyCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onCreateLobbyCallbackInternal);
		Bindings.EOS_Lobby_CreateLobby(base.InnerHandle, ref options2, clientDataAddress, onCreateLobbyCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result CreateLobbySearch(ref CreateLobbySearchOptions options, out LobbySearch outLobbySearchHandle)
	{
		CreateLobbySearchOptionsInternal options2 = default(CreateLobbySearchOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbySearchHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_CreateLobbySearch(base.InnerHandle, ref options2, ref outLobbySearchHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbySearchHandle2, out outLobbySearchHandle);
		return result;
	}

	public void DestroyLobby(ref DestroyLobbyOptions options, object clientData, OnDestroyLobbyCallback completionDelegate)
	{
		DestroyLobbyOptionsInternal options2 = default(DestroyLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDestroyLobbyCallbackInternal onDestroyLobbyCallbackInternal = OnDestroyLobbyCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDestroyLobbyCallbackInternal);
		Bindings.EOS_Lobby_DestroyLobby(base.InnerHandle, ref options2, clientDataAddress, onDestroyLobbyCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result GetConnectString(ref GetConnectStringOptions options, out Utf8String outBuffer)
	{
		GetConnectStringOptionsInternal options2 = default(GetConnectStringOptionsInternal);
		options2.Set(ref options);
		uint inOutBufferLength = 256u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_GetConnectString(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public uint GetInviteCount(ref GetInviteCountOptions options)
	{
		GetInviteCountOptionsInternal options2 = default(GetInviteCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Lobby_GetInviteCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetInviteIdByIndex(ref GetInviteIdByIndexOptions options, out Utf8String outBuffer)
	{
		GetInviteIdByIndexOptionsInternal options2 = default(GetInviteIdByIndexOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 65;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_GetInviteIdByIndex(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result GetRTCRoomName(ref GetRTCRoomNameOptions options, out Utf8String outBuffer)
	{
		GetRTCRoomNameOptionsInternal options2 = default(GetRTCRoomNameOptionsInternal);
		options2.Set(ref options);
		uint inOutBufferLength = 256u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_GetRTCRoomName(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void HardMuteMember(ref HardMuteMemberOptions options, object clientData, OnHardMuteMemberCallback completionDelegate)
	{
		HardMuteMemberOptionsInternal options2 = default(HardMuteMemberOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnHardMuteMemberCallbackInternal onHardMuteMemberCallbackInternal = OnHardMuteMemberCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onHardMuteMemberCallbackInternal);
		Bindings.EOS_Lobby_HardMuteMember(base.InnerHandle, ref options2, clientDataAddress, onHardMuteMemberCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result IsRTCRoomConnected(ref IsRTCRoomConnectedOptions options, out bool bOutIsConnected)
	{
		IsRTCRoomConnectedOptionsInternal options2 = default(IsRTCRoomConnectedOptionsInternal);
		options2.Set(ref options);
		int bOutIsConnected2 = 0;
		Result result = Bindings.EOS_Lobby_IsRTCRoomConnected(base.InnerHandle, ref options2, ref bOutIsConnected2);
		Helper.Dispose(ref options2);
		Helper.Get(bOutIsConnected2, out bOutIsConnected);
		return result;
	}

	public void JoinLobby(ref JoinLobbyOptions options, object clientData, OnJoinLobbyCallback completionDelegate)
	{
		JoinLobbyOptionsInternal options2 = default(JoinLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinLobbyCallbackInternal onJoinLobbyCallbackInternal = OnJoinLobbyCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onJoinLobbyCallbackInternal);
		Bindings.EOS_Lobby_JoinLobby(base.InnerHandle, ref options2, clientDataAddress, onJoinLobbyCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void JoinLobbyById(ref JoinLobbyByIdOptions options, object clientData, OnJoinLobbyByIdCallback completionDelegate)
	{
		JoinLobbyByIdOptionsInternal options2 = default(JoinLobbyByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinLobbyByIdCallbackInternal onJoinLobbyByIdCallbackInternal = OnJoinLobbyByIdCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onJoinLobbyByIdCallbackInternal);
		Bindings.EOS_Lobby_JoinLobbyById(base.InnerHandle, ref options2, clientDataAddress, onJoinLobbyByIdCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void KickMember(ref KickMemberOptions options, object clientData, OnKickMemberCallback completionDelegate)
	{
		KickMemberOptionsInternal options2 = default(KickMemberOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnKickMemberCallbackInternal onKickMemberCallbackInternal = OnKickMemberCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onKickMemberCallbackInternal);
		Bindings.EOS_Lobby_KickMember(base.InnerHandle, ref options2, clientDataAddress, onKickMemberCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void LeaveLobby(ref LeaveLobbyOptions options, object clientData, OnLeaveLobbyCallback completionDelegate)
	{
		LeaveLobbyOptionsInternal options2 = default(LeaveLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLeaveLobbyCallbackInternal onLeaveLobbyCallbackInternal = OnLeaveLobbyCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLeaveLobbyCallbackInternal);
		Bindings.EOS_Lobby_LeaveLobby(base.InnerHandle, ref options2, clientDataAddress, onLeaveLobbyCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result ParseConnectString(ref ParseConnectStringOptions options, out Utf8String outBuffer)
	{
		ParseConnectStringOptionsInternal options2 = default(ParseConnectStringOptionsInternal);
		options2.Set(ref options);
		uint inOutBufferLength = 256u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Lobby_ParseConnectString(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void PromoteMember(ref PromoteMemberOptions options, object clientData, OnPromoteMemberCallback completionDelegate)
	{
		PromoteMemberOptionsInternal options2 = default(PromoteMemberOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPromoteMemberCallbackInternal onPromoteMemberCallbackInternal = OnPromoteMemberCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onPromoteMemberCallbackInternal);
		Bindings.EOS_Lobby_PromoteMember(base.InnerHandle, ref options2, clientDataAddress, onPromoteMemberCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryInvites(ref QueryInvitesOptions options, object clientData, OnQueryInvitesCallback completionDelegate)
	{
		QueryInvitesOptionsInternal options2 = default(QueryInvitesOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryInvitesCallbackInternal onQueryInvitesCallbackInternal = OnQueryInvitesCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryInvitesCallbackInternal);
		Bindings.EOS_Lobby_QueryInvites(base.InnerHandle, ref options2, clientDataAddress, onQueryInvitesCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RejectInvite(ref RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
	{
		RejectInviteOptionsInternal options2 = default(RejectInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRejectInviteCallbackInternal onRejectInviteCallbackInternal = OnRejectInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRejectInviteCallbackInternal);
		Bindings.EOS_Lobby_RejectInvite(base.InnerHandle, ref options2, clientDataAddress, onRejectInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyJoinLobbyAccepted(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyJoinLobbyAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLeaveLobbyRequested(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLeaveLobbyRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyInviteAccepted(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyInviteAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyInviteReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyInviteReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyInviteRejected(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyInviteRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyMemberStatusReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyMemberUpdateReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLobbyUpdateReceived(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyLobbyUpdateReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRTCRoomConnectionChanged(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySendLobbyNativeInviteRequested(ulong inId)
	{
		Bindings.EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void SendInvite(ref SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
	{
		SendInviteOptionsInternal options2 = default(SendInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendInviteCallbackInternal onSendInviteCallbackInternal = OnSendInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSendInviteCallbackInternal);
		Bindings.EOS_Lobby_SendInvite(base.InnerHandle, ref options2, clientDataAddress, onSendInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateLobby(ref UpdateLobbyOptions options, object clientData, OnUpdateLobbyCallback completionDelegate)
	{
		UpdateLobbyOptionsInternal options2 = default(UpdateLobbyOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateLobbyCallbackInternal onUpdateLobbyCallbackInternal = OnUpdateLobbyCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateLobbyCallbackInternal);
		Bindings.EOS_Lobby_UpdateLobby(base.InnerHandle, ref options2, clientDataAddress, onUpdateLobbyCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result UpdateLobbyModification(ref UpdateLobbyModificationOptions options, out LobbyModification outLobbyModificationHandle)
	{
		UpdateLobbyModificationOptionsInternal options2 = default(UpdateLobbyModificationOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyModificationHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Lobby_UpdateLobbyModification(base.InnerHandle, ref options2, ref outLobbyModificationHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyModificationHandle2, out outLobbyModificationHandle);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnCreateLobbyCallbackInternal))]
	internal static void OnCreateLobbyCallbackInternalImplementation(ref CreateLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateLobbyCallbackInfoInternal, OnCreateLobbyCallback, CreateLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnDestroyLobbyCallbackInternal))]
	internal static void OnDestroyLobbyCallbackInternalImplementation(ref DestroyLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DestroyLobbyCallbackInfoInternal, OnDestroyLobbyCallback, DestroyLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnHardMuteMemberCallbackInternal))]
	internal static void OnHardMuteMemberCallbackInternalImplementation(ref HardMuteMemberCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<HardMuteMemberCallbackInfoInternal, OnHardMuteMemberCallback, HardMuteMemberCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinLobbyAcceptedCallbackInternal))]
	internal static void OnJoinLobbyAcceptedCallbackInternalImplementation(ref JoinLobbyAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<JoinLobbyAcceptedCallbackInfoInternal, OnJoinLobbyAcceptedCallback, JoinLobbyAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinLobbyByIdCallbackInternal))]
	internal static void OnJoinLobbyByIdCallbackInternalImplementation(ref JoinLobbyByIdCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinLobbyByIdCallbackInfoInternal, OnJoinLobbyByIdCallback, JoinLobbyByIdCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinLobbyCallbackInternal))]
	internal static void OnJoinLobbyCallbackInternalImplementation(ref JoinLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinLobbyCallbackInfoInternal, OnJoinLobbyCallback, JoinLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnKickMemberCallbackInternal))]
	internal static void OnKickMemberCallbackInternalImplementation(ref KickMemberCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<KickMemberCallbackInfoInternal, OnKickMemberCallback, KickMemberCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveLobbyCallbackInternal))]
	internal static void OnLeaveLobbyCallbackInternalImplementation(ref LeaveLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LeaveLobbyCallbackInfoInternal, OnLeaveLobbyCallback, LeaveLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveLobbyRequestedCallbackInternal))]
	internal static void OnLeaveLobbyRequestedCallbackInternalImplementation(ref LeaveLobbyRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LeaveLobbyRequestedCallbackInfoInternal, OnLeaveLobbyRequestedCallback, LeaveLobbyRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyInviteAcceptedCallbackInternal))]
	internal static void OnLobbyInviteAcceptedCallbackInternalImplementation(ref LobbyInviteAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyInviteAcceptedCallbackInfoInternal, OnLobbyInviteAcceptedCallback, LobbyInviteAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyInviteReceivedCallbackInternal))]
	internal static void OnLobbyInviteReceivedCallbackInternalImplementation(ref LobbyInviteReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyInviteReceivedCallbackInfoInternal, OnLobbyInviteReceivedCallback, LobbyInviteReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyInviteRejectedCallbackInternal))]
	internal static void OnLobbyInviteRejectedCallbackInternalImplementation(ref LobbyInviteRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyInviteRejectedCallbackInfoInternal, OnLobbyInviteRejectedCallback, LobbyInviteRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyMemberStatusReceivedCallbackInternal))]
	internal static void OnLobbyMemberStatusReceivedCallbackInternalImplementation(ref LobbyMemberStatusReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyMemberStatusReceivedCallbackInfoInternal, OnLobbyMemberStatusReceivedCallback, LobbyMemberStatusReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyMemberUpdateReceivedCallbackInternal))]
	internal static void OnLobbyMemberUpdateReceivedCallbackInternalImplementation(ref LobbyMemberUpdateReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyMemberUpdateReceivedCallbackInfoInternal, OnLobbyMemberUpdateReceivedCallback, LobbyMemberUpdateReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLobbyUpdateReceivedCallbackInternal))]
	internal static void OnLobbyUpdateReceivedCallbackInternalImplementation(ref LobbyUpdateReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LobbyUpdateReceivedCallbackInfoInternal, OnLobbyUpdateReceivedCallback, LobbyUpdateReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPromoteMemberCallbackInternal))]
	internal static void OnPromoteMemberCallbackInternalImplementation(ref PromoteMemberCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<PromoteMemberCallbackInfoInternal, OnPromoteMemberCallback, PromoteMemberCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryInvitesCallbackInternal))]
	internal static void OnQueryInvitesCallbackInternalImplementation(ref QueryInvitesCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryInvitesCallbackInfoInternal, OnQueryInvitesCallback, QueryInvitesCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRTCRoomConnectionChangedCallbackInternal))]
	internal static void OnRTCRoomConnectionChangedCallbackInternalImplementation(ref RTCRoomConnectionChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<RTCRoomConnectionChangedCallbackInfoInternal, OnRTCRoomConnectionChangedCallback, RTCRoomConnectionChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectInviteCallbackInternal))]
	internal static void OnRejectInviteCallbackInternalImplementation(ref RejectInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectInviteCallbackInfoInternal, OnRejectInviteCallback, RejectInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendInviteCallbackInternal))]
	internal static void OnSendInviteCallbackInternalImplementation(ref SendInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendInviteCallbackInfoInternal, OnSendInviteCallback, SendInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendLobbyNativeInviteRequestedCallbackInternal))]
	internal static void OnSendLobbyNativeInviteRequestedCallbackInternalImplementation(ref SendLobbyNativeInviteRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SendLobbyNativeInviteRequestedCallbackInfoInternal, OnSendLobbyNativeInviteRequestedCallback, SendLobbyNativeInviteRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateLobbyCallbackInternal))]
	internal static void OnUpdateLobbyCallbackInternalImplementation(ref UpdateLobbyCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateLobbyCallbackInfoInternal, OnUpdateLobbyCallback, UpdateLobbyCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyInviteAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LobbyInviteAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyInviteAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyInviteAcceptedCallbackInfo>, ISettable<LobbyInviteAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_LobbyId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LobbyInviteAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LobbyInviteAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			InviteId = other.Value.InviteId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_InviteId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out LobbyInviteAcceptedCallbackInfo output)
	{
		output = default(LobbyInviteAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyInviteReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LobbyInviteReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyInviteReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyInviteReceivedCallbackInfo>, ISettable<LobbyInviteReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref LobbyInviteReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref LobbyInviteReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			InviteId = other.Value.InviteId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_InviteId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out LobbyInviteReceivedCallbackInfo output)
	{
		output = default(LobbyInviteReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyInviteRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LobbyInviteRejectedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyInviteRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyInviteRejectedCallbackInfo>, ISettable<LobbyInviteRejectedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_LobbyId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LobbyInviteRejectedCallbackInfo other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LobbyInviteRejectedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			InviteId = other.Value.InviteId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_InviteId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out LobbyInviteRejectedCallbackInfo output)
	{
		output = default(LobbyInviteRejectedCallbackInfo);
		output.Set(ref this);
	}
}


public enum LobbyMemberStatus
{
	Joined,
	Left,
	Disconnected,
	Kicked,
	Promoted,
	Closed
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyMemberStatusReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public LobbyMemberStatus CurrentStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LobbyMemberStatusReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		TargetUserId = other.TargetUserId;
		CurrentStatus = other.CurrentStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyMemberStatusReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyMemberStatusReceivedCallbackInfo>, ISettable<LobbyMemberStatusReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_TargetUserId;

	private LobbyMemberStatus m_CurrentStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public LobbyMemberStatus CurrentStatus
	{
		get
		{
			return m_CurrentStatus;
		}
		set
		{
			m_CurrentStatus = value;
		}
	}

	public void Set(ref LobbyMemberStatusReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		TargetUserId = other.TargetUserId;
		CurrentStatus = other.CurrentStatus;
	}

	public void Set(ref LobbyMemberStatusReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
			TargetUserId = other.Value.TargetUserId;
			CurrentStatus = other.Value.CurrentStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out LobbyMemberStatusReceivedCallbackInfo output)
	{
		output = default(LobbyMemberStatusReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyMemberUpdateReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LobbyMemberUpdateReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyMemberUpdateReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyMemberUpdateReceivedCallbackInfo>, ISettable<LobbyMemberUpdateReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_TargetUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref LobbyMemberUpdateReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref LobbyMemberUpdateReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out LobbyMemberUpdateReceivedCallbackInfo output)
	{
		output = default(LobbyMemberUpdateReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbyModification : Handle
{
	public const int LobbymodificationAddattributeApiLatest = 2;

	public const int LobbymodificationAddmemberattributeApiLatest = 2;

	public const int LobbymodificationMaxAttributeLength = 64;

	public const int LobbymodificationMaxAttributes = 64;

	public const int LobbymodificationRemoveattributeApiLatest = 1;

	public const int LobbymodificationRemovememberattributeApiLatest = 1;

	public const int LobbymodificationSetallowedplatformidsApiLatest = 1;

	public const int LobbymodificationSetbucketidApiLatest = 1;

	public const int LobbymodificationSetinvitesallowedApiLatest = 1;

	public const int LobbymodificationSetmaxmembersApiLatest = 1;

	public const int LobbymodificationSetpermissionlevelApiLatest = 1;

	public LobbyModification()
	{
	}

	public LobbyModification(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AddAttribute(ref LobbyModificationAddAttributeOptions options)
	{
		LobbyModificationAddAttributeOptionsInternal options2 = default(LobbyModificationAddAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_AddAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result AddMemberAttribute(ref LobbyModificationAddMemberAttributeOptions options)
	{
		LobbyModificationAddMemberAttributeOptionsInternal options2 = default(LobbyModificationAddMemberAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_AddMemberAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_LobbyModification_Release(base.InnerHandle);
	}

	public Result RemoveAttribute(ref LobbyModificationRemoveAttributeOptions options)
	{
		LobbyModificationRemoveAttributeOptionsInternal options2 = default(LobbyModificationRemoveAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_RemoveAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RemoveMemberAttribute(ref LobbyModificationRemoveMemberAttributeOptions options)
	{
		LobbyModificationRemoveMemberAttributeOptionsInternal options2 = default(LobbyModificationRemoveMemberAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_RemoveMemberAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetAllowedPlatformIds(ref LobbyModificationSetAllowedPlatformIdsOptions options)
	{
		LobbyModificationSetAllowedPlatformIdsOptionsInternal options2 = default(LobbyModificationSetAllowedPlatformIdsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetAllowedPlatformIds(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetBucketId(ref LobbyModificationSetBucketIdOptions options)
	{
		LobbyModificationSetBucketIdOptionsInternal options2 = default(LobbyModificationSetBucketIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetBucketId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetInvitesAllowed(ref LobbyModificationSetInvitesAllowedOptions options)
	{
		LobbyModificationSetInvitesAllowedOptionsInternal options2 = default(LobbyModificationSetInvitesAllowedOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetInvitesAllowed(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetMaxMembers(ref LobbyModificationSetMaxMembersOptions options)
	{
		LobbyModificationSetMaxMembersOptionsInternal options2 = default(LobbyModificationSetMaxMembersOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetMaxMembers(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPermissionLevel(ref LobbyModificationSetPermissionLevelOptions options)
	{
		LobbyModificationSetPermissionLevelOptionsInternal options2 = default(LobbyModificationSetPermissionLevelOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbyModification_SetPermissionLevel(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices.Lobby;

public struct LobbyModificationAddAttributeOptions
{
	public AttributeData? Attribute { get; set; }

	public LobbyAttributeVisibility Visibility { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationAddAttributeOptionsInternal : ISettable<LobbyModificationAddAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Attribute;

	private LobbyAttributeVisibility m_Visibility;

	public AttributeData? Attribute
	{
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_Attribute);
		}
	}

	public LobbyAttributeVisibility Visibility
	{
		set
		{
			m_Visibility = value;
		}
	}

	public void Set(ref LobbyModificationAddAttributeOptions other)
	{
		m_ApiVersion = 2;
		Attribute = other.Attribute;
		Visibility = other.Visibility;
	}

	public void Set(ref LobbyModificationAddAttributeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			Attribute = other.Value.Attribute;
			Visibility = other.Value.Visibility;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Attribute);
	}
}


using Epic.OnlineServices.Lobby;

public struct LobbyModificationAddMemberAttributeOptions
{
	public AttributeData? Attribute { get; set; }

	public LobbyAttributeVisibility Visibility { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationAddMemberAttributeOptionsInternal : ISettable<LobbyModificationAddMemberAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Attribute;

	private LobbyAttributeVisibility m_Visibility;

	public AttributeData? Attribute
	{
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_Attribute);
		}
	}

	public LobbyAttributeVisibility Visibility
	{
		set
		{
			m_Visibility = value;
		}
	}

	public void Set(ref LobbyModificationAddMemberAttributeOptions other)
	{
		m_ApiVersion = 2;
		Attribute = other.Attribute;
		Visibility = other.Visibility;
	}

	public void Set(ref LobbyModificationAddMemberAttributeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			Attribute = other.Value.Attribute;
			Visibility = other.Value.Visibility;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Attribute);
	}
}


using Epic.OnlineServices;

public struct LobbyModificationRemoveAttributeOptions
{
	public Utf8String Key { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationRemoveAttributeOptionsInternal : ISettable<LobbyModificationRemoveAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public void Set(ref LobbyModificationRemoveAttributeOptions other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
	}

	public void Set(ref LobbyModificationRemoveAttributeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices;

public struct LobbyModificationRemoveMemberAttributeOptions
{
	public Utf8String Key { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationRemoveMemberAttributeOptionsInternal : ISettable<LobbyModificationRemoveMemberAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public void Set(ref LobbyModificationRemoveMemberAttributeOptions other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
	}

	public void Set(ref LobbyModificationRemoveMemberAttributeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


public struct LobbyModificationSetAllowedPlatformIdsOptions
{
	public uint[] AllowedPlatformIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationSetAllowedPlatformIdsOptionsInternal : ISettable<LobbyModificationSetAllowedPlatformIdsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public uint[] AllowedPlatformIds
	{
		set
		{
			Helper.Set(value, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount);
		}
	}

	public void Set(ref LobbyModificationSetAllowedPlatformIdsOptions other)
	{
		m_ApiVersion = 1;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}

	public void Set(ref LobbyModificationSetAllowedPlatformIdsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AllowedPlatformIds = other.Value.AllowedPlatformIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AllowedPlatformIds);
	}
}


using Epic.OnlineServices;

public struct LobbyModificationSetBucketIdOptions
{
	public Utf8String BucketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationSetBucketIdOptionsInternal : ISettable<LobbyModificationSetBucketIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_BucketId;

	public Utf8String BucketId
	{
		set
		{
			Helper.Set(value, ref m_BucketId);
		}
	}

	public void Set(ref LobbyModificationSetBucketIdOptions other)
	{
		m_ApiVersion = 1;
		BucketId = other.BucketId;
	}

	public void Set(ref LobbyModificationSetBucketIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			BucketId = other.Value.BucketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_BucketId);
	}
}


public struct LobbyModificationSetInvitesAllowedOptions
{
	public bool InvitesAllowed { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationSetInvitesAllowedOptionsInternal : ISettable<LobbyModificationSetInvitesAllowedOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_InvitesAllowed;

	public bool InvitesAllowed
	{
		set
		{
			Helper.Set(value, ref m_InvitesAllowed);
		}
	}

	public void Set(ref LobbyModificationSetInvitesAllowedOptions other)
	{
		m_ApiVersion = 1;
		InvitesAllowed = other.InvitesAllowed;
	}

	public void Set(ref LobbyModificationSetInvitesAllowedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			InvitesAllowed = other.Value.InvitesAllowed;
		}
	}

	public void Dispose()
	{
	}
}


public struct LobbyModificationSetMaxMembersOptions
{
	public uint MaxMembers { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationSetMaxMembersOptionsInternal : ISettable<LobbyModificationSetMaxMembersOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxMembers;

	public uint MaxMembers
	{
		set
		{
			m_MaxMembers = value;
		}
	}

	public void Set(ref LobbyModificationSetMaxMembersOptions other)
	{
		m_ApiVersion = 1;
		MaxMembers = other.MaxMembers;
	}

	public void Set(ref LobbyModificationSetMaxMembersOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MaxMembers = other.Value.MaxMembers;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Lobby;

public struct LobbyModificationSetPermissionLevelOptions
{
	public LobbyPermissionLevel PermissionLevel { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyModificationSetPermissionLevelOptionsInternal : ISettable<LobbyModificationSetPermissionLevelOptions>, IDisposable
{
	private int m_ApiVersion;

	private LobbyPermissionLevel m_PermissionLevel;

	public LobbyPermissionLevel PermissionLevel
	{
		set
		{
			m_PermissionLevel = value;
		}
	}

	public void Set(ref LobbyModificationSetPermissionLevelOptions other)
	{
		m_ApiVersion = 1;
		PermissionLevel = other.PermissionLevel;
	}

	public void Set(ref LobbyModificationSetPermissionLevelOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PermissionLevel = other.Value.PermissionLevel;
		}
	}

	public void Dispose()
	{
	}
}


public enum LobbyPermissionLevel
{
	Publicadvertised,
	Joinviapresence,
	Inviteonly
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public sealed class LobbySearch : Handle
{
	public const int LobbysearchCopysearchresultbyindexApiLatest = 1;

	public const int LobbysearchFindApiLatest = 1;

	public const int LobbysearchGetsearchresultcountApiLatest = 1;

	public const int LobbysearchRemoveparameterApiLatest = 1;

	public const int LobbysearchSetlobbyidApiLatest = 1;

	public const int LobbysearchSetmaxresultsApiLatest = 1;

	public const int LobbysearchSetparameterApiLatest = 1;

	public const int LobbysearchSettargetuseridApiLatest = 1;

	public LobbySearch()
	{
	}

	public LobbySearch(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopySearchResultByIndex(ref LobbySearchCopySearchResultByIndexOptions options, out LobbyDetails outLobbyDetailsHandle)
	{
		LobbySearchCopySearchResultByIndexOptionsInternal options2 = default(LobbySearchCopySearchResultByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLobbyDetailsHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_LobbySearch_CopySearchResultByIndex(base.InnerHandle, ref options2, ref outLobbyDetailsHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outLobbyDetailsHandle2, out outLobbyDetailsHandle);
		return result;
	}

	public void Find(ref LobbySearchFindOptions options, object clientData, LobbySearchOnFindCallback completionDelegate)
	{
		LobbySearchFindOptionsInternal options2 = default(LobbySearchFindOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		LobbySearchOnFindCallbackInternal lobbySearchOnFindCallbackInternal = OnFindCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, lobbySearchOnFindCallbackInternal);
		Bindings.EOS_LobbySearch_Find(base.InnerHandle, ref options2, clientDataAddress, lobbySearchOnFindCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public uint GetSearchResultCount(ref LobbySearchGetSearchResultCountOptions options)
	{
		LobbySearchGetSearchResultCountOptionsInternal options2 = default(LobbySearchGetSearchResultCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_LobbySearch_GetSearchResultCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_LobbySearch_Release(base.InnerHandle);
	}

	public Result RemoveParameter(ref LobbySearchRemoveParameterOptions options)
	{
		LobbySearchRemoveParameterOptionsInternal options2 = default(LobbySearchRemoveParameterOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_RemoveParameter(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetLobbyId(ref LobbySearchSetLobbyIdOptions options)
	{
		LobbySearchSetLobbyIdOptionsInternal options2 = default(LobbySearchSetLobbyIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetLobbyId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetMaxResults(ref LobbySearchSetMaxResultsOptions options)
	{
		LobbySearchSetMaxResultsOptionsInternal options2 = default(LobbySearchSetMaxResultsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetMaxResults(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetParameter(ref LobbySearchSetParameterOptions options)
	{
		LobbySearchSetParameterOptionsInternal options2 = default(LobbySearchSetParameterOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetParameter(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetTargetUserId(ref LobbySearchSetTargetUserIdOptions options)
	{
		LobbySearchSetTargetUserIdOptionsInternal options2 = default(LobbySearchSetTargetUserIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_LobbySearch_SetTargetUserId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(LobbySearchOnFindCallbackInternal))]
	internal static void OnFindCallbackInternalImplementation(ref LobbySearchFindCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LobbySearchFindCallbackInfoInternal, LobbySearchOnFindCallback, LobbySearchFindCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public struct LobbySearchCopySearchResultByIndexOptions
{
	public uint LobbyIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchCopySearchResultByIndexOptionsInternal : ISettable<LobbySearchCopySearchResultByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LobbyIndex;

	public uint LobbyIndex
	{
		set
		{
			m_LobbyIndex = value;
		}
	}

	public void Set(ref LobbySearchCopySearchResultByIndexOptions other)
	{
		m_ApiVersion = 1;
		LobbyIndex = other.LobbyIndex;
	}

	public void Set(ref LobbySearchCopySearchResultByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyIndex = other.Value.LobbyIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbySearchFindCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LobbySearchFindCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchFindCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbySearchFindCallbackInfo>, ISettable<LobbySearchFindCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref LobbySearchFindCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref LobbySearchFindCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out LobbySearchFindCallbackInfo output)
	{
		output = default(LobbySearchFindCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct LobbySearchFindOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchFindOptionsInternal : ISettable<LobbySearchFindOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LobbySearchFindOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LobbySearchFindOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct LobbySearchGetSearchResultCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchGetSearchResultCountOptionsInternal : ISettable<LobbySearchGetSearchResultCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref LobbySearchGetSearchResultCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref LobbySearchGetSearchResultCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Lobby;

public delegate void LobbySearchOnFindCallback(ref LobbySearchFindCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void LobbySearchOnFindCallbackInternal(ref LobbySearchFindCallbackInfoInternal data);


using Epic.OnlineServices;

public struct LobbySearchRemoveParameterOptions
{
	public Utf8String Key { get; set; }

	public ComparisonOp ComparisonOp { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchRemoveParameterOptionsInternal : ISettable<LobbySearchRemoveParameterOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private ComparisonOp m_ComparisonOp;

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public ComparisonOp ComparisonOp
	{
		set
		{
			m_ComparisonOp = value;
		}
	}

	public void Set(ref LobbySearchRemoveParameterOptions other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		ComparisonOp = other.ComparisonOp;
	}

	public void Set(ref LobbySearchRemoveParameterOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			ComparisonOp = other.Value.ComparisonOp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices;

public struct LobbySearchSetLobbyIdOptions
{
	public Utf8String LobbyId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchSetLobbyIdOptionsInternal : ISettable<LobbySearchSetLobbyIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LobbySearchSetLobbyIdOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LobbySearchSetLobbyIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
	}
}


public struct LobbySearchSetMaxResultsOptions
{
	public uint MaxResults { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchSetMaxResultsOptionsInternal : ISettable<LobbySearchSetMaxResultsOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxResults;

	public uint MaxResults
	{
		set
		{
			m_MaxResults = value;
		}
	}

	public void Set(ref LobbySearchSetMaxResultsOptions other)
	{
		m_ApiVersion = 1;
		MaxResults = other.MaxResults;
	}

	public void Set(ref LobbySearchSetMaxResultsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MaxResults = other.Value.MaxResults;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbySearchSetParameterOptions
{
	public AttributeData? Parameter { get; set; }

	public ComparisonOp ComparisonOp { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchSetParameterOptionsInternal : ISettable<LobbySearchSetParameterOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Parameter;

	private ComparisonOp m_ComparisonOp;

	public AttributeData? Parameter
	{
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_Parameter);
		}
	}

	public ComparisonOp ComparisonOp
	{
		set
		{
			m_ComparisonOp = value;
		}
	}

	public void Set(ref LobbySearchSetParameterOptions other)
	{
		m_ApiVersion = 1;
		Parameter = other.Parameter;
		ComparisonOp = other.ComparisonOp;
	}

	public void Set(ref LobbySearchSetParameterOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Parameter = other.Value.Parameter;
			ComparisonOp = other.Value.ComparisonOp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Parameter);
	}
}


using Epic.OnlineServices;

public struct LobbySearchSetTargetUserIdOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbySearchSetTargetUserIdOptionsInternal : ISettable<LobbySearchSetTargetUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref LobbySearchSetTargetUserIdOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref LobbySearchSetTargetUserIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct LobbyUpdateReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LobbyUpdateReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LobbyUpdateReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LobbyUpdateReceivedCallbackInfo>, ISettable<LobbyUpdateReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref LobbyUpdateReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref LobbyUpdateReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out LobbyUpdateReceivedCallbackInfo output)
	{
		output = default(LobbyUpdateReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Lobby;

public struct LocalRTCOptions
{
	public uint Flags { get; set; }

	public bool UseManualAudioInput { get; set; }

	public bool UseManualAudioOutput { get; set; }

	public bool LocalAudioDeviceInputStartsMuted { get; set; }

	internal void Set(ref LocalRTCOptionsInternal other)
	{
		Flags = other.Flags;
		UseManualAudioInput = other.UseManualAudioInput;
		UseManualAudioOutput = other.UseManualAudioOutput;
		LocalAudioDeviceInputStartsMuted = other.LocalAudioDeviceInputStartsMuted;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LocalRTCOptionsInternal : IGettable<LocalRTCOptions>, ISettable<LocalRTCOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_Flags;

	private int m_UseManualAudioInput;

	private int m_UseManualAudioOutput;

	private int m_LocalAudioDeviceInputStartsMuted;

	public uint Flags
	{
		get
		{
			return m_Flags;
		}
		set
		{
			m_Flags = value;
		}
	}

	public bool UseManualAudioInput
	{
		get
		{
			Helper.Get(m_UseManualAudioInput, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UseManualAudioInput);
		}
	}

	public bool UseManualAudioOutput
	{
		get
		{
			Helper.Get(m_UseManualAudioOutput, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UseManualAudioOutput);
		}
	}

	public bool LocalAudioDeviceInputStartsMuted
	{
		get
		{
			Helper.Get(m_LocalAudioDeviceInputStartsMuted, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalAudioDeviceInputStartsMuted);
		}
	}

	public void Set(ref LocalRTCOptions other)
	{
		m_ApiVersion = 1;
		Flags = other.Flags;
		UseManualAudioInput = other.UseManualAudioInput;
		UseManualAudioOutput = other.UseManualAudioOutput;
		LocalAudioDeviceInputStartsMuted = other.LocalAudioDeviceInputStartsMuted;
	}

	public void Set(ref LocalRTCOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Flags = other.Value.Flags;
			UseManualAudioInput = other.Value.UseManualAudioInput;
			UseManualAudioOutput = other.Value.UseManualAudioOutput;
			LocalAudioDeviceInputStartsMuted = other.Value.LocalAudioDeviceInputStartsMuted;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out LocalRTCOptions output)
	{
		output = default(LocalRTCOptions);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Lobby;

public delegate void OnCreateLobbyCallback(ref CreateLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateLobbyCallbackInternal(ref CreateLobbyCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnDestroyLobbyCallback(ref DestroyLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDestroyLobbyCallbackInternal(ref DestroyLobbyCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnHardMuteMemberCallback(ref HardMuteMemberCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnHardMuteMemberCallbackInternal(ref HardMuteMemberCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnJoinLobbyAcceptedCallback(ref JoinLobbyAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinLobbyAcceptedCallbackInternal(ref JoinLobbyAcceptedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnJoinLobbyByIdCallback(ref JoinLobbyByIdCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinLobbyByIdCallbackInternal(ref JoinLobbyByIdCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnJoinLobbyCallback(ref JoinLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinLobbyCallbackInternal(ref JoinLobbyCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnKickMemberCallback(ref KickMemberCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnKickMemberCallbackInternal(ref KickMemberCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLeaveLobbyCallback(ref LeaveLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveLobbyCallbackInternal(ref LeaveLobbyCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLeaveLobbyRequestedCallback(ref LeaveLobbyRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveLobbyRequestedCallbackInternal(ref LeaveLobbyRequestedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyInviteAcceptedCallback(ref LobbyInviteAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyInviteAcceptedCallbackInternal(ref LobbyInviteAcceptedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyInviteReceivedCallback(ref LobbyInviteReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyInviteReceivedCallbackInternal(ref LobbyInviteReceivedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyInviteRejectedCallback(ref LobbyInviteRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyInviteRejectedCallbackInternal(ref LobbyInviteRejectedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyMemberStatusReceivedCallback(ref LobbyMemberStatusReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyMemberStatusReceivedCallbackInternal(ref LobbyMemberStatusReceivedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyMemberUpdateReceivedCallback(ref LobbyMemberUpdateReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyMemberUpdateReceivedCallbackInternal(ref LobbyMemberUpdateReceivedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnLobbyUpdateReceivedCallback(ref LobbyUpdateReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLobbyUpdateReceivedCallbackInternal(ref LobbyUpdateReceivedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnPromoteMemberCallback(ref PromoteMemberCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPromoteMemberCallbackInternal(ref PromoteMemberCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnQueryInvitesCallback(ref QueryInvitesCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryInvitesCallbackInternal(ref QueryInvitesCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnRejectInviteCallback(ref RejectInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectInviteCallbackInternal(ref RejectInviteCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnRTCRoomConnectionChangedCallback(ref RTCRoomConnectionChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRTCRoomConnectionChangedCallbackInternal(ref RTCRoomConnectionChangedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnSendInviteCallback(ref SendInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendInviteCallbackInternal(ref SendInviteCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnSendLobbyNativeInviteRequestedCallback(ref SendLobbyNativeInviteRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendLobbyNativeInviteRequestedCallbackInternal(ref SendLobbyNativeInviteRequestedCallbackInfoInternal data);


using Epic.OnlineServices.Lobby;

public delegate void OnUpdateLobbyCallback(ref UpdateLobbyCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Lobby;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateLobbyCallbackInternal(ref UpdateLobbyCallbackInfoInternal data);


using Epic.OnlineServices;

public struct ParseConnectStringOptions
{
	public Utf8String ConnectString { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ParseConnectStringOptionsInternal : ISettable<ParseConnectStringOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ConnectString;

	public Utf8String ConnectString
	{
		set
		{
			Helper.Set(value, ref m_ConnectString);
		}
	}

	public void Set(ref ParseConnectStringOptions other)
	{
		m_ApiVersion = 1;
		ConnectString = other.ConnectString;
	}

	public void Set(ref ParseConnectStringOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ConnectString = other.Value.ConnectString;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ConnectString);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct PromoteMemberCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref PromoteMemberCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PromoteMemberCallbackInfoInternal : ICallbackInfoInternal, IGettable<PromoteMemberCallbackInfo>, ISettable<PromoteMemberCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref PromoteMemberCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref PromoteMemberCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out PromoteMemberCallbackInfo output)
	{
		output = default(PromoteMemberCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct PromoteMemberOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PromoteMemberOptionsInternal : ISettable<PromoteMemberOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref PromoteMemberOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref PromoteMemberOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct QueryInvitesCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryInvitesCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryInvitesCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryInvitesCallbackInfo>, ISettable<QueryInvitesCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryInvitesCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryInvitesCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryInvitesCallbackInfo output)
	{
		output = default(QueryInvitesCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryInvitesOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryInvitesOptionsInternal : ISettable<QueryInvitesOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryInvitesOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryInvitesOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct RejectInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RejectInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		InviteId = other.InviteId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectInviteCallbackInfo>, ISettable<RejectInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref RejectInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		InviteId = other.InviteId;
	}

	public void Set(ref RejectInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_InviteId);
	}

	public void Get(out RejectInviteCallbackInfo output)
	{
		output = default(RejectInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RejectInviteOptions
{
	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectInviteOptionsInternal : ISettable<RejectInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	public Utf8String InviteId
	{
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref RejectInviteOptions other)
	{
		m_ApiVersion = 1;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref RejectInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			InviteId = other.Value.InviteId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_InviteId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct RTCRoomConnectionChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool IsConnected { get; set; }

	public Result DisconnectReason { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref RTCRoomConnectionChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		IsConnected = other.IsConnected;
		DisconnectReason = other.DisconnectReason;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RTCRoomConnectionChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RTCRoomConnectionChangedCallbackInfo>, ISettable<RTCRoomConnectionChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private int m_IsConnected;

	private Result m_DisconnectReason;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public bool IsConnected
	{
		get
		{
			Helper.Get(m_IsConnected, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsConnected);
		}
	}

	public Result DisconnectReason
	{
		get
		{
			return m_DisconnectReason;
		}
		set
		{
			m_DisconnectReason = value;
		}
	}

	public void Set(ref RTCRoomConnectionChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		IsConnected = other.IsConnected;
		DisconnectReason = other.DisconnectReason;
	}

	public void Set(ref RTCRoomConnectionChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
			IsConnected = other.Value.IsConnected;
			DisconnectReason = other.Value.DisconnectReason;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out RTCRoomConnectionChangedCallbackInfo output)
	{
		output = default(RTCRoomConnectionChangedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct SendInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SendInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendInviteCallbackInfo>, ISettable<SendInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref SendInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref SendInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out SendInviteCallbackInfo output)
	{
		output = default(SendInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SendInviteOptions
{
	public Utf8String LobbyId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendInviteOptionsInternal : ISettable<SendInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SendInviteOptions other)
	{
		m_ApiVersion = 1;
		LobbyId = other.LobbyId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SendInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyId = other.Value.LobbyId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct SendLobbyNativeInviteRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong UiEventId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String TargetNativeAccountType { get; set; }

	public Utf8String TargetUserNativeAccountId { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref SendLobbyNativeInviteRequestedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		UiEventId = other.UiEventId;
		LocalUserId = other.LocalUserId;
		TargetNativeAccountType = other.TargetNativeAccountType;
		TargetUserNativeAccountId = other.TargetUserNativeAccountId;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendLobbyNativeInviteRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendLobbyNativeInviteRequestedCallbackInfo>, ISettable<SendLobbyNativeInviteRequestedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private ulong m_UiEventId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetNativeAccountType;

	private IntPtr m_TargetUserNativeAccountId;

	private IntPtr m_LobbyId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ulong UiEventId
	{
		get
		{
			return m_UiEventId;
		}
		set
		{
			m_UiEventId = value;
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String TargetNativeAccountType
	{
		get
		{
			Helper.Get(m_TargetNativeAccountType, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetNativeAccountType);
		}
	}

	public Utf8String TargetUserNativeAccountId
	{
		get
		{
			Helper.Get(m_TargetUserNativeAccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserNativeAccountId);
		}
	}

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref SendLobbyNativeInviteRequestedCallbackInfo other)
	{
		ClientData = other.ClientData;
		UiEventId = other.UiEventId;
		LocalUserId = other.LocalUserId;
		TargetNativeAccountType = other.TargetNativeAccountType;
		TargetUserNativeAccountId = other.TargetUserNativeAccountId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref SendLobbyNativeInviteRequestedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			UiEventId = other.Value.UiEventId;
			LocalUserId = other.Value.LocalUserId;
			TargetNativeAccountType = other.Value.TargetNativeAccountType;
			TargetUserNativeAccountId = other.Value.TargetUserNativeAccountId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetNativeAccountType);
		Helper.Dispose(ref m_TargetUserNativeAccountId);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out SendLobbyNativeInviteRequestedCallbackInfo output)
	{
		output = default(SendLobbyNativeInviteRequestedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

public struct UpdateLobbyCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LobbyId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateLobbyCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateLobbyCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateLobbyCallbackInfo>, ISettable<UpdateLobbyCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LobbyId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LobbyId
	{
		get
		{
			Helper.Get(m_LobbyId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref UpdateLobbyCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LobbyId = other.LobbyId;
	}

	public void Set(ref UpdateLobbyCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LobbyId);
	}

	public void Get(out UpdateLobbyCallbackInfo output)
	{
		output = default(UpdateLobbyCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateLobbyModificationOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String LobbyId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateLobbyModificationOptionsInternal : ISettable<UpdateLobbyModificationOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_LobbyId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String LobbyId
	{
		set
		{
			Helper.Set(value, ref m_LobbyId);
		}
	}

	public void Set(ref UpdateLobbyModificationOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		LobbyId = other.LobbyId;
	}

	public void Set(ref UpdateLobbyModificationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			LobbyId = other.Value.LobbyId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_LobbyId);
	}
}


using Epic.OnlineServices.Lobby;

public struct UpdateLobbyOptions
{
	public LobbyModification LobbyModificationHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Lobby;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateLobbyOptionsInternal : ISettable<UpdateLobbyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LobbyModificationHandle;

	public LobbyModification LobbyModificationHandle
	{
		set
		{
			Helper.Set(value, ref m_LobbyModificationHandle);
		}
	}

	public void Set(ref UpdateLobbyOptions other)
	{
		m_ApiVersion = 1;
		LobbyModificationHandle = other.LobbyModificationHandle;
	}

	public void Set(ref UpdateLobbyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LobbyModificationHandle = other.Value.LobbyModificationHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LobbyModificationHandle);
	}
}


public struct CopyLeaderboardDefinitionByIndexOptions
{
	public uint LeaderboardIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLeaderboardDefinitionByIndexOptionsInternal : ISettable<CopyLeaderboardDefinitionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LeaderboardIndex;

	public uint LeaderboardIndex
	{
		set
		{
			m_LeaderboardIndex = value;
		}
	}

	public void Set(ref CopyLeaderboardDefinitionByIndexOptions other)
	{
		m_ApiVersion = 1;
		LeaderboardIndex = other.LeaderboardIndex;
	}

	public void Set(ref CopyLeaderboardDefinitionByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LeaderboardIndex = other.Value.LeaderboardIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardDefinitionByLeaderboardIdOptions
{
	public Utf8String LeaderboardId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal : ISettable<CopyLeaderboardDefinitionByLeaderboardIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LeaderboardId;

	public Utf8String LeaderboardId
	{
		set
		{
			Helper.Set(value, ref m_LeaderboardId);
		}
	}

	public void Set(ref CopyLeaderboardDefinitionByLeaderboardIdOptions other)
	{
		m_ApiVersion = 1;
		LeaderboardId = other.LeaderboardId;
	}

	public void Set(ref CopyLeaderboardDefinitionByLeaderboardIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LeaderboardId = other.Value.LeaderboardId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LeaderboardId);
	}
}


public struct CopyLeaderboardRecordByIndexOptions
{
	public uint LeaderboardRecordIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLeaderboardRecordByIndexOptionsInternal : ISettable<CopyLeaderboardRecordByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LeaderboardRecordIndex;

	public uint LeaderboardRecordIndex
	{
		set
		{
			m_LeaderboardRecordIndex = value;
		}
	}

	public void Set(ref CopyLeaderboardRecordByIndexOptions other)
	{
		m_ApiVersion = 2;
		LeaderboardRecordIndex = other.LeaderboardRecordIndex;
	}

	public void Set(ref CopyLeaderboardRecordByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LeaderboardRecordIndex = other.Value.LeaderboardRecordIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardRecordByUserIdOptions
{
	public ProductUserId UserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLeaderboardRecordByUserIdOptionsInternal : ISettable<CopyLeaderboardRecordByUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public void Set(ref CopyLeaderboardRecordByUserIdOptions other)
	{
		m_ApiVersion = 2;
		UserId = other.UserId;
	}

	public void Set(ref CopyLeaderboardRecordByUserIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			UserId = other.Value.UserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardUserScoreByIndexOptions
{
	public uint LeaderboardUserScoreIndex { get; set; }

	public Utf8String StatName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLeaderboardUserScoreByIndexOptionsInternal : ISettable<CopyLeaderboardUserScoreByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_LeaderboardUserScoreIndex;

	private IntPtr m_StatName;

	public uint LeaderboardUserScoreIndex
	{
		set
		{
			m_LeaderboardUserScoreIndex = value;
		}
	}

	public Utf8String StatName
	{
		set
		{
			Helper.Set(value, ref m_StatName);
		}
	}

	public void Set(ref CopyLeaderboardUserScoreByIndexOptions other)
	{
		m_ApiVersion = 1;
		LeaderboardUserScoreIndex = other.LeaderboardUserScoreIndex;
		StatName = other.StatName;
	}

	public void Set(ref CopyLeaderboardUserScoreByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LeaderboardUserScoreIndex = other.Value.LeaderboardUserScoreIndex;
			StatName = other.Value.StatName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}
}


using Epic.OnlineServices;

public struct CopyLeaderboardUserScoreByUserIdOptions
{
	public ProductUserId UserId { get; set; }

	public Utf8String StatName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLeaderboardUserScoreByUserIdOptionsInternal : ISettable<CopyLeaderboardUserScoreByUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_StatName;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String StatName
	{
		set
		{
			Helper.Set(value, ref m_StatName);
		}
	}

	public void Set(ref CopyLeaderboardUserScoreByUserIdOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		StatName = other.StatName;
	}

	public void Set(ref CopyLeaderboardUserScoreByUserIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			StatName = other.Value.StatName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_StatName);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct Definition
{
	public Utf8String LeaderboardId { get; set; }

	public Utf8String StatName { get; set; }

	public LeaderboardAggregation Aggregation { get; set; }

	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	internal void Set(ref DefinitionInternal other)
	{
		LeaderboardId = other.LeaderboardId;
		StatName = other.StatName;
		Aggregation = other.Aggregation;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DefinitionInternal : IGettable<Definition>, ISettable<Definition>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LeaderboardId;

	private IntPtr m_StatName;

	private LeaderboardAggregation m_Aggregation;

	private long m_StartTime;

	private long m_EndTime;

	public Utf8String LeaderboardId
	{
		get
		{
			Helper.Get(m_LeaderboardId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LeaderboardId);
		}
	}

	public Utf8String StatName
	{
		get
		{
			Helper.Get(m_StatName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_StatName);
		}
	}

	public LeaderboardAggregation Aggregation
	{
		get
		{
			return m_Aggregation;
		}
		set
		{
			m_Aggregation = value;
		}
	}

	public DateTimeOffset? StartTime
	{
		get
		{
			Helper.Get(m_StartTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_StartTime);
		}
	}

	public DateTimeOffset? EndTime
	{
		get
		{
			Helper.Get(m_EndTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_EndTime);
		}
	}

	public void Set(ref Definition other)
	{
		m_ApiVersion = 1;
		LeaderboardId = other.LeaderboardId;
		StatName = other.StatName;
		Aggregation = other.Aggregation;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
	}

	public void Set(ref Definition? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LeaderboardId = other.Value.LeaderboardId;
			StatName = other.Value.StatName;
			Aggregation = other.Value.Aggregation;
			StartTime = other.Value.StartTime;
			EndTime = other.Value.EndTime;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LeaderboardId);
		Helper.Dispose(ref m_StatName);
	}

	public void Get(out Definition output)
	{
		output = default(Definition);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetLeaderboardDefinitionCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetLeaderboardDefinitionCountOptionsInternal : ISettable<GetLeaderboardDefinitionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetLeaderboardDefinitionCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetLeaderboardDefinitionCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetLeaderboardRecordCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetLeaderboardRecordCountOptionsInternal : ISettable<GetLeaderboardRecordCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetLeaderboardRecordCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetLeaderboardRecordCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct GetLeaderboardUserScoreCountOptions
{
	public Utf8String StatName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetLeaderboardUserScoreCountOptionsInternal : ISettable<GetLeaderboardUserScoreCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_StatName;

	public Utf8String StatName
	{
		set
		{
			Helper.Set(value, ref m_StatName);
		}
	}

	public void Set(ref GetLeaderboardUserScoreCountOptions other)
	{
		m_ApiVersion = 1;
		StatName = other.StatName;
	}

	public void Set(ref GetLeaderboardUserScoreCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			StatName = other.Value.StatName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}
}


public enum LeaderboardAggregation
{
	Min,
	Max,
	Sum,
	Latest
}


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct LeaderboardRecord
{
	public ProductUserId UserId { get; set; }

	public uint Rank { get; set; }

	public int Score { get; set; }

	public Utf8String UserDisplayName { get; set; }

	internal void Set(ref LeaderboardRecordInternal other)
	{
		UserId = other.UserId;
		Rank = other.Rank;
		Score = other.Score;
		UserDisplayName = other.UserDisplayName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaderboardRecordInternal : IGettable<LeaderboardRecord>, ISettable<LeaderboardRecord>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private uint m_Rank;

	private int m_Score;

	private IntPtr m_UserDisplayName;

	public ProductUserId UserId
	{
		get
		{
			Helper.Get(m_UserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public uint Rank
	{
		get
		{
			return m_Rank;
		}
		set
		{
			m_Rank = value;
		}
	}

	public int Score
	{
		get
		{
			return m_Score;
		}
		set
		{
			m_Score = value;
		}
	}

	public Utf8String UserDisplayName
	{
		get
		{
			Helper.Get(m_UserDisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserDisplayName);
		}
	}

	public void Set(ref LeaderboardRecord other)
	{
		m_ApiVersion = 2;
		UserId = other.UserId;
		Rank = other.Rank;
		Score = other.Score;
		UserDisplayName = other.UserDisplayName;
	}

	public void Set(ref LeaderboardRecord? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			UserId = other.Value.UserId;
			Rank = other.Value.Rank;
			Score = other.Value.Score;
			UserDisplayName = other.Value.UserDisplayName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_UserDisplayName);
	}

	public void Get(out LeaderboardRecord output)
	{
		output = default(LeaderboardRecord);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public sealed class LeaderboardsInterface : Handle
{
	public const int CopyleaderboarddefinitionbyindexApiLatest = 1;

	public const int CopyleaderboarddefinitionbyleaderboardidApiLatest = 1;

	public const int CopyleaderboardrecordbyindexApiLatest = 2;

	public const int CopyleaderboardrecordbyuseridApiLatest = 2;

	public const int CopyleaderboarduserscorebyindexApiLatest = 1;

	public const int CopyleaderboarduserscorebyuseridApiLatest = 1;

	public const int DefinitionApiLatest = 1;

	public const int GetleaderboarddefinitioncountApiLatest = 1;

	public const int GetleaderboardrecordcountApiLatest = 1;

	public const int GetleaderboarduserscorecountApiLatest = 1;

	public const int LeaderboardrecordApiLatest = 2;

	public const int LeaderboarduserscoreApiLatest = 1;

	public const int QueryleaderboarddefinitionsApiLatest = 2;

	public const int QueryleaderboardranksApiLatest = 2;

	public const int QueryleaderboarduserscoresApiLatest = 2;

	public const int TimeUndefined = -1;

	public const int UserscoresquerystatinfoApiLatest = 1;

	public LeaderboardsInterface()
	{
	}

	public LeaderboardsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyLeaderboardDefinitionByIndex(ref CopyLeaderboardDefinitionByIndexOptions options, out Definition? outLeaderboardDefinition)
	{
		CopyLeaderboardDefinitionByIndexOptionsInternal options2 = default(CopyLeaderboardDefinitionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(base.InnerHandle, ref options2, ref outLeaderboardDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outLeaderboardDefinition2, out outLeaderboardDefinition);
		if (outLeaderboardDefinition.HasValue)
		{
			Bindings.EOS_Leaderboards_Definition_Release(outLeaderboardDefinition2);
		}
		return result;
	}

	public Result CopyLeaderboardDefinitionByLeaderboardId(ref CopyLeaderboardDefinitionByLeaderboardIdOptions options, out Definition? outLeaderboardDefinition)
	{
		CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal options2 = default(CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(base.InnerHandle, ref options2, ref outLeaderboardDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outLeaderboardDefinition2, out outLeaderboardDefinition);
		if (outLeaderboardDefinition.HasValue)
		{
			Bindings.EOS_Leaderboards_Definition_Release(outLeaderboardDefinition2);
		}
		return result;
	}

	public Result CopyLeaderboardRecordByIndex(ref CopyLeaderboardRecordByIndexOptions options, out LeaderboardRecord? outLeaderboardRecord)
	{
		CopyLeaderboardRecordByIndexOptionsInternal options2 = default(CopyLeaderboardRecordByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardRecord2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardRecordByIndex(base.InnerHandle, ref options2, ref outLeaderboardRecord2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecord2, out outLeaderboardRecord);
		if (outLeaderboardRecord.HasValue)
		{
			Bindings.EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecord2);
		}
		return result;
	}

	public Result CopyLeaderboardRecordByUserId(ref CopyLeaderboardRecordByUserIdOptions options, out LeaderboardRecord? outLeaderboardRecord)
	{
		CopyLeaderboardRecordByUserIdOptionsInternal options2 = default(CopyLeaderboardRecordByUserIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardRecord2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardRecordByUserId(base.InnerHandle, ref options2, ref outLeaderboardRecord2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecord2, out outLeaderboardRecord);
		if (outLeaderboardRecord.HasValue)
		{
			Bindings.EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecord2);
		}
		return result;
	}

	public Result CopyLeaderboardUserScoreByIndex(ref CopyLeaderboardUserScoreByIndexOptions options, out LeaderboardUserScore? outLeaderboardUserScore)
	{
		CopyLeaderboardUserScoreByIndexOptionsInternal options2 = default(CopyLeaderboardUserScoreByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardUserScore2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(base.InnerHandle, ref options2, ref outLeaderboardUserScore2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScore2, out outLeaderboardUserScore);
		if (outLeaderboardUserScore.HasValue)
		{
			Bindings.EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScore2);
		}
		return result;
	}

	public Result CopyLeaderboardUserScoreByUserId(ref CopyLeaderboardUserScoreByUserIdOptions options, out LeaderboardUserScore? outLeaderboardUserScore)
	{
		CopyLeaderboardUserScoreByUserIdOptionsInternal options2 = default(CopyLeaderboardUserScoreByUserIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outLeaderboardUserScore2 = IntPtr.Zero;
		Result result = Bindings.EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(base.InnerHandle, ref options2, ref outLeaderboardUserScore2);
		Helper.Dispose(ref options2);
		Helper.Get<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScore2, out outLeaderboardUserScore);
		if (outLeaderboardUserScore.HasValue)
		{
			Bindings.EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScore2);
		}
		return result;
	}

	public uint GetLeaderboardDefinitionCount(ref GetLeaderboardDefinitionCountOptions options)
	{
		GetLeaderboardDefinitionCountOptionsInternal options2 = default(GetLeaderboardDefinitionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Leaderboards_GetLeaderboardDefinitionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLeaderboardRecordCount(ref GetLeaderboardRecordCountOptions options)
	{
		GetLeaderboardRecordCountOptionsInternal options2 = default(GetLeaderboardRecordCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Leaderboards_GetLeaderboardRecordCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLeaderboardUserScoreCount(ref GetLeaderboardUserScoreCountOptions options)
	{
		GetLeaderboardUserScoreCountOptionsInternal options2 = default(GetLeaderboardUserScoreCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Leaderboards_GetLeaderboardUserScoreCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryLeaderboardDefinitions(ref QueryLeaderboardDefinitionsOptions options, object clientData, OnQueryLeaderboardDefinitionsCompleteCallback completionDelegate)
	{
		QueryLeaderboardDefinitionsOptionsInternal options2 = default(QueryLeaderboardDefinitionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryLeaderboardDefinitionsCompleteCallbackInternal onQueryLeaderboardDefinitionsCompleteCallbackInternal = OnQueryLeaderboardDefinitionsCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryLeaderboardDefinitionsCompleteCallbackInternal);
		Bindings.EOS_Leaderboards_QueryLeaderboardDefinitions(base.InnerHandle, ref options2, clientDataAddress, onQueryLeaderboardDefinitionsCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryLeaderboardRanks(ref QueryLeaderboardRanksOptions options, object clientData, OnQueryLeaderboardRanksCompleteCallback completionDelegate)
	{
		QueryLeaderboardRanksOptionsInternal options2 = default(QueryLeaderboardRanksOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryLeaderboardRanksCompleteCallbackInternal onQueryLeaderboardRanksCompleteCallbackInternal = OnQueryLeaderboardRanksCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryLeaderboardRanksCompleteCallbackInternal);
		Bindings.EOS_Leaderboards_QueryLeaderboardRanks(base.InnerHandle, ref options2, clientDataAddress, onQueryLeaderboardRanksCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryLeaderboardUserScores(ref QueryLeaderboardUserScoresOptions options, object clientData, OnQueryLeaderboardUserScoresCompleteCallback completionDelegate)
	{
		QueryLeaderboardUserScoresOptionsInternal options2 = default(QueryLeaderboardUserScoresOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryLeaderboardUserScoresCompleteCallbackInternal onQueryLeaderboardUserScoresCompleteCallbackInternal = OnQueryLeaderboardUserScoresCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryLeaderboardUserScoresCompleteCallbackInternal);
		Bindings.EOS_Leaderboards_QueryLeaderboardUserScores(base.InnerHandle, ref options2, clientDataAddress, onQueryLeaderboardUserScoresCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnQueryLeaderboardDefinitionsCompleteCallbackInternal))]
	internal static void OnQueryLeaderboardDefinitionsCompleteCallbackInternalImplementation(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal, OnQueryLeaderboardDefinitionsCompleteCallback, OnQueryLeaderboardDefinitionsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryLeaderboardRanksCompleteCallbackInternal))]
	internal static void OnQueryLeaderboardRanksCompleteCallbackInternalImplementation(ref OnQueryLeaderboardRanksCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardRanksCompleteCallbackInfoInternal, OnQueryLeaderboardRanksCompleteCallback, OnQueryLeaderboardRanksCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryLeaderboardUserScoresCompleteCallbackInternal))]
	internal static void OnQueryLeaderboardUserScoresCompleteCallbackInternalImplementation(ref OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal, OnQueryLeaderboardUserScoresCompleteCallback, OnQueryLeaderboardUserScoresCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct LeaderboardUserScore
{
	public ProductUserId UserId { get; set; }

	public int Score { get; set; }

	internal void Set(ref LeaderboardUserScoreInternal other)
	{
		UserId = other.UserId;
		Score = other.Score;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaderboardUserScoreInternal : IGettable<LeaderboardUserScore>, ISettable<LeaderboardUserScore>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private int m_Score;

	public ProductUserId UserId
	{
		get
		{
			Helper.Get(m_UserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public int Score
	{
		get
		{
			return m_Score;
		}
		set
		{
			m_Score = value;
		}
	}

	public void Set(ref LeaderboardUserScore other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		Score = other.Score;
	}

	public void Set(ref LeaderboardUserScore? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			Score = other.Value.Score;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}

	public void Get(out LeaderboardUserScore output)
	{
		output = default(LeaderboardUserScore);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Leaderboards;

public delegate void OnQueryLeaderboardDefinitionsCompleteCallback(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Leaderboards;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryLeaderboardDefinitionsCompleteCallbackInternal(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct OnQueryLeaderboardDefinitionsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryLeaderboardDefinitionsCompleteCallbackInfo>, ISettable<OnQueryLeaderboardDefinitionsCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref OnQueryLeaderboardDefinitionsCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnQueryLeaderboardDefinitionsCompleteCallbackInfo output)
	{
		output = default(OnQueryLeaderboardDefinitionsCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Leaderboards;

public delegate void OnQueryLeaderboardRanksCompleteCallback(ref OnQueryLeaderboardRanksCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Leaderboards;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryLeaderboardRanksCompleteCallbackInternal(ref OnQueryLeaderboardRanksCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct OnQueryLeaderboardRanksCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String LeaderboardId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryLeaderboardRanksCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LeaderboardId = other.LeaderboardId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryLeaderboardRanksCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryLeaderboardRanksCompleteCallbackInfo>, ISettable<OnQueryLeaderboardRanksCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LeaderboardId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String LeaderboardId
	{
		get
		{
			Helper.Get(m_LeaderboardId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LeaderboardId);
		}
	}

	public void Set(ref OnQueryLeaderboardRanksCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LeaderboardId = other.LeaderboardId;
	}

	public void Set(ref OnQueryLeaderboardRanksCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LeaderboardId = other.Value.LeaderboardId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LeaderboardId);
	}

	public void Get(out OnQueryLeaderboardRanksCompleteCallbackInfo output)
	{
		output = default(OnQueryLeaderboardRanksCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Leaderboards;

public delegate void OnQueryLeaderboardUserScoresCompleteCallback(ref OnQueryLeaderboardUserScoresCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Leaderboards;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryLeaderboardUserScoresCompleteCallbackInternal(ref OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct OnQueryLeaderboardUserScoresCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryLeaderboardUserScoresCompleteCallbackInfo>, ISettable<OnQueryLeaderboardUserScoresCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref OnQueryLeaderboardUserScoresCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref OnQueryLeaderboardUserScoresCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnQueryLeaderboardUserScoresCompleteCallbackInfo output)
	{
		output = default(OnQueryLeaderboardUserScoresCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;

public struct QueryLeaderboardDefinitionsOptions
{
	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryLeaderboardDefinitionsOptionsInternal : ISettable<QueryLeaderboardDefinitionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private long m_StartTime;

	private long m_EndTime;

	private IntPtr m_LocalUserId;

	public DateTimeOffset? StartTime
	{
		set
		{
			Helper.Set(value, ref m_StartTime);
		}
	}

	public DateTimeOffset? EndTime
	{
		set
		{
			Helper.Set(value, ref m_EndTime);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryLeaderboardDefinitionsOptions other)
	{
		m_ApiVersion = 2;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryLeaderboardDefinitionsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			StartTime = other.Value.StartTime;
			EndTime = other.Value.EndTime;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct QueryLeaderboardRanksOptions
{
	public Utf8String LeaderboardId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryLeaderboardRanksOptionsInternal : ISettable<QueryLeaderboardRanksOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LeaderboardId;

	private IntPtr m_LocalUserId;

	public Utf8String LeaderboardId
	{
		set
		{
			Helper.Set(value, ref m_LeaderboardId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryLeaderboardRanksOptions other)
	{
		m_ApiVersion = 2;
		LeaderboardId = other.LeaderboardId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryLeaderboardRanksOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LeaderboardId = other.Value.LeaderboardId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LeaderboardId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct QueryLeaderboardUserScoresOptions
{
	public ProductUserId[] UserIds { get; set; }

	public UserScoresQueryStatInfo[] StatInfo { get; set; }

	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryLeaderboardUserScoresOptionsInternal : ISettable<QueryLeaderboardUserScoresOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserIds;

	private uint m_UserIdsCount;

	private IntPtr m_StatInfo;

	private uint m_StatInfoCount;

	private long m_StartTime;

	private long m_EndTime;

	private IntPtr m_LocalUserId;

	public ProductUserId[] UserIds
	{
		set
		{
			Helper.Set(value, ref m_UserIds, out m_UserIdsCount);
		}
	}

	public UserScoresQueryStatInfo[] StatInfo
	{
		set
		{
			Helper.Set<UserScoresQueryStatInfo, UserScoresQueryStatInfoInternal>(ref value, ref m_StatInfo, out m_StatInfoCount);
		}
	}

	public DateTimeOffset? StartTime
	{
		set
		{
			Helper.Set(value, ref m_StartTime);
		}
	}

	public DateTimeOffset? EndTime
	{
		set
		{
			Helper.Set(value, ref m_EndTime);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryLeaderboardUserScoresOptions other)
	{
		m_ApiVersion = 2;
		UserIds = other.UserIds;
		StatInfo = other.StatInfo;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryLeaderboardUserScoresOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			UserIds = other.Value.UserIds;
			StatInfo = other.Value.StatInfo;
			StartTime = other.Value.StartTime;
			EndTime = other.Value.EndTime;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserIds);
		Helper.Dispose(ref m_StatInfo);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

public struct UserScoresQueryStatInfo
{
	public Utf8String StatName { get; set; }

	public LeaderboardAggregation Aggregation { get; set; }

	internal void Set(ref UserScoresQueryStatInfoInternal other)
	{
		StatName = other.StatName;
		Aggregation = other.Aggregation;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Leaderboards;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UserScoresQueryStatInfoInternal : IGettable<UserScoresQueryStatInfo>, ISettable<UserScoresQueryStatInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_StatName;

	private LeaderboardAggregation m_Aggregation;

	public Utf8String StatName
	{
		get
		{
			Helper.Get(m_StatName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_StatName);
		}
	}

	public LeaderboardAggregation Aggregation
	{
		get
		{
			return m_Aggregation;
		}
		set
		{
			m_Aggregation = value;
		}
	}

	public void Set(ref UserScoresQueryStatInfo other)
	{
		m_ApiVersion = 1;
		StatName = other.StatName;
		Aggregation = other.Aggregation;
	}

	public void Set(ref UserScoresQueryStatInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			StatName = other.Value.StatName;
			Aggregation = other.Value.Aggregation;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}

	public void Get(out UserScoresQueryStatInfo output)
	{
		output = default(UserScoresQueryStatInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyPermissionsUpdateReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPermissionsUpdateReceivedOptionsInternal : ISettable<AddNotifyPermissionsUpdateReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyPermissionsUpdateReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyPermissionsUpdateReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyPermissionByIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyPermissionByIndexOptionsInternal : ISettable<CopyPermissionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref CopyPermissionByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref CopyPermissionByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct CreateUserCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String KWSUserId { get; set; }

	public bool IsMinor { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref CreateUserCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		KWSUserId = other.KWSUserId;
		IsMinor = other.IsMinor;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateUserCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateUserCallbackInfo>, ISettable<CreateUserCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_KWSUserId;

	private int m_IsMinor;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String KWSUserId
	{
		get
		{
			Helper.Get(m_KWSUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_KWSUserId);
		}
	}

	public bool IsMinor
	{
		get
		{
			Helper.Get(m_IsMinor, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsMinor);
		}
	}

	public void Set(ref CreateUserCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		KWSUserId = other.KWSUserId;
		IsMinor = other.IsMinor;
	}

	public void Set(ref CreateUserCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			KWSUserId = other.Value.KWSUserId;
			IsMinor = other.Value.IsMinor;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_KWSUserId);
	}

	public void Get(out CreateUserCallbackInfo output)
	{
		output = default(CreateUserCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct CreateUserOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String DateOfBirth { get; set; }

	public Utf8String ParentEmail { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateUserOptionsInternal : ISettable<CreateUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_DateOfBirth;

	private IntPtr m_ParentEmail;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String DateOfBirth
	{
		set
		{
			Helper.Set(value, ref m_DateOfBirth);
		}
	}

	public Utf8String ParentEmail
	{
		set
		{
			Helper.Set(value, ref m_ParentEmail);
		}
	}

	public void Set(ref CreateUserOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		DateOfBirth = other.DateOfBirth;
		ParentEmail = other.ParentEmail;
	}

	public void Set(ref CreateUserOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			DateOfBirth = other.Value.DateOfBirth;
			ParentEmail = other.Value.ParentEmail;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_DateOfBirth);
		Helper.Dispose(ref m_ParentEmail);
	}
}


using Epic.OnlineServices;

public struct GetPermissionByKeyOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Key { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetPermissionByKeyOptionsInternal : ISettable<GetPermissionByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Key;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public void Set(ref GetPermissionByKeyOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Key = other.Key;
	}

	public void Set(ref GetPermissionByKeyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Key = other.Value.Key;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Key);
	}
}


using Epic.OnlineServices;

public struct GetPermissionsCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetPermissionsCountOptionsInternal : ISettable<GetPermissionsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetPermissionsCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetPermissionsCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public sealed class KWSInterface : Handle
{
	public const int AddnotifypermissionsupdatereceivedApiLatest = 1;

	public const int CopypermissionbyindexApiLatest = 1;

	public const int CreateuserApiLatest = 1;

	public const int GetpermissionbykeyApiLatest = 1;

	public const int GetpermissionscountApiLatest = 1;

	public const int MaxPermissionLength = 32;

	public const int MaxPermissions = 16;

	public const int PermissionstatusApiLatest = 1;

	public const int QueryagegateApiLatest = 1;

	public const int QuerypermissionsApiLatest = 1;

	public const int RequestpermissionsApiLatest = 1;

	public const int UpdateparentemailApiLatest = 1;

	public KWSInterface()
	{
	}

	public KWSInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyPermissionsUpdateReceived(ref AddNotifyPermissionsUpdateReceivedOptions options, object clientData, OnPermissionsUpdateReceivedCallback notificationFn)
	{
		AddNotifyPermissionsUpdateReceivedOptionsInternal options2 = default(AddNotifyPermissionsUpdateReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPermissionsUpdateReceivedCallbackInternal onPermissionsUpdateReceivedCallbackInternal = OnPermissionsUpdateReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onPermissionsUpdateReceivedCallbackInternal);
		ulong num = Bindings.EOS_KWS_AddNotifyPermissionsUpdateReceived(base.InnerHandle, ref options2, clientDataAddress, onPermissionsUpdateReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyPermissionByIndex(ref CopyPermissionByIndexOptions options, out PermissionStatus? outPermission)
	{
		CopyPermissionByIndexOptionsInternal options2 = default(CopyPermissionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outPermission2 = IntPtr.Zero;
		Result result = Bindings.EOS_KWS_CopyPermissionByIndex(base.InnerHandle, ref options2, ref outPermission2);
		Helper.Dispose(ref options2);
		Helper.Get<PermissionStatusInternal, PermissionStatus>(outPermission2, out outPermission);
		if (outPermission.HasValue)
		{
			Bindings.EOS_KWS_PermissionStatus_Release(outPermission2);
		}
		return result;
	}

	public void CreateUser(ref CreateUserOptions options, object clientData, OnCreateUserCallback completionDelegate)
	{
		CreateUserOptionsInternal options2 = default(CreateUserOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCreateUserCallbackInternal onCreateUserCallbackInternal = OnCreateUserCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onCreateUserCallbackInternal);
		Bindings.EOS_KWS_CreateUser(base.InnerHandle, ref options2, clientDataAddress, onCreateUserCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result GetPermissionByKey(ref GetPermissionByKeyOptions options, out KWSPermissionStatus outPermission)
	{
		GetPermissionByKeyOptionsInternal options2 = default(GetPermissionByKeyOptionsInternal);
		options2.Set(ref options);
		outPermission = Helper.GetDefault<KWSPermissionStatus>();
		Result result = Bindings.EOS_KWS_GetPermissionByKey(base.InnerHandle, ref options2, ref outPermission);
		Helper.Dispose(ref options2);
		return result;
	}

	public int GetPermissionsCount(ref GetPermissionsCountOptions options)
	{
		GetPermissionsCountOptionsInternal options2 = default(GetPermissionsCountOptionsInternal);
		options2.Set(ref options);
		int result = Bindings.EOS_KWS_GetPermissionsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryAgeGate(ref QueryAgeGateOptions options, object clientData, OnQueryAgeGateCallback completionDelegate)
	{
		QueryAgeGateOptionsInternal options2 = default(QueryAgeGateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryAgeGateCallbackInternal onQueryAgeGateCallbackInternal = OnQueryAgeGateCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryAgeGateCallbackInternal);
		Bindings.EOS_KWS_QueryAgeGate(base.InnerHandle, ref options2, clientDataAddress, onQueryAgeGateCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryPermissions(ref QueryPermissionsOptions options, object clientData, OnQueryPermissionsCallback completionDelegate)
	{
		QueryPermissionsOptionsInternal options2 = default(QueryPermissionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryPermissionsCallbackInternal onQueryPermissionsCallbackInternal = OnQueryPermissionsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryPermissionsCallbackInternal);
		Bindings.EOS_KWS_QueryPermissions(base.InnerHandle, ref options2, clientDataAddress, onQueryPermissionsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyPermissionsUpdateReceived(ulong inId)
	{
		Bindings.EOS_KWS_RemoveNotifyPermissionsUpdateReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RequestPermissions(ref RequestPermissionsOptions options, object clientData, OnRequestPermissionsCallback completionDelegate)
	{
		RequestPermissionsOptionsInternal options2 = default(RequestPermissionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRequestPermissionsCallbackInternal onRequestPermissionsCallbackInternal = OnRequestPermissionsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRequestPermissionsCallbackInternal);
		Bindings.EOS_KWS_RequestPermissions(base.InnerHandle, ref options2, clientDataAddress, onRequestPermissionsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateParentEmail(ref UpdateParentEmailOptions options, object clientData, OnUpdateParentEmailCallback completionDelegate)
	{
		UpdateParentEmailOptionsInternal options2 = default(UpdateParentEmailOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateParentEmailCallbackInternal onUpdateParentEmailCallbackInternal = OnUpdateParentEmailCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateParentEmailCallbackInternal);
		Bindings.EOS_KWS_UpdateParentEmail(base.InnerHandle, ref options2, clientDataAddress, onUpdateParentEmailCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnCreateUserCallbackInternal))]
	internal static void OnCreateUserCallbackInternalImplementation(ref CreateUserCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateUserCallbackInfoInternal, OnCreateUserCallback, CreateUserCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPermissionsUpdateReceivedCallbackInternal))]
	internal static void OnPermissionsUpdateReceivedCallbackInternalImplementation(ref PermissionsUpdateReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<PermissionsUpdateReceivedCallbackInfoInternal, OnPermissionsUpdateReceivedCallback, PermissionsUpdateReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryAgeGateCallbackInternal))]
	internal static void OnQueryAgeGateCallbackInternalImplementation(ref QueryAgeGateCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryAgeGateCallbackInfoInternal, OnQueryAgeGateCallback, QueryAgeGateCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryPermissionsCallbackInternal))]
	internal static void OnQueryPermissionsCallbackInternalImplementation(ref QueryPermissionsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryPermissionsCallbackInfoInternal, OnQueryPermissionsCallback, QueryPermissionsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestPermissionsCallbackInternal))]
	internal static void OnRequestPermissionsCallbackInternalImplementation(ref RequestPermissionsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RequestPermissionsCallbackInfoInternal, OnRequestPermissionsCallback, RequestPermissionsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateParentEmailCallbackInternal))]
	internal static void OnUpdateParentEmailCallbackInternalImplementation(ref UpdateParentEmailCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateParentEmailCallbackInfoInternal, OnUpdateParentEmailCallback, UpdateParentEmailCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum KWSPermissionStatus
{
	Granted,
	Rejected,
	Pending
}


using Epic.OnlineServices.KWS;

public delegate void OnCreateUserCallback(ref CreateUserCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateUserCallbackInternal(ref CreateUserCallbackInfoInternal data);


using Epic.OnlineServices.KWS;

public delegate void OnPermissionsUpdateReceivedCallback(ref PermissionsUpdateReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPermissionsUpdateReceivedCallbackInternal(ref PermissionsUpdateReceivedCallbackInfoInternal data);


using Epic.OnlineServices.KWS;

public delegate void OnQueryAgeGateCallback(ref QueryAgeGateCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryAgeGateCallbackInternal(ref QueryAgeGateCallbackInfoInternal data);


using Epic.OnlineServices.KWS;

public delegate void OnQueryPermissionsCallback(ref QueryPermissionsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryPermissionsCallbackInternal(ref QueryPermissionsCallbackInfoInternal data);


using Epic.OnlineServices.KWS;

public delegate void OnRequestPermissionsCallback(ref RequestPermissionsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestPermissionsCallbackInternal(ref RequestPermissionsCallbackInfoInternal data);


using Epic.OnlineServices.KWS;

public delegate void OnUpdateParentEmailCallback(ref UpdateParentEmailCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.KWS;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateParentEmailCallbackInternal(ref UpdateParentEmailCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct PermissionStatus
{
	public Utf8String Name { get; set; }

	public KWSPermissionStatus Status { get; set; }

	internal void Set(ref PermissionStatusInternal other)
	{
		Name = other.Name;
		Status = other.Status;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PermissionStatusInternal : IGettable<PermissionStatus>, ISettable<PermissionStatus>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private KWSPermissionStatus m_Status;

	public Utf8String Name
	{
		get
		{
			Helper.Get(m_Name, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Name);
		}
	}

	public KWSPermissionStatus Status
	{
		get
		{
			return m_Status;
		}
		set
		{
			m_Status = value;
		}
	}

	public void Set(ref PermissionStatus other)
	{
		m_ApiVersion = 1;
		Name = other.Name;
		Status = other.Status;
	}

	public void Set(ref PermissionStatus? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Name = other.Value.Name;
			Status = other.Value.Status;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Name);
	}

	public void Get(out PermissionStatus output)
	{
		output = default(PermissionStatus);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct PermissionsUpdateReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String KWSUserId { get; set; }

	public Utf8String DateOfBirth { get; set; }

	public bool IsMinor { get; set; }

	public Utf8String ParentEmail { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref PermissionsUpdateReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		KWSUserId = other.KWSUserId;
		DateOfBirth = other.DateOfBirth;
		IsMinor = other.IsMinor;
		ParentEmail = other.ParentEmail;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PermissionsUpdateReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<PermissionsUpdateReceivedCallbackInfo>, ISettable<PermissionsUpdateReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_KWSUserId;

	private IntPtr m_DateOfBirth;

	private int m_IsMinor;

	private IntPtr m_ParentEmail;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String KWSUserId
	{
		get
		{
			Helper.Get(m_KWSUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_KWSUserId);
		}
	}

	public Utf8String DateOfBirth
	{
		get
		{
			Helper.Get(m_DateOfBirth, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DateOfBirth);
		}
	}

	public bool IsMinor
	{
		get
		{
			Helper.Get(m_IsMinor, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsMinor);
		}
	}

	public Utf8String ParentEmail
	{
		get
		{
			Helper.Get(m_ParentEmail, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParentEmail);
		}
	}

	public void Set(ref PermissionsUpdateReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		KWSUserId = other.KWSUserId;
		DateOfBirth = other.DateOfBirth;
		IsMinor = other.IsMinor;
		ParentEmail = other.ParentEmail;
	}

	public void Set(ref PermissionsUpdateReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			KWSUserId = other.Value.KWSUserId;
			DateOfBirth = other.Value.DateOfBirth;
			IsMinor = other.Value.IsMinor;
			ParentEmail = other.Value.ParentEmail;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_KWSUserId);
		Helper.Dispose(ref m_DateOfBirth);
		Helper.Dispose(ref m_ParentEmail);
	}

	public void Get(out PermissionsUpdateReceivedCallbackInfo output)
	{
		output = default(PermissionsUpdateReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct QueryAgeGateCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String CountryCode { get; set; }

	public uint AgeOfConsent { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryAgeGateCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		CountryCode = other.CountryCode;
		AgeOfConsent = other.AgeOfConsent;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryAgeGateCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryAgeGateCallbackInfo>, ISettable<QueryAgeGateCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_CountryCode;

	private uint m_AgeOfConsent;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String CountryCode
	{
		get
		{
			Helper.Get(m_CountryCode, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CountryCode);
		}
	}

	public uint AgeOfConsent
	{
		get
		{
			return m_AgeOfConsent;
		}
		set
		{
			m_AgeOfConsent = value;
		}
	}

	public void Set(ref QueryAgeGateCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		CountryCode = other.CountryCode;
		AgeOfConsent = other.AgeOfConsent;
	}

	public void Set(ref QueryAgeGateCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			CountryCode = other.Value.CountryCode;
			AgeOfConsent = other.Value.AgeOfConsent;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_CountryCode);
	}

	public void Get(out QueryAgeGateCallbackInfo output)
	{
		output = default(QueryAgeGateCallbackInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct QueryAgeGateOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryAgeGateOptionsInternal : ISettable<QueryAgeGateOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref QueryAgeGateOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref QueryAgeGateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct QueryPermissionsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String KWSUserId { get; set; }

	public Utf8String DateOfBirth { get; set; }

	public bool IsMinor { get; set; }

	public Utf8String ParentEmail { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryPermissionsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		KWSUserId = other.KWSUserId;
		DateOfBirth = other.DateOfBirth;
		IsMinor = other.IsMinor;
		ParentEmail = other.ParentEmail;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryPermissionsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryPermissionsCallbackInfo>, ISettable<QueryPermissionsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_KWSUserId;

	private IntPtr m_DateOfBirth;

	private int m_IsMinor;

	private IntPtr m_ParentEmail;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String KWSUserId
	{
		get
		{
			Helper.Get(m_KWSUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_KWSUserId);
		}
	}

	public Utf8String DateOfBirth
	{
		get
		{
			Helper.Get(m_DateOfBirth, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DateOfBirth);
		}
	}

	public bool IsMinor
	{
		get
		{
			Helper.Get(m_IsMinor, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsMinor);
		}
	}

	public Utf8String ParentEmail
	{
		get
		{
			Helper.Get(m_ParentEmail, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParentEmail);
		}
	}

	public void Set(ref QueryPermissionsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		KWSUserId = other.KWSUserId;
		DateOfBirth = other.DateOfBirth;
		IsMinor = other.IsMinor;
		ParentEmail = other.ParentEmail;
	}

	public void Set(ref QueryPermissionsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			KWSUserId = other.Value.KWSUserId;
			DateOfBirth = other.Value.DateOfBirth;
			IsMinor = other.Value.IsMinor;
			ParentEmail = other.Value.ParentEmail;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_KWSUserId);
		Helper.Dispose(ref m_DateOfBirth);
		Helper.Dispose(ref m_ParentEmail);
	}

	public void Get(out QueryPermissionsCallbackInfo output)
	{
		output = default(QueryPermissionsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryPermissionsOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryPermissionsOptionsInternal : ISettable<QueryPermissionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryPermissionsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryPermissionsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct RequestPermissionsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RequestPermissionsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RequestPermissionsCallbackInfoInternal : ICallbackInfoInternal, IGettable<RequestPermissionsCallbackInfo>, ISettable<RequestPermissionsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref RequestPermissionsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref RequestPermissionsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out RequestPermissionsCallbackInfo output)
	{
		output = default(RequestPermissionsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RequestPermissionsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String[] PermissionKeys { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RequestPermissionsOptionsInternal : ISettable<RequestPermissionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_PermissionKeyCount;

	private IntPtr m_PermissionKeys;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] PermissionKeys
	{
		set
		{
			Helper.Set(value, ref m_PermissionKeys, isArrayItemAllocated: true, out m_PermissionKeyCount);
		}
	}

	public void Set(ref RequestPermissionsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		PermissionKeys = other.PermissionKeys;
	}

	public void Set(ref RequestPermissionsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			PermissionKeys = other.Value.PermissionKeys;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PermissionKeys);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

public struct UpdateParentEmailCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateParentEmailCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateParentEmailCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateParentEmailCallbackInfo>, ISettable<UpdateParentEmailCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref UpdateParentEmailCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref UpdateParentEmailCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out UpdateParentEmailCallbackInfo output)
	{
		output = default(UpdateParentEmailCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateParentEmailOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String ParentEmail { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.KWS;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateParentEmailOptionsInternal : ISettable<UpdateParentEmailOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ParentEmail;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ParentEmail
	{
		set
		{
			Helper.Set(value, ref m_ParentEmail);
		}
	}

	public void Set(ref UpdateParentEmailOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ParentEmail = other.ParentEmail;
	}

	public void Set(ref UpdateParentEmailOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ParentEmail = other.Value.ParentEmail;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ParentEmail);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyUserLoginStatusChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyUserLoginStatusChangedOptionsInternal : ISettable<AddNotifyUserLoginStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyUserLoginStatusChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyUserLoginStatusChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct ClearUserPreLogoutCallbackOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ClearUserPreLogoutCallbackOptionsInternal : ISettable<ClearUserPreLogoutCallbackOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref ClearUserPreLogoutCallbackOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref ClearUserPreLogoutCallbackOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct CreateIntegratedPlatformOptionsContainerOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateIntegratedPlatformOptionsContainerOptionsInternal : ISettable<CreateIntegratedPlatformOptionsContainerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref CreateIntegratedPlatformOptionsContainerOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref CreateIntegratedPlatformOptionsContainerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct FinalizeDeferredUserLogoutOptions
{
	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public LoginStatus ExpectedLoginStatus { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct FinalizeDeferredUserLogoutOptionsInternal : ISettable<FinalizeDeferredUserLogoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private LoginStatus m_ExpectedLoginStatus;

	public Utf8String PlatformType
	{
		set
		{
			Helper.Set(value, ref m_PlatformType);
		}
	}

	public Utf8String LocalPlatformUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalPlatformUserId);
		}
	}

	public LoginStatus ExpectedLoginStatus
	{
		set
		{
			m_ExpectedLoginStatus = value;
		}
	}

	public void Set(ref FinalizeDeferredUserLogoutOptions other)
	{
		m_ApiVersion = 1;
		PlatformType = other.PlatformType;
		LocalPlatformUserId = other.LocalPlatformUserId;
		ExpectedLoginStatus = other.ExpectedLoginStatus;
	}

	public void Set(ref FinalizeDeferredUserLogoutOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlatformType = other.Value.PlatformType;
			LocalPlatformUserId = other.Value.LocalPlatformUserId;
			ExpectedLoginStatus = other.Value.ExpectedLoginStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformType);
		Helper.Dispose(ref m_LocalPlatformUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public sealed class IntegratedPlatformInterface : Handle
{
	public const int AddnotifyuserloginstatuschangedApiLatest = 1;

	public const int ClearuserprelogoutcallbackApiLatest = 1;

	public const int CreateintegratedplatformoptionscontainerApiLatest = 1;

	public const int FinalizedeferreduserlogoutApiLatest = 1;

	public const int OptionsApiLatest = 1;

	public const int SetuserloginstatusApiLatest = 1;

	public const int SetuserprelogoutcallbackApiLatest = 1;

	public const int SteamMaxSteamapiinterfaceversionsarraySize = 4096;

	public const int SteamOptionsApiLatest = 3;

	public IntegratedPlatformInterface()
	{
	}

	public IntegratedPlatformInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyUserLoginStatusChanged(ref AddNotifyUserLoginStatusChangedOptions options, object clientData, OnUserLoginStatusChangedCallback callbackFunction)
	{
		AddNotifyUserLoginStatusChangedOptionsInternal options2 = default(AddNotifyUserLoginStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUserLoginStatusChangedCallbackInternal onUserLoginStatusChangedCallbackInternal = OnUserLoginStatusChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, callbackFunction, onUserLoginStatusChangedCallbackInternal);
		ulong num = Bindings.EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged(base.InnerHandle, ref options2, clientDataAddress, onUserLoginStatusChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public void ClearUserPreLogoutCallback(ref ClearUserPreLogoutCallbackOptions options)
	{
		ClearUserPreLogoutCallbackOptionsInternal options2 = default(ClearUserPreLogoutCallbackOptionsInternal);
		options2.Set(ref options);
		Bindings.EOS_IntegratedPlatform_ClearUserPreLogoutCallback(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
	}

	public static Result CreateIntegratedPlatformOptionsContainer(ref CreateIntegratedPlatformOptionsContainerOptions options, out IntegratedPlatformOptionsContainer outIntegratedPlatformOptionsContainerHandle)
	{
		CreateIntegratedPlatformOptionsContainerOptionsInternal options2 = default(CreateIntegratedPlatformOptionsContainerOptionsInternal);
		options2.Set(ref options);
		IntPtr outIntegratedPlatformOptionsContainerHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer(ref options2, ref outIntegratedPlatformOptionsContainerHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outIntegratedPlatformOptionsContainerHandle2, out outIntegratedPlatformOptionsContainerHandle);
		return result;
	}

	public Result FinalizeDeferredUserLogout(ref FinalizeDeferredUserLogoutOptions options)
	{
		FinalizeDeferredUserLogoutOptionsInternal options2 = default(FinalizeDeferredUserLogoutOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_IntegratedPlatform_FinalizeDeferredUserLogout(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyUserLoginStatusChanged(ulong notificationId)
	{
		Bindings.EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SetUserLoginStatus(ref SetUserLoginStatusOptions options)
	{
		SetUserLoginStatusOptionsInternal options2 = default(SetUserLoginStatusOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_IntegratedPlatform_SetUserLoginStatus(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetUserPreLogoutCallback(ref SetUserPreLogoutCallbackOptions options, object clientData, OnUserPreLogoutCallback callbackFunction)
	{
		SetUserPreLogoutCallbackOptionsInternal options2 = default(SetUserPreLogoutCallbackOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUserPreLogoutCallbackInternal onUserPreLogoutCallbackInternal = OnUserPreLogoutCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, callbackFunction, onUserPreLogoutCallbackInternal);
		Result result = Bindings.EOS_IntegratedPlatform_SetUserPreLogoutCallback(base.InnerHandle, ref options2, clientDataAddress, onUserPreLogoutCallbackInternal);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnUserLoginStatusChangedCallbackInternal))]
	internal static void OnUserLoginStatusChangedCallbackInternalImplementation(ref UserLoginStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<UserLoginStatusChangedCallbackInfoInternal, OnUserLoginStatusChangedCallback, UserLoginStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUserPreLogoutCallbackInternal))]
	internal static IntegratedPlatformPreLogoutAction OnUserPreLogoutCallbackInternalImplementation(ref UserPreLogoutCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<UserPreLogoutCallbackInfoInternal, OnUserPreLogoutCallback, UserPreLogoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			return callback(ref callbackInfo);
		}
		return Helper.GetDefault<IntegratedPlatformPreLogoutAction>();
	}
}


using System;

[Flags]
public enum IntegratedPlatformManagementFlags
{
	Disabled = 1,
	LibraryManagedByApplication = 2,
	LibraryManagedBySDK = 4,
	DisablePresenceMirroring = 8,
	DisableSDKManagedSessions = 0x10,
	PreferEOSIdentity = 0x20,
	PreferIntegratedIdentity = 0x40,
	ApplicationManagedIdentityLogin = 0x80
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public sealed class IntegratedPlatformOptionsContainer : Handle
{
	public const int IntegratedplatformoptionscontainerAddApiLatest = 1;

	public IntegratedPlatformOptionsContainer()
	{
	}

	public IntegratedPlatformOptionsContainer(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result Add(ref IntegratedPlatformOptionsContainerAddOptions inOptions)
	{
		IntegratedPlatformOptionsContainerAddOptionsInternal inOptions2 = default(IntegratedPlatformOptionsContainerAddOptionsInternal);
		inOptions2.Set(ref inOptions);
		Result result = Bindings.EOS_IntegratedPlatformOptionsContainer_Add(base.InnerHandle, ref inOptions2);
		Helper.Dispose(ref inOptions2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_IntegratedPlatformOptionsContainer_Release(base.InnerHandle);
	}
}


using Epic.OnlineServices.IntegratedPlatform;

public struct IntegratedPlatformOptionsContainerAddOptions
{
	public Options? Options { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IntegratedPlatformOptionsContainerAddOptionsInternal : ISettable<IntegratedPlatformOptionsContainerAddOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Options;

	public Options? Options
	{
		set
		{
			Helper.Set<Options, OptionsInternal>(ref value, ref m_Options);
		}
	}

	public void Set(ref IntegratedPlatformOptionsContainerAddOptions other)
	{
		m_ApiVersion = 1;
		Options = other.Options;
	}

	public void Set(ref IntegratedPlatformOptionsContainerAddOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Options = other.Value.Options;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Options);
	}
}


public enum IntegratedPlatformPreLogoutAction
{
	ProcessLogoutImmediately,
	DeferLogout
}


using Epic.OnlineServices.IntegratedPlatform;

public delegate void OnUserLoginStatusChangedCallback(ref UserLoginStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.IntegratedPlatform;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUserLoginStatusChangedCallbackInternal(ref UserLoginStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices.IntegratedPlatform;

public delegate IntegratedPlatformPreLogoutAction OnUserPreLogoutCallback(ref UserPreLogoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.IntegratedPlatform;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate IntegratedPlatformPreLogoutAction OnUserPreLogoutCallbackInternal(ref UserPreLogoutCallbackInfoInternal data);


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public struct Options
{
	public Utf8String Type { get; set; }

	public IntegratedPlatformManagementFlags Flags { get; set; }

	public IntPtr InitOptions { get; set; }

	internal void Set(ref OptionsInternal other)
	{
		Type = other.Type;
		Flags = other.Flags;
		InitOptions = other.InitOptions;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OptionsInternal : IGettable<Options>, ISettable<Options>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Type;

	private IntegratedPlatformManagementFlags m_Flags;

	private IntPtr m_InitOptions;

	public Utf8String Type
	{
		get
		{
			Helper.Get(m_Type, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Type);
		}
	}

	public IntegratedPlatformManagementFlags Flags
	{
		get
		{
			return m_Flags;
		}
		set
		{
			m_Flags = value;
		}
	}

	public IntPtr InitOptions
	{
		get
		{
			return m_InitOptions;
		}
		set
		{
			m_InitOptions = value;
		}
	}

	public void Set(ref Options other)
	{
		m_ApiVersion = 1;
		Type = other.Type;
		Flags = other.Flags;
		InitOptions = other.InitOptions;
	}

	public void Set(ref Options? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Type = other.Value.Type;
			Flags = other.Value.Flags;
			InitOptions = other.Value.InitOptions;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Type);
		Helper.Dispose(ref m_InitOptions);
	}

	public void Get(out Options output)
	{
		output = default(Options);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SetUserLoginStatusOptions
{
	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public LoginStatus CurrentLoginStatus { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetUserLoginStatusOptionsInternal : ISettable<SetUserLoginStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private LoginStatus m_CurrentLoginStatus;

	public Utf8String PlatformType
	{
		set
		{
			Helper.Set(value, ref m_PlatformType);
		}
	}

	public Utf8String LocalPlatformUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalPlatformUserId);
		}
	}

	public LoginStatus CurrentLoginStatus
	{
		set
		{
			m_CurrentLoginStatus = value;
		}
	}

	public void Set(ref SetUserLoginStatusOptions other)
	{
		m_ApiVersion = 1;
		PlatformType = other.PlatformType;
		LocalPlatformUserId = other.LocalPlatformUserId;
		CurrentLoginStatus = other.CurrentLoginStatus;
	}

	public void Set(ref SetUserLoginStatusOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlatformType = other.Value.PlatformType;
			LocalPlatformUserId = other.Value.LocalPlatformUserId;
			CurrentLoginStatus = other.Value.CurrentLoginStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformType);
		Helper.Dispose(ref m_LocalPlatformUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct SetUserPreLogoutCallbackOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetUserPreLogoutCallbackOptionsInternal : ISettable<SetUserPreLogoutCallbackOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref SetUserPreLogoutCallbackOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref SetUserPreLogoutCallbackOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public struct SteamOptions
{
	public Utf8String OverrideLibraryPath { get; set; }

	public uint SteamMajorVersion { get; set; }

	public uint SteamMinorVersion { get; set; }

	public Utf8String SteamApiInterfaceVersionsArray { get; set; }

	public uint SteamApiInterfaceVersionsArrayBytes { get; set; }

	internal void Set(ref SteamOptionsInternal other)
	{
		OverrideLibraryPath = other.OverrideLibraryPath;
		SteamMajorVersion = other.SteamMajorVersion;
		SteamMinorVersion = other.SteamMinorVersion;
		SteamApiInterfaceVersionsArray = other.SteamApiInterfaceVersionsArray;
		SteamApiInterfaceVersionsArrayBytes = other.SteamApiInterfaceVersionsArrayBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SteamOptionsInternal : IGettable<SteamOptions>, ISettable<SteamOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_OverrideLibraryPath;

	private uint m_SteamMajorVersion;

	private uint m_SteamMinorVersion;

	private IntPtr m_SteamApiInterfaceVersionsArray;

	private uint m_SteamApiInterfaceVersionsArrayBytes;

	public Utf8String OverrideLibraryPath
	{
		get
		{
			Helper.Get(m_OverrideLibraryPath, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OverrideLibraryPath);
		}
	}

	public uint SteamMajorVersion
	{
		get
		{
			return m_SteamMajorVersion;
		}
		set
		{
			m_SteamMajorVersion = value;
		}
	}

	public uint SteamMinorVersion
	{
		get
		{
			return m_SteamMinorVersion;
		}
		set
		{
			m_SteamMinorVersion = value;
		}
	}

	public Utf8String SteamApiInterfaceVersionsArray
	{
		get
		{
			Helper.Get(m_SteamApiInterfaceVersionsArray, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SteamApiInterfaceVersionsArray);
		}
	}

	public uint SteamApiInterfaceVersionsArrayBytes
	{
		get
		{
			return m_SteamApiInterfaceVersionsArrayBytes;
		}
		set
		{
			m_SteamApiInterfaceVersionsArrayBytes = value;
		}
	}

	public void Set(ref SteamOptions other)
	{
		m_ApiVersion = 3;
		OverrideLibraryPath = other.OverrideLibraryPath;
		SteamMajorVersion = other.SteamMajorVersion;
		SteamMinorVersion = other.SteamMinorVersion;
		SteamApiInterfaceVersionsArray = other.SteamApiInterfaceVersionsArray;
		SteamApiInterfaceVersionsArrayBytes = other.SteamApiInterfaceVersionsArrayBytes;
	}

	public void Set(ref SteamOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			OverrideLibraryPath = other.Value.OverrideLibraryPath;
			SteamMajorVersion = other.Value.SteamMajorVersion;
			SteamMinorVersion = other.Value.SteamMinorVersion;
			SteamApiInterfaceVersionsArray = other.Value.SteamApiInterfaceVersionsArray;
			SteamApiInterfaceVersionsArrayBytes = other.Value.SteamApiInterfaceVersionsArrayBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_OverrideLibraryPath);
		Helper.Dispose(ref m_SteamApiInterfaceVersionsArray);
	}

	public void Get(out SteamOptions output)
	{
		output = default(SteamOptions);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public struct UserLoginStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public EpicAccountId AccountId { get; set; }

	public ProductUserId ProductUserId { get; set; }

	public LoginStatus PreviousLoginStatus { get; set; }

	public LoginStatus CurrentLoginStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref UserLoginStatusChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		PlatformType = other.PlatformType;
		LocalPlatformUserId = other.LocalPlatformUserId;
		AccountId = other.AccountId;
		ProductUserId = other.ProductUserId;
		PreviousLoginStatus = other.PreviousLoginStatus;
		CurrentLoginStatus = other.CurrentLoginStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UserLoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<UserLoginStatusChangedCallbackInfo>, ISettable<UserLoginStatusChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private IntPtr m_AccountId;

	private IntPtr m_ProductUserId;

	private LoginStatus m_PreviousLoginStatus;

	private LoginStatus m_CurrentLoginStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String PlatformType
	{
		get
		{
			Helper.Get(m_PlatformType, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PlatformType);
		}
	}

	public Utf8String LocalPlatformUserId
	{
		get
		{
			Helper.Get(m_LocalPlatformUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalPlatformUserId);
		}
	}

	public EpicAccountId AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public ProductUserId ProductUserId
	{
		get
		{
			Helper.Get(m_ProductUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductUserId);
		}
	}

	public LoginStatus PreviousLoginStatus
	{
		get
		{
			return m_PreviousLoginStatus;
		}
		set
		{
			m_PreviousLoginStatus = value;
		}
	}

	public LoginStatus CurrentLoginStatus
	{
		get
		{
			return m_CurrentLoginStatus;
		}
		set
		{
			m_CurrentLoginStatus = value;
		}
	}

	public void Set(ref UserLoginStatusChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		PlatformType = other.PlatformType;
		LocalPlatformUserId = other.LocalPlatformUserId;
		AccountId = other.AccountId;
		ProductUserId = other.ProductUserId;
		PreviousLoginStatus = other.PreviousLoginStatus;
		CurrentLoginStatus = other.CurrentLoginStatus;
	}

	public void Set(ref UserLoginStatusChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			PlatformType = other.Value.PlatformType;
			LocalPlatformUserId = other.Value.LocalPlatformUserId;
			AccountId = other.Value.AccountId;
			ProductUserId = other.Value.ProductUserId;
			PreviousLoginStatus = other.Value.PreviousLoginStatus;
			CurrentLoginStatus = other.Value.CurrentLoginStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_PlatformType);
		Helper.Dispose(ref m_LocalPlatformUserId);
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_ProductUserId);
	}

	public void Get(out UserLoginStatusChangedCallbackInfo output)
	{
		output = default(UserLoginStatusChangedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

public struct UserPreLogoutCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String PlatformType { get; set; }

	public Utf8String LocalPlatformUserId { get; set; }

	public EpicAccountId AccountId { get; set; }

	public ProductUserId ProductUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref UserPreLogoutCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		PlatformType = other.PlatformType;
		LocalPlatformUserId = other.LocalPlatformUserId;
		AccountId = other.AccountId;
		ProductUserId = other.ProductUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UserPreLogoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<UserPreLogoutCallbackInfo>, ISettable<UserPreLogoutCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_PlatformType;

	private IntPtr m_LocalPlatformUserId;

	private IntPtr m_AccountId;

	private IntPtr m_ProductUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String PlatformType
	{
		get
		{
			Helper.Get(m_PlatformType, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PlatformType);
		}
	}

	public Utf8String LocalPlatformUserId
	{
		get
		{
			Helper.Get(m_LocalPlatformUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalPlatformUserId);
		}
	}

	public EpicAccountId AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public ProductUserId ProductUserId
	{
		get
		{
			Helper.Get(m_ProductUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductUserId);
		}
	}

	public void Set(ref UserPreLogoutCallbackInfo other)
	{
		ClientData = other.ClientData;
		PlatformType = other.PlatformType;
		LocalPlatformUserId = other.LocalPlatformUserId;
		AccountId = other.AccountId;
		ProductUserId = other.ProductUserId;
	}

	public void Set(ref UserPreLogoutCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			PlatformType = other.Value.PlatformType;
			LocalPlatformUserId = other.Value.LocalPlatformUserId;
			AccountId = other.Value.AccountId;
			ProductUserId = other.Value.ProductUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_PlatformType);
		Helper.Dispose(ref m_LocalPlatformUserId);
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_ProductUserId);
	}

	public void Get(out UserPreLogoutCallbackInfo output)
	{
		output = default(UserPreLogoutCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct AcceptInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref AcceptInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AcceptInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<AcceptInviteCallbackInfo>, ISettable<AcceptInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref AcceptInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref AcceptInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out AcceptInviteCallbackInfo output)
	{
		output = default(AcceptInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct AcceptInviteOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AcceptInviteOptionsInternal : ISettable<AcceptInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref AcceptInviteOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref AcceptInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyBlockedUsersUpdateOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyBlockedUsersUpdateOptionsInternal : ISettable<AddNotifyBlockedUsersUpdateOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyBlockedUsersUpdateOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyBlockedUsersUpdateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyFriendsUpdateOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyFriendsUpdateOptionsInternal : ISettable<AddNotifyFriendsUpdateOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyFriendsUpdateOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyFriendsUpdateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public sealed class FriendsInterface : Handle
{
	public const int AcceptinviteApiLatest = 1;

	public const int AddnotifyblockedusersupdateApiLatest = 1;

	public const int AddnotifyfriendsupdateApiLatest = 1;

	public const int GetblockeduseratindexApiLatest = 1;

	public const int GetblockeduserscountApiLatest = 1;

	public const int GetfriendatindexApiLatest = 1;

	public const int GetfriendscountApiLatest = 1;

	public const int GetstatusApiLatest = 1;

	public const int QueryfriendsApiLatest = 1;

	public const int RejectinviteApiLatest = 1;

	public const int SendinviteApiLatest = 1;

	public FriendsInterface()
	{
	}

	public FriendsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void AcceptInvite(ref AcceptInviteOptions options, object clientData, OnAcceptInviteCallback completionDelegate)
	{
		AcceptInviteOptionsInternal options2 = default(AcceptInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAcceptInviteCallbackInternal onAcceptInviteCallbackInternal = OnAcceptInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAcceptInviteCallbackInternal);
		Bindings.EOS_Friends_AcceptInvite(base.InnerHandle, ref options2, clientDataAddress, onAcceptInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public ulong AddNotifyBlockedUsersUpdate(ref AddNotifyBlockedUsersUpdateOptions options, object clientData, OnBlockedUsersUpdateCallback blockedUsersUpdateHandler)
	{
		AddNotifyBlockedUsersUpdateOptionsInternal options2 = default(AddNotifyBlockedUsersUpdateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnBlockedUsersUpdateCallbackInternal onBlockedUsersUpdateCallbackInternal = OnBlockedUsersUpdateCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, blockedUsersUpdateHandler, onBlockedUsersUpdateCallbackInternal);
		ulong num = Bindings.EOS_Friends_AddNotifyBlockedUsersUpdate(base.InnerHandle, ref options2, clientDataAddress, onBlockedUsersUpdateCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyFriendsUpdate(ref AddNotifyFriendsUpdateOptions options, object clientData, OnFriendsUpdateCallback friendsUpdateHandler)
	{
		AddNotifyFriendsUpdateOptionsInternal options2 = default(AddNotifyFriendsUpdateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnFriendsUpdateCallbackInternal onFriendsUpdateCallbackInternal = OnFriendsUpdateCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, friendsUpdateHandler, onFriendsUpdateCallbackInternal);
		ulong num = Bindings.EOS_Friends_AddNotifyFriendsUpdate(base.InnerHandle, ref options2, clientDataAddress, onFriendsUpdateCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public EpicAccountId GetBlockedUserAtIndex(ref GetBlockedUserAtIndexOptions options)
	{
		GetBlockedUserAtIndexOptionsInternal options2 = default(GetBlockedUserAtIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Friends_GetBlockedUserAtIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out EpicAccountId to);
		return to;
	}

	public int GetBlockedUsersCount(ref GetBlockedUsersCountOptions options)
	{
		GetBlockedUsersCountOptionsInternal options2 = default(GetBlockedUsersCountOptionsInternal);
		options2.Set(ref options);
		int result = Bindings.EOS_Friends_GetBlockedUsersCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public EpicAccountId GetFriendAtIndex(ref GetFriendAtIndexOptions options)
	{
		GetFriendAtIndexOptionsInternal options2 = default(GetFriendAtIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Friends_GetFriendAtIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out EpicAccountId to);
		return to;
	}

	public int GetFriendsCount(ref GetFriendsCountOptions options)
	{
		GetFriendsCountOptionsInternal options2 = default(GetFriendsCountOptionsInternal);
		options2.Set(ref options);
		int result = Bindings.EOS_Friends_GetFriendsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public FriendsStatus GetStatus(ref GetStatusOptions options)
	{
		GetStatusOptionsInternal options2 = default(GetStatusOptionsInternal);
		options2.Set(ref options);
		FriendsStatus result = Bindings.EOS_Friends_GetStatus(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryFriends(ref QueryFriendsOptions options, object clientData, OnQueryFriendsCallback completionDelegate)
	{
		QueryFriendsOptionsInternal options2 = default(QueryFriendsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryFriendsCallbackInternal onQueryFriendsCallbackInternal = OnQueryFriendsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryFriendsCallbackInternal);
		Bindings.EOS_Friends_QueryFriends(base.InnerHandle, ref options2, clientDataAddress, onQueryFriendsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RejectInvite(ref RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
	{
		RejectInviteOptionsInternal options2 = default(RejectInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRejectInviteCallbackInternal onRejectInviteCallbackInternal = OnRejectInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRejectInviteCallbackInternal);
		Bindings.EOS_Friends_RejectInvite(base.InnerHandle, ref options2, clientDataAddress, onRejectInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyBlockedUsersUpdate(ulong notificationId)
	{
		Bindings.EOS_Friends_RemoveNotifyBlockedUsersUpdate(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyFriendsUpdate(ulong notificationId)
	{
		Bindings.EOS_Friends_RemoveNotifyFriendsUpdate(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void SendInvite(ref SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
	{
		SendInviteOptionsInternal options2 = default(SendInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendInviteCallbackInternal onSendInviteCallbackInternal = OnSendInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSendInviteCallbackInternal);
		Bindings.EOS_Friends_SendInvite(base.InnerHandle, ref options2, clientDataAddress, onSendInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnAcceptInviteCallbackInternal))]
	internal static void OnAcceptInviteCallbackInternalImplementation(ref AcceptInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<AcceptInviteCallbackInfoInternal, OnAcceptInviteCallback, AcceptInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnBlockedUsersUpdateCallbackInternal))]
	internal static void OnBlockedUsersUpdateCallbackInternalImplementation(ref OnBlockedUsersUpdateInfoInternal data)
	{
		if (Helper.TryGetCallback<OnBlockedUsersUpdateInfoInternal, OnBlockedUsersUpdateCallback, OnBlockedUsersUpdateInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnFriendsUpdateCallbackInternal))]
	internal static void OnFriendsUpdateCallbackInternalImplementation(ref OnFriendsUpdateInfoInternal data)
	{
		if (Helper.TryGetCallback<OnFriendsUpdateInfoInternal, OnFriendsUpdateCallback, OnFriendsUpdateInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFriendsCallbackInternal))]
	internal static void OnQueryFriendsCallbackInternalImplementation(ref QueryFriendsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFriendsCallbackInfoInternal, OnQueryFriendsCallback, QueryFriendsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectInviteCallbackInternal))]
	internal static void OnRejectInviteCallbackInternalImplementation(ref RejectInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectInviteCallbackInfoInternal, OnRejectInviteCallback, RejectInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendInviteCallbackInternal))]
	internal static void OnSendInviteCallbackInternalImplementation(ref SendInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendInviteCallbackInfoInternal, OnSendInviteCallback, SendInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum FriendsStatus
{
	NotFriends,
	InviteSent,
	InviteReceived,
	Friends
}


using Epic.OnlineServices;

public struct GetBlockedUserAtIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public int Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetBlockedUserAtIndexOptionsInternal : ISettable<GetBlockedUserAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private int m_Index;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public int Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref GetBlockedUserAtIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref GetBlockedUserAtIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetBlockedUsersCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetBlockedUsersCountOptionsInternal : ISettable<GetBlockedUsersCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetBlockedUsersCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetBlockedUsersCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetFriendAtIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public int Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetFriendAtIndexOptionsInternal : ISettable<GetFriendAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private int m_Index;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public int Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref GetFriendAtIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref GetFriendAtIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetFriendsCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetFriendsCountOptionsInternal : ISettable<GetFriendsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetFriendsCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetFriendsCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetStatusOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetStatusOptionsInternal : ISettable<GetStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref GetStatusOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref GetStatusOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnAcceptInviteCallback(ref AcceptInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAcceptInviteCallbackInternal(ref AcceptInviteCallbackInfoInternal data);


using Epic.OnlineServices.Friends;

public delegate void OnBlockedUsersUpdateCallback(ref OnBlockedUsersUpdateInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnBlockedUsersUpdateCallbackInternal(ref OnBlockedUsersUpdateInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct OnBlockedUsersUpdateInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public bool Blocked { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnBlockedUsersUpdateInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		Blocked = other.Blocked;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnBlockedUsersUpdateInfoInternal : ICallbackInfoInternal, IGettable<OnBlockedUsersUpdateInfo>, ISettable<OnBlockedUsersUpdateInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private int m_Blocked;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public bool Blocked
	{
		get
		{
			Helper.Get(m_Blocked, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Blocked);
		}
	}

	public void Set(ref OnBlockedUsersUpdateInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		Blocked = other.Blocked;
	}

	public void Set(ref OnBlockedUsersUpdateInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			Blocked = other.Value.Blocked;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out OnBlockedUsersUpdateInfo output)
	{
		output = default(OnBlockedUsersUpdateInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnFriendsUpdateCallback(ref OnFriendsUpdateInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnFriendsUpdateCallbackInternal(ref OnFriendsUpdateInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct OnFriendsUpdateInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public FriendsStatus PreviousStatus { get; set; }

	public FriendsStatus CurrentStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnFriendsUpdateInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		PreviousStatus = other.PreviousStatus;
		CurrentStatus = other.CurrentStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnFriendsUpdateInfoInternal : ICallbackInfoInternal, IGettable<OnFriendsUpdateInfo>, ISettable<OnFriendsUpdateInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private FriendsStatus m_PreviousStatus;

	private FriendsStatus m_CurrentStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public FriendsStatus PreviousStatus
	{
		get
		{
			return m_PreviousStatus;
		}
		set
		{
			m_PreviousStatus = value;
		}
	}

	public FriendsStatus CurrentStatus
	{
		get
		{
			return m_CurrentStatus;
		}
		set
		{
			m_CurrentStatus = value;
		}
	}

	public void Set(ref OnFriendsUpdateInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		PreviousStatus = other.PreviousStatus;
		CurrentStatus = other.CurrentStatus;
	}

	public void Set(ref OnFriendsUpdateInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			PreviousStatus = other.Value.PreviousStatus;
			CurrentStatus = other.Value.CurrentStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out OnFriendsUpdateInfo output)
	{
		output = default(OnFriendsUpdateInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Friends;

public delegate void OnQueryFriendsCallback(ref QueryFriendsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFriendsCallbackInternal(ref QueryFriendsCallbackInfoInternal data);


using Epic.OnlineServices.Friends;

public delegate void OnRejectInviteCallback(ref RejectInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectInviteCallbackInternal(ref RejectInviteCallbackInfoInternal data);


using Epic.OnlineServices.Friends;

public delegate void OnSendInviteCallback(ref SendInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Friends;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendInviteCallbackInternal(ref SendInviteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct QueryFriendsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryFriendsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFriendsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFriendsCallbackInfo>, ISettable<QueryFriendsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryFriendsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryFriendsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryFriendsCallbackInfo output)
	{
		output = default(QueryFriendsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryFriendsOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFriendsOptionsInternal : ISettable<QueryFriendsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryFriendsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryFriendsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct RejectInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RejectInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectInviteCallbackInfo>, ISettable<RejectInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref RejectInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref RejectInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out RejectInviteCallbackInfo output)
	{
		output = default(RejectInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RejectInviteOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectInviteOptionsInternal : ISettable<RejectInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref RejectInviteOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref RejectInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

public struct SendInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SendInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendInviteCallbackInfo>, ISettable<SendInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SendInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SendInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out SendInviteCallbackInfo output)
	{
		output = default(SendInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SendInviteOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Friends;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendInviteOptionsInternal : ISettable<SendInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SendInviteOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SendInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CatalogItem
{
	public Utf8String CatalogNamespace { get; set; }

	public Utf8String Id { get; set; }

	public Utf8String EntitlementName { get; set; }

	public Utf8String TitleText { get; set; }

	public Utf8String DescriptionText { get; set; }

	public Utf8String LongDescriptionText { get; set; }

	public Utf8String TechnicalDetailsText { get; set; }

	public Utf8String DeveloperText { get; set; }

	public EcomItemType ItemType { get; set; }

	public long EntitlementEndTimestamp { get; set; }

	internal void Set(ref CatalogItemInternal other)
	{
		CatalogNamespace = other.CatalogNamespace;
		Id = other.Id;
		EntitlementName = other.EntitlementName;
		TitleText = other.TitleText;
		DescriptionText = other.DescriptionText;
		LongDescriptionText = other.LongDescriptionText;
		TechnicalDetailsText = other.TechnicalDetailsText;
		DeveloperText = other.DeveloperText;
		ItemType = other.ItemType;
		EntitlementEndTimestamp = other.EntitlementEndTimestamp;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CatalogItemInternal : IGettable<CatalogItem>, ISettable<CatalogItem>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_CatalogNamespace;

	private IntPtr m_Id;

	private IntPtr m_EntitlementName;

	private IntPtr m_TitleText;

	private IntPtr m_DescriptionText;

	private IntPtr m_LongDescriptionText;

	private IntPtr m_TechnicalDetailsText;

	private IntPtr m_DeveloperText;

	private EcomItemType m_ItemType;

	private long m_EntitlementEndTimestamp;

	public Utf8String CatalogNamespace
	{
		get
		{
			Helper.Get(m_CatalogNamespace, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CatalogNamespace);
		}
	}

	public Utf8String Id
	{
		get
		{
			Helper.Get(m_Id, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Id);
		}
	}

	public Utf8String EntitlementName
	{
		get
		{
			Helper.Get(m_EntitlementName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_EntitlementName);
		}
	}

	public Utf8String TitleText
	{
		get
		{
			Helper.Get(m_TitleText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TitleText);
		}
	}

	public Utf8String DescriptionText
	{
		get
		{
			Helper.Get(m_DescriptionText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DescriptionText);
		}
	}

	public Utf8String LongDescriptionText
	{
		get
		{
			Helper.Get(m_LongDescriptionText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LongDescriptionText);
		}
	}

	public Utf8String TechnicalDetailsText
	{
		get
		{
			Helper.Get(m_TechnicalDetailsText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TechnicalDetailsText);
		}
	}

	public Utf8String DeveloperText
	{
		get
		{
			Helper.Get(m_DeveloperText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeveloperText);
		}
	}

	public EcomItemType ItemType
	{
		get
		{
			return m_ItemType;
		}
		set
		{
			m_ItemType = value;
		}
	}

	public long EntitlementEndTimestamp
	{
		get
		{
			return m_EntitlementEndTimestamp;
		}
		set
		{
			m_EntitlementEndTimestamp = value;
		}
	}

	public void Set(ref CatalogItem other)
	{
		m_ApiVersion = 1;
		CatalogNamespace = other.CatalogNamespace;
		Id = other.Id;
		EntitlementName = other.EntitlementName;
		TitleText = other.TitleText;
		DescriptionText = other.DescriptionText;
		LongDescriptionText = other.LongDescriptionText;
		TechnicalDetailsText = other.TechnicalDetailsText;
		DeveloperText = other.DeveloperText;
		ItemType = other.ItemType;
		EntitlementEndTimestamp = other.EntitlementEndTimestamp;
	}

	public void Set(ref CatalogItem? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			CatalogNamespace = other.Value.CatalogNamespace;
			Id = other.Value.Id;
			EntitlementName = other.Value.EntitlementName;
			TitleText = other.Value.TitleText;
			DescriptionText = other.Value.DescriptionText;
			LongDescriptionText = other.Value.LongDescriptionText;
			TechnicalDetailsText = other.Value.TechnicalDetailsText;
			DeveloperText = other.Value.DeveloperText;
			ItemType = other.Value.ItemType;
			EntitlementEndTimestamp = other.Value.EntitlementEndTimestamp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_CatalogNamespace);
		Helper.Dispose(ref m_Id);
		Helper.Dispose(ref m_EntitlementName);
		Helper.Dispose(ref m_TitleText);
		Helper.Dispose(ref m_DescriptionText);
		Helper.Dispose(ref m_LongDescriptionText);
		Helper.Dispose(ref m_TechnicalDetailsText);
		Helper.Dispose(ref m_DeveloperText);
	}

	public void Get(out CatalogItem output)
	{
		output = default(CatalogItem);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CatalogOffer
{
	public int ServerIndex { get; set; }

	public Utf8String CatalogNamespace { get; set; }

	public Utf8String Id { get; set; }

	public Utf8String TitleText { get; set; }

	public Utf8String DescriptionText { get; set; }

	public Utf8String LongDescriptionText { get; set; }

	internal Utf8String TechnicalDetailsText_DEPRECATED { get; set; }

	public Utf8String CurrencyCode { get; set; }

	public Result PriceResult { get; set; }

	internal uint OriginalPrice_DEPRECATED { get; set; }

	internal uint CurrentPrice_DEPRECATED { get; set; }

	public byte DiscountPercentage { get; set; }

	public long ExpirationTimestamp { get; set; }

	internal uint PurchasedCount_DEPRECATED { get; set; }

	public int PurchaseLimit { get; set; }

	public bool AvailableForPurchase { get; set; }

	public ulong OriginalPrice64 { get; set; }

	public ulong CurrentPrice64 { get; set; }

	public uint DecimalPoint { get; set; }

	public long ReleaseDateTimestamp { get; set; }

	public long EffectiveDateTimestamp { get; set; }

	internal void Set(ref CatalogOfferInternal other)
	{
		ServerIndex = other.ServerIndex;
		CatalogNamespace = other.CatalogNamespace;
		Id = other.Id;
		TitleText = other.TitleText;
		DescriptionText = other.DescriptionText;
		LongDescriptionText = other.LongDescriptionText;
		TechnicalDetailsText_DEPRECATED = other.TechnicalDetailsText_DEPRECATED;
		CurrencyCode = other.CurrencyCode;
		PriceResult = other.PriceResult;
		OriginalPrice_DEPRECATED = other.OriginalPrice_DEPRECATED;
		CurrentPrice_DEPRECATED = other.CurrentPrice_DEPRECATED;
		DiscountPercentage = other.DiscountPercentage;
		ExpirationTimestamp = other.ExpirationTimestamp;
		PurchasedCount_DEPRECATED = other.PurchasedCount_DEPRECATED;
		PurchaseLimit = other.PurchaseLimit;
		AvailableForPurchase = other.AvailableForPurchase;
		OriginalPrice64 = other.OriginalPrice64;
		CurrentPrice64 = other.CurrentPrice64;
		DecimalPoint = other.DecimalPoint;
		ReleaseDateTimestamp = other.ReleaseDateTimestamp;
		EffectiveDateTimestamp = other.EffectiveDateTimestamp;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CatalogOfferInternal : IGettable<CatalogOffer>, ISettable<CatalogOffer>, IDisposable
{
	private int m_ApiVersion;

	private int m_ServerIndex;

	private IntPtr m_CatalogNamespace;

	private IntPtr m_Id;

	private IntPtr m_TitleText;

	private IntPtr m_DescriptionText;

	private IntPtr m_LongDescriptionText;

	private IntPtr m_TechnicalDetailsText_DEPRECATED;

	private IntPtr m_CurrencyCode;

	private Result m_PriceResult;

	private uint m_OriginalPrice_DEPRECATED;

	private uint m_CurrentPrice_DEPRECATED;

	private byte m_DiscountPercentage;

	private long m_ExpirationTimestamp;

	private uint m_PurchasedCount_DEPRECATED;

	private int m_PurchaseLimit;

	private int m_AvailableForPurchase;

	private ulong m_OriginalPrice64;

	private ulong m_CurrentPrice64;

	private uint m_DecimalPoint;

	private long m_ReleaseDateTimestamp;

	private long m_EffectiveDateTimestamp;

	public int ServerIndex
	{
		get
		{
			return m_ServerIndex;
		}
		set
		{
			m_ServerIndex = value;
		}
	}

	public Utf8String CatalogNamespace
	{
		get
		{
			Helper.Get(m_CatalogNamespace, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CatalogNamespace);
		}
	}

	public Utf8String Id
	{
		get
		{
			Helper.Get(m_Id, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Id);
		}
	}

	public Utf8String TitleText
	{
		get
		{
			Helper.Get(m_TitleText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TitleText);
		}
	}

	public Utf8String DescriptionText
	{
		get
		{
			Helper.Get(m_DescriptionText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DescriptionText);
		}
	}

	public Utf8String LongDescriptionText
	{
		get
		{
			Helper.Get(m_LongDescriptionText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LongDescriptionText);
		}
	}

	public Utf8String TechnicalDetailsText_DEPRECATED
	{
		get
		{
			Helper.Get(m_TechnicalDetailsText_DEPRECATED, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TechnicalDetailsText_DEPRECATED);
		}
	}

	public Utf8String CurrencyCode
	{
		get
		{
			Helper.Get(m_CurrencyCode, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CurrencyCode);
		}
	}

	public Result PriceResult
	{
		get
		{
			return m_PriceResult;
		}
		set
		{
			m_PriceResult = value;
		}
	}

	public uint OriginalPrice_DEPRECATED
	{
		get
		{
			return m_OriginalPrice_DEPRECATED;
		}
		set
		{
			m_OriginalPrice_DEPRECATED = value;
		}
	}

	public uint CurrentPrice_DEPRECATED
	{
		get
		{
			return m_CurrentPrice_DEPRECATED;
		}
		set
		{
			m_CurrentPrice_DEPRECATED = value;
		}
	}

	public byte DiscountPercentage
	{
		get
		{
			return m_DiscountPercentage;
		}
		set
		{
			m_DiscountPercentage = value;
		}
	}

	public long ExpirationTimestamp
	{
		get
		{
			return m_ExpirationTimestamp;
		}
		set
		{
			m_ExpirationTimestamp = value;
		}
	}

	public uint PurchasedCount_DEPRECATED
	{
		get
		{
			return m_PurchasedCount_DEPRECATED;
		}
		set
		{
			m_PurchasedCount_DEPRECATED = value;
		}
	}

	public int PurchaseLimit
	{
		get
		{
			return m_PurchaseLimit;
		}
		set
		{
			m_PurchaseLimit = value;
		}
	}

	public bool AvailableForPurchase
	{
		get
		{
			Helper.Get(m_AvailableForPurchase, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AvailableForPurchase);
		}
	}

	public ulong OriginalPrice64
	{
		get
		{
			return m_OriginalPrice64;
		}
		set
		{
			m_OriginalPrice64 = value;
		}
	}

	public ulong CurrentPrice64
	{
		get
		{
			return m_CurrentPrice64;
		}
		set
		{
			m_CurrentPrice64 = value;
		}
	}

	public uint DecimalPoint
	{
		get
		{
			return m_DecimalPoint;
		}
		set
		{
			m_DecimalPoint = value;
		}
	}

	public long ReleaseDateTimestamp
	{
		get
		{
			return m_ReleaseDateTimestamp;
		}
		set
		{
			m_ReleaseDateTimestamp = value;
		}
	}

	public long EffectiveDateTimestamp
	{
		get
		{
			return m_EffectiveDateTimestamp;
		}
		set
		{
			m_EffectiveDateTimestamp = value;
		}
	}

	public void Set(ref CatalogOffer other)
	{
		m_ApiVersion = 5;
		ServerIndex = other.ServerIndex;
		CatalogNamespace = other.CatalogNamespace;
		Id = other.Id;
		TitleText = other.TitleText;
		DescriptionText = other.DescriptionText;
		LongDescriptionText = other.LongDescriptionText;
		TechnicalDetailsText_DEPRECATED = other.TechnicalDetailsText_DEPRECATED;
		CurrencyCode = other.CurrencyCode;
		PriceResult = other.PriceResult;
		OriginalPrice_DEPRECATED = other.OriginalPrice_DEPRECATED;
		CurrentPrice_DEPRECATED = other.CurrentPrice_DEPRECATED;
		DiscountPercentage = other.DiscountPercentage;
		ExpirationTimestamp = other.ExpirationTimestamp;
		PurchasedCount_DEPRECATED = other.PurchasedCount_DEPRECATED;
		PurchaseLimit = other.PurchaseLimit;
		AvailableForPurchase = other.AvailableForPurchase;
		OriginalPrice64 = other.OriginalPrice64;
		CurrentPrice64 = other.CurrentPrice64;
		DecimalPoint = other.DecimalPoint;
		ReleaseDateTimestamp = other.ReleaseDateTimestamp;
		EffectiveDateTimestamp = other.EffectiveDateTimestamp;
	}

	public void Set(ref CatalogOffer? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 5;
			ServerIndex = other.Value.ServerIndex;
			CatalogNamespace = other.Value.CatalogNamespace;
			Id = other.Value.Id;
			TitleText = other.Value.TitleText;
			DescriptionText = other.Value.DescriptionText;
			LongDescriptionText = other.Value.LongDescriptionText;
			TechnicalDetailsText_DEPRECATED = other.Value.TechnicalDetailsText_DEPRECATED;
			CurrencyCode = other.Value.CurrencyCode;
			PriceResult = other.Value.PriceResult;
			OriginalPrice_DEPRECATED = other.Value.OriginalPrice_DEPRECATED;
			CurrentPrice_DEPRECATED = other.Value.CurrentPrice_DEPRECATED;
			DiscountPercentage = other.Value.DiscountPercentage;
			ExpirationTimestamp = other.Value.ExpirationTimestamp;
			PurchasedCount_DEPRECATED = other.Value.PurchasedCount_DEPRECATED;
			PurchaseLimit = other.Value.PurchaseLimit;
			AvailableForPurchase = other.Value.AvailableForPurchase;
			OriginalPrice64 = other.Value.OriginalPrice64;
			CurrentPrice64 = other.Value.CurrentPrice64;
			DecimalPoint = other.Value.DecimalPoint;
			ReleaseDateTimestamp = other.Value.ReleaseDateTimestamp;
			EffectiveDateTimestamp = other.Value.EffectiveDateTimestamp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_CatalogNamespace);
		Helper.Dispose(ref m_Id);
		Helper.Dispose(ref m_TitleText);
		Helper.Dispose(ref m_DescriptionText);
		Helper.Dispose(ref m_LongDescriptionText);
		Helper.Dispose(ref m_TechnicalDetailsText_DEPRECATED);
		Helper.Dispose(ref m_CurrencyCode);
	}

	public void Get(out CatalogOffer output)
	{
		output = default(CatalogOffer);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CatalogRelease
{
	public Utf8String[] CompatibleAppIds { get; set; }

	public Utf8String[] CompatiblePlatforms { get; set; }

	public Utf8String ReleaseNote { get; set; }

	internal void Set(ref CatalogReleaseInternal other)
	{
		CompatibleAppIds = other.CompatibleAppIds;
		CompatiblePlatforms = other.CompatiblePlatforms;
		ReleaseNote = other.ReleaseNote;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CatalogReleaseInternal : IGettable<CatalogRelease>, ISettable<CatalogRelease>, IDisposable
{
	private int m_ApiVersion;

	private uint m_CompatibleAppIdCount;

	private IntPtr m_CompatibleAppIds;

	private uint m_CompatiblePlatformCount;

	private IntPtr m_CompatiblePlatforms;

	private IntPtr m_ReleaseNote;

	public Utf8String[] CompatibleAppIds
	{
		get
		{
			Helper.Get<Utf8String>(m_CompatibleAppIds, out var to, m_CompatibleAppIdCount, isArrayItemAllocated: true);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CompatibleAppIds, isArrayItemAllocated: true, out m_CompatibleAppIdCount);
		}
	}

	public Utf8String[] CompatiblePlatforms
	{
		get
		{
			Helper.Get<Utf8String>(m_CompatiblePlatforms, out var to, m_CompatiblePlatformCount, isArrayItemAllocated: true);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CompatiblePlatforms, isArrayItemAllocated: true, out m_CompatiblePlatformCount);
		}
	}

	public Utf8String ReleaseNote
	{
		get
		{
			Helper.Get(m_ReleaseNote, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ReleaseNote);
		}
	}

	public void Set(ref CatalogRelease other)
	{
		m_ApiVersion = 1;
		CompatibleAppIds = other.CompatibleAppIds;
		CompatiblePlatforms = other.CompatiblePlatforms;
		ReleaseNote = other.ReleaseNote;
	}

	public void Set(ref CatalogRelease? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			CompatibleAppIds = other.Value.CompatibleAppIds;
			CompatiblePlatforms = other.Value.CompatiblePlatforms;
			ReleaseNote = other.Value.ReleaseNote;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_CompatibleAppIds);
		Helper.Dispose(ref m_CompatiblePlatforms);
		Helper.Dispose(ref m_ReleaseNote);
	}

	public void Get(out CatalogRelease output)
	{
		output = default(CatalogRelease);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CheckoutCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String TransactionId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref CheckoutCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TransactionId = other.TransactionId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CheckoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<CheckoutCallbackInfo>, ISettable<CheckoutCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TransactionId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String TransactionId
	{
		get
		{
			Helper.Get(m_TransactionId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TransactionId);
		}
	}

	public void Set(ref CheckoutCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TransactionId = other.TransactionId;
	}

	public void Set(ref CheckoutCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TransactionId = other.Value.TransactionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TransactionId);
	}

	public void Get(out CheckoutCallbackInfo output)
	{
		output = default(CheckoutCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CheckoutEntry
{
	public Utf8String OfferId { get; set; }

	internal void Set(ref CheckoutEntryInternal other)
	{
		OfferId = other.OfferId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CheckoutEntryInternal : IGettable<CheckoutEntry>, ISettable<CheckoutEntry>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_OfferId;

	public Utf8String OfferId
	{
		get
		{
			Helper.Get(m_OfferId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OfferId);
		}
	}

	public void Set(ref CheckoutEntry other)
	{
		m_ApiVersion = 1;
		OfferId = other.OfferId;
	}

	public void Set(ref CheckoutEntry? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			OfferId = other.Value.OfferId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_OfferId);
	}

	public void Get(out CheckoutEntry output)
	{
		output = default(CheckoutEntry);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct CheckoutOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OverrideCatalogNamespace { get; set; }

	public CheckoutEntry[] Entries { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CheckoutOptionsInternal : ISettable<CheckoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OverrideCatalogNamespace;

	private uint m_EntryCount;

	private IntPtr m_Entries;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OverrideCatalogNamespace
	{
		set
		{
			Helper.Set(value, ref m_OverrideCatalogNamespace);
		}
	}

	public CheckoutEntry[] Entries
	{
		set
		{
			Helper.Set<CheckoutEntry, CheckoutEntryInternal>(ref value, ref m_Entries, out m_EntryCount);
		}
	}

	public void Set(ref CheckoutOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		OverrideCatalogNamespace = other.OverrideCatalogNamespace;
		Entries = other.Entries;
	}

	public void Set(ref CheckoutOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			OverrideCatalogNamespace = other.Value.OverrideCatalogNamespace;
			Entries = other.Value.Entries;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OverrideCatalogNamespace);
		Helper.Dispose(ref m_Entries);
	}
}


using Epic.OnlineServices;

public struct CopyEntitlementByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyEntitlementByIdOptionsInternal : ISettable<CopyEntitlementByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String EntitlementId
	{
		set
		{
			Helper.Set(value, ref m_EntitlementId);
		}
	}

	public void Set(ref CopyEntitlementByIdOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		EntitlementId = other.EntitlementId;
	}

	public void Set(ref CopyEntitlementByIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			EntitlementId = other.Value.EntitlementId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementId);
	}
}


using Epic.OnlineServices;

public struct CopyEntitlementByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint EntitlementIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyEntitlementByIndexOptionsInternal : ISettable<CopyEntitlementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_EntitlementIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint EntitlementIndex
	{
		set
		{
			m_EntitlementIndex = value;
		}
	}

	public void Set(ref CopyEntitlementByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		EntitlementIndex = other.EntitlementIndex;
	}

	public void Set(ref CopyEntitlementByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			EntitlementIndex = other.Value.EntitlementIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyEntitlementByNameAndIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementName { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyEntitlementByNameAndIndexOptionsInternal : ISettable<CopyEntitlementByNameAndIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementName;

	private uint m_Index;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String EntitlementName
	{
		set
		{
			Helper.Set(value, ref m_EntitlementName);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref CopyEntitlementByNameAndIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		EntitlementName = other.EntitlementName;
		Index = other.Index;
	}

	public void Set(ref CopyEntitlementByNameAndIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			EntitlementName = other.Value.EntitlementName;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementName);
	}
}


using Epic.OnlineServices;

public struct CopyItemByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyItemByIdOptionsInternal : ISettable<CopyItemByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ItemId
	{
		set
		{
			Helper.Set(value, ref m_ItemId);
		}
	}

	public void Set(ref CopyItemByIdOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ItemId = other.ItemId;
	}

	public void Set(ref CopyItemByIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ItemId = other.Value.ItemId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct CopyItemImageInfoByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }

	public uint ImageInfoIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyItemImageInfoByIndexOptionsInternal : ISettable<CopyItemImageInfoByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	private uint m_ImageInfoIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ItemId
	{
		set
		{
			Helper.Set(value, ref m_ItemId);
		}
	}

	public uint ImageInfoIndex
	{
		set
		{
			m_ImageInfoIndex = value;
		}
	}

	public void Set(ref CopyItemImageInfoByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ItemId = other.ItemId;
		ImageInfoIndex = other.ImageInfoIndex;
	}

	public void Set(ref CopyItemImageInfoByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ItemId = other.Value.ItemId;
			ImageInfoIndex = other.Value.ImageInfoIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct CopyItemReleaseByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }

	public uint ReleaseIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyItemReleaseByIndexOptionsInternal : ISettable<CopyItemReleaseByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	private uint m_ReleaseIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ItemId
	{
		set
		{
			Helper.Set(value, ref m_ItemId);
		}
	}

	public uint ReleaseIndex
	{
		set
		{
			m_ReleaseIndex = value;
		}
	}

	public void Set(ref CopyItemReleaseByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ItemId = other.ItemId;
		ReleaseIndex = other.ReleaseIndex;
	}

	public void Set(ref CopyItemReleaseByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ItemId = other.Value.ItemId;
			ReleaseIndex = other.Value.ReleaseIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct CopyLastRedeemedEntitlementByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint RedeemedEntitlementIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyLastRedeemedEntitlementByIndexOptionsInternal : ISettable<CopyLastRedeemedEntitlementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_RedeemedEntitlementIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint RedeemedEntitlementIndex
	{
		set
		{
			m_RedeemedEntitlementIndex = value;
		}
	}

	public void Set(ref CopyLastRedeemedEntitlementByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RedeemedEntitlementIndex = other.RedeemedEntitlementIndex;
	}

	public void Set(ref CopyLastRedeemedEntitlementByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RedeemedEntitlementIndex = other.Value.RedeemedEntitlementIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyOfferByIdOptionsInternal : ISettable<CopyOfferByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OfferId
	{
		set
		{
			Helper.Set(value, ref m_OfferId);
		}
	}

	public void Set(ref CopyOfferByIdOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		OfferId = other.OfferId;
	}

	public void Set(ref CopyOfferByIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			OfferId = other.Value.OfferId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint OfferIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyOfferByIndexOptionsInternal : ISettable<CopyOfferByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_OfferIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint OfferIndex
	{
		set
		{
			m_OfferIndex = value;
		}
	}

	public void Set(ref CopyOfferByIndexOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		OfferIndex = other.OfferIndex;
	}

	public void Set(ref CopyOfferByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			OfferIndex = other.Value.OfferIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferImageInfoByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }

	public uint ImageInfoIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyOfferImageInfoByIndexOptionsInternal : ISettable<CopyOfferImageInfoByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	private uint m_ImageInfoIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OfferId
	{
		set
		{
			Helper.Set(value, ref m_OfferId);
		}
	}

	public uint ImageInfoIndex
	{
		set
		{
			m_ImageInfoIndex = value;
		}
	}

	public void Set(ref CopyOfferImageInfoByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		OfferId = other.OfferId;
		ImageInfoIndex = other.ImageInfoIndex;
	}

	public void Set(ref CopyOfferImageInfoByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			OfferId = other.Value.OfferId;
			ImageInfoIndex = other.Value.ImageInfoIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct CopyOfferItemByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }

	public uint ItemIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyOfferItemByIndexOptionsInternal : ISettable<CopyOfferItemByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	private uint m_ItemIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OfferId
	{
		set
		{
			Helper.Set(value, ref m_OfferId);
		}
	}

	public uint ItemIndex
	{
		set
		{
			m_ItemIndex = value;
		}
	}

	public void Set(ref CopyOfferItemByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		OfferId = other.OfferId;
		ItemIndex = other.ItemIndex;
	}

	public void Set(ref CopyOfferItemByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			OfferId = other.Value.OfferId;
			ItemIndex = other.Value.ItemIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct CopyTransactionByIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String TransactionId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyTransactionByIdOptionsInternal : ISettable<CopyTransactionByIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TransactionId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String TransactionId
	{
		set
		{
			Helper.Set(value, ref m_TransactionId);
		}
	}

	public void Set(ref CopyTransactionByIdOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TransactionId = other.TransactionId;
	}

	public void Set(ref CopyTransactionByIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TransactionId = other.Value.TransactionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TransactionId);
	}
}


using Epic.OnlineServices;

public struct CopyTransactionByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public uint TransactionIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyTransactionByIndexOptionsInternal : ISettable<CopyTransactionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_TransactionIndex;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint TransactionIndex
	{
		set
		{
			m_TransactionIndex = value;
		}
	}

	public void Set(ref CopyTransactionByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TransactionIndex = other.TransactionIndex;
	}

	public void Set(ref CopyTransactionByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TransactionIndex = other.Value.TransactionIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public sealed class EcomInterface : Handle
{
	public const int CatalogitemApiLatest = 1;

	public const int CatalogitemEntitlementendtimestampUndefined = -1;

	public const int CatalogofferApiLatest = 5;

	public const int CatalogofferEffectivedatetimestampUndefined = -1;

	public const int CatalogofferExpirationtimestampUndefined = -1;

	public const int CatalogofferReleasedatetimestampUndefined = -1;

	public const int CatalogreleaseApiLatest = 1;

	public const int CheckoutApiLatest = 1;

	public const int CheckoutMaxEntries = 10;

	public const int CheckoutentryApiLatest = 1;

	public const int CopyentitlementbyidApiLatest = 2;

	public const int CopyentitlementbyindexApiLatest = 1;

	public const int CopyentitlementbynameandindexApiLatest = 1;

	public const int CopyitembyidApiLatest = 1;

	public const int CopyitemimageinfobyindexApiLatest = 1;

	public const int CopyitemreleasebyindexApiLatest = 1;

	public const int CopylastredeemedentitlementbyindexApiLatest = 1;

	public const int CopyofferbyidApiLatest = 3;

	public const int CopyofferbyindexApiLatest = 3;

	public const int CopyofferimageinfobyindexApiLatest = 1;

	public const int CopyofferitembyindexApiLatest = 1;

	public const int CopytransactionbyidApiLatest = 1;

	public const int CopytransactionbyindexApiLatest = 1;

	public const int EntitlementApiLatest = 2;

	public const int EntitlementEndtimestampUndefined = -1;

	public const int EntitlementidMaxLength = 32;

	public const int GetentitlementsbynamecountApiLatest = 1;

	public const int GetentitlementscountApiLatest = 1;

	public const int GetitemimageinfocountApiLatest = 1;

	public const int GetitemreleasecountApiLatest = 1;

	public const int GetlastredeemedentitlementscountApiLatest = 1;

	public const int GetoffercountApiLatest = 1;

	public const int GetofferimageinfocountApiLatest = 1;

	public const int GetofferitemcountApiLatest = 1;

	public const int GettransactioncountApiLatest = 1;

	public const int ItemownershipApiLatest = 1;

	public const int KeyimageinfoApiLatest = 1;

	public const int QueryentitlementsApiLatest = 2;

	public const int QueryentitlementsMaxEntitlementIds = 256;

	public const int QueryentitlementtokenApiLatest = 1;

	public const int QueryentitlementtokenMaxEntitlementIds = 32;

	public const int QueryoffersApiLatest = 1;

	public const int QueryownershipApiLatest = 2;

	public const int QueryownershipMaxCatalogIds = 400;

	public const int QueryownershipMaxSandboxIds = 10;

	public const int QueryownershipbysandboxidsoptionsApiLatest = 1;

	public const int QueryownershiptokenApiLatest = 2;

	public const int QueryownershiptokenMaxCatalogitemIds = 32;

	public const int RedeementitlementsApiLatest = 2;

	public const int RedeementitlementsMaxIds = 32;

	public const int TransactionidMaximumLength = 64;

	public EcomInterface()
	{
	}

	public EcomInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void Checkout(ref CheckoutOptions options, object clientData, OnCheckoutCallback completionDelegate)
	{
		CheckoutOptionsInternal options2 = default(CheckoutOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCheckoutCallbackInternal onCheckoutCallbackInternal = OnCheckoutCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onCheckoutCallbackInternal);
		Bindings.EOS_Ecom_Checkout(base.InnerHandle, ref options2, clientDataAddress, onCheckoutCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result CopyEntitlementById(ref CopyEntitlementByIdOptions options, out Entitlement? outEntitlement)
	{
		CopyEntitlementByIdOptionsInternal options2 = default(CopyEntitlementByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyEntitlementById(base.InnerHandle, ref options2, ref outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement.HasValue)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public Result CopyEntitlementByIndex(ref CopyEntitlementByIndexOptions options, out Entitlement? outEntitlement)
	{
		CopyEntitlementByIndexOptionsInternal options2 = default(CopyEntitlementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyEntitlementByIndex(base.InnerHandle, ref options2, ref outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement.HasValue)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public Result CopyEntitlementByNameAndIndex(ref CopyEntitlementByNameAndIndexOptions options, out Entitlement? outEntitlement)
	{
		CopyEntitlementByNameAndIndexOptionsInternal options2 = default(CopyEntitlementByNameAndIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyEntitlementByNameAndIndex(base.InnerHandle, ref options2, ref outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement.HasValue)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public Result CopyItemById(ref CopyItemByIdOptions options, out CatalogItem? outItem)
	{
		CopyItemByIdOptionsInternal options2 = default(CopyItemByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outItem2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyItemById(base.InnerHandle, ref options2, ref outItem2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogItemInternal, CatalogItem>(outItem2, out outItem);
		if (outItem.HasValue)
		{
			Bindings.EOS_Ecom_CatalogItem_Release(outItem2);
		}
		return result;
	}

	public Result CopyItemImageInfoByIndex(ref CopyItemImageInfoByIndexOptions options, out KeyImageInfo? outImageInfo)
	{
		CopyItemImageInfoByIndexOptionsInternal options2 = default(CopyItemImageInfoByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outImageInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyItemImageInfoByIndex(base.InnerHandle, ref options2, ref outImageInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<KeyImageInfoInternal, KeyImageInfo>(outImageInfo2, out outImageInfo);
		if (outImageInfo.HasValue)
		{
			Bindings.EOS_Ecom_KeyImageInfo_Release(outImageInfo2);
		}
		return result;
	}

	public Result CopyItemReleaseByIndex(ref CopyItemReleaseByIndexOptions options, out CatalogRelease? outRelease)
	{
		CopyItemReleaseByIndexOptionsInternal options2 = default(CopyItemReleaseByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outRelease2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyItemReleaseByIndex(base.InnerHandle, ref options2, ref outRelease2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogReleaseInternal, CatalogRelease>(outRelease2, out outRelease);
		if (outRelease.HasValue)
		{
			Bindings.EOS_Ecom_CatalogRelease_Release(outRelease2);
		}
		return result;
	}

	public Result CopyLastRedeemedEntitlementByIndex(ref CopyLastRedeemedEntitlementByIndexOptions options, out Utf8String outRedeemedEntitlementId)
	{
		CopyLastRedeemedEntitlementByIndexOptionsInternal options2 = default(CopyLastRedeemedEntitlementByIndexOptionsInternal);
		options2.Set(ref options);
		int inOutRedeemedEntitlementIdLength = 33;
		IntPtr value = Helper.AddAllocation(inOutRedeemedEntitlementIdLength);
		Result result = Bindings.EOS_Ecom_CopyLastRedeemedEntitlementByIndex(base.InnerHandle, ref options2, value, ref inOutRedeemedEntitlementIdLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outRedeemedEntitlementId);
		Helper.Dispose(ref value);
		return result;
	}

	public Result CopyOfferById(ref CopyOfferByIdOptions options, out CatalogOffer? outOffer)
	{
		CopyOfferByIdOptionsInternal options2 = default(CopyOfferByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outOffer2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferById(base.InnerHandle, ref options2, ref outOffer2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogOfferInternal, CatalogOffer>(outOffer2, out outOffer);
		if (outOffer.HasValue)
		{
			Bindings.EOS_Ecom_CatalogOffer_Release(outOffer2);
		}
		return result;
	}

	public Result CopyOfferByIndex(ref CopyOfferByIndexOptions options, out CatalogOffer? outOffer)
	{
		CopyOfferByIndexOptionsInternal options2 = default(CopyOfferByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outOffer2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferByIndex(base.InnerHandle, ref options2, ref outOffer2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogOfferInternal, CatalogOffer>(outOffer2, out outOffer);
		if (outOffer.HasValue)
		{
			Bindings.EOS_Ecom_CatalogOffer_Release(outOffer2);
		}
		return result;
	}

	public Result CopyOfferImageInfoByIndex(ref CopyOfferImageInfoByIndexOptions options, out KeyImageInfo? outImageInfo)
	{
		CopyOfferImageInfoByIndexOptionsInternal options2 = default(CopyOfferImageInfoByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outImageInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferImageInfoByIndex(base.InnerHandle, ref options2, ref outImageInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<KeyImageInfoInternal, KeyImageInfo>(outImageInfo2, out outImageInfo);
		if (outImageInfo.HasValue)
		{
			Bindings.EOS_Ecom_KeyImageInfo_Release(outImageInfo2);
		}
		return result;
	}

	public Result CopyOfferItemByIndex(ref CopyOfferItemByIndexOptions options, out CatalogItem? outItem)
	{
		CopyOfferItemByIndexOptionsInternal options2 = default(CopyOfferItemByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outItem2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyOfferItemByIndex(base.InnerHandle, ref options2, ref outItem2);
		Helper.Dispose(ref options2);
		Helper.Get<CatalogItemInternal, CatalogItem>(outItem2, out outItem);
		if (outItem.HasValue)
		{
			Bindings.EOS_Ecom_CatalogItem_Release(outItem2);
		}
		return result;
	}

	public Result CopyTransactionById(ref CopyTransactionByIdOptions options, out Transaction outTransaction)
	{
		CopyTransactionByIdOptionsInternal options2 = default(CopyTransactionByIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outTransaction2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyTransactionById(base.InnerHandle, ref options2, ref outTransaction2);
		Helper.Dispose(ref options2);
		Helper.Get(outTransaction2, out outTransaction);
		return result;
	}

	public Result CopyTransactionByIndex(ref CopyTransactionByIndexOptions options, out Transaction outTransaction)
	{
		CopyTransactionByIndexOptionsInternal options2 = default(CopyTransactionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outTransaction2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_CopyTransactionByIndex(base.InnerHandle, ref options2, ref outTransaction2);
		Helper.Dispose(ref options2);
		Helper.Get(outTransaction2, out outTransaction);
		return result;
	}

	public uint GetEntitlementsByNameCount(ref GetEntitlementsByNameCountOptions options)
	{
		GetEntitlementsByNameCountOptionsInternal options2 = default(GetEntitlementsByNameCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetEntitlementsByNameCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetEntitlementsCount(ref GetEntitlementsCountOptions options)
	{
		GetEntitlementsCountOptionsInternal options2 = default(GetEntitlementsCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetEntitlementsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetItemImageInfoCount(ref GetItemImageInfoCountOptions options)
	{
		GetItemImageInfoCountOptionsInternal options2 = default(GetItemImageInfoCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetItemImageInfoCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetItemReleaseCount(ref GetItemReleaseCountOptions options)
	{
		GetItemReleaseCountOptionsInternal options2 = default(GetItemReleaseCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetItemReleaseCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLastRedeemedEntitlementsCount(ref GetLastRedeemedEntitlementsCountOptions options)
	{
		GetLastRedeemedEntitlementsCountOptionsInternal options2 = default(GetLastRedeemedEntitlementsCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetLastRedeemedEntitlementsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOfferCount(ref GetOfferCountOptions options)
	{
		GetOfferCountOptionsInternal options2 = default(GetOfferCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetOfferCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOfferImageInfoCount(ref GetOfferImageInfoCountOptions options)
	{
		GetOfferImageInfoCountOptionsInternal options2 = default(GetOfferImageInfoCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetOfferImageInfoCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOfferItemCount(ref GetOfferItemCountOptions options)
	{
		GetOfferItemCountOptionsInternal options2 = default(GetOfferItemCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetOfferItemCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetTransactionCount(ref GetTransactionCountOptions options)
	{
		GetTransactionCountOptionsInternal options2 = default(GetTransactionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_GetTransactionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryEntitlementToken(ref QueryEntitlementTokenOptions options, object clientData, OnQueryEntitlementTokenCallback completionDelegate)
	{
		QueryEntitlementTokenOptionsInternal options2 = default(QueryEntitlementTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryEntitlementTokenCallbackInternal onQueryEntitlementTokenCallbackInternal = OnQueryEntitlementTokenCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryEntitlementTokenCallbackInternal);
		Bindings.EOS_Ecom_QueryEntitlementToken(base.InnerHandle, ref options2, clientDataAddress, onQueryEntitlementTokenCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryEntitlements(ref QueryEntitlementsOptions options, object clientData, OnQueryEntitlementsCallback completionDelegate)
	{
		QueryEntitlementsOptionsInternal options2 = default(QueryEntitlementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryEntitlementsCallbackInternal onQueryEntitlementsCallbackInternal = OnQueryEntitlementsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryEntitlementsCallbackInternal);
		Bindings.EOS_Ecom_QueryEntitlements(base.InnerHandle, ref options2, clientDataAddress, onQueryEntitlementsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryOffers(ref QueryOffersOptions options, object clientData, OnQueryOffersCallback completionDelegate)
	{
		QueryOffersOptionsInternal options2 = default(QueryOffersOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryOffersCallbackInternal onQueryOffersCallbackInternal = OnQueryOffersCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryOffersCallbackInternal);
		Bindings.EOS_Ecom_QueryOffers(base.InnerHandle, ref options2, clientDataAddress, onQueryOffersCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryOwnership(ref QueryOwnershipOptions options, object clientData, OnQueryOwnershipCallback completionDelegate)
	{
		QueryOwnershipOptionsInternal options2 = default(QueryOwnershipOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryOwnershipCallbackInternal onQueryOwnershipCallbackInternal = OnQueryOwnershipCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryOwnershipCallbackInternal);
		Bindings.EOS_Ecom_QueryOwnership(base.InnerHandle, ref options2, clientDataAddress, onQueryOwnershipCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryOwnershipBySandboxIds(ref QueryOwnershipBySandboxIdsOptions options, object clientData, OnQueryOwnershipBySandboxIdsCallback completionDelegate)
	{
		QueryOwnershipBySandboxIdsOptionsInternal options2 = default(QueryOwnershipBySandboxIdsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryOwnershipBySandboxIdsCallbackInternal onQueryOwnershipBySandboxIdsCallbackInternal = OnQueryOwnershipBySandboxIdsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryOwnershipBySandboxIdsCallbackInternal);
		Bindings.EOS_Ecom_QueryOwnershipBySandboxIds(base.InnerHandle, ref options2, clientDataAddress, onQueryOwnershipBySandboxIdsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryOwnershipToken(ref QueryOwnershipTokenOptions options, object clientData, OnQueryOwnershipTokenCallback completionDelegate)
	{
		QueryOwnershipTokenOptionsInternal options2 = default(QueryOwnershipTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryOwnershipTokenCallbackInternal onQueryOwnershipTokenCallbackInternal = OnQueryOwnershipTokenCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryOwnershipTokenCallbackInternal);
		Bindings.EOS_Ecom_QueryOwnershipToken(base.InnerHandle, ref options2, clientDataAddress, onQueryOwnershipTokenCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RedeemEntitlements(ref RedeemEntitlementsOptions options, object clientData, OnRedeemEntitlementsCallback completionDelegate)
	{
		RedeemEntitlementsOptionsInternal options2 = default(RedeemEntitlementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRedeemEntitlementsCallbackInternal onRedeemEntitlementsCallbackInternal = OnRedeemEntitlementsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRedeemEntitlementsCallbackInternal);
		Bindings.EOS_Ecom_RedeemEntitlements(base.InnerHandle, ref options2, clientDataAddress, onRedeemEntitlementsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnCheckoutCallbackInternal))]
	internal static void OnCheckoutCallbackInternalImplementation(ref CheckoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CheckoutCallbackInfoInternal, OnCheckoutCallback, CheckoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryEntitlementTokenCallbackInternal))]
	internal static void OnQueryEntitlementTokenCallbackInternalImplementation(ref QueryEntitlementTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryEntitlementTokenCallbackInfoInternal, OnQueryEntitlementTokenCallback, QueryEntitlementTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryEntitlementsCallbackInternal))]
	internal static void OnQueryEntitlementsCallbackInternalImplementation(ref QueryEntitlementsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryEntitlementsCallbackInfoInternal, OnQueryEntitlementsCallback, QueryEntitlementsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOffersCallbackInternal))]
	internal static void OnQueryOffersCallbackInternalImplementation(ref QueryOffersCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOffersCallbackInfoInternal, OnQueryOffersCallback, QueryOffersCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOwnershipBySandboxIdsCallbackInternal))]
	internal static void OnQueryOwnershipBySandboxIdsCallbackInternalImplementation(ref QueryOwnershipBySandboxIdsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOwnershipBySandboxIdsCallbackInfoInternal, OnQueryOwnershipBySandboxIdsCallback, QueryOwnershipBySandboxIdsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOwnershipCallbackInternal))]
	internal static void OnQueryOwnershipCallbackInternalImplementation(ref QueryOwnershipCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOwnershipCallbackInfoInternal, OnQueryOwnershipCallback, QueryOwnershipCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOwnershipTokenCallbackInternal))]
	internal static void OnQueryOwnershipTokenCallbackInternalImplementation(ref QueryOwnershipTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryOwnershipTokenCallbackInfoInternal, OnQueryOwnershipTokenCallback, QueryOwnershipTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRedeemEntitlementsCallbackInternal))]
	internal static void OnRedeemEntitlementsCallbackInternalImplementation(ref RedeemEntitlementsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RedeemEntitlementsCallbackInfoInternal, OnRedeemEntitlementsCallback, RedeemEntitlementsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum EcomItemType
{
	Durable,
	Consumable,
	Other
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct Entitlement
{
	public Utf8String EntitlementName { get; set; }

	public Utf8String EntitlementId { get; set; }

	public Utf8String CatalogItemId { get; set; }

	public int ServerIndex { get; set; }

	public bool Redeemed { get; set; }

	public long EndTimestamp { get; set; }

	internal void Set(ref EntitlementInternal other)
	{
		EntitlementName = other.EntitlementName;
		EntitlementId = other.EntitlementId;
		CatalogItemId = other.CatalogItemId;
		ServerIndex = other.ServerIndex;
		Redeemed = other.Redeemed;
		EndTimestamp = other.EndTimestamp;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EntitlementInternal : IGettable<Entitlement>, ISettable<Entitlement>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_EntitlementName;

	private IntPtr m_EntitlementId;

	private IntPtr m_CatalogItemId;

	private int m_ServerIndex;

	private int m_Redeemed;

	private long m_EndTimestamp;

	public Utf8String EntitlementName
	{
		get
		{
			Helper.Get(m_EntitlementName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_EntitlementName);
		}
	}

	public Utf8String EntitlementId
	{
		get
		{
			Helper.Get(m_EntitlementId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_EntitlementId);
		}
	}

	public Utf8String CatalogItemId
	{
		get
		{
			Helper.Get(m_CatalogItemId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CatalogItemId);
		}
	}

	public int ServerIndex
	{
		get
		{
			return m_ServerIndex;
		}
		set
		{
			m_ServerIndex = value;
		}
	}

	public bool Redeemed
	{
		get
		{
			Helper.Get(m_Redeemed, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Redeemed);
		}
	}

	public long EndTimestamp
	{
		get
		{
			return m_EndTimestamp;
		}
		set
		{
			m_EndTimestamp = value;
		}
	}

	public void Set(ref Entitlement other)
	{
		m_ApiVersion = 2;
		EntitlementName = other.EntitlementName;
		EntitlementId = other.EntitlementId;
		CatalogItemId = other.CatalogItemId;
		ServerIndex = other.ServerIndex;
		Redeemed = other.Redeemed;
		EndTimestamp = other.EndTimestamp;
	}

	public void Set(ref Entitlement? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			EntitlementName = other.Value.EntitlementName;
			EntitlementId = other.Value.EntitlementId;
			CatalogItemId = other.Value.CatalogItemId;
			ServerIndex = other.Value.ServerIndex;
			Redeemed = other.Value.Redeemed;
			EndTimestamp = other.Value.EndTimestamp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_EntitlementName);
		Helper.Dispose(ref m_EntitlementId);
		Helper.Dispose(ref m_CatalogItemId);
	}

	public void Get(out Entitlement output)
	{
		output = default(Entitlement);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetEntitlementsByNameCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetEntitlementsByNameCountOptionsInternal : ISettable<GetEntitlementsByNameCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementName;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String EntitlementName
	{
		set
		{
			Helper.Set(value, ref m_EntitlementName);
		}
	}

	public void Set(ref GetEntitlementsByNameCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		EntitlementName = other.EntitlementName;
	}

	public void Set(ref GetEntitlementsByNameCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			EntitlementName = other.Value.EntitlementName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementName);
	}
}


using Epic.OnlineServices;

public struct GetEntitlementsCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetEntitlementsCountOptionsInternal : ISettable<GetEntitlementsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetEntitlementsCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetEntitlementsCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetItemImageInfoCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetItemImageInfoCountOptionsInternal : ISettable<GetItemImageInfoCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ItemId
	{
		set
		{
			Helper.Set(value, ref m_ItemId);
		}
	}

	public void Set(ref GetItemImageInfoCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ItemId = other.ItemId;
	}

	public void Set(ref GetItemImageInfoCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ItemId = other.Value.ItemId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct GetItemReleaseCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ItemId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetItemReleaseCountOptionsInternal : ISettable<GetItemReleaseCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ItemId
	{
		set
		{
			Helper.Set(value, ref m_ItemId);
		}
	}

	public void Set(ref GetItemReleaseCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ItemId = other.ItemId;
	}

	public void Set(ref GetItemReleaseCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ItemId = other.Value.ItemId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemId);
	}
}


using Epic.OnlineServices;

public struct GetLastRedeemedEntitlementsCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetLastRedeemedEntitlementsCountOptionsInternal : ISettable<GetLastRedeemedEntitlementsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetLastRedeemedEntitlementsCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetLastRedeemedEntitlementsCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetOfferCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetOfferCountOptionsInternal : ISettable<GetOfferCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetOfferCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetOfferCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetOfferImageInfoCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetOfferImageInfoCountOptionsInternal : ISettable<GetOfferImageInfoCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OfferId
	{
		set
		{
			Helper.Set(value, ref m_OfferId);
		}
	}

	public void Set(ref GetOfferImageInfoCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		OfferId = other.OfferId;
	}

	public void Set(ref GetOfferImageInfoCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			OfferId = other.Value.OfferId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct GetOfferItemCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OfferId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetOfferItemCountOptionsInternal : ISettable<GetOfferItemCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OfferId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OfferId
	{
		set
		{
			Helper.Set(value, ref m_OfferId);
		}
	}

	public void Set(ref GetOfferItemCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		OfferId = other.OfferId;
	}

	public void Set(ref GetOfferItemCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			OfferId = other.Value.OfferId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OfferId);
	}
}


using Epic.OnlineServices;

public struct GetTransactionCountOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetTransactionCountOptionsInternal : ISettable<GetTransactionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetTransactionCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetTransactionCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct ItemOwnership
{
	public Utf8String Id { get; set; }

	public OwnershipStatus OwnershipStatus { get; set; }

	internal void Set(ref ItemOwnershipInternal other)
	{
		Id = other.Id;
		OwnershipStatus = other.OwnershipStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ItemOwnershipInternal : IGettable<ItemOwnership>, ISettable<ItemOwnership>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Id;

	private OwnershipStatus m_OwnershipStatus;

	public Utf8String Id
	{
		get
		{
			Helper.Get(m_Id, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Id);
		}
	}

	public OwnershipStatus OwnershipStatus
	{
		get
		{
			return m_OwnershipStatus;
		}
		set
		{
			m_OwnershipStatus = value;
		}
	}

	public void Set(ref ItemOwnership other)
	{
		m_ApiVersion = 1;
		Id = other.Id;
		OwnershipStatus = other.OwnershipStatus;
	}

	public void Set(ref ItemOwnership? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Id = other.Value.Id;
			OwnershipStatus = other.Value.OwnershipStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Id);
	}

	public void Get(out ItemOwnership output)
	{
		output = default(ItemOwnership);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct KeyImageInfo
{
	public Utf8String Type { get; set; }

	public Utf8String Url { get; set; }

	public uint Width { get; set; }

	public uint Height { get; set; }

	internal void Set(ref KeyImageInfoInternal other)
	{
		Type = other.Type;
		Url = other.Url;
		Width = other.Width;
		Height = other.Height;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct KeyImageInfoInternal : IGettable<KeyImageInfo>, ISettable<KeyImageInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Type;

	private IntPtr m_Url;

	private uint m_Width;

	private uint m_Height;

	public Utf8String Type
	{
		get
		{
			Helper.Get(m_Type, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Type);
		}
	}

	public Utf8String Url
	{
		get
		{
			Helper.Get(m_Url, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Url);
		}
	}

	public uint Width
	{
		get
		{
			return m_Width;
		}
		set
		{
			m_Width = value;
		}
	}

	public uint Height
	{
		get
		{
			return m_Height;
		}
		set
		{
			m_Height = value;
		}
	}

	public void Set(ref KeyImageInfo other)
	{
		m_ApiVersion = 1;
		Type = other.Type;
		Url = other.Url;
		Width = other.Width;
		Height = other.Height;
	}

	public void Set(ref KeyImageInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Type = other.Value.Type;
			Url = other.Value.Url;
			Width = other.Value.Width;
			Height = other.Value.Height;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Type);
		Helper.Dispose(ref m_Url);
	}

	public void Get(out KeyImageInfo output)
	{
		output = default(KeyImageInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Ecom;

public delegate void OnCheckoutCallback(ref CheckoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCheckoutCallbackInternal(ref CheckoutCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnQueryEntitlementsCallback(ref QueryEntitlementsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryEntitlementsCallbackInternal(ref QueryEntitlementsCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnQueryEntitlementTokenCallback(ref QueryEntitlementTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryEntitlementTokenCallbackInternal(ref QueryEntitlementTokenCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOffersCallback(ref QueryOffersCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOffersCallbackInternal(ref QueryOffersCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOwnershipBySandboxIdsCallback(ref QueryOwnershipBySandboxIdsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOwnershipBySandboxIdsCallbackInternal(ref QueryOwnershipBySandboxIdsCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOwnershipCallback(ref QueryOwnershipCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOwnershipCallbackInternal(ref QueryOwnershipCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnQueryOwnershipTokenCallback(ref QueryOwnershipTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOwnershipTokenCallbackInternal(ref QueryOwnershipTokenCallbackInfoInternal data);


using Epic.OnlineServices.Ecom;

public delegate void OnRedeemEntitlementsCallback(ref RedeemEntitlementsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Ecom;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRedeemEntitlementsCallbackInternal(ref RedeemEntitlementsCallbackInfoInternal data);


public enum OwnershipStatus
{
	NotOwned,
	Owned
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryEntitlementsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryEntitlementsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryEntitlementsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryEntitlementsCallbackInfo>, ISettable<QueryEntitlementsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryEntitlementsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryEntitlementsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryEntitlementsCallbackInfo output)
	{
		output = default(QueryEntitlementsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryEntitlementsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] EntitlementNames { get; set; }

	public bool IncludeRedeemed { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryEntitlementsOptionsInternal : ISettable<QueryEntitlementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementNames;

	private uint m_EntitlementNameCount;

	private int m_IncludeRedeemed;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] EntitlementNames
	{
		set
		{
			Helper.Set(value, ref m_EntitlementNames, out m_EntitlementNameCount);
		}
	}

	public bool IncludeRedeemed
	{
		set
		{
			Helper.Set(value, ref m_IncludeRedeemed);
		}
	}

	public void Set(ref QueryEntitlementsOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		EntitlementNames = other.EntitlementNames;
		IncludeRedeemed = other.IncludeRedeemed;
	}

	public void Set(ref QueryEntitlementsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			EntitlementNames = other.Value.EntitlementNames;
			IncludeRedeemed = other.Value.IncludeRedeemed;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementNames);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryEntitlementTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String EntitlementToken { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryEntitlementTokenCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		EntitlementToken = other.EntitlementToken;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryEntitlementTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryEntitlementTokenCallbackInfo>, ISettable<QueryEntitlementTokenCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementToken;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String EntitlementToken
	{
		get
		{
			Helper.Get(m_EntitlementToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_EntitlementToken);
		}
	}

	public void Set(ref QueryEntitlementTokenCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		EntitlementToken = other.EntitlementToken;
	}

	public void Set(ref QueryEntitlementTokenCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			EntitlementToken = other.Value.EntitlementToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementToken);
	}

	public void Get(out QueryEntitlementTokenCallbackInfo output)
	{
		output = default(QueryEntitlementTokenCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryEntitlementTokenOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] EntitlementNames { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryEntitlementTokenOptionsInternal : ISettable<QueryEntitlementTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EntitlementNames;

	private uint m_EntitlementNameCount;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] EntitlementNames
	{
		set
		{
			Helper.Set(value, ref m_EntitlementNames, out m_EntitlementNameCount);
		}
	}

	public void Set(ref QueryEntitlementTokenOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		EntitlementNames = other.EntitlementNames;
	}

	public void Set(ref QueryEntitlementTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			EntitlementNames = other.Value.EntitlementNames;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementNames);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryOffersCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryOffersCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOffersCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOffersCallbackInfo>, ISettable<QueryOffersCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryOffersCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryOffersCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryOffersCallbackInfo output)
	{
		output = default(QueryOffersCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryOffersOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OverrideCatalogNamespace { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOffersOptionsInternal : ISettable<QueryOffersOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_OverrideCatalogNamespace;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OverrideCatalogNamespace
	{
		set
		{
			Helper.Set(value, ref m_OverrideCatalogNamespace);
		}
	}

	public void Set(ref QueryOffersOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		OverrideCatalogNamespace = other.OverrideCatalogNamespace;
	}

	public void Set(ref QueryOffersOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			OverrideCatalogNamespace = other.Value.OverrideCatalogNamespace;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OverrideCatalogNamespace);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryOwnershipBySandboxIdsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public SandboxIdItemOwnership[] SandboxIdItemOwnerships { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryOwnershipBySandboxIdsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		SandboxIdItemOwnerships = other.SandboxIdItemOwnerships;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOwnershipBySandboxIdsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOwnershipBySandboxIdsCallbackInfo>, ISettable<QueryOwnershipBySandboxIdsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_SandboxIdItemOwnerships;

	private uint m_SandboxIdItemOwnershipsCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SandboxIdItemOwnership[] SandboxIdItemOwnerships
	{
		get
		{
			Helper.Get<SandboxIdItemOwnershipInternal, SandboxIdItemOwnership>(m_SandboxIdItemOwnerships, out var to, m_SandboxIdItemOwnershipsCount);
			return to;
		}
		set
		{
			Helper.Set<SandboxIdItemOwnership, SandboxIdItemOwnershipInternal>(ref value, ref m_SandboxIdItemOwnerships, out m_SandboxIdItemOwnershipsCount);
		}
	}

	public void Set(ref QueryOwnershipBySandboxIdsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		SandboxIdItemOwnerships = other.SandboxIdItemOwnerships;
	}

	public void Set(ref QueryOwnershipBySandboxIdsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			SandboxIdItemOwnerships = other.Value.SandboxIdItemOwnerships;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SandboxIdItemOwnerships);
	}

	public void Get(out QueryOwnershipBySandboxIdsCallbackInfo output)
	{
		output = default(QueryOwnershipBySandboxIdsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipBySandboxIdsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] SandboxIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOwnershipBySandboxIdsOptionsInternal : ISettable<QueryOwnershipBySandboxIdsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_SandboxIds;

	private uint m_SandboxIdsCount;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] SandboxIds
	{
		set
		{
			Helper.Set(value, ref m_SandboxIds, out m_SandboxIdsCount);
		}
	}

	public void Set(ref QueryOwnershipBySandboxIdsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		SandboxIds = other.SandboxIds;
	}

	public void Set(ref QueryOwnershipBySandboxIdsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			SandboxIds = other.Value.SandboxIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SandboxIds);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryOwnershipCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public ItemOwnership[] ItemOwnership { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryOwnershipCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		ItemOwnership = other.ItemOwnership;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOwnershipCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOwnershipCallbackInfo>, ISettable<QueryOwnershipCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_ItemOwnership;

	private uint m_ItemOwnershipCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ItemOwnership[] ItemOwnership
	{
		get
		{
			Helper.Get<ItemOwnershipInternal, ItemOwnership>(m_ItemOwnership, out var to, m_ItemOwnershipCount);
			return to;
		}
		set
		{
			Helper.Set<ItemOwnership, ItemOwnershipInternal>(ref value, ref m_ItemOwnership, out m_ItemOwnershipCount);
		}
	}

	public void Set(ref QueryOwnershipCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		ItemOwnership = other.ItemOwnership;
	}

	public void Set(ref QueryOwnershipCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			ItemOwnership = other.Value.ItemOwnership;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ItemOwnership);
	}

	public void Get(out QueryOwnershipCallbackInfo output)
	{
		output = default(QueryOwnershipCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] CatalogItemIds { get; set; }

	public Utf8String CatalogNamespace { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOwnershipOptionsInternal : ISettable<QueryOwnershipOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_CatalogItemIds;

	private uint m_CatalogItemIdCount;

	private IntPtr m_CatalogNamespace;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] CatalogItemIds
	{
		set
		{
			Helper.Set(value, ref m_CatalogItemIds, out m_CatalogItemIdCount);
		}
	}

	public Utf8String CatalogNamespace
	{
		set
		{
			Helper.Set(value, ref m_CatalogNamespace);
		}
	}

	public void Set(ref QueryOwnershipOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		CatalogItemIds = other.CatalogItemIds;
		CatalogNamespace = other.CatalogNamespace;
	}

	public void Set(ref QueryOwnershipOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			CatalogItemIds = other.Value.CatalogItemIds;
			CatalogNamespace = other.Value.CatalogNamespace;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CatalogItemIds);
		Helper.Dispose(ref m_CatalogNamespace);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct QueryOwnershipTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String OwnershipToken { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryOwnershipTokenCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		OwnershipToken = other.OwnershipToken;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOwnershipTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryOwnershipTokenCallbackInfo>, ISettable<QueryOwnershipTokenCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_OwnershipToken;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String OwnershipToken
	{
		get
		{
			Helper.Get(m_OwnershipToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OwnershipToken);
		}
	}

	public void Set(ref QueryOwnershipTokenCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		OwnershipToken = other.OwnershipToken;
	}

	public void Set(ref QueryOwnershipTokenCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			OwnershipToken = other.Value.OwnershipToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_OwnershipToken);
	}

	public void Get(out QueryOwnershipTokenCallbackInfo output)
	{
		output = default(QueryOwnershipTokenCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryOwnershipTokenOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] CatalogItemIds { get; set; }

	public Utf8String CatalogNamespace { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOwnershipTokenOptionsInternal : ISettable<QueryOwnershipTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_CatalogItemIds;

	private uint m_CatalogItemIdCount;

	private IntPtr m_CatalogNamespace;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] CatalogItemIds
	{
		set
		{
			Helper.Set(value, ref m_CatalogItemIds, out m_CatalogItemIdCount);
		}
	}

	public Utf8String CatalogNamespace
	{
		set
		{
			Helper.Set(value, ref m_CatalogNamespace);
		}
	}

	public void Set(ref QueryOwnershipTokenOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		CatalogItemIds = other.CatalogItemIds;
		CatalogNamespace = other.CatalogNamespace;
	}

	public void Set(ref QueryOwnershipTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			CatalogItemIds = other.Value.CatalogItemIds;
			CatalogNamespace = other.Value.CatalogNamespace;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CatalogItemIds);
		Helper.Dispose(ref m_CatalogNamespace);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct RedeemEntitlementsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public uint RedeemedEntitlementIdsCount { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RedeemEntitlementsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RedeemedEntitlementIdsCount = other.RedeemedEntitlementIdsCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RedeemEntitlementsCallbackInfoInternal : ICallbackInfoInternal, IGettable<RedeemEntitlementsCallbackInfo>, ISettable<RedeemEntitlementsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private uint m_RedeemedEntitlementIdsCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint RedeemedEntitlementIdsCount
	{
		get
		{
			return m_RedeemedEntitlementIdsCount;
		}
		set
		{
			m_RedeemedEntitlementIdsCount = value;
		}
	}

	public void Set(ref RedeemEntitlementsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RedeemedEntitlementIdsCount = other.RedeemedEntitlementIdsCount;
	}

	public void Set(ref RedeemEntitlementsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RedeemedEntitlementIdsCount = other.Value.RedeemedEntitlementIdsCount;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out RedeemEntitlementsCallbackInfo output)
	{
		output = default(RedeemEntitlementsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RedeemEntitlementsOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String[] EntitlementIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RedeemEntitlementsOptionsInternal : ISettable<RedeemEntitlementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_EntitlementIdCount;

	private IntPtr m_EntitlementIds;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] EntitlementIds
	{
		set
		{
			Helper.Set(value, ref m_EntitlementIds, out m_EntitlementIdCount);
		}
	}

	public void Set(ref RedeemEntitlementsOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		EntitlementIds = other.EntitlementIds;
	}

	public void Set(ref RedeemEntitlementsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			EntitlementIds = other.Value.EntitlementIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EntitlementIds);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public struct SandboxIdItemOwnership
{
	public Utf8String SandboxId { get; set; }

	public Utf8String[] OwnedCatalogItemIds { get; set; }

	internal void Set(ref SandboxIdItemOwnershipInternal other)
	{
		SandboxId = other.SandboxId;
		OwnedCatalogItemIds = other.OwnedCatalogItemIds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SandboxIdItemOwnershipInternal : IGettable<SandboxIdItemOwnership>, ISettable<SandboxIdItemOwnership>, IDisposable
{
	private IntPtr m_SandboxId;

	private IntPtr m_OwnedCatalogItemIds;

	private uint m_OwnedCatalogItemIdsCount;

	public Utf8String SandboxId
	{
		get
		{
			Helper.Get(m_SandboxId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SandboxId);
		}
	}

	public Utf8String[] OwnedCatalogItemIds
	{
		get
		{
			Helper.Get(m_OwnedCatalogItemIds, out Utf8String[] to, m_OwnedCatalogItemIdsCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OwnedCatalogItemIds, out m_OwnedCatalogItemIdsCount);
		}
	}

	public void Set(ref SandboxIdItemOwnership other)
	{
		SandboxId = other.SandboxId;
		OwnedCatalogItemIds = other.OwnedCatalogItemIds;
	}

	public void Set(ref SandboxIdItemOwnership? other)
	{
		if (other.HasValue)
		{
			SandboxId = other.Value.SandboxId;
			OwnedCatalogItemIds = other.Value.OwnedCatalogItemIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SandboxId);
		Helper.Dispose(ref m_OwnedCatalogItemIds);
	}

	public void Get(out SandboxIdItemOwnership output)
	{
		output = default(SandboxIdItemOwnership);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

public sealed class Transaction : Handle
{
	public const int TransactionCopyentitlementbyindexApiLatest = 1;

	public const int TransactionGetentitlementscountApiLatest = 1;

	public Transaction()
	{
	}

	public Transaction(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyEntitlementByIndex(ref TransactionCopyEntitlementByIndexOptions options, out Entitlement? outEntitlement)
	{
		TransactionCopyEntitlementByIndexOptionsInternal options2 = default(TransactionCopyEntitlementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outEntitlement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Ecom_Transaction_CopyEntitlementByIndex(base.InnerHandle, ref options2, ref outEntitlement2);
		Helper.Dispose(ref options2);
		Helper.Get<EntitlementInternal, Entitlement>(outEntitlement2, out outEntitlement);
		if (outEntitlement.HasValue)
		{
			Bindings.EOS_Ecom_Entitlement_Release(outEntitlement2);
		}
		return result;
	}

	public uint GetEntitlementsCount(ref TransactionGetEntitlementsCountOptions options)
	{
		TransactionGetEntitlementsCountOptionsInternal options2 = default(TransactionGetEntitlementsCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Ecom_Transaction_GetEntitlementsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetTransactionId(out Utf8String outBuffer)
	{
		int inOutBufferLength = 65;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Ecom_Transaction_GetTransactionId(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_Ecom_Transaction_Release(base.InnerHandle);
	}
}


public struct TransactionCopyEntitlementByIndexOptions
{
	public uint EntitlementIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct TransactionCopyEntitlementByIndexOptionsInternal : ISettable<TransactionCopyEntitlementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_EntitlementIndex;

	public uint EntitlementIndex
	{
		set
		{
			m_EntitlementIndex = value;
		}
	}

	public void Set(ref TransactionCopyEntitlementByIndexOptions other)
	{
		m_ApiVersion = 1;
		EntitlementIndex = other.EntitlementIndex;
	}

	public void Set(ref TransactionCopyEntitlementByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			EntitlementIndex = other.Value.EntitlementIndex;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct TransactionGetEntitlementsCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Ecom;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct TransactionGetEntitlementsCountOptionsInternal : ISettable<TransactionGetEntitlementsCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref TransactionGetEntitlementsCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref TransactionGetEntitlementsCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct AcceptRequestToJoinCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref AcceptRequestToJoinCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AcceptRequestToJoinCallbackInfoInternal : ICallbackInfoInternal, IGettable<AcceptRequestToJoinCallbackInfo>, ISettable<AcceptRequestToJoinCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref AcceptRequestToJoinCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref AcceptRequestToJoinCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out AcceptRequestToJoinCallbackInfo output)
	{
		output = default(AcceptRequestToJoinCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct AcceptRequestToJoinOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AcceptRequestToJoinOptionsInternal : ISettable<AcceptRequestToJoinOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref AcceptRequestToJoinOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref AcceptRequestToJoinOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyCustomInviteAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyCustomInviteAcceptedOptionsInternal : ISettable<AddNotifyCustomInviteAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyCustomInviteAcceptedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyCustomInviteAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyCustomInviteReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyCustomInviteReceivedOptionsInternal : ISettable<AddNotifyCustomInviteReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyCustomInviteReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyCustomInviteReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyCustomInviteRejectedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyCustomInviteRejectedOptionsInternal : ISettable<AddNotifyCustomInviteRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyCustomInviteRejectedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyCustomInviteRejectedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyRequestToJoinAcceptedOptionsInternal : ISettable<AddNotifyRequestToJoinAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinAcceptedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyRequestToJoinAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyRequestToJoinReceivedOptionsInternal : ISettable<AddNotifyRequestToJoinReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyRequestToJoinReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinRejectedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyRequestToJoinRejectedOptionsInternal : ISettable<AddNotifyRequestToJoinRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinRejectedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyRequestToJoinRejectedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyRequestToJoinResponseReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyRequestToJoinResponseReceivedOptionsInternal : ISettable<AddNotifyRequestToJoinResponseReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyRequestToJoinResponseReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyRequestToJoinResponseReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySendCustomNativeInviteRequestedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifySendCustomNativeInviteRequestedOptionsInternal : ISettable<AddNotifySendCustomNativeInviteRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySendCustomNativeInviteRequestedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifySendCustomNativeInviteRequestedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct CustomInviteRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Utf8String Payload { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref CustomInviteRejectedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		Payload = other.Payload;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CustomInviteRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<CustomInviteRejectedCallbackInfo>, ISettable<CustomInviteRejectedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private IntPtr m_Payload;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String CustomInviteId
	{
		get
		{
			Helper.Get(m_CustomInviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CustomInviteId);
		}
	}

	public Utf8String Payload
	{
		get
		{
			Helper.Get(m_Payload, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Payload);
		}
	}

	public void Set(ref CustomInviteRejectedCallbackInfo other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		Payload = other.Payload;
	}

	public void Set(ref CustomInviteRejectedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
			CustomInviteId = other.Value.CustomInviteId;
			Payload = other.Value.Payload;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CustomInviteId);
		Helper.Dispose(ref m_Payload);
	}

	public void Get(out CustomInviteRejectedCallbackInfo output)
	{
		output = default(CustomInviteRejectedCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public sealed class CustomInvitesInterface : Handle
{
	public const int AcceptrequesttojoinApiLatest = 1;

	public const int AddnotifycustominviteacceptedApiLatest = 1;

	public const int AddnotifycustominvitereceivedApiLatest = 1;

	public const int AddnotifycustominviterejectedApiLatest = 1;

	public const int AddnotifyrequesttojoinacceptedApiLatest = 1;

	public const int AddnotifyrequesttojoinreceivedApiLatest = 1;

	public const int AddnotifyrequesttojoinrejectedApiLatest = 1;

	public const int AddnotifyrequesttojoinresponsereceivedApiLatest = 1;

	public const int AddnotifysendcustomnativeinviterequestedApiLatest = 1;

	public const int FinalizeinviteApiLatest = 1;

	public const int MaxPayloadLength = 500;

	public const int RejectrequesttojoinApiLatest = 1;

	public const int SendcustominviteApiLatest = 1;

	public const int SendrequesttojoinApiLatest = 1;

	public const int SetcustominviteApiLatest = 1;

	public CustomInvitesInterface()
	{
	}

	public CustomInvitesInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public void AcceptRequestToJoin(ref AcceptRequestToJoinOptions options, object clientData, OnAcceptRequestToJoinCallback completionDelegate)
	{
		AcceptRequestToJoinOptionsInternal options2 = default(AcceptRequestToJoinOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAcceptRequestToJoinCallbackInternal onAcceptRequestToJoinCallbackInternal = OnAcceptRequestToJoinCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAcceptRequestToJoinCallbackInternal);
		Bindings.EOS_CustomInvites_AcceptRequestToJoin(base.InnerHandle, ref options2, clientDataAddress, onAcceptRequestToJoinCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public ulong AddNotifyCustomInviteAccepted(ref AddNotifyCustomInviteAcceptedOptions options, object clientData, OnCustomInviteAcceptedCallback notificationFn)
	{
		AddNotifyCustomInviteAcceptedOptionsInternal options2 = default(AddNotifyCustomInviteAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCustomInviteAcceptedCallbackInternal onCustomInviteAcceptedCallbackInternal = OnCustomInviteAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onCustomInviteAcceptedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyCustomInviteAccepted(base.InnerHandle, ref options2, clientDataAddress, onCustomInviteAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyCustomInviteReceived(ref AddNotifyCustomInviteReceivedOptions options, object clientData, OnCustomInviteReceivedCallback notificationFn)
	{
		AddNotifyCustomInviteReceivedOptionsInternal options2 = default(AddNotifyCustomInviteReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCustomInviteReceivedCallbackInternal onCustomInviteReceivedCallbackInternal = OnCustomInviteReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onCustomInviteReceivedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyCustomInviteReceived(base.InnerHandle, ref options2, clientDataAddress, onCustomInviteReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyCustomInviteRejected(ref AddNotifyCustomInviteRejectedOptions options, object clientData, OnCustomInviteRejectedCallback notificationFn)
	{
		AddNotifyCustomInviteRejectedOptionsInternal options2 = default(AddNotifyCustomInviteRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCustomInviteRejectedCallbackInternal onCustomInviteRejectedCallbackInternal = OnCustomInviteRejectedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onCustomInviteRejectedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyCustomInviteRejected(base.InnerHandle, ref options2, clientDataAddress, onCustomInviteRejectedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinAccepted(ref AddNotifyRequestToJoinAcceptedOptions options, object clientData, OnRequestToJoinAcceptedCallback notificationFn)
	{
		AddNotifyRequestToJoinAcceptedOptionsInternal options2 = default(AddNotifyRequestToJoinAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRequestToJoinAcceptedCallbackInternal onRequestToJoinAcceptedCallbackInternal = OnRequestToJoinAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onRequestToJoinAcceptedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinAccepted(base.InnerHandle, ref options2, clientDataAddress, onRequestToJoinAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinReceived(ref AddNotifyRequestToJoinReceivedOptions options, object clientData, OnRequestToJoinReceivedCallback notificationFn)
	{
		AddNotifyRequestToJoinReceivedOptionsInternal options2 = default(AddNotifyRequestToJoinReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRequestToJoinReceivedCallbackInternal onRequestToJoinReceivedCallbackInternal = OnRequestToJoinReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onRequestToJoinReceivedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinReceived(base.InnerHandle, ref options2, clientDataAddress, onRequestToJoinReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinRejected(ref AddNotifyRequestToJoinRejectedOptions options, object clientData, OnRequestToJoinRejectedCallback notificationFn)
	{
		AddNotifyRequestToJoinRejectedOptionsInternal options2 = default(AddNotifyRequestToJoinRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRequestToJoinRejectedCallbackInternal onRequestToJoinRejectedCallbackInternal = OnRequestToJoinRejectedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onRequestToJoinRejectedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinRejected(base.InnerHandle, ref options2, clientDataAddress, onRequestToJoinRejectedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyRequestToJoinResponseReceived(ref AddNotifyRequestToJoinResponseReceivedOptions options, object clientData, OnRequestToJoinResponseReceivedCallback notificationFn)
	{
		AddNotifyRequestToJoinResponseReceivedOptionsInternal options2 = default(AddNotifyRequestToJoinResponseReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRequestToJoinResponseReceivedCallbackInternal onRequestToJoinResponseReceivedCallbackInternal = OnRequestToJoinResponseReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onRequestToJoinResponseReceivedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived(base.InnerHandle, ref options2, clientDataAddress, onRequestToJoinResponseReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifySendCustomNativeInviteRequested(ref AddNotifySendCustomNativeInviteRequestedOptions options, object clientData, OnSendCustomNativeInviteRequestedCallback notificationFn)
	{
		AddNotifySendCustomNativeInviteRequestedOptionsInternal options2 = default(AddNotifySendCustomNativeInviteRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendCustomNativeInviteRequestedCallbackInternal onSendCustomNativeInviteRequestedCallbackInternal = OnSendCustomNativeInviteRequestedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onSendCustomNativeInviteRequestedCallbackInternal);
		ulong num = Bindings.EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested(base.InnerHandle, ref options2, clientDataAddress, onSendCustomNativeInviteRequestedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result FinalizeInvite(ref FinalizeInviteOptions options)
	{
		FinalizeInviteOptionsInternal options2 = default(FinalizeInviteOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_CustomInvites_FinalizeInvite(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RejectRequestToJoin(ref RejectRequestToJoinOptions options, object clientData, OnRejectRequestToJoinCallback completionDelegate)
	{
		RejectRequestToJoinOptionsInternal options2 = default(RejectRequestToJoinOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRejectRequestToJoinCallbackInternal onRejectRequestToJoinCallbackInternal = OnRejectRequestToJoinCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRejectRequestToJoinCallbackInternal);
		Bindings.EOS_CustomInvites_RejectRequestToJoin(base.InnerHandle, ref options2, clientDataAddress, onRejectRequestToJoinCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyCustomInviteAccepted(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyCustomInviteAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyCustomInviteReceived(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyCustomInviteReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyCustomInviteRejected(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyCustomInviteRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinAccepted(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinReceived(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinRejected(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyRequestToJoinResponseReceived(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySendCustomNativeInviteRequested(ulong inId)
	{
		Bindings.EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void SendCustomInvite(ref SendCustomInviteOptions options, object clientData, OnSendCustomInviteCallback completionDelegate)
	{
		SendCustomInviteOptionsInternal options2 = default(SendCustomInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendCustomInviteCallbackInternal onSendCustomInviteCallbackInternal = OnSendCustomInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSendCustomInviteCallbackInternal);
		Bindings.EOS_CustomInvites_SendCustomInvite(base.InnerHandle, ref options2, clientDataAddress, onSendCustomInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void SendRequestToJoin(ref SendRequestToJoinOptions options, object clientData, OnSendRequestToJoinCallback completionDelegate)
	{
		SendRequestToJoinOptionsInternal options2 = default(SendRequestToJoinOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendRequestToJoinCallbackInternal onSendRequestToJoinCallbackInternal = OnSendRequestToJoinCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSendRequestToJoinCallbackInternal);
		Bindings.EOS_CustomInvites_SendRequestToJoin(base.InnerHandle, ref options2, clientDataAddress, onSendRequestToJoinCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result SetCustomInvite(ref SetCustomInviteOptions options)
	{
		SetCustomInviteOptionsInternal options2 = default(SetCustomInviteOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_CustomInvites_SetCustomInvite(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnAcceptRequestToJoinCallbackInternal))]
	internal static void OnAcceptRequestToJoinCallbackInternalImplementation(ref AcceptRequestToJoinCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<AcceptRequestToJoinCallbackInfoInternal, OnAcceptRequestToJoinCallback, AcceptRequestToJoinCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnCustomInviteAcceptedCallbackInternal))]
	internal static void OnCustomInviteAcceptedCallbackInternalImplementation(ref OnCustomInviteAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnCustomInviteAcceptedCallbackInfoInternal, OnCustomInviteAcceptedCallback, OnCustomInviteAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnCustomInviteReceivedCallbackInternal))]
	internal static void OnCustomInviteReceivedCallbackInternalImplementation(ref OnCustomInviteReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnCustomInviteReceivedCallbackInfoInternal, OnCustomInviteReceivedCallback, OnCustomInviteReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnCustomInviteRejectedCallbackInternal))]
	internal static void OnCustomInviteRejectedCallbackInternalImplementation(ref CustomInviteRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<CustomInviteRejectedCallbackInfoInternal, OnCustomInviteRejectedCallback, CustomInviteRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectRequestToJoinCallbackInternal))]
	internal static void OnRejectRequestToJoinCallbackInternalImplementation(ref RejectRequestToJoinCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectRequestToJoinCallbackInfoInternal, OnRejectRequestToJoinCallback, RejectRequestToJoinCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinAcceptedCallbackInternal))]
	internal static void OnRequestToJoinAcceptedCallbackInternalImplementation(ref OnRequestToJoinAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnRequestToJoinAcceptedCallbackInfoInternal, OnRequestToJoinAcceptedCallback, OnRequestToJoinAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinReceivedCallbackInternal))]
	internal static void OnRequestToJoinReceivedCallbackInternalImplementation(ref RequestToJoinReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<RequestToJoinReceivedCallbackInfoInternal, OnRequestToJoinReceivedCallback, RequestToJoinReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinRejectedCallbackInternal))]
	internal static void OnRequestToJoinRejectedCallbackInternalImplementation(ref OnRequestToJoinRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnRequestToJoinRejectedCallbackInfoInternal, OnRequestToJoinRejectedCallback, OnRequestToJoinRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRequestToJoinResponseReceivedCallbackInternal))]
	internal static void OnRequestToJoinResponseReceivedCallbackInternalImplementation(ref RequestToJoinResponseReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<RequestToJoinResponseReceivedCallbackInfoInternal, OnRequestToJoinResponseReceivedCallback, RequestToJoinResponseReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendCustomInviteCallbackInternal))]
	internal static void OnSendCustomInviteCallbackInternalImplementation(ref SendCustomInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendCustomInviteCallbackInfoInternal, OnSendCustomInviteCallback, SendCustomInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendCustomNativeInviteRequestedCallbackInternal))]
	internal static void OnSendCustomNativeInviteRequestedCallbackInternalImplementation(ref SendCustomNativeInviteRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SendCustomNativeInviteRequestedCallbackInfoInternal, OnSendCustomNativeInviteRequestedCallback, SendCustomNativeInviteRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendRequestToJoinCallbackInternal))]
	internal static void OnSendRequestToJoinCallbackInternalImplementation(ref SendRequestToJoinCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendRequestToJoinCallbackInfoInternal, OnSendRequestToJoinCallback, SendRequestToJoinCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct FinalizeInviteOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Result ProcessingResult { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct FinalizeInviteOptionsInternal : ISettable<FinalizeInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private Result m_ProcessingResult;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String CustomInviteId
	{
		set
		{
			Helper.Set(value, ref m_CustomInviteId);
		}
	}

	public Result ProcessingResult
	{
		set
		{
			m_ProcessingResult = value;
		}
	}

	public void Set(ref FinalizeInviteOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		ProcessingResult = other.ProcessingResult;
	}

	public void Set(ref FinalizeInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
			CustomInviteId = other.Value.CustomInviteId;
			ProcessingResult = other.Value.ProcessingResult;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CustomInviteId);
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnAcceptRequestToJoinCallback(ref AcceptRequestToJoinCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAcceptRequestToJoinCallbackInternal(ref AcceptRequestToJoinCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnCustomInviteAcceptedCallback(ref OnCustomInviteAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCustomInviteAcceptedCallbackInternal(ref OnCustomInviteAcceptedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct OnCustomInviteAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Utf8String Payload { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnCustomInviteAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		Payload = other.Payload;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnCustomInviteAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnCustomInviteAcceptedCallbackInfo>, ISettable<OnCustomInviteAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private IntPtr m_Payload;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String CustomInviteId
	{
		get
		{
			Helper.Get(m_CustomInviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CustomInviteId);
		}
	}

	public Utf8String Payload
	{
		get
		{
			Helper.Get(m_Payload, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Payload);
		}
	}

	public void Set(ref OnCustomInviteAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		Payload = other.Payload;
	}

	public void Set(ref OnCustomInviteAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
			CustomInviteId = other.Value.CustomInviteId;
			Payload = other.Value.Payload;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CustomInviteId);
		Helper.Dispose(ref m_Payload);
	}

	public void Get(out OnCustomInviteAcceptedCallbackInfo output)
	{
		output = default(OnCustomInviteAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnCustomInviteReceivedCallback(ref OnCustomInviteReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCustomInviteReceivedCallbackInternal(ref OnCustomInviteReceivedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct OnCustomInviteReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String CustomInviteId { get; set; }

	public Utf8String Payload { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnCustomInviteReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		Payload = other.Payload;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnCustomInviteReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnCustomInviteReceivedCallbackInfo>, ISettable<OnCustomInviteReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	private IntPtr m_CustomInviteId;

	private IntPtr m_Payload;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String CustomInviteId
	{
		get
		{
			Helper.Get(m_CustomInviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CustomInviteId);
		}
	}

	public Utf8String Payload
	{
		get
		{
			Helper.Get(m_Payload, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Payload);
		}
	}

	public void Set(ref OnCustomInviteReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
		CustomInviteId = other.CustomInviteId;
		Payload = other.Payload;
	}

	public void Set(ref OnCustomInviteReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
			CustomInviteId = other.Value.CustomInviteId;
			Payload = other.Value.Payload;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_CustomInviteId);
		Helper.Dispose(ref m_Payload);
	}

	public void Get(out OnCustomInviteReceivedCallbackInfo output)
	{
		output = default(OnCustomInviteReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnCustomInviteRejectedCallback(ref CustomInviteRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCustomInviteRejectedCallbackInternal(ref CustomInviteRejectedCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnRejectRequestToJoinCallback(ref RejectRequestToJoinCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectRequestToJoinCallbackInternal(ref RejectRequestToJoinCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinAcceptedCallback(ref OnRequestToJoinAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinAcceptedCallbackInternal(ref OnRequestToJoinAcceptedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct OnRequestToJoinAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnRequestToJoinAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnRequestToJoinAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnRequestToJoinAcceptedCallbackInfo>, ISettable<OnRequestToJoinAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref OnRequestToJoinAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref OnRequestToJoinAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out OnRequestToJoinAcceptedCallbackInfo output)
	{
		output = default(OnRequestToJoinAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinReceivedCallback(ref RequestToJoinReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinReceivedCallbackInternal(ref RequestToJoinReceivedCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinRejectedCallback(ref OnRequestToJoinRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinRejectedCallbackInternal(ref OnRequestToJoinRejectedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct OnRequestToJoinRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnRequestToJoinRejectedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnRequestToJoinRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnRequestToJoinRejectedCallbackInfo>, ISettable<OnRequestToJoinRejectedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref OnRequestToJoinRejectedCallbackInfo other)
	{
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref OnRequestToJoinRejectedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out OnRequestToJoinRejectedCallbackInfo output)
	{
		output = default(OnRequestToJoinRejectedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.CustomInvites;

public delegate void OnRequestToJoinResponseReceivedCallback(ref RequestToJoinResponseReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRequestToJoinResponseReceivedCallbackInternal(ref RequestToJoinResponseReceivedCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnSendCustomInviteCallback(ref SendCustomInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendCustomInviteCallbackInternal(ref SendCustomInviteCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnSendCustomNativeInviteRequestedCallback(ref SendCustomNativeInviteRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendCustomNativeInviteRequestedCallbackInternal(ref SendCustomNativeInviteRequestedCallbackInfoInternal data);


using Epic.OnlineServices.CustomInvites;

public delegate void OnSendRequestToJoinCallback(ref SendRequestToJoinCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.CustomInvites;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendRequestToJoinCallbackInternal(ref SendRequestToJoinCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct RejectRequestToJoinCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RejectRequestToJoinCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectRequestToJoinCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectRequestToJoinCallbackInfo>, ISettable<RejectRequestToJoinCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref RejectRequestToJoinCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref RejectRequestToJoinCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out RejectRequestToJoinCallbackInfo output)
	{
		output = default(RejectRequestToJoinCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RejectRequestToJoinOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectRequestToJoinOptionsInternal : ISettable<RejectRequestToJoinOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref RejectRequestToJoinOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref RejectRequestToJoinOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct RequestToJoinReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId FromUserId { get; set; }

	public ProductUserId ToUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref RequestToJoinReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		FromUserId = other.FromUserId;
		ToUserId = other.ToUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RequestToJoinReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RequestToJoinReceivedCallbackInfo>, ISettable<RequestToJoinReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_FromUserId;

	private IntPtr m_ToUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId FromUserId
	{
		get
		{
			Helper.Get(m_FromUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_FromUserId);
		}
	}

	public ProductUserId ToUserId
	{
		get
		{
			Helper.Get(m_ToUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ToUserId);
		}
	}

	public void Set(ref RequestToJoinReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		FromUserId = other.FromUserId;
		ToUserId = other.ToUserId;
	}

	public void Set(ref RequestToJoinReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			FromUserId = other.Value.FromUserId;
			ToUserId = other.Value.ToUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_FromUserId);
		Helper.Dispose(ref m_ToUserId);
	}

	public void Get(out RequestToJoinReceivedCallbackInfo output)
	{
		output = default(RequestToJoinReceivedCallbackInfo);
		output.Set(ref this);
	}
}


public enum RequestToJoinResponse
{
	Accepted,
	Rejected
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct RequestToJoinResponseReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId FromUserId { get; set; }

	public ProductUserId ToUserId { get; set; }

	public RequestToJoinResponse Response { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref RequestToJoinResponseReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		FromUserId = other.FromUserId;
		ToUserId = other.ToUserId;
		Response = other.Response;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RequestToJoinResponseReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<RequestToJoinResponseReceivedCallbackInfo>, ISettable<RequestToJoinResponseReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_FromUserId;

	private IntPtr m_ToUserId;

	private RequestToJoinResponse m_Response;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId FromUserId
	{
		get
		{
			Helper.Get(m_FromUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_FromUserId);
		}
	}

	public ProductUserId ToUserId
	{
		get
		{
			Helper.Get(m_ToUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ToUserId);
		}
	}

	public RequestToJoinResponse Response
	{
		get
		{
			return m_Response;
		}
		set
		{
			m_Response = value;
		}
	}

	public void Set(ref RequestToJoinResponseReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		FromUserId = other.FromUserId;
		ToUserId = other.ToUserId;
		Response = other.Response;
	}

	public void Set(ref RequestToJoinResponseReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			FromUserId = other.Value.FromUserId;
			ToUserId = other.Value.ToUserId;
			Response = other.Value.Response;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_FromUserId);
		Helper.Dispose(ref m_ToUserId);
	}

	public void Get(out RequestToJoinResponseReceivedCallbackInfo output)
	{
		output = default(RequestToJoinResponseReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct SendCustomInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId[] TargetUserIds { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SendCustomInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserIds = other.TargetUserIds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendCustomInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendCustomInviteCallbackInfo>, ISettable<SendCustomInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserIds;

	private uint m_TargetUserIdsCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId[] TargetUserIds
	{
		get
		{
			Helper.GetHandle<ProductUserId>(m_TargetUserIds, out var to, m_TargetUserIdsCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserIds, out m_TargetUserIdsCount);
		}
	}

	public void Set(ref SendCustomInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserIds = other.TargetUserIds;
	}

	public void Set(ref SendCustomInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserIds = other.Value.TargetUserIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserIds);
	}

	public void Get(out SendCustomInviteCallbackInfo output)
	{
		output = default(SendCustomInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SendCustomInviteOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId[] TargetUserIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendCustomInviteOptionsInternal : ISettable<SendCustomInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserIds;

	private uint m_TargetUserIdsCount;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId[] TargetUserIds
	{
		set
		{
			Helper.Set(value, ref m_TargetUserIds, out m_TargetUserIdsCount);
		}
	}

	public void Set(ref SendCustomInviteOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserIds = other.TargetUserIds;
	}

	public void Set(ref SendCustomInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserIds = other.Value.TargetUserIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserIds);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct SendCustomNativeInviteRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong UiEventId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String TargetNativeAccountType { get; set; }

	public Utf8String TargetUserNativeAccountId { get; set; }

	public Utf8String InviteId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref SendCustomNativeInviteRequestedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		UiEventId = other.UiEventId;
		LocalUserId = other.LocalUserId;
		TargetNativeAccountType = other.TargetNativeAccountType;
		TargetUserNativeAccountId = other.TargetUserNativeAccountId;
		InviteId = other.InviteId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendCustomNativeInviteRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendCustomNativeInviteRequestedCallbackInfo>, ISettable<SendCustomNativeInviteRequestedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private ulong m_UiEventId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetNativeAccountType;

	private IntPtr m_TargetUserNativeAccountId;

	private IntPtr m_InviteId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ulong UiEventId
	{
		get
		{
			return m_UiEventId;
		}
		set
		{
			m_UiEventId = value;
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String TargetNativeAccountType
	{
		get
		{
			Helper.Get(m_TargetNativeAccountType, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetNativeAccountType);
		}
	}

	public Utf8String TargetUserNativeAccountId
	{
		get
		{
			Helper.Get(m_TargetUserNativeAccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserNativeAccountId);
		}
	}

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref SendCustomNativeInviteRequestedCallbackInfo other)
	{
		ClientData = other.ClientData;
		UiEventId = other.UiEventId;
		LocalUserId = other.LocalUserId;
		TargetNativeAccountType = other.TargetNativeAccountType;
		TargetUserNativeAccountId = other.TargetUserNativeAccountId;
		InviteId = other.InviteId;
	}

	public void Set(ref SendCustomNativeInviteRequestedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			UiEventId = other.Value.UiEventId;
			LocalUserId = other.Value.LocalUserId;
			TargetNativeAccountType = other.Value.TargetNativeAccountType;
			TargetUserNativeAccountId = other.Value.TargetUserNativeAccountId;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetNativeAccountType);
		Helper.Dispose(ref m_TargetUserNativeAccountId);
		Helper.Dispose(ref m_InviteId);
	}

	public void Get(out SendCustomNativeInviteRequestedCallbackInfo output)
	{
		output = default(SendCustomNativeInviteRequestedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

public struct SendRequestToJoinCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SendRequestToJoinCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendRequestToJoinCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendRequestToJoinCallbackInfo>, ISettable<SendRequestToJoinCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SendRequestToJoinCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SendRequestToJoinCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out SendRequestToJoinCallbackInfo output)
	{
		output = default(SendRequestToJoinCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SendRequestToJoinOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendRequestToJoinOptionsInternal : ISettable<SendRequestToJoinOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SendRequestToJoinOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SendRequestToJoinOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct SetCustomInviteOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Payload { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.CustomInvites;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetCustomInviteOptionsInternal : ISettable<SetCustomInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Payload;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Payload
	{
		set
		{
			Helper.Set(value, ref m_Payload);
		}
	}

	public void Set(ref SetCustomInviteOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Payload = other.Payload;
	}

	public void Set(ref SetCustomInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Payload = other.Value.Payload;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Payload);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAuthExpirationOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAuthExpirationOptionsInternal : ISettable<AddNotifyAuthExpirationOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAuthExpirationOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyAuthExpirationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLoginStatusChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLoginStatusChangedOptionsInternal : ISettable<AddNotifyLoginStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLoginStatusChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLoginStatusChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct AuthExpirationCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref AuthExpirationCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AuthExpirationCallbackInfoInternal : ICallbackInfoInternal, IGettable<AuthExpirationCallbackInfo>, ISettable<AuthExpirationCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref AuthExpirationCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref AuthExpirationCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out AuthExpirationCallbackInfo output)
	{
		output = default(AuthExpirationCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public sealed class ConnectInterface : Handle
{
	public const int AddnotifyauthexpirationApiLatest = 1;

	public const int AddnotifyloginstatuschangedApiLatest = 1;

	public const int CopyidtokenApiLatest = 1;

	public const int CopyproductuserexternalaccountbyaccountidApiLatest = 1;

	public const int CopyproductuserexternalaccountbyaccounttypeApiLatest = 1;

	public const int CopyproductuserexternalaccountbyindexApiLatest = 1;

	public const int CopyproductuserinfoApiLatest = 1;

	public const int CreatedeviceidApiLatest = 1;

	public const int CreatedeviceidDevicemodelMaxLength = 64;

	public const int CreateuserApiLatest = 1;

	public const int CredentialsApiLatest = 1;

	public const int DeletedeviceidApiLatest = 1;

	public const int ExternalAccountIdMaxLength = 256;

	public const int ExternalaccountinfoApiLatest = 1;

	public const int GetexternalaccountmappingApiLatest = 1;

	public const int GetexternalaccountmappingsApiLatest = 1;

	public const int GetproductuserexternalaccountcountApiLatest = 1;

	public const int GetproductuseridmappingApiLatest = 1;

	public const int IdtokenApiLatest = 1;

	public const int LinkaccountApiLatest = 1;

	public const int LoginApiLatest = 2;

	public const int LogoutApiLatest = 1;

	public const int OnauthexpirationcallbackApiLatest = 1;

	public const int QueryexternalaccountmappingsApiLatest = 1;

	public const int QueryexternalaccountmappingsMaxAccountIds = 128;

	public const int QueryproductuseridmappingsApiLatest = 2;

	public const int TimeUndefined = -1;

	public const int TransferdeviceidaccountApiLatest = 1;

	public const int UnlinkaccountApiLatest = 1;

	public const int UserlogininfoApiLatest = 2;

	public const int UserlogininfoDisplaynameMaxLength = 32;

	public const int VerifyidtokenApiLatest = 1;

	public ConnectInterface()
	{
	}

	public ConnectInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyAuthExpiration(ref AddNotifyAuthExpirationOptions options, object clientData, OnAuthExpirationCallback notification)
	{
		AddNotifyAuthExpirationOptionsInternal options2 = default(AddNotifyAuthExpirationOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAuthExpirationCallbackInternal onAuthExpirationCallbackInternal = OnAuthExpirationCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notification, onAuthExpirationCallbackInternal);
		ulong num = Bindings.EOS_Connect_AddNotifyAuthExpiration(base.InnerHandle, ref options2, clientDataAddress, onAuthExpirationCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLoginStatusChanged(ref AddNotifyLoginStatusChangedOptions options, object clientData, OnLoginStatusChangedCallback notification)
	{
		AddNotifyLoginStatusChangedOptionsInternal options2 = default(AddNotifyLoginStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLoginStatusChangedCallbackInternal onLoginStatusChangedCallbackInternal = OnLoginStatusChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notification, onLoginStatusChangedCallbackInternal);
		ulong num = Bindings.EOS_Connect_AddNotifyLoginStatusChanged(base.InnerHandle, ref options2, clientDataAddress, onLoginStatusChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyIdToken(ref CopyIdTokenOptions options, out IdToken? outIdToken)
	{
		CopyIdTokenOptionsInternal options2 = default(CopyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr outIdToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyIdToken(base.InnerHandle, ref options2, ref outIdToken2);
		Helper.Dispose(ref options2);
		Helper.Get<IdTokenInternal, IdToken>(outIdToken2, out outIdToken);
		if (outIdToken.HasValue)
		{
			Bindings.EOS_Connect_IdToken_Release(outIdToken2);
		}
		return result;
	}

	public Result CopyProductUserExternalAccountByAccountId(ref CopyProductUserExternalAccountByAccountIdOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserExternalAccountByAccountIdOptionsInternal options2 = default(CopyProductUserExternalAccountByAccountIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserExternalAccountByAccountId(base.InnerHandle, ref options2, ref outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo.HasValue)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public Result CopyProductUserExternalAccountByAccountType(ref CopyProductUserExternalAccountByAccountTypeOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserExternalAccountByAccountTypeOptionsInternal options2 = default(CopyProductUserExternalAccountByAccountTypeOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserExternalAccountByAccountType(base.InnerHandle, ref options2, ref outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo.HasValue)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public Result CopyProductUserExternalAccountByIndex(ref CopyProductUserExternalAccountByIndexOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserExternalAccountByIndexOptionsInternal options2 = default(CopyProductUserExternalAccountByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserExternalAccountByIndex(base.InnerHandle, ref options2, ref outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo.HasValue)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public Result CopyProductUserInfo(ref CopyProductUserInfoOptions options, out ExternalAccountInfo? outExternalAccountInfo)
	{
		CopyProductUserInfoOptionsInternal options2 = default(CopyProductUserInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalAccountInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_Connect_CopyProductUserInfo(base.InnerHandle, ref options2, ref outExternalAccountInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalAccountInfoInternal, ExternalAccountInfo>(outExternalAccountInfo2, out outExternalAccountInfo);
		if (outExternalAccountInfo.HasValue)
		{
			Bindings.EOS_Connect_ExternalAccountInfo_Release(outExternalAccountInfo2);
		}
		return result;
	}

	public void CreateDeviceId(ref CreateDeviceIdOptions options, object clientData, OnCreateDeviceIdCallback completionDelegate)
	{
		CreateDeviceIdOptionsInternal options2 = default(CreateDeviceIdOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCreateDeviceIdCallbackInternal onCreateDeviceIdCallbackInternal = OnCreateDeviceIdCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onCreateDeviceIdCallbackInternal);
		Bindings.EOS_Connect_CreateDeviceId(base.InnerHandle, ref options2, clientDataAddress, onCreateDeviceIdCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void CreateUser(ref CreateUserOptions options, object clientData, OnCreateUserCallback completionDelegate)
	{
		CreateUserOptionsInternal options2 = default(CreateUserOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnCreateUserCallbackInternal onCreateUserCallbackInternal = OnCreateUserCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onCreateUserCallbackInternal);
		Bindings.EOS_Connect_CreateUser(base.InnerHandle, ref options2, clientDataAddress, onCreateUserCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void DeleteDeviceId(ref DeleteDeviceIdOptions options, object clientData, OnDeleteDeviceIdCallback completionDelegate)
	{
		DeleteDeviceIdOptionsInternal options2 = default(DeleteDeviceIdOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDeleteDeviceIdCallbackInternal onDeleteDeviceIdCallbackInternal = OnDeleteDeviceIdCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDeleteDeviceIdCallbackInternal);
		Bindings.EOS_Connect_DeleteDeviceId(base.InnerHandle, ref options2, clientDataAddress, onDeleteDeviceIdCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public ProductUserId GetExternalAccountMapping(ref GetExternalAccountMappingsOptions options)
	{
		GetExternalAccountMappingsOptionsInternal options2 = default(GetExternalAccountMappingsOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Connect_GetExternalAccountMapping(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public ProductUserId GetLoggedInUserByIndex(int index)
	{
		Helper.Get(Bindings.EOS_Connect_GetLoggedInUserByIndex(base.InnerHandle, index), out ProductUserId to);
		return to;
	}

	public int GetLoggedInUsersCount()
	{
		return Bindings.EOS_Connect_GetLoggedInUsersCount(base.InnerHandle);
	}

	public LoginStatus GetLoginStatus(ProductUserId localUserId)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		return Bindings.EOS_Connect_GetLoginStatus(base.InnerHandle, to);
	}

	public uint GetProductUserExternalAccountCount(ref GetProductUserExternalAccountCountOptions options)
	{
		GetProductUserExternalAccountCountOptionsInternal options2 = default(GetProductUserExternalAccountCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Connect_GetProductUserExternalAccountCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetProductUserIdMapping(ref GetProductUserIdMappingOptions options, out Utf8String outBuffer)
	{
		GetProductUserIdMappingOptionsInternal options2 = default(GetProductUserIdMappingOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 257;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Connect_GetProductUserIdMapping(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void LinkAccount(ref LinkAccountOptions options, object clientData, OnLinkAccountCallback completionDelegate)
	{
		LinkAccountOptionsInternal options2 = default(LinkAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLinkAccountCallbackInternal onLinkAccountCallbackInternal = OnLinkAccountCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLinkAccountCallbackInternal);
		Bindings.EOS_Connect_LinkAccount(base.InnerHandle, ref options2, clientDataAddress, onLinkAccountCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void Login(ref LoginOptions options, object clientData, OnLoginCallback completionDelegate)
	{
		LoginOptionsInternal options2 = default(LoginOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLoginCallbackInternal onLoginCallbackInternal = OnLoginCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLoginCallbackInternal);
		Bindings.EOS_Connect_Login(base.InnerHandle, ref options2, clientDataAddress, onLoginCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void Logout(ref LogoutOptions options, object clientData, OnLogoutCallback completionDelegate)
	{
		LogoutOptionsInternal options2 = default(LogoutOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLogoutCallbackInternal onLogoutCallbackInternal = OnLogoutCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLogoutCallbackInternal);
		Bindings.EOS_Connect_Logout(base.InnerHandle, ref options2, clientDataAddress, onLogoutCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryExternalAccountMappings(ref QueryExternalAccountMappingsOptions options, object clientData, OnQueryExternalAccountMappingsCallback completionDelegate)
	{
		QueryExternalAccountMappingsOptionsInternal options2 = default(QueryExternalAccountMappingsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryExternalAccountMappingsCallbackInternal onQueryExternalAccountMappingsCallbackInternal = OnQueryExternalAccountMappingsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryExternalAccountMappingsCallbackInternal);
		Bindings.EOS_Connect_QueryExternalAccountMappings(base.InnerHandle, ref options2, clientDataAddress, onQueryExternalAccountMappingsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryProductUserIdMappings(ref QueryProductUserIdMappingsOptions options, object clientData, OnQueryProductUserIdMappingsCallback completionDelegate)
	{
		QueryProductUserIdMappingsOptionsInternal options2 = default(QueryProductUserIdMappingsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryProductUserIdMappingsCallbackInternal onQueryProductUserIdMappingsCallbackInternal = OnQueryProductUserIdMappingsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryProductUserIdMappingsCallbackInternal);
		Bindings.EOS_Connect_QueryProductUserIdMappings(base.InnerHandle, ref options2, clientDataAddress, onQueryProductUserIdMappingsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyAuthExpiration(ulong inId)
	{
		Bindings.EOS_Connect_RemoveNotifyAuthExpiration(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLoginStatusChanged(ulong inId)
	{
		Bindings.EOS_Connect_RemoveNotifyLoginStatusChanged(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void TransferDeviceIdAccount(ref TransferDeviceIdAccountOptions options, object clientData, OnTransferDeviceIdAccountCallback completionDelegate)
	{
		TransferDeviceIdAccountOptionsInternal options2 = default(TransferDeviceIdAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnTransferDeviceIdAccountCallbackInternal onTransferDeviceIdAccountCallbackInternal = OnTransferDeviceIdAccountCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onTransferDeviceIdAccountCallbackInternal);
		Bindings.EOS_Connect_TransferDeviceIdAccount(base.InnerHandle, ref options2, clientDataAddress, onTransferDeviceIdAccountCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UnlinkAccount(ref UnlinkAccountOptions options, object clientData, OnUnlinkAccountCallback completionDelegate)
	{
		UnlinkAccountOptionsInternal options2 = default(UnlinkAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUnlinkAccountCallbackInternal onUnlinkAccountCallbackInternal = OnUnlinkAccountCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUnlinkAccountCallbackInternal);
		Bindings.EOS_Connect_UnlinkAccount(base.InnerHandle, ref options2, clientDataAddress, onUnlinkAccountCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void VerifyIdToken(ref VerifyIdTokenOptions options, object clientData, OnVerifyIdTokenCallback completionDelegate)
	{
		VerifyIdTokenOptionsInternal options2 = default(VerifyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnVerifyIdTokenCallbackInternal onVerifyIdTokenCallbackInternal = OnVerifyIdTokenCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onVerifyIdTokenCallbackInternal);
		Bindings.EOS_Connect_VerifyIdToken(base.InnerHandle, ref options2, clientDataAddress, onVerifyIdTokenCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnAuthExpirationCallbackInternal))]
	internal static void OnAuthExpirationCallbackInternalImplementation(ref AuthExpirationCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AuthExpirationCallbackInfoInternal, OnAuthExpirationCallback, AuthExpirationCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnCreateDeviceIdCallbackInternal))]
	internal static void OnCreateDeviceIdCallbackInternalImplementation(ref CreateDeviceIdCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateDeviceIdCallbackInfoInternal, OnCreateDeviceIdCallback, CreateDeviceIdCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnCreateUserCallbackInternal))]
	internal static void OnCreateUserCallbackInternalImplementation(ref CreateUserCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreateUserCallbackInfoInternal, OnCreateUserCallback, CreateUserCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnDeleteDeviceIdCallbackInternal))]
	internal static void OnDeleteDeviceIdCallbackInternalImplementation(ref DeleteDeviceIdCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteDeviceIdCallbackInfoInternal, OnDeleteDeviceIdCallback, DeleteDeviceIdCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLinkAccountCallbackInternal))]
	internal static void OnLinkAccountCallbackInternalImplementation(ref LinkAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LinkAccountCallbackInfoInternal, OnLinkAccountCallback, LinkAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginCallbackInternal))]
	internal static void OnLoginCallbackInternalImplementation(ref LoginCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LoginCallbackInfoInternal, OnLoginCallback, LoginCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginStatusChangedCallbackInternal))]
	internal static void OnLoginStatusChangedCallbackInternalImplementation(ref LoginStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LoginStatusChangedCallbackInfoInternal, OnLoginStatusChangedCallback, LoginStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLogoutCallbackInternal))]
	internal static void OnLogoutCallbackInternalImplementation(ref LogoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LogoutCallbackInfoInternal, OnLogoutCallback, LogoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryExternalAccountMappingsCallbackInternal))]
	internal static void OnQueryExternalAccountMappingsCallbackInternalImplementation(ref QueryExternalAccountMappingsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryExternalAccountMappingsCallbackInfoInternal, OnQueryExternalAccountMappingsCallback, QueryExternalAccountMappingsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryProductUserIdMappingsCallbackInternal))]
	internal static void OnQueryProductUserIdMappingsCallbackInternalImplementation(ref QueryProductUserIdMappingsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryProductUserIdMappingsCallbackInfoInternal, OnQueryProductUserIdMappingsCallback, QueryProductUserIdMappingsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnTransferDeviceIdAccountCallbackInternal))]
	internal static void OnTransferDeviceIdAccountCallbackInternalImplementation(ref TransferDeviceIdAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<TransferDeviceIdAccountCallbackInfoInternal, OnTransferDeviceIdAccountCallback, TransferDeviceIdAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUnlinkAccountCallbackInternal))]
	internal static void OnUnlinkAccountCallbackInternalImplementation(ref UnlinkAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UnlinkAccountCallbackInfoInternal, OnUnlinkAccountCallback, UnlinkAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnVerifyIdTokenCallbackInternal))]
	internal static void OnVerifyIdTokenCallbackInternalImplementation(ref VerifyIdTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<VerifyIdTokenCallbackInfoInternal, OnVerifyIdTokenCallback, VerifyIdTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct CopyIdTokenOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyIdTokenOptionsInternal : ISettable<CopyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CopyIdTokenOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CopyIdTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserExternalAccountByAccountIdOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String AccountId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyProductUserExternalAccountByAccountIdOptionsInternal : ISettable<CopyProductUserExternalAccountByAccountIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_AccountId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String AccountId
	{
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public void Set(ref CopyProductUserExternalAccountByAccountIdOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		AccountId = other.AccountId;
	}

	public void Set(ref CopyProductUserExternalAccountByAccountIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			AccountId = other.Value.AccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AccountId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserExternalAccountByAccountTypeOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyProductUserExternalAccountByAccountTypeOptionsInternal : ISettable<CopyProductUserExternalAccountByAccountTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private ExternalAccountType m_AccountIdType;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ExternalAccountType AccountIdType
	{
		set
		{
			m_AccountIdType = value;
		}
	}

	public void Set(ref CopyProductUserExternalAccountByAccountTypeOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		AccountIdType = other.AccountIdType;
	}

	public void Set(ref CopyProductUserExternalAccountByAccountTypeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			AccountIdType = other.Value.AccountIdType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserExternalAccountByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint ExternalAccountInfoIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyProductUserExternalAccountByIndexOptionsInternal : ISettable<CopyProductUserExternalAccountByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_ExternalAccountInfoIndex;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint ExternalAccountInfoIndex
	{
		set
		{
			m_ExternalAccountInfoIndex = value;
		}
	}

	public void Set(ref CopyProductUserExternalAccountByIndexOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		ExternalAccountInfoIndex = other.ExternalAccountInfoIndex;
	}

	public void Set(ref CopyProductUserExternalAccountByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			ExternalAccountInfoIndex = other.Value.ExternalAccountInfoIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyProductUserInfoOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyProductUserInfoOptionsInternal : ISettable<CopyProductUserInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref CopyProductUserInfoOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref CopyProductUserInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct CreateDeviceIdCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref CreateDeviceIdCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateDeviceIdCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateDeviceIdCallbackInfo>, ISettable<CreateDeviceIdCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref CreateDeviceIdCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref CreateDeviceIdCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out CreateDeviceIdCallbackInfo output)
	{
		output = default(CreateDeviceIdCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct CreateDeviceIdOptions
{
	public Utf8String DeviceModel { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateDeviceIdOptionsInternal : ISettable<CreateDeviceIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_DeviceModel;

	public Utf8String DeviceModel
	{
		set
		{
			Helper.Set(value, ref m_DeviceModel);
		}
	}

	public void Set(ref CreateDeviceIdOptions other)
	{
		m_ApiVersion = 1;
		DeviceModel = other.DeviceModel;
	}

	public void Set(ref CreateDeviceIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DeviceModel = other.Value.DeviceModel;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DeviceModel);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct CreateUserCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref CreateUserCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateUserCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreateUserCallbackInfo>, ISettable<CreateUserCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CreateUserCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CreateUserCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out CreateUserCallbackInfo output)
	{
		output = default(CreateUserCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct CreateUserOptions
{
	public ContinuanceToken ContinuanceToken { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateUserOptionsInternal : ISettable<CreateUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ContinuanceToken;

	public ContinuanceToken ContinuanceToken
	{
		set
		{
			Helper.Set(value, ref m_ContinuanceToken);
		}
	}

	public void Set(ref CreateUserOptions other)
	{
		m_ApiVersion = 1;
		ContinuanceToken = other.ContinuanceToken;
	}

	public void Set(ref CreateUserOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ContinuanceToken = other.Value.ContinuanceToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ContinuanceToken);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct Credentials
{
	public Utf8String Token { get; set; }

	public ExternalCredentialType Type { get; set; }

	internal void Set(ref CredentialsInternal other)
	{
		Token = other.Token;
		Type = other.Type;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CredentialsInternal : IGettable<Credentials>, ISettable<Credentials>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Token;

	private ExternalCredentialType m_Type;

	public Utf8String Token
	{
		get
		{
			Helper.Get(m_Token, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Token);
		}
	}

	public ExternalCredentialType Type
	{
		get
		{
			return m_Type;
		}
		set
		{
			m_Type = value;
		}
	}

	public void Set(ref Credentials other)
	{
		m_ApiVersion = 1;
		Token = other.Token;
		Type = other.Type;
	}

	public void Set(ref Credentials? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Token = other.Value.Token;
			Type = other.Value.Type;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Token);
	}

	public void Get(out Credentials output)
	{
		output = default(Credentials);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct DeleteDeviceIdCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DeleteDeviceIdCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteDeviceIdCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteDeviceIdCallbackInfo>, ISettable<DeleteDeviceIdCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref DeleteDeviceIdCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref DeleteDeviceIdCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out DeleteDeviceIdCallbackInfo output)
	{
		output = default(DeleteDeviceIdCallbackInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct DeleteDeviceIdOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteDeviceIdOptionsInternal : ISettable<DeleteDeviceIdOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref DeleteDeviceIdOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref DeleteDeviceIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct ExternalAccountInfo
{
	public ProductUserId ProductUserId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String AccountId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public DateTimeOffset? LastLoginTime { get; set; }

	internal void Set(ref ExternalAccountInfoInternal other)
	{
		ProductUserId = other.ProductUserId;
		DisplayName = other.DisplayName;
		AccountId = other.AccountId;
		AccountIdType = other.AccountIdType;
		LastLoginTime = other.LastLoginTime;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ExternalAccountInfoInternal : IGettable<ExternalAccountInfo>, ISettable<ExternalAccountInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ProductUserId;

	private IntPtr m_DisplayName;

	private IntPtr m_AccountId;

	private ExternalAccountType m_AccountIdType;

	private long m_LastLoginTime;

	public ProductUserId ProductUserId
	{
		get
		{
			Helper.Get(m_ProductUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductUserId);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public ExternalAccountType AccountIdType
	{
		get
		{
			return m_AccountIdType;
		}
		set
		{
			m_AccountIdType = value;
		}
	}

	public DateTimeOffset? LastLoginTime
	{
		get
		{
			Helper.Get(m_LastLoginTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LastLoginTime);
		}
	}

	public void Set(ref ExternalAccountInfo other)
	{
		m_ApiVersion = 1;
		ProductUserId = other.ProductUserId;
		DisplayName = other.DisplayName;
		AccountId = other.AccountId;
		AccountIdType = other.AccountIdType;
		LastLoginTime = other.LastLoginTime;
	}

	public void Set(ref ExternalAccountInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ProductUserId = other.Value.ProductUserId;
			DisplayName = other.Value.DisplayName;
			AccountId = other.Value.AccountId;
			AccountIdType = other.Value.AccountIdType;
			LastLoginTime = other.Value.LastLoginTime;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ProductUserId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_AccountId);
	}

	public void Get(out ExternalAccountInfo output)
	{
		output = default(ExternalAccountInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetExternalAccountMappingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public Utf8String TargetExternalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetExternalAccountMappingsOptionsInternal : ISettable<GetExternalAccountMappingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_TargetExternalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ExternalAccountType AccountIdType
	{
		set
		{
			m_AccountIdType = value;
		}
	}

	public Utf8String TargetExternalUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetExternalUserId);
		}
	}

	public void Set(ref GetExternalAccountMappingsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		AccountIdType = other.AccountIdType;
		TargetExternalUserId = other.TargetExternalUserId;
	}

	public void Set(ref GetExternalAccountMappingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			AccountIdType = other.Value.AccountIdType;
			TargetExternalUserId = other.Value.TargetExternalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetExternalUserId);
	}
}


using Epic.OnlineServices;

public struct GetProductUserExternalAccountCountOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetProductUserExternalAccountCountOptionsInternal : ISettable<GetProductUserExternalAccountCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref GetProductUserExternalAccountCountOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref GetProductUserExternalAccountCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct GetProductUserIdMappingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public ProductUserId TargetProductUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetProductUserIdMappingOptionsInternal : ISettable<GetProductUserIdMappingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_TargetProductUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ExternalAccountType AccountIdType
	{
		set
		{
			m_AccountIdType = value;
		}
	}

	public ProductUserId TargetProductUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetProductUserId);
		}
	}

	public void Set(ref GetProductUserIdMappingOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		AccountIdType = other.AccountIdType;
		TargetProductUserId = other.TargetProductUserId;
	}

	public void Set(ref GetProductUserIdMappingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			AccountIdType = other.Value.AccountIdType;
			TargetProductUserId = other.Value.TargetProductUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetProductUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct IdToken
{
	public ProductUserId ProductUserId { get; set; }

	public Utf8String JsonWebToken { get; set; }

	internal void Set(ref IdTokenInternal other)
	{
		ProductUserId = other.ProductUserId;
		JsonWebToken = other.JsonWebToken;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IdTokenInternal : IGettable<IdToken>, ISettable<IdToken>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ProductUserId;

	private IntPtr m_JsonWebToken;

	public ProductUserId ProductUserId
	{
		get
		{
			Helper.Get(m_ProductUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductUserId);
		}
	}

	public Utf8String JsonWebToken
	{
		get
		{
			Helper.Get(m_JsonWebToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_JsonWebToken);
		}
	}

	public void Set(ref IdToken other)
	{
		m_ApiVersion = 1;
		ProductUserId = other.ProductUserId;
		JsonWebToken = other.JsonWebToken;
	}

	public void Set(ref IdToken? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ProductUserId = other.Value.ProductUserId;
			JsonWebToken = other.Value.JsonWebToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ProductUserId);
		Helper.Dispose(ref m_JsonWebToken);
	}

	public void Get(out IdToken output)
	{
		output = default(IdToken);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct LinkAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LinkAccountCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LinkAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<LinkAccountCallbackInfo>, ISettable<LinkAccountCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LinkAccountCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LinkAccountCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out LinkAccountCallbackInfo output)
	{
		output = default(LinkAccountCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct LinkAccountOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LinkAccountOptionsInternal : ISettable<LinkAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ContinuanceToken;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ContinuanceToken ContinuanceToken
	{
		set
		{
			Helper.Set(value, ref m_ContinuanceToken);
		}
	}

	public void Set(ref LinkAccountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ContinuanceToken = other.ContinuanceToken;
	}

	public void Set(ref LinkAccountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ContinuanceToken = other.Value.ContinuanceToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ContinuanceToken);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct LoginCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LoginCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		ContinuanceToken = other.ContinuanceToken;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LoginCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginCallbackInfo>, ISettable<LoginCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_ContinuanceToken;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ContinuanceToken ContinuanceToken
	{
		get
		{
			Helper.Get(m_ContinuanceToken, out ContinuanceToken to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ContinuanceToken);
		}
	}

	public void Set(ref LoginCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		ContinuanceToken = other.ContinuanceToken;
	}

	public void Set(ref LoginCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			ContinuanceToken = other.Value.ContinuanceToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ContinuanceToken);
	}

	public void Get(out LoginCallbackInfo output)
	{
		output = default(LoginCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Connect;

public struct LoginOptions
{
	public Credentials? Credentials { get; set; }

	public UserLoginInfo? UserLoginInfo { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LoginOptionsInternal : ISettable<LoginOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Credentials;

	private IntPtr m_UserLoginInfo;

	public Credentials? Credentials
	{
		set
		{
			Helper.Set<Credentials, CredentialsInternal>(ref value, ref m_Credentials);
		}
	}

	public UserLoginInfo? UserLoginInfo
	{
		set
		{
			Helper.Set<UserLoginInfo, UserLoginInfoInternal>(ref value, ref m_UserLoginInfo);
		}
	}

	public void Set(ref LoginOptions other)
	{
		m_ApiVersion = 2;
		Credentials = other.Credentials;
		UserLoginInfo = other.UserLoginInfo;
	}

	public void Set(ref LoginOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			Credentials = other.Value.Credentials;
			UserLoginInfo = other.Value.UserLoginInfo;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Credentials);
		Helper.Dispose(ref m_UserLoginInfo);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct LoginStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public LoginStatus PreviousStatus { get; set; }

	public LoginStatus CurrentStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LoginStatusChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PreviousStatus = other.PreviousStatus;
		CurrentStatus = other.CurrentStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginStatusChangedCallbackInfo>, ISettable<LoginStatusChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private LoginStatus m_PreviousStatus;

	private LoginStatus m_CurrentStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public LoginStatus PreviousStatus
	{
		get
		{
			return m_PreviousStatus;
		}
		set
		{
			m_PreviousStatus = value;
		}
	}

	public LoginStatus CurrentStatus
	{
		get
		{
			return m_CurrentStatus;
		}
		set
		{
			m_CurrentStatus = value;
		}
	}

	public void Set(ref LoginStatusChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PreviousStatus = other.PreviousStatus;
		CurrentStatus = other.CurrentStatus;
	}

	public void Set(ref LoginStatusChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			PreviousStatus = other.Value.PreviousStatus;
			CurrentStatus = other.Value.CurrentStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out LoginStatusChangedCallbackInfo output)
	{
		output = default(LoginStatusChangedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct LogoutCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LogoutCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<LogoutCallbackInfo>, ISettable<LogoutCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LogoutCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LogoutCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out LogoutCallbackInfo output)
	{
		output = default(LogoutCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct LogoutOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogoutOptionsInternal : ISettable<LogoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LogoutOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LogoutOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.Connect;

public delegate void OnAuthExpirationCallback(ref AuthExpirationCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAuthExpirationCallbackInternal(ref AuthExpirationCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnCreateDeviceIdCallback(ref CreateDeviceIdCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateDeviceIdCallbackInternal(ref CreateDeviceIdCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnCreateUserCallback(ref CreateUserCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnCreateUserCallbackInternal(ref CreateUserCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnDeleteDeviceIdCallback(ref DeleteDeviceIdCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteDeviceIdCallbackInternal(ref DeleteDeviceIdCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnLinkAccountCallback(ref LinkAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLinkAccountCallbackInternal(ref LinkAccountCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnLoginCallback(ref LoginCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginCallbackInternal(ref LoginCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnLoginStatusChangedCallback(ref LoginStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginStatusChangedCallbackInternal(ref LoginStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnLogoutCallback(ref LogoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLogoutCallbackInternal(ref LogoutCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnQueryExternalAccountMappingsCallback(ref QueryExternalAccountMappingsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryExternalAccountMappingsCallbackInternal(ref QueryExternalAccountMappingsCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnQueryProductUserIdMappingsCallback(ref QueryProductUserIdMappingsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryProductUserIdMappingsCallbackInternal(ref QueryProductUserIdMappingsCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnTransferDeviceIdAccountCallback(ref TransferDeviceIdAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnTransferDeviceIdAccountCallbackInternal(ref TransferDeviceIdAccountCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnUnlinkAccountCallback(ref UnlinkAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUnlinkAccountCallbackInternal(ref UnlinkAccountCallbackInfoInternal data);


using Epic.OnlineServices.Connect;

public delegate void OnVerifyIdTokenCallback(ref VerifyIdTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Connect;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnVerifyIdTokenCallbackInternal(ref VerifyIdTokenCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct QueryExternalAccountMappingsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryExternalAccountMappingsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryExternalAccountMappingsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryExternalAccountMappingsCallbackInfo>, ISettable<QueryExternalAccountMappingsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryExternalAccountMappingsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryExternalAccountMappingsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryExternalAccountMappingsCallbackInfo output)
	{
		output = default(QueryExternalAccountMappingsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryExternalAccountMappingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public Utf8String[] ExternalAccountIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryExternalAccountMappingsOptionsInternal : ISettable<QueryExternalAccountMappingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_ExternalAccountIds;

	private uint m_ExternalAccountIdCount;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ExternalAccountType AccountIdType
	{
		set
		{
			m_AccountIdType = value;
		}
	}

	public Utf8String[] ExternalAccountIds
	{
		set
		{
			Helper.Set(value, ref m_ExternalAccountIds, isArrayItemAllocated: true, out m_ExternalAccountIdCount);
		}
	}

	public void Set(ref QueryExternalAccountMappingsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		AccountIdType = other.AccountIdType;
		ExternalAccountIds = other.ExternalAccountIds;
	}

	public void Set(ref QueryExternalAccountMappingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			AccountIdType = other.Value.AccountIdType;
			ExternalAccountIds = other.Value.ExternalAccountIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ExternalAccountIds);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct QueryProductUserIdMappingsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryProductUserIdMappingsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryProductUserIdMappingsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryProductUserIdMappingsCallbackInfo>, ISettable<QueryProductUserIdMappingsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryProductUserIdMappingsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryProductUserIdMappingsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryProductUserIdMappingsCallbackInfo output)
	{
		output = default(QueryProductUserIdMappingsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryProductUserIdMappingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	internal ExternalAccountType AccountIdType_DEPRECATED { get; set; }

	public ProductUserId[] ProductUserIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryProductUserIdMappingsOptionsInternal : ISettable<QueryProductUserIdMappingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private ExternalAccountType m_AccountIdType_DEPRECATED;

	private IntPtr m_ProductUserIds;

	private uint m_ProductUserIdCount;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ExternalAccountType AccountIdType_DEPRECATED
	{
		set
		{
			m_AccountIdType_DEPRECATED = value;
		}
	}

	public ProductUserId[] ProductUserIds
	{
		set
		{
			Helper.Set(value, ref m_ProductUserIds, out m_ProductUserIdCount);
		}
	}

	public void Set(ref QueryProductUserIdMappingsOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		AccountIdType_DEPRECATED = other.AccountIdType_DEPRECATED;
		ProductUserIds = other.ProductUserIds;
	}

	public void Set(ref QueryProductUserIdMappingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			AccountIdType_DEPRECATED = other.Value.AccountIdType_DEPRECATED;
			ProductUserIds = other.Value.ProductUserIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ProductUserIds);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct TransferDeviceIdAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref TransferDeviceIdAccountCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct TransferDeviceIdAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<TransferDeviceIdAccountCallbackInfo>, ISettable<TransferDeviceIdAccountCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref TransferDeviceIdAccountCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref TransferDeviceIdAccountCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out TransferDeviceIdAccountCallbackInfo output)
	{
		output = default(TransferDeviceIdAccountCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct TransferDeviceIdAccountOptions
{
	public ProductUserId PrimaryLocalUserId { get; set; }

	public ProductUserId LocalDeviceUserId { get; set; }

	public ProductUserId ProductUserIdToPreserve { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct TransferDeviceIdAccountOptionsInternal : ISettable<TransferDeviceIdAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PrimaryLocalUserId;

	private IntPtr m_LocalDeviceUserId;

	private IntPtr m_ProductUserIdToPreserve;

	public ProductUserId PrimaryLocalUserId
	{
		set
		{
			Helper.Set(value, ref m_PrimaryLocalUserId);
		}
	}

	public ProductUserId LocalDeviceUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalDeviceUserId);
		}
	}

	public ProductUserId ProductUserIdToPreserve
	{
		set
		{
			Helper.Set(value, ref m_ProductUserIdToPreserve);
		}
	}

	public void Set(ref TransferDeviceIdAccountOptions other)
	{
		m_ApiVersion = 1;
		PrimaryLocalUserId = other.PrimaryLocalUserId;
		LocalDeviceUserId = other.LocalDeviceUserId;
		ProductUserIdToPreserve = other.ProductUserIdToPreserve;
	}

	public void Set(ref TransferDeviceIdAccountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PrimaryLocalUserId = other.Value.PrimaryLocalUserId;
			LocalDeviceUserId = other.Value.LocalDeviceUserId;
			ProductUserIdToPreserve = other.Value.ProductUserIdToPreserve;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PrimaryLocalUserId);
		Helper.Dispose(ref m_LocalDeviceUserId);
		Helper.Dispose(ref m_ProductUserIdToPreserve);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct UnlinkAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UnlinkAccountCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnlinkAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<UnlinkAccountCallbackInfo>, ISettable<UnlinkAccountCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref UnlinkAccountCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref UnlinkAccountCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out UnlinkAccountCallbackInfo output)
	{
		output = default(UnlinkAccountCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UnlinkAccountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnlinkAccountOptionsInternal : ISettable<UnlinkAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref UnlinkAccountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref UnlinkAccountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct UserLoginInfo
{
	public Utf8String DisplayName { get; set; }

	public Utf8String NsaIdToken { get; set; }

	internal void Set(ref UserLoginInfoInternal other)
	{
		DisplayName = other.DisplayName;
		NsaIdToken = other.NsaIdToken;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UserLoginInfoInternal : IGettable<UserLoginInfo>, ISettable<UserLoginInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_DisplayName;

	private IntPtr m_NsaIdToken;

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String NsaIdToken
	{
		get
		{
			Helper.Get(m_NsaIdToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_NsaIdToken);
		}
	}

	public void Set(ref UserLoginInfo other)
	{
		m_ApiVersion = 2;
		DisplayName = other.DisplayName;
		NsaIdToken = other.NsaIdToken;
	}

	public void Set(ref UserLoginInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			DisplayName = other.Value.DisplayName;
			NsaIdToken = other.Value.NsaIdToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_NsaIdToken);
	}

	public void Get(out UserLoginInfo output)
	{
		output = default(UserLoginInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

public struct VerifyIdTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId ProductUserId { get; set; }

	public bool IsAccountInfoPresent { get; set; }

	public ExternalAccountType AccountIdType { get; set; }

	public Utf8String AccountId { get; set; }

	public Utf8String Platform { get; set; }

	public Utf8String DeviceType { get; set; }

	public Utf8String ClientId { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public Utf8String DeploymentId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref VerifyIdTokenCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		ProductUserId = other.ProductUserId;
		IsAccountInfoPresent = other.IsAccountInfoPresent;
		AccountIdType = other.AccountIdType;
		AccountId = other.AccountId;
		Platform = other.Platform;
		DeviceType = other.DeviceType;
		ClientId = other.ClientId;
		ProductId = other.ProductId;
		SandboxId = other.SandboxId;
		DeploymentId = other.DeploymentId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyIdTokenCallbackInfo>, ISettable<VerifyIdTokenCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_ProductUserId;

	private int m_IsAccountInfoPresent;

	private ExternalAccountType m_AccountIdType;

	private IntPtr m_AccountId;

	private IntPtr m_Platform;

	private IntPtr m_DeviceType;

	private IntPtr m_ClientId;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private IntPtr m_DeploymentId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId ProductUserId
	{
		get
		{
			Helper.Get(m_ProductUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductUserId);
		}
	}

	public bool IsAccountInfoPresent
	{
		get
		{
			Helper.Get(m_IsAccountInfoPresent, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsAccountInfoPresent);
		}
	}

	public ExternalAccountType AccountIdType
	{
		get
		{
			return m_AccountIdType;
		}
		set
		{
			m_AccountIdType = value;
		}
	}

	public Utf8String AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public Utf8String Platform
	{
		get
		{
			Helper.Get(m_Platform, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Platform);
		}
	}

	public Utf8String DeviceType
	{
		get
		{
			Helper.Get(m_DeviceType, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceType);
		}
	}

	public Utf8String ClientId
	{
		get
		{
			Helper.Get(m_ClientId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientId);
		}
	}

	public Utf8String ProductId
	{
		get
		{
			Helper.Get(m_ProductId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductId);
		}
	}

	public Utf8String SandboxId
	{
		get
		{
			Helper.Get(m_SandboxId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SandboxId);
		}
	}

	public Utf8String DeploymentId
	{
		get
		{
			Helper.Get(m_DeploymentId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeploymentId);
		}
	}

	public void Set(ref VerifyIdTokenCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		ProductUserId = other.ProductUserId;
		IsAccountInfoPresent = other.IsAccountInfoPresent;
		AccountIdType = other.AccountIdType;
		AccountId = other.AccountId;
		Platform = other.Platform;
		DeviceType = other.DeviceType;
		ClientId = other.ClientId;
		ProductId = other.ProductId;
		SandboxId = other.SandboxId;
		DeploymentId = other.DeploymentId;
	}

	public void Set(ref VerifyIdTokenCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			ProductUserId = other.Value.ProductUserId;
			IsAccountInfoPresent = other.Value.IsAccountInfoPresent;
			AccountIdType = other.Value.AccountIdType;
			AccountId = other.Value.AccountId;
			Platform = other.Value.Platform;
			DeviceType = other.Value.DeviceType;
			ClientId = other.Value.ClientId;
			ProductId = other.Value.ProductId;
			SandboxId = other.Value.SandboxId;
			DeploymentId = other.Value.DeploymentId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ProductUserId);
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_Platform);
		Helper.Dispose(ref m_DeviceType);
		Helper.Dispose(ref m_ClientId);
		Helper.Dispose(ref m_ProductId);
		Helper.Dispose(ref m_SandboxId);
		Helper.Dispose(ref m_DeploymentId);
	}

	public void Get(out VerifyIdTokenCallbackInfo output)
	{
		output = default(VerifyIdTokenCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Connect;

public struct VerifyIdTokenOptions
{
	public IdToken? IdToken { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Connect;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct VerifyIdTokenOptionsInternal : ISettable<VerifyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_IdToken;

	public IdToken? IdToken
	{
		set
		{
			Helper.Set<IdToken, IdTokenInternal>(ref value, ref m_IdToken);
		}
	}

	public void Set(ref VerifyIdTokenOptions other)
	{
		m_ApiVersion = 1;
		IdToken = other.IdToken;
	}

	public void Set(ref VerifyIdTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			IdToken = other.Value.IdToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_IdToken);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct AccountFeatureRestrictedInfo
{
	public Utf8String VerificationURI { get; set; }

	internal void Set(ref AccountFeatureRestrictedInfoInternal other)
	{
		VerificationURI = other.VerificationURI;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AccountFeatureRestrictedInfoInternal : IGettable<AccountFeatureRestrictedInfo>, ISettable<AccountFeatureRestrictedInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_VerificationURI;

	public Utf8String VerificationURI
	{
		get
		{
			Helper.Get(m_VerificationURI, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_VerificationURI);
		}
	}

	public void Set(ref AccountFeatureRestrictedInfo other)
	{
		m_ApiVersion = 1;
		VerificationURI = other.VerificationURI;
	}

	public void Set(ref AccountFeatureRestrictedInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			VerificationURI = other.Value.VerificationURI;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_VerificationURI);
	}

	public void Get(out AccountFeatureRestrictedInfo output)
	{
		output = default(AccountFeatureRestrictedInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLoginStatusChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLoginStatusChangedOptionsInternal : ISettable<AddNotifyLoginStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLoginStatusChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLoginStatusChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public sealed class AuthInterface : Handle
{
	public const int AccountfeaturerestrictedinfoApiLatest = 1;

	public const int AddnotifyloginstatuschangedApiLatest = 1;

	public const int CopyidtokenApiLatest = 1;

	public const int CopyuserauthtokenApiLatest = 1;

	public const int CredentialsApiLatest = 4;

	public const int DeletepersistentauthApiLatest = 2;

	public const int IdtokenApiLatest = 1;

	public const int LinkaccountApiLatest = 1;

	public const int LoginApiLatest = 3;

	public const int LogoutApiLatest = 1;

	public const int PingrantinfoApiLatest = 2;

	public const int QueryidtokenApiLatest = 1;

	public const int TokenApiLatest = 2;

	public const int VerifyidtokenApiLatest = 1;

	public const int VerifyuserauthApiLatest = 1;

	public const int IosCredentialssystemauthcredentialsoptionsApiLatest = 2;

	public AuthInterface()
	{
	}

	public AuthInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyLoginStatusChanged(ref AddNotifyLoginStatusChangedOptions options, object clientData, OnLoginStatusChangedCallback notification)
	{
		AddNotifyLoginStatusChangedOptionsInternal options2 = default(AddNotifyLoginStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLoginStatusChangedCallbackInternal onLoginStatusChangedCallbackInternal = OnLoginStatusChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notification, onLoginStatusChangedCallbackInternal);
		ulong num = Bindings.EOS_Auth_AddNotifyLoginStatusChanged(base.InnerHandle, ref options2, clientDataAddress, onLoginStatusChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyIdToken(ref CopyIdTokenOptions options, out IdToken? outIdToken)
	{
		CopyIdTokenOptionsInternal options2 = default(CopyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr outIdToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_Auth_CopyIdToken(base.InnerHandle, ref options2, ref outIdToken2);
		Helper.Dispose(ref options2);
		Helper.Get<IdTokenInternal, IdToken>(outIdToken2, out outIdToken);
		if (outIdToken.HasValue)
		{
			Bindings.EOS_Auth_IdToken_Release(outIdToken2);
		}
		return result;
	}

	public Result CopyUserAuthToken(ref CopyUserAuthTokenOptions options, EpicAccountId localUserId, out Token? outUserAuthToken)
	{
		CopyUserAuthTokenOptionsInternal options2 = default(CopyUserAuthTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		IntPtr outUserAuthToken2 = IntPtr.Zero;
		Result result = Bindings.EOS_Auth_CopyUserAuthToken(base.InnerHandle, ref options2, to, ref outUserAuthToken2);
		Helper.Dispose(ref options2);
		Helper.Get<TokenInternal, Token>(outUserAuthToken2, out outUserAuthToken);
		if (outUserAuthToken.HasValue)
		{
			Bindings.EOS_Auth_Token_Release(outUserAuthToken2);
		}
		return result;
	}

	public void DeletePersistentAuth(ref DeletePersistentAuthOptions options, object clientData, OnDeletePersistentAuthCallback completionDelegate)
	{
		DeletePersistentAuthOptionsInternal options2 = default(DeletePersistentAuthOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDeletePersistentAuthCallbackInternal onDeletePersistentAuthCallbackInternal = OnDeletePersistentAuthCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDeletePersistentAuthCallbackInternal);
		Bindings.EOS_Auth_DeletePersistentAuth(base.InnerHandle, ref options2, clientDataAddress, onDeletePersistentAuthCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public EpicAccountId GetLoggedInAccountByIndex(int index)
	{
		Helper.Get(Bindings.EOS_Auth_GetLoggedInAccountByIndex(base.InnerHandle, index), out EpicAccountId to);
		return to;
	}

	public int GetLoggedInAccountsCount()
	{
		return Bindings.EOS_Auth_GetLoggedInAccountsCount(base.InnerHandle);
	}

	public LoginStatus GetLoginStatus(EpicAccountId localUserId)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		return Bindings.EOS_Auth_GetLoginStatus(base.InnerHandle, to);
	}

	public EpicAccountId GetMergedAccountByIndex(EpicAccountId localUserId, uint index)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		Helper.Get(Bindings.EOS_Auth_GetMergedAccountByIndex(base.InnerHandle, to, index), out EpicAccountId to2);
		return to2;
	}

	public uint GetMergedAccountsCount(EpicAccountId localUserId)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		return Bindings.EOS_Auth_GetMergedAccountsCount(base.InnerHandle, to);
	}

	public Result GetSelectedAccountId(EpicAccountId localUserId, out EpicAccountId outSelectedAccountId)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		IntPtr outSelectedAccountId2 = IntPtr.Zero;
		Result result = Bindings.EOS_Auth_GetSelectedAccountId(base.InnerHandle, to, ref outSelectedAccountId2);
		Helper.Get(outSelectedAccountId2, out outSelectedAccountId);
		return result;
	}

	public void LinkAccount(ref LinkAccountOptions options, object clientData, OnLinkAccountCallback completionDelegate)
	{
		LinkAccountOptionsInternal options2 = default(LinkAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLinkAccountCallbackInternal onLinkAccountCallbackInternal = OnLinkAccountCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLinkAccountCallbackInternal);
		Bindings.EOS_Auth_LinkAccount(base.InnerHandle, ref options2, clientDataAddress, onLinkAccountCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void Login(ref LoginOptions options, object clientData, OnLoginCallback completionDelegate)
	{
		LoginOptionsInternal options2 = default(LoginOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLoginCallbackInternal onLoginCallbackInternal = OnLoginCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLoginCallbackInternal);
		Bindings.EOS_Auth_Login(base.InnerHandle, ref options2, clientDataAddress, onLoginCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void Logout(ref LogoutOptions options, object clientData, OnLogoutCallback completionDelegate)
	{
		LogoutOptionsInternal options2 = default(LogoutOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLogoutCallbackInternal onLogoutCallbackInternal = OnLogoutCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLogoutCallbackInternal);
		Bindings.EOS_Auth_Logout(base.InnerHandle, ref options2, clientDataAddress, onLogoutCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryIdToken(ref QueryIdTokenOptions options, object clientData, OnQueryIdTokenCallback completionDelegate)
	{
		QueryIdTokenOptionsInternal options2 = default(QueryIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryIdTokenCallbackInternal onQueryIdTokenCallbackInternal = OnQueryIdTokenCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryIdTokenCallbackInternal);
		Bindings.EOS_Auth_QueryIdToken(base.InnerHandle, ref options2, clientDataAddress, onQueryIdTokenCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyLoginStatusChanged(ulong inId)
	{
		Bindings.EOS_Auth_RemoveNotifyLoginStatusChanged(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void VerifyIdToken(ref VerifyIdTokenOptions options, object clientData, OnVerifyIdTokenCallback completionDelegate)
	{
		VerifyIdTokenOptionsInternal options2 = default(VerifyIdTokenOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnVerifyIdTokenCallbackInternal onVerifyIdTokenCallbackInternal = OnVerifyIdTokenCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onVerifyIdTokenCallbackInternal);
		Bindings.EOS_Auth_VerifyIdToken(base.InnerHandle, ref options2, clientDataAddress, onVerifyIdTokenCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void VerifyUserAuth(ref VerifyUserAuthOptions options, object clientData, OnVerifyUserAuthCallback completionDelegate)
	{
		VerifyUserAuthOptionsInternal options2 = default(VerifyUserAuthOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnVerifyUserAuthCallbackInternal onVerifyUserAuthCallbackInternal = OnVerifyUserAuthCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onVerifyUserAuthCallbackInternal);
		Bindings.EOS_Auth_VerifyUserAuth(base.InnerHandle, ref options2, clientDataAddress, onVerifyUserAuthCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnDeletePersistentAuthCallbackInternal))]
	internal static void OnDeletePersistentAuthCallbackInternalImplementation(ref DeletePersistentAuthCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeletePersistentAuthCallbackInfoInternal, OnDeletePersistentAuthCallback, DeletePersistentAuthCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLinkAccountCallbackInternal))]
	internal static void OnLinkAccountCallbackInternalImplementation(ref LinkAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LinkAccountCallbackInfoInternal, OnLinkAccountCallback, LinkAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginCallbackInternal))]
	internal static void OnLoginCallbackInternalImplementation(ref LoginCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LoginCallbackInfoInternal, OnLoginCallback, LoginCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLoginStatusChangedCallbackInternal))]
	internal static void OnLoginStatusChangedCallbackInternalImplementation(ref LoginStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LoginStatusChangedCallbackInfoInternal, OnLoginStatusChangedCallback, LoginStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLogoutCallbackInternal))]
	internal static void OnLogoutCallbackInternalImplementation(ref LogoutCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<LogoutCallbackInfoInternal, OnLogoutCallback, LogoutCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryIdTokenCallbackInternal))]
	internal static void OnQueryIdTokenCallbackInternalImplementation(ref QueryIdTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryIdTokenCallbackInfoInternal, OnQueryIdTokenCallback, QueryIdTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnVerifyIdTokenCallbackInternal))]
	internal static void OnVerifyIdTokenCallbackInternalImplementation(ref VerifyIdTokenCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<VerifyIdTokenCallbackInfoInternal, OnVerifyIdTokenCallback, VerifyIdTokenCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnVerifyUserAuthCallbackInternal))]
	internal static void OnVerifyUserAuthCallbackInternalImplementation(ref VerifyUserAuthCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<VerifyUserAuthCallbackInfoInternal, OnVerifyUserAuthCallback, VerifyUserAuthCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	public void Login(ref IOSLoginOptions options, object clientData, OnLoginCallback completionDelegate)
	{
		IOSLoginOptionsInternal options2 = default(IOSLoginOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLoginCallbackInternal onLoginCallbackInternal = OnLoginCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onLoginCallbackInternal);
		IOSBindings.EOS_Auth_Login(base.InnerHandle, ref options2, clientDataAddress, onLoginCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(IOSCreateBackgroundSnapshotViewInternal))]
	internal static IntPtr IOSCreateBackgroundSnapshotViewInternalImplementation(IntPtr context)
	{
		if (Helper.TryGetStaticCallback<IOSCreateBackgroundSnapshotView>("IOSCreateBackgroundSnapshotViewInternalImplementation", out var callback))
		{
			return callback(context);
		}
		return Helper.GetDefault<IntPtr>();
	}
}


using System;

[Flags]
public enum AuthScopeFlags
{
	NoFlags = 0,
	BasicProfile = 1,
	FriendsList = 2,
	Presence = 4,
	FriendsManagement = 8,
	Email = 0x10,
	Country = 0x20
}


public enum AuthTokenType
{
	Client,
	User
}


using Epic.OnlineServices;

public struct CopyIdTokenOptions
{
	public EpicAccountId AccountId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyIdTokenOptionsInternal : ISettable<CopyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AccountId;

	public EpicAccountId AccountId
	{
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public void Set(ref CopyIdTokenOptions other)
	{
		m_ApiVersion = 1;
		AccountId = other.AccountId;
	}

	public void Set(ref CopyIdTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AccountId = other.Value.AccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct CopyUserAuthTokenOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyUserAuthTokenOptionsInternal : ISettable<CopyUserAuthTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref CopyUserAuthTokenOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref CopyUserAuthTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct Credentials
{
	public Utf8String Id { get; set; }

	public Utf8String Token { get; set; }

	public LoginCredentialType Type { get; set; }

	public IntPtr SystemAuthCredentialsOptions { get; set; }

	public ExternalCredentialType ExternalType { get; set; }

	internal void Set(ref CredentialsInternal other)
	{
		Id = other.Id;
		Token = other.Token;
		Type = other.Type;
		SystemAuthCredentialsOptions = other.SystemAuthCredentialsOptions;
		ExternalType = other.ExternalType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CredentialsInternal : IGettable<Credentials>, ISettable<Credentials>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Id;

	private IntPtr m_Token;

	private LoginCredentialType m_Type;

	private IntPtr m_SystemAuthCredentialsOptions;

	private ExternalCredentialType m_ExternalType;

	public Utf8String Id
	{
		get
		{
			Helper.Get(m_Id, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Id);
		}
	}

	public Utf8String Token
	{
		get
		{
			Helper.Get(m_Token, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Token);
		}
	}

	public LoginCredentialType Type
	{
		get
		{
			return m_Type;
		}
		set
		{
			m_Type = value;
		}
	}

	public IntPtr SystemAuthCredentialsOptions
	{
		get
		{
			return m_SystemAuthCredentialsOptions;
		}
		set
		{
			m_SystemAuthCredentialsOptions = value;
		}
	}

	public ExternalCredentialType ExternalType
	{
		get
		{
			return m_ExternalType;
		}
		set
		{
			m_ExternalType = value;
		}
	}

	public void Set(ref Credentials other)
	{
		m_ApiVersion = 4;
		Id = other.Id;
		Token = other.Token;
		Type = other.Type;
		SystemAuthCredentialsOptions = other.SystemAuthCredentialsOptions;
		ExternalType = other.ExternalType;
	}

	public void Set(ref Credentials? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			Id = other.Value.Id;
			Token = other.Value.Token;
			Type = other.Value.Type;
			SystemAuthCredentialsOptions = other.Value.SystemAuthCredentialsOptions;
			ExternalType = other.Value.ExternalType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Id);
		Helper.Dispose(ref m_Token);
		Helper.Dispose(ref m_SystemAuthCredentialsOptions);
	}

	public void Get(out Credentials output)
	{
		output = default(Credentials);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct DeletePersistentAuthCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DeletePersistentAuthCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeletePersistentAuthCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeletePersistentAuthCallbackInfo>, ISettable<DeletePersistentAuthCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref DeletePersistentAuthCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref DeletePersistentAuthCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out DeletePersistentAuthCallbackInfo output)
	{
		output = default(DeletePersistentAuthCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DeletePersistentAuthOptions
{
	public Utf8String RefreshToken { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeletePersistentAuthOptionsInternal : ISettable<DeletePersistentAuthOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RefreshToken;

	public Utf8String RefreshToken
	{
		set
		{
			Helper.Set(value, ref m_RefreshToken);
		}
	}

	public void Set(ref DeletePersistentAuthOptions other)
	{
		m_ApiVersion = 2;
		RefreshToken = other.RefreshToken;
	}

	public void Set(ref DeletePersistentAuthOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			RefreshToken = other.Value.RefreshToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RefreshToken);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct IdToken
{
	public EpicAccountId AccountId { get; set; }

	public Utf8String JsonWebToken { get; set; }

	internal void Set(ref IdTokenInternal other)
	{
		AccountId = other.AccountId;
		JsonWebToken = other.JsonWebToken;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IdTokenInternal : IGettable<IdToken>, ISettable<IdToken>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AccountId;

	private IntPtr m_JsonWebToken;

	public EpicAccountId AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public Utf8String JsonWebToken
	{
		get
		{
			Helper.Get(m_JsonWebToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_JsonWebToken);
		}
	}

	public void Set(ref IdToken other)
	{
		m_ApiVersion = 1;
		AccountId = other.AccountId;
		JsonWebToken = other.JsonWebToken;
	}

	public void Set(ref IdToken? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AccountId = other.Value.AccountId;
			JsonWebToken = other.Value.JsonWebToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_JsonWebToken);
	}

	public void Get(out IdToken output)
	{
		output = default(IdToken);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LinkAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public PinGrantInfo? PinGrantInfo { get; set; }

	public EpicAccountId SelectedAccountId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LinkAccountCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PinGrantInfo = other.PinGrantInfo;
		SelectedAccountId = other.SelectedAccountId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LinkAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<LinkAccountCallbackInfo>, ISettable<LinkAccountCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_PinGrantInfo;

	private IntPtr m_SelectedAccountId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public PinGrantInfo? PinGrantInfo
	{
		get
		{
			Helper.Get<PinGrantInfoInternal, PinGrantInfo>(m_PinGrantInfo, out PinGrantInfo? to);
			return to;
		}
		set
		{
			Helper.Set<PinGrantInfo, PinGrantInfoInternal>(ref value, ref m_PinGrantInfo);
		}
	}

	public EpicAccountId SelectedAccountId
	{
		get
		{
			Helper.Get(m_SelectedAccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SelectedAccountId);
		}
	}

	public void Set(ref LinkAccountCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PinGrantInfo = other.PinGrantInfo;
		SelectedAccountId = other.SelectedAccountId;
	}

	public void Set(ref LinkAccountCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			PinGrantInfo = other.Value.PinGrantInfo;
			SelectedAccountId = other.Value.SelectedAccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PinGrantInfo);
		Helper.Dispose(ref m_SelectedAccountId);
	}

	public void Get(out LinkAccountCallbackInfo output)
	{
		output = default(LinkAccountCallbackInfo);
		output.Set(ref this);
	}
}


using System;

[Flags]
public enum LinkAccountFlags
{
	NoFlags = 0,
	NintendoNsaId = 1
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LinkAccountOptions
{
	public LinkAccountFlags LinkAccountFlags { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }

	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LinkAccountOptionsInternal : ISettable<LinkAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private LinkAccountFlags m_LinkAccountFlags;

	private IntPtr m_ContinuanceToken;

	private IntPtr m_LocalUserId;

	public LinkAccountFlags LinkAccountFlags
	{
		set
		{
			m_LinkAccountFlags = value;
		}
	}

	public ContinuanceToken ContinuanceToken
	{
		set
		{
			Helper.Set(value, ref m_ContinuanceToken);
		}
	}

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LinkAccountOptions other)
	{
		m_ApiVersion = 1;
		LinkAccountFlags = other.LinkAccountFlags;
		ContinuanceToken = other.ContinuanceToken;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LinkAccountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LinkAccountFlags = other.Value.LinkAccountFlags;
			ContinuanceToken = other.Value.ContinuanceToken;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ContinuanceToken);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LoginCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public PinGrantInfo? PinGrantInfo { get; set; }

	public ContinuanceToken ContinuanceToken { get; set; }

	internal AccountFeatureRestrictedInfo? AccountFeatureRestrictedInfo_DEPRECATED { get; set; }

	public EpicAccountId SelectedAccountId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LoginCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PinGrantInfo = other.PinGrantInfo;
		ContinuanceToken = other.ContinuanceToken;
		AccountFeatureRestrictedInfo_DEPRECATED = other.AccountFeatureRestrictedInfo_DEPRECATED;
		SelectedAccountId = other.SelectedAccountId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LoginCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginCallbackInfo>, ISettable<LoginCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_PinGrantInfo;

	private IntPtr m_ContinuanceToken;

	private IntPtr m_AccountFeatureRestrictedInfo_DEPRECATED;

	private IntPtr m_SelectedAccountId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public PinGrantInfo? PinGrantInfo
	{
		get
		{
			Helper.Get<PinGrantInfoInternal, PinGrantInfo>(m_PinGrantInfo, out PinGrantInfo? to);
			return to;
		}
		set
		{
			Helper.Set<PinGrantInfo, PinGrantInfoInternal>(ref value, ref m_PinGrantInfo);
		}
	}

	public ContinuanceToken ContinuanceToken
	{
		get
		{
			Helper.Get(m_ContinuanceToken, out ContinuanceToken to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ContinuanceToken);
		}
	}

	public AccountFeatureRestrictedInfo? AccountFeatureRestrictedInfo_DEPRECATED
	{
		get
		{
			Helper.Get<AccountFeatureRestrictedInfoInternal, AccountFeatureRestrictedInfo>(m_AccountFeatureRestrictedInfo_DEPRECATED, out AccountFeatureRestrictedInfo? to);
			return to;
		}
		set
		{
			Helper.Set<AccountFeatureRestrictedInfo, AccountFeatureRestrictedInfoInternal>(ref value, ref m_AccountFeatureRestrictedInfo_DEPRECATED);
		}
	}

	public EpicAccountId SelectedAccountId
	{
		get
		{
			Helper.Get(m_SelectedAccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SelectedAccountId);
		}
	}

	public void Set(ref LoginCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PinGrantInfo = other.PinGrantInfo;
		ContinuanceToken = other.ContinuanceToken;
		AccountFeatureRestrictedInfo_DEPRECATED = other.AccountFeatureRestrictedInfo_DEPRECATED;
		SelectedAccountId = other.SelectedAccountId;
	}

	public void Set(ref LoginCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			PinGrantInfo = other.Value.PinGrantInfo;
			ContinuanceToken = other.Value.ContinuanceToken;
			AccountFeatureRestrictedInfo_DEPRECATED = other.Value.AccountFeatureRestrictedInfo_DEPRECATED;
			SelectedAccountId = other.Value.SelectedAccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_PinGrantInfo);
		Helper.Dispose(ref m_ContinuanceToken);
		Helper.Dispose(ref m_AccountFeatureRestrictedInfo_DEPRECATED);
		Helper.Dispose(ref m_SelectedAccountId);
	}

	public void Get(out LoginCallbackInfo output)
	{
		output = default(LoginCallbackInfo);
		output.Set(ref this);
	}
}


public enum LoginCredentialType
{
	Password,
	ExchangeCode,
	PersistentAuth,
	DeviceCode,
	Developer,
	RefreshToken,
	AccountPortal,
	ExternalAuth
}


using System;

[Flags]
public enum LoginFlags : ulong
{
	None = 0uL,
	NoUserInterface = 1uL
}


using Epic.OnlineServices.Auth;

public struct LoginOptions
{
	public Credentials? Credentials { get; set; }

	public AuthScopeFlags ScopeFlags { get; set; }

	public LoginFlags LoginFlags { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LoginOptionsInternal : ISettable<LoginOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Credentials;

	private AuthScopeFlags m_ScopeFlags;

	private LoginFlags m_LoginFlags;

	public Credentials? Credentials
	{
		set
		{
			Helper.Set<Credentials, CredentialsInternal>(ref value, ref m_Credentials);
		}
	}

	public AuthScopeFlags ScopeFlags
	{
		set
		{
			m_ScopeFlags = value;
		}
	}

	public LoginFlags LoginFlags
	{
		set
		{
			m_LoginFlags = value;
		}
	}

	public void Set(ref LoginOptions other)
	{
		m_ApiVersion = 3;
		Credentials = other.Credentials;
		ScopeFlags = other.ScopeFlags;
		LoginFlags = other.LoginFlags;
	}

	public void Set(ref LoginOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			Credentials = other.Value.Credentials;
			ScopeFlags = other.Value.ScopeFlags;
			LoginFlags = other.Value.LoginFlags;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Credentials);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LoginStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public LoginStatus PrevStatus { get; set; }

	public LoginStatus CurrentStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LoginStatusChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PrevStatus = other.PrevStatus;
		CurrentStatus = other.CurrentStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LoginStatusChangedCallbackInfo>, ISettable<LoginStatusChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private LoginStatus m_PrevStatus;

	private LoginStatus m_CurrentStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public LoginStatus PrevStatus
	{
		get
		{
			return m_PrevStatus;
		}
		set
		{
			m_PrevStatus = value;
		}
	}

	public LoginStatus CurrentStatus
	{
		get
		{
			return m_CurrentStatus;
		}
		set
		{
			m_CurrentStatus = value;
		}
	}

	public void Set(ref LoginStatusChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		PrevStatus = other.PrevStatus;
		CurrentStatus = other.CurrentStatus;
	}

	public void Set(ref LoginStatusChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			PrevStatus = other.Value.PrevStatus;
			CurrentStatus = other.Value.CurrentStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out LoginStatusChangedCallbackInfo output)
	{
		output = default(LoginStatusChangedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct LogoutCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref LogoutCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogoutCallbackInfoInternal : ICallbackInfoInternal, IGettable<LogoutCallbackInfo>, ISettable<LogoutCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LogoutCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LogoutCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out LogoutCallbackInfo output)
	{
		output = default(LogoutCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct LogoutOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogoutOptionsInternal : ISettable<LogoutOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref LogoutOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref LogoutOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.Auth;

public delegate void OnDeletePersistentAuthCallback(ref DeletePersistentAuthCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeletePersistentAuthCallbackInternal(ref DeletePersistentAuthCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnLinkAccountCallback(ref LinkAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLinkAccountCallbackInternal(ref LinkAccountCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnLoginCallback(ref LoginCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginCallbackInternal(ref LoginCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnLoginStatusChangedCallback(ref LoginStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLoginStatusChangedCallbackInternal(ref LoginStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnLogoutCallback(ref LogoutCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLogoutCallbackInternal(ref LogoutCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnQueryIdTokenCallback(ref QueryIdTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryIdTokenCallbackInternal(ref QueryIdTokenCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnVerifyIdTokenCallback(ref VerifyIdTokenCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnVerifyIdTokenCallbackInternal(ref VerifyIdTokenCallbackInfoInternal data);


using Epic.OnlineServices.Auth;

public delegate void OnVerifyUserAuthCallback(ref VerifyUserAuthCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnVerifyUserAuthCallbackInternal(ref VerifyUserAuthCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct PinGrantInfo
{
	public Utf8String UserCode { get; set; }

	public Utf8String VerificationURI { get; set; }

	public int ExpiresIn { get; set; }

	public Utf8String VerificationURIComplete { get; set; }

	internal void Set(ref PinGrantInfoInternal other)
	{
		UserCode = other.UserCode;
		VerificationURI = other.VerificationURI;
		ExpiresIn = other.ExpiresIn;
		VerificationURIComplete = other.VerificationURIComplete;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PinGrantInfoInternal : IGettable<PinGrantInfo>, ISettable<PinGrantInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserCode;

	private IntPtr m_VerificationURI;

	private int m_ExpiresIn;

	private IntPtr m_VerificationURIComplete;

	public Utf8String UserCode
	{
		get
		{
			Helper.Get(m_UserCode, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserCode);
		}
	}

	public Utf8String VerificationURI
	{
		get
		{
			Helper.Get(m_VerificationURI, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_VerificationURI);
		}
	}

	public int ExpiresIn
	{
		get
		{
			return m_ExpiresIn;
		}
		set
		{
			m_ExpiresIn = value;
		}
	}

	public Utf8String VerificationURIComplete
	{
		get
		{
			Helper.Get(m_VerificationURIComplete, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_VerificationURIComplete);
		}
	}

	public void Set(ref PinGrantInfo other)
	{
		m_ApiVersion = 2;
		UserCode = other.UserCode;
		VerificationURI = other.VerificationURI;
		ExpiresIn = other.ExpiresIn;
		VerificationURIComplete = other.VerificationURIComplete;
	}

	public void Set(ref PinGrantInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			UserCode = other.Value.UserCode;
			VerificationURI = other.Value.VerificationURI;
			ExpiresIn = other.Value.ExpiresIn;
			VerificationURIComplete = other.Value.VerificationURIComplete;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserCode);
		Helper.Dispose(ref m_VerificationURI);
		Helper.Dispose(ref m_VerificationURIComplete);
	}

	public void Get(out PinGrantInfo output)
	{
		output = default(PinGrantInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct QueryIdTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetAccountId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryIdTokenCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetAccountId = other.TargetAccountId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryIdTokenCallbackInfo>, ISettable<QueryIdTokenCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetAccountId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetAccountId
	{
		get
		{
			Helper.Get(m_TargetAccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetAccountId);
		}
	}

	public void Set(ref QueryIdTokenCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetAccountId = other.TargetAccountId;
	}

	public void Set(ref QueryIdTokenCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetAccountId = other.Value.TargetAccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetAccountId);
	}

	public void Get(out QueryIdTokenCallbackInfo output)
	{
		output = default(QueryIdTokenCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryIdTokenOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetAccountId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryIdTokenOptionsInternal : ISettable<QueryIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetAccountId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetAccountId
	{
		set
		{
			Helper.Set(value, ref m_TargetAccountId);
		}
	}

	public void Set(ref QueryIdTokenOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetAccountId = other.TargetAccountId;
	}

	public void Set(ref QueryIdTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetAccountId = other.Value.TargetAccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetAccountId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct Token
{
	public Utf8String App { get; set; }

	public Utf8String ClientId { get; set; }

	public EpicAccountId AccountId { get; set; }

	public Utf8String AccessToken { get; set; }

	public double ExpiresIn { get; set; }

	public Utf8String ExpiresAt { get; set; }

	public AuthTokenType AuthType { get; set; }

	public Utf8String RefreshToken { get; set; }

	public double RefreshExpiresIn { get; set; }

	public Utf8String RefreshExpiresAt { get; set; }

	internal void Set(ref TokenInternal other)
	{
		App = other.App;
		ClientId = other.ClientId;
		AccountId = other.AccountId;
		AccessToken = other.AccessToken;
		ExpiresIn = other.ExpiresIn;
		ExpiresAt = other.ExpiresAt;
		AuthType = other.AuthType;
		RefreshToken = other.RefreshToken;
		RefreshExpiresIn = other.RefreshExpiresIn;
		RefreshExpiresAt = other.RefreshExpiresAt;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct TokenInternal : IGettable<Token>, ISettable<Token>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_App;

	private IntPtr m_ClientId;

	private IntPtr m_AccountId;

	private IntPtr m_AccessToken;

	private double m_ExpiresIn;

	private IntPtr m_ExpiresAt;

	private AuthTokenType m_AuthType;

	private IntPtr m_RefreshToken;

	private double m_RefreshExpiresIn;

	private IntPtr m_RefreshExpiresAt;

	public Utf8String App
	{
		get
		{
			Helper.Get(m_App, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_App);
		}
	}

	public Utf8String ClientId
	{
		get
		{
			Helper.Get(m_ClientId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientId);
		}
	}

	public EpicAccountId AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public Utf8String AccessToken
	{
		get
		{
			Helper.Get(m_AccessToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccessToken);
		}
	}

	public double ExpiresIn
	{
		get
		{
			return m_ExpiresIn;
		}
		set
		{
			m_ExpiresIn = value;
		}
	}

	public Utf8String ExpiresAt
	{
		get
		{
			Helper.Get(m_ExpiresAt, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ExpiresAt);
		}
	}

	public AuthTokenType AuthType
	{
		get
		{
			return m_AuthType;
		}
		set
		{
			m_AuthType = value;
		}
	}

	public Utf8String RefreshToken
	{
		get
		{
			Helper.Get(m_RefreshToken, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RefreshToken);
		}
	}

	public double RefreshExpiresIn
	{
		get
		{
			return m_RefreshExpiresIn;
		}
		set
		{
			m_RefreshExpiresIn = value;
		}
	}

	public Utf8String RefreshExpiresAt
	{
		get
		{
			Helper.Get(m_RefreshExpiresAt, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RefreshExpiresAt);
		}
	}

	public void Set(ref Token other)
	{
		m_ApiVersion = 2;
		App = other.App;
		ClientId = other.ClientId;
		AccountId = other.AccountId;
		AccessToken = other.AccessToken;
		ExpiresIn = other.ExpiresIn;
		ExpiresAt = other.ExpiresAt;
		AuthType = other.AuthType;
		RefreshToken = other.RefreshToken;
		RefreshExpiresIn = other.RefreshExpiresIn;
		RefreshExpiresAt = other.RefreshExpiresAt;
	}

	public void Set(ref Token? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			App = other.Value.App;
			ClientId = other.Value.ClientId;
			AccountId = other.Value.AccountId;
			AccessToken = other.Value.AccessToken;
			ExpiresIn = other.Value.ExpiresIn;
			ExpiresAt = other.Value.ExpiresAt;
			AuthType = other.Value.AuthType;
			RefreshToken = other.Value.RefreshToken;
			RefreshExpiresIn = other.Value.RefreshExpiresIn;
			RefreshExpiresAt = other.Value.RefreshExpiresAt;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_App);
		Helper.Dispose(ref m_ClientId);
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_AccessToken);
		Helper.Dispose(ref m_ExpiresAt);
		Helper.Dispose(ref m_RefreshToken);
		Helper.Dispose(ref m_RefreshExpiresAt);
	}

	public void Get(out Token output)
	{
		output = default(Token);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct VerifyIdTokenCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String ApplicationId { get; set; }

	public Utf8String ClientId { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public Utf8String DeploymentId { get; set; }

	public Utf8String DisplayName { get; set; }

	public bool IsExternalAccountInfoPresent { get; set; }

	public ExternalAccountType ExternalAccountIdType { get; set; }

	public Utf8String ExternalAccountId { get; set; }

	public Utf8String ExternalAccountDisplayName { get; set; }

	public Utf8String Platform { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref VerifyIdTokenCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		ApplicationId = other.ApplicationId;
		ClientId = other.ClientId;
		ProductId = other.ProductId;
		SandboxId = other.SandboxId;
		DeploymentId = other.DeploymentId;
		DisplayName = other.DisplayName;
		IsExternalAccountInfoPresent = other.IsExternalAccountInfoPresent;
		ExternalAccountIdType = other.ExternalAccountIdType;
		ExternalAccountId = other.ExternalAccountId;
		ExternalAccountDisplayName = other.ExternalAccountDisplayName;
		Platform = other.Platform;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyIdTokenCallbackInfo>, ISettable<VerifyIdTokenCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_ApplicationId;

	private IntPtr m_ClientId;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private IntPtr m_DeploymentId;

	private IntPtr m_DisplayName;

	private int m_IsExternalAccountInfoPresent;

	private ExternalAccountType m_ExternalAccountIdType;

	private IntPtr m_ExternalAccountId;

	private IntPtr m_ExternalAccountDisplayName;

	private IntPtr m_Platform;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String ApplicationId
	{
		get
		{
			Helper.Get(m_ApplicationId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ApplicationId);
		}
	}

	public Utf8String ClientId
	{
		get
		{
			Helper.Get(m_ClientId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientId);
		}
	}

	public Utf8String ProductId
	{
		get
		{
			Helper.Get(m_ProductId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ProductId);
		}
	}

	public Utf8String SandboxId
	{
		get
		{
			Helper.Get(m_SandboxId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SandboxId);
		}
	}

	public Utf8String DeploymentId
	{
		get
		{
			Helper.Get(m_DeploymentId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeploymentId);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public bool IsExternalAccountInfoPresent
	{
		get
		{
			Helper.Get(m_IsExternalAccountInfoPresent, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsExternalAccountInfoPresent);
		}
	}

	public ExternalAccountType ExternalAccountIdType
	{
		get
		{
			return m_ExternalAccountIdType;
		}
		set
		{
			m_ExternalAccountIdType = value;
		}
	}

	public Utf8String ExternalAccountId
	{
		get
		{
			Helper.Get(m_ExternalAccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ExternalAccountId);
		}
	}

	public Utf8String ExternalAccountDisplayName
	{
		get
		{
			Helper.Get(m_ExternalAccountDisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ExternalAccountDisplayName);
		}
	}

	public Utf8String Platform
	{
		get
		{
			Helper.Get(m_Platform, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Platform);
		}
	}

	public void Set(ref VerifyIdTokenCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		ApplicationId = other.ApplicationId;
		ClientId = other.ClientId;
		ProductId = other.ProductId;
		SandboxId = other.SandboxId;
		DeploymentId = other.DeploymentId;
		DisplayName = other.DisplayName;
		IsExternalAccountInfoPresent = other.IsExternalAccountInfoPresent;
		ExternalAccountIdType = other.ExternalAccountIdType;
		ExternalAccountId = other.ExternalAccountId;
		ExternalAccountDisplayName = other.ExternalAccountDisplayName;
		Platform = other.Platform;
	}

	public void Set(ref VerifyIdTokenCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			ApplicationId = other.Value.ApplicationId;
			ClientId = other.Value.ClientId;
			ProductId = other.Value.ProductId;
			SandboxId = other.Value.SandboxId;
			DeploymentId = other.Value.DeploymentId;
			DisplayName = other.Value.DisplayName;
			IsExternalAccountInfoPresent = other.Value.IsExternalAccountInfoPresent;
			ExternalAccountIdType = other.Value.ExternalAccountIdType;
			ExternalAccountId = other.Value.ExternalAccountId;
			ExternalAccountDisplayName = other.Value.ExternalAccountDisplayName;
			Platform = other.Value.Platform;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ApplicationId);
		Helper.Dispose(ref m_ClientId);
		Helper.Dispose(ref m_ProductId);
		Helper.Dispose(ref m_SandboxId);
		Helper.Dispose(ref m_DeploymentId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_ExternalAccountId);
		Helper.Dispose(ref m_ExternalAccountDisplayName);
		Helper.Dispose(ref m_Platform);
	}

	public void Get(out VerifyIdTokenCallbackInfo output)
	{
		output = default(VerifyIdTokenCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Auth;

public struct VerifyIdTokenOptions
{
	public IdToken? IdToken { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct VerifyIdTokenOptionsInternal : ISettable<VerifyIdTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_IdToken;

	public IdToken? IdToken
	{
		set
		{
			Helper.Set<IdToken, IdTokenInternal>(ref value, ref m_IdToken);
		}
	}

	public void Set(ref VerifyIdTokenOptions other)
	{
		m_ApiVersion = 1;
		IdToken = other.IdToken;
	}

	public void Set(ref VerifyIdTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			IdToken = other.Value.IdToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_IdToken);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct VerifyUserAuthCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref VerifyUserAuthCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct VerifyUserAuthCallbackInfoInternal : ICallbackInfoInternal, IGettable<VerifyUserAuthCallbackInfo>, ISettable<VerifyUserAuthCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref VerifyUserAuthCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref VerifyUserAuthCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out VerifyUserAuthCallbackInfo output)
	{
		output = default(VerifyUserAuthCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Auth;

public struct VerifyUserAuthOptions
{
	public Token? AuthToken { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct VerifyUserAuthOptionsInternal : ISettable<VerifyUserAuthOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AuthToken;

	public Token? AuthToken
	{
		set
		{
			Helper.Set<Token, TokenInternal>(ref value, ref m_AuthToken);
		}
	}

	public void Set(ref VerifyUserAuthOptions other)
	{
		m_ApiVersion = 1;
		AuthToken = other.AuthToken;
	}

	public void Set(ref VerifyUserAuthOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AuthToken = other.Value.AuthToken;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AuthToken);
	}
}


using System;

public delegate IntPtr IOSCreateBackgroundSnapshotView(IntPtr context);


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate IntPtr IOSCreateBackgroundSnapshotViewInternal(IntPtr context);


using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

public struct IOSCredentials
{
	public Utf8String Id { get; set; }

	public Utf8String Token { get; set; }

	public LoginCredentialType Type { get; set; }

	public IOSCredentialsSystemAuthCredentialsOptions? SystemAuthCredentialsOptions { get; set; }

	public ExternalCredentialType ExternalType { get; set; }

	internal void Set(ref IOSCredentialsInternal other)
	{
		Id = other.Id;
		Token = other.Token;
		Type = other.Type;
		SystemAuthCredentialsOptions = other.SystemAuthCredentialsOptions;
		ExternalType = other.ExternalType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IOSCredentialsInternal : IGettable<IOSCredentials>, ISettable<IOSCredentials>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Id;

	private IntPtr m_Token;

	private LoginCredentialType m_Type;

	private IntPtr m_SystemAuthCredentialsOptions;

	private ExternalCredentialType m_ExternalType;

	public Utf8String Id
	{
		get
		{
			Helper.Get(m_Id, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Id);
		}
	}

	public Utf8String Token
	{
		get
		{
			Helper.Get(m_Token, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Token);
		}
	}

	public LoginCredentialType Type
	{
		get
		{
			return m_Type;
		}
		set
		{
			m_Type = value;
		}
	}

	public IOSCredentialsSystemAuthCredentialsOptions? SystemAuthCredentialsOptions
	{
		get
		{
			Helper.Get<IOSCredentialsSystemAuthCredentialsOptionsInternal, IOSCredentialsSystemAuthCredentialsOptions>(m_SystemAuthCredentialsOptions, out IOSCredentialsSystemAuthCredentialsOptions? to);
			return to;
		}
		set
		{
			Helper.Set<IOSCredentialsSystemAuthCredentialsOptions, IOSCredentialsSystemAuthCredentialsOptionsInternal>(ref value, ref m_SystemAuthCredentialsOptions);
		}
	}

	public ExternalCredentialType ExternalType
	{
		get
		{
			return m_ExternalType;
		}
		set
		{
			m_ExternalType = value;
		}
	}

	public void Set(ref IOSCredentials other)
	{
		m_ApiVersion = 4;
		Id = other.Id;
		Token = other.Token;
		Type = other.Type;
		SystemAuthCredentialsOptions = other.SystemAuthCredentialsOptions;
		ExternalType = other.ExternalType;
	}

	public void Set(ref IOSCredentials? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			Id = other.Value.Id;
			Token = other.Value.Token;
			Type = other.Value.Type;
			SystemAuthCredentialsOptions = other.Value.SystemAuthCredentialsOptions;
			ExternalType = other.Value.ExternalType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Id);
		Helper.Dispose(ref m_Token);
		Helper.Dispose(ref m_SystemAuthCredentialsOptions);
	}

	public void Get(out IOSCredentials output)
	{
		output = default(IOSCredentials);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices.Auth;

public struct IOSCredentialsSystemAuthCredentialsOptions
{
	public IntPtr PresentationContextProviding { get; set; }

	public IOSCreateBackgroundSnapshotView CreateBackgroundSnapshotView { get; set; }

	public IntPtr CreateBackgroundSnapshotViewContext { get; set; }

	internal void Set(ref IOSCredentialsSystemAuthCredentialsOptionsInternal other)
	{
		PresentationContextProviding = other.PresentationContextProviding;
		CreateBackgroundSnapshotViewContext = other.CreateBackgroundSnapshotViewContext;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IOSCredentialsSystemAuthCredentialsOptionsInternal : IGettable<IOSCredentialsSystemAuthCredentialsOptions>, ISettable<IOSCredentialsSystemAuthCredentialsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PresentationContextProviding;

	private IntPtr m_CreateBackgroundSnapshotView;

	private IntPtr m_CreateBackgroundSnapshotViewContext;

	private static IOSCreateBackgroundSnapshotViewInternal s_CreateBackgroundSnapshotView;

	public IntPtr PresentationContextProviding
	{
		get
		{
			return m_PresentationContextProviding;
		}
		set
		{
			m_PresentationContextProviding = value;
		}
	}

	public static IOSCreateBackgroundSnapshotViewInternal CreateBackgroundSnapshotView
	{
		get
		{
			if (s_CreateBackgroundSnapshotView == null)
			{
				s_CreateBackgroundSnapshotView = AuthInterface.IOSCreateBackgroundSnapshotViewInternalImplementation;
			}
			return s_CreateBackgroundSnapshotView;
		}
	}

	public IntPtr CreateBackgroundSnapshotViewContext
	{
		get
		{
			return m_CreateBackgroundSnapshotViewContext;
		}
		set
		{
			m_CreateBackgroundSnapshotViewContext = value;
		}
	}

	public void Set(ref IOSCredentialsSystemAuthCredentialsOptions other)
	{
		m_ApiVersion = 2;
		PresentationContextProviding = other.PresentationContextProviding;
		m_CreateBackgroundSnapshotView = ((other.CreateBackgroundSnapshotView != null) ? Marshal.GetFunctionPointerForDelegate(CreateBackgroundSnapshotView) : IntPtr.Zero);
		CreateBackgroundSnapshotViewContext = other.CreateBackgroundSnapshotViewContext;
	}

	public void Set(ref IOSCredentialsSystemAuthCredentialsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			PresentationContextProviding = other.Value.PresentationContextProviding;
			m_CreateBackgroundSnapshotView = ((other.Value.CreateBackgroundSnapshotView != null) ? Marshal.GetFunctionPointerForDelegate(CreateBackgroundSnapshotView) : IntPtr.Zero);
			CreateBackgroundSnapshotViewContext = other.Value.CreateBackgroundSnapshotViewContext;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PresentationContextProviding);
		Helper.Dispose(ref m_CreateBackgroundSnapshotView);
		Helper.Dispose(ref m_CreateBackgroundSnapshotViewContext);
	}

	public void Get(out IOSCredentialsSystemAuthCredentialsOptions output)
	{
		output = default(IOSCredentialsSystemAuthCredentialsOptions);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Auth;

public struct IOSLoginOptions
{
	public IOSCredentials? Credentials { get; set; }

	public AuthScopeFlags ScopeFlags { get; set; }

	public LoginFlags LoginFlags { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Auth;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IOSLoginOptionsInternal : ISettable<IOSLoginOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Credentials;

	private AuthScopeFlags m_ScopeFlags;

	private LoginFlags m_LoginFlags;

	public IOSCredentials? Credentials
	{
		set
		{
			Helper.Set<IOSCredentials, IOSCredentialsInternal>(ref value, ref m_Credentials);
		}
	}

	public AuthScopeFlags ScopeFlags
	{
		set
		{
			m_ScopeFlags = value;
		}
	}

	public LoginFlags LoginFlags
	{
		set
		{
			m_LoginFlags = value;
		}
	}

	public void Set(ref IOSLoginOptions other)
	{
		m_ApiVersion = 3;
		Credentials = other.Credentials;
		ScopeFlags = other.ScopeFlags;
		LoginFlags = other.LoginFlags;
	}

	public void Set(ref IOSLoginOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			Credentials = other.Value.Credentials;
			ScopeFlags = other.Value.ScopeFlags;
			LoginFlags = other.Value.LoginFlags;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Credentials);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyClientActionRequiredOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyClientActionRequiredOptionsInternal : ISettable<AddNotifyClientActionRequiredOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyClientActionRequiredOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyClientActionRequiredOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyClientAuthStatusChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyClientAuthStatusChangedOptionsInternal : ISettable<AddNotifyClientAuthStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyClientAuthStatusChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyClientAuthStatusChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMessageToClientOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyMessageToClientOptionsInternal : ISettable<AddNotifyMessageToClientOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMessageToClientOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyMessageToClientOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

public sealed class AntiCheatServerInterface : Handle
{
	public const int AddnotifyclientactionrequiredApiLatest = 1;

	public const int AddnotifyclientauthstatuschangedApiLatest = 1;

	public const int AddnotifymessagetoclientApiLatest = 1;

	public const int BeginsessionApiLatest = 3;

	public const int BeginsessionMaxRegistertimeout = 120;

	public const int BeginsessionMinRegistertimeout = 10;

	public const int EndsessionApiLatest = 1;

	public const int GetprotectmessageoutputlengthApiLatest = 1;

	public const int OnmessagetoclientcallbackMaxMessageSize = 512;

	public const int ProtectmessageApiLatest = 1;

	public const int ReceivemessagefromclientApiLatest = 1;

	public const int RegisterclientApiLatest = 2;

	public const int SetclientnetworkstateApiLatest = 1;

	public const int UnprotectmessageApiLatest = 1;

	public const int UnregisterclientApiLatest = 1;

	public AntiCheatServerInterface()
	{
	}

	public AntiCheatServerInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyClientActionRequired(ref AddNotifyClientActionRequiredOptions options, object clientData, OnClientActionRequiredCallback notificationFn)
	{
		AddNotifyClientActionRequiredOptionsInternal options2 = default(AddNotifyClientActionRequiredOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnClientActionRequiredCallbackInternal onClientActionRequiredCallbackInternal = OnClientActionRequiredCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onClientActionRequiredCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatServer_AddNotifyClientActionRequired(base.InnerHandle, ref options2, clientDataAddress, onClientActionRequiredCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyClientAuthStatusChanged(ref AddNotifyClientAuthStatusChangedOptions options, object clientData, OnClientAuthStatusChangedCallback notificationFn)
	{
		AddNotifyClientAuthStatusChangedOptionsInternal options2 = default(AddNotifyClientAuthStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnClientAuthStatusChangedCallbackInternal onClientAuthStatusChangedCallbackInternal = OnClientAuthStatusChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onClientAuthStatusChangedCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(base.InnerHandle, ref options2, clientDataAddress, onClientAuthStatusChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyMessageToClient(ref AddNotifyMessageToClientOptions options, object clientData, OnMessageToClientCallback notificationFn)
	{
		AddNotifyMessageToClientOptionsInternal options2 = default(AddNotifyMessageToClientOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnMessageToClientCallbackInternal onMessageToClientCallbackInternal = OnMessageToClientCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onMessageToClientCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatServer_AddNotifyMessageToClient(base.InnerHandle, ref options2, clientDataAddress, onMessageToClientCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result BeginSession(ref BeginSessionOptions options)
	{
		BeginSessionOptionsInternal options2 = default(BeginSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_BeginSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result EndSession(ref EndSessionOptions options)
	{
		EndSessionOptionsInternal options2 = default(EndSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_EndSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetProtectMessageOutputLength(ref GetProtectMessageOutputLengthOptions options, out uint outBufferSizeBytes)
	{
		GetProtectMessageOutputLengthOptionsInternal options2 = default(GetProtectMessageOutputLengthOptionsInternal);
		options2.Set(ref options);
		outBufferSizeBytes = Helper.GetDefault<uint>();
		Result result = Bindings.EOS_AntiCheatServer_GetProtectMessageOutputLength(base.InnerHandle, ref options2, ref outBufferSizeBytes);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogEvent(ref LogEventOptions options)
	{
		LogEventOptionsInternal options2 = default(LogEventOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogEvent(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogGameRoundEnd(ref LogGameRoundEndOptions options)
	{
		LogGameRoundEndOptionsInternal options2 = default(LogGameRoundEndOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogGameRoundEnd(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogGameRoundStart(ref LogGameRoundStartOptions options)
	{
		LogGameRoundStartOptionsInternal options2 = default(LogGameRoundStartOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogGameRoundStart(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerDespawn(ref LogPlayerDespawnOptions options)
	{
		LogPlayerDespawnOptionsInternal options2 = default(LogPlayerDespawnOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerDespawn(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerRevive(ref LogPlayerReviveOptions options)
	{
		LogPlayerReviveOptionsInternal options2 = default(LogPlayerReviveOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerRevive(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerSpawn(ref LogPlayerSpawnOptions options)
	{
		LogPlayerSpawnOptionsInternal options2 = default(LogPlayerSpawnOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerSpawn(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerTakeDamage(ref LogPlayerTakeDamageOptions options)
	{
		LogPlayerTakeDamageOptionsInternal options2 = default(LogPlayerTakeDamageOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerTakeDamage(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result LogPlayerTick(ref LogPlayerTickOptions options)
	{
		LogPlayerTickOptionsInternal options2 = default(LogPlayerTickOptionsInternal);
		options2.m_ApiVersion = 3;
		options2.m_PlayerHandle = options.PlayerHandle;
		Helper.Set(options.IsPlayerViewZoomed, ref options2.m_IsPlayerViewZoomed);
		options2.m_PlayerHealth = options.PlayerHealth;
		options2.m_PlayerMovementState = options.PlayerMovementState;
		if (options.PlayerPosition.HasValue)
		{
			Vec3f value = options.PlayerPosition.Value;
			options2.m_PlayerPosition = new IntPtr(&value);
		}
		if (options.PlayerViewRotation.HasValue)
		{
			Quat value2 = options.PlayerViewRotation.Value;
			options2.m_PlayerViewRotation = new IntPtr(&value2);
		}
		if (options.PlayerViewPosition.HasValue)
		{
			Vec3f value3 = options.PlayerViewPosition.Value;
			options2.m_PlayerViewPosition = new IntPtr(&value3);
		}
		return Bindings.EOS_AntiCheatServer_LogPlayerTick(base.InnerHandle, ref options2);
	}

	public Result LogPlayerUseAbility(ref LogPlayerUseAbilityOptions options)
	{
		LogPlayerUseAbilityOptionsInternal options2 = default(LogPlayerUseAbilityOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerUseAbility(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result LogPlayerUseWeapon(ref LogPlayerUseWeaponOptions options)
	{
		LogPlayerUseWeaponOptionsInternal options2 = default(LogPlayerUseWeaponOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_LogPlayerUseWeapon(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result ProtectMessage(ref ProtectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			ProtectMessageOptionsInternal options2 = default(ProtectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_ClientHandle = options.ClientHandle;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			outBytesWritten = 0u;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatServer_ProtectMessage(base.InnerHandle, ref options2, outBuffer2, ref outBytesWritten);
			}
		}
		return result;
	}

	public Result ReceiveMessageFromClient(ref ReceiveMessageFromClientOptions options)
	{
		ReceiveMessageFromClientOptionsInternal options2 = default(ReceiveMessageFromClientOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_ReceiveMessageFromClient(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RegisterClient(ref RegisterClientOptions options)
	{
		RegisterClientOptionsInternal options2 = default(RegisterClientOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_RegisterClient(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RegisterEvent(ref RegisterEventOptions options)
	{
		RegisterEventOptionsInternal options2 = default(RegisterEventOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_RegisterEvent(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyClientActionRequired(ulong notificationId)
	{
		Bindings.EOS_AntiCheatServer_RemoveNotifyClientActionRequired(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyClientAuthStatusChanged(ulong notificationId)
	{
		Bindings.EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyMessageToClient(ulong notificationId)
	{
		Bindings.EOS_AntiCheatServer_RemoveNotifyMessageToClient(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SetClientDetails(ref SetClientDetailsOptions options)
	{
		SetClientDetailsOptionsInternal options2 = default(SetClientDetailsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_SetClientDetails(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetClientNetworkState(ref SetClientNetworkStateOptions options)
	{
		SetClientNetworkStateOptionsInternal options2 = default(SetClientNetworkStateOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_SetClientNetworkState(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetGameSessionId(ref SetGameSessionIdOptions options)
	{
		SetGameSessionIdOptionsInternal options2 = default(SetGameSessionIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_SetGameSessionId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result UnprotectMessage(ref UnprotectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			UnprotectMessageOptionsInternal options2 = default(UnprotectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_ClientHandle = options.ClientHandle;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			outBytesWritten = 0u;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatServer_UnprotectMessage(base.InnerHandle, ref options2, outBuffer2, ref outBytesWritten);
			}
		}
		return result;
	}

	public Result UnregisterClient(ref UnregisterClientOptions options)
	{
		UnregisterClientOptionsInternal options2 = default(UnregisterClientOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatServer_UnregisterClient(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnClientActionRequiredCallbackInternal))]
	internal static void OnClientActionRequiredCallbackInternalImplementation(ref OnClientActionRequiredCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientActionRequiredCallbackInfoInternal, OnClientActionRequiredCallback, OnClientActionRequiredCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnClientAuthStatusChangedCallbackInternal))]
	internal static void OnClientAuthStatusChangedCallbackInternalImplementation(ref OnClientAuthStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientAuthStatusChangedCallbackInfoInternal, OnClientAuthStatusChangedCallback, OnClientAuthStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnMessageToClientCallbackInternal))]
	internal static void OnMessageToClientCallbackInternalImplementation(ref OnMessageToClientCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnMessageToClientCallbackInfoInternal, OnMessageToClientCallback, OnMessageToClientCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct BeginSessionOptions
{
	public uint RegisterTimeoutSeconds { get; set; }

	public Utf8String ServerName { get; set; }

	public bool EnableGameplayData { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


