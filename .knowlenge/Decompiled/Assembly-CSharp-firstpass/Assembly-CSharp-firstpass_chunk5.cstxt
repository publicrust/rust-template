using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BeginSessionOptionsInternal : ISettable<BeginSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_RegisterTimeoutSeconds;

	private IntPtr m_ServerName;

	private int m_EnableGameplayData;

	private IntPtr m_LocalUserId;

	public uint RegisterTimeoutSeconds
	{
		set
		{
			m_RegisterTimeoutSeconds = value;
		}
	}

	public Utf8String ServerName
	{
		set
		{
			Helper.Set(value, ref m_ServerName);
		}
	}

	public bool EnableGameplayData
	{
		set
		{
			Helper.Set(value, ref m_EnableGameplayData);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref BeginSessionOptions other)
	{
		m_ApiVersion = 3;
		RegisterTimeoutSeconds = other.RegisterTimeoutSeconds;
		ServerName = other.ServerName;
		EnableGameplayData = other.EnableGameplayData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref BeginSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			RegisterTimeoutSeconds = other.Value.RegisterTimeoutSeconds;
			ServerName = other.Value.ServerName;
			EnableGameplayData = other.Value.EnableGameplayData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ServerName);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct EndSessionOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EndSessionOptionsInternal : ISettable<EndSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref EndSessionOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref EndSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public struct GetProtectMessageOutputLengthOptions
{
	public uint DataLengthBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetProtectMessageOutputLengthOptionsInternal : ISettable<GetProtectMessageOutputLengthOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DataLengthBytes;

	public uint DataLengthBytes
	{
		set
		{
			m_DataLengthBytes = value;
		}
	}

	public void Set(ref GetProtectMessageOutputLengthOptions other)
	{
		m_ApiVersion = 1;
		DataLengthBytes = other.DataLengthBytes;
	}

	public void Set(ref GetProtectMessageOutputLengthOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DataLengthBytes = other.Value.DataLengthBytes;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnClientActionRequiredCallback(ref OnClientActionRequiredCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnClientActionRequiredCallbackInternal(ref OnClientActionRequiredCallbackInfoInternal data);


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnClientAuthStatusChangedCallback(ref OnClientAuthStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnClientAuthStatusChangedCallbackInternal(ref OnClientAuthStatusChangedCallbackInfoInternal data);


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnMessageToClientCallback(ref OnMessageToClientCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMessageToClientCallbackInternal(ref OnMessageToClientCallbackInfoInternal data);


using System;

public struct ProtectMessageOptions
{
	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ProtectMessageOptionsInternal
{
	public int m_ApiVersion;

	public IntPtr m_ClientHandle;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct ReceiveMessageFromClientOptions
{
	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReceiveMessageFromClientOptionsInternal : ISettable<ReceiveMessageFromClientOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public IntPtr ClientHandle
	{
		set
		{
			m_ClientHandle = value;
		}
	}

	public ArraySegment<byte> Data
	{
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public void Set(ref ReceiveMessageFromClientOptions other)
	{
		m_ApiVersion = 1;
		ClientHandle = other.ClientHandle;
		Data = other.Data;
	}

	public void Set(ref ReceiveMessageFromClientOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ClientHandle = other.Value.ClientHandle;
			Data = other.Value.Data;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_Data);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterClientOptions
{
	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientType ClientType { get; set; }

	public AntiCheatCommonClientPlatform ClientPlatform { get; set; }

	internal Utf8String AccountId_DEPRECATED { get; set; }

	public Utf8String IpAddress { get; set; }

	public ProductUserId UserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterClientOptionsInternal : ISettable<RegisterClientOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientType m_ClientType;

	private AntiCheatCommonClientPlatform m_ClientPlatform;

	private IntPtr m_AccountId_DEPRECATED;

	private IntPtr m_IpAddress;

	private IntPtr m_UserId;

	public IntPtr ClientHandle
	{
		set
		{
			m_ClientHandle = value;
		}
	}

	public AntiCheatCommonClientType ClientType
	{
		set
		{
			m_ClientType = value;
		}
	}

	public AntiCheatCommonClientPlatform ClientPlatform
	{
		set
		{
			m_ClientPlatform = value;
		}
	}

	public Utf8String AccountId_DEPRECATED
	{
		set
		{
			Helper.Set(value, ref m_AccountId_DEPRECATED);
		}
	}

	public Utf8String IpAddress
	{
		set
		{
			Helper.Set(value, ref m_IpAddress);
		}
	}

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public void Set(ref RegisterClientOptions other)
	{
		m_ApiVersion = 2;
		ClientHandle = other.ClientHandle;
		ClientType = other.ClientType;
		ClientPlatform = other.ClientPlatform;
		AccountId_DEPRECATED = other.AccountId_DEPRECATED;
		IpAddress = other.IpAddress;
		UserId = other.UserId;
	}

	public void Set(ref RegisterClientOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			ClientHandle = other.Value.ClientHandle;
			ClientType = other.Value.ClientType;
			ClientPlatform = other.Value.ClientPlatform;
			AccountId_DEPRECATED = other.Value.AccountId_DEPRECATED;
			IpAddress = other.Value.IpAddress;
			UserId = other.Value.UserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_AccountId_DEPRECATED);
		Helper.Dispose(ref m_IpAddress);
		Helper.Dispose(ref m_UserId);
	}
}


using System;

public struct SetClientNetworkStateOptions
{
	public IntPtr ClientHandle { get; set; }

	public bool IsNetworkActive { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetClientNetworkStateOptionsInternal : ISettable<SetClientNetworkStateOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private int m_IsNetworkActive;

	public IntPtr ClientHandle
	{
		set
		{
			m_ClientHandle = value;
		}
	}

	public bool IsNetworkActive
	{
		set
		{
			Helper.Set(value, ref m_IsNetworkActive);
		}
	}

	public void Set(ref SetClientNetworkStateOptions other)
	{
		m_ApiVersion = 1;
		ClientHandle = other.ClientHandle;
		IsNetworkActive = other.IsNetworkActive;
	}

	public void Set(ref SetClientNetworkStateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ClientHandle = other.Value.ClientHandle;
			IsNetworkActive = other.Value.IsNetworkActive;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
	}
}


using System;

public struct UnprotectMessageOptions
{
	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnprotectMessageOptionsInternal
{
	public int m_ApiVersion;

	public IntPtr m_ClientHandle;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct UnregisterClientOptions
{
	public IntPtr ClientHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatServer;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnregisterClientOptionsInternal : ISettable<UnregisterClientOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	public IntPtr ClientHandle
	{
		set
		{
			m_ClientHandle = value;
		}
	}

	public void Set(ref UnregisterClientOptions other)
	{
		m_ApiVersion = 1;
		ClientHandle = other.ClientHandle;
	}

	public void Set(ref UnregisterClientOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ClientHandle = other.Value.ClientHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
	}
}


public enum AntiCheatCommonClientAction
{
	Invalid,
	RemovePlayer
}


public enum AntiCheatCommonClientActionReason
{
	Invalid,
	InternalError,
	InvalidMessage,
	AuthenticationFailed,
	NullClient,
	HeartbeatTimeout,
	ClientViolation,
	BackendViolation,
	TemporaryCooldown,
	TemporaryBanned,
	PermanentBanned
}


public enum AntiCheatCommonClientAuthStatus
{
	Invalid,
	LocalAuthComplete,
	RemoteAuthComplete
}


using System;

[Flags]
public enum AntiCheatCommonClientFlags
{
	None = 0,
	Admin = 1
}


public enum AntiCheatCommonClientInput
{
	Unknown,
	MouseKeyboard,
	Gamepad,
	TouchInput
}


public enum AntiCheatCommonClientPlatform
{
	Unknown,
	Windows,
	Mac,
	Linux,
	Xbox,
	PlayStation,
	Nintendo,
	iOS,
	Android
}


public enum AntiCheatCommonClientType
{
	ProtectedClient,
	UnprotectedClient,
	AIBot
}


public enum AntiCheatCommonEventParamType
{
	Invalid,
	ClientHandle,
	String,
	UInt32,
	Int32,
	UInt64,
	Int64,
	Vector3f,
	Quat,
	Float
}


public enum AntiCheatCommonEventType
{
	Invalid,
	GameEvent,
	PlayerEvent
}


public enum AntiCheatCommonGameRoundCompetitionType
{
	None,
	Casual,
	Ranked,
	Competitive
}


public sealed class AntiCheatCommonInterface
{
	public const int LogeventApiLatest = 1;

	public const int LogeventStringMaxLength = 39;

	public const int LoggameroundendApiLatest = 1;

	public const int LoggameroundstartApiLatest = 2;

	public const int LogplayerdespawnApiLatest = 1;

	public const int LogplayerreviveApiLatest = 1;

	public const int LogplayerspawnApiLatest = 1;

	public const int LogplayertakedamageApiLatest = 4;

	public const int LogplayertickApiLatest = 3;

	public const int LogplayeruseabilityApiLatest = 1;

	public const int LogplayeruseweaponApiLatest = 2;

	public const int LogplayeruseweaponWeaponnameMaxLength = 16;

	public const int RegistereventApiLatest = 1;

	public const int RegistereventCustomeventbase = 268435456;

	public const int RegistereventMaxParamdefscount = 12;

	public const int SetclientdetailsApiLatest = 1;

	public const int SetgamesessionidApiLatest = 1;
}


public enum AntiCheatCommonPlayerMovementState
{
	None,
	Crouching,
	Prone,
	Mounted,
	Swimming,
	Falling,
	Flying,
	OnLadder
}


public enum AntiCheatCommonPlayerTakeDamageResult
{
	None,
	DownedDEPRECATED,
	EliminatedDEPRECATED,
	NormalToDowned,
	NormalToEliminated,
	DownedToEliminated
}


public enum AntiCheatCommonPlayerTakeDamageSource
{
	None,
	Player,
	NonPlayerCharacter,
	World
}


public enum AntiCheatCommonPlayerTakeDamageType
{
	None,
	PointDamage,
	RadialDamage,
	DamageOverTime
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogEventOptions
{
	public IntPtr ClientHandle { get; set; }

	public uint EventId { get; set; }

	public LogEventParamPair[] Params { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogEventOptionsInternal : ISettable<LogEventOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private uint m_EventId;

	private uint m_ParamsCount;

	private IntPtr m_Params;

	public IntPtr ClientHandle
	{
		set
		{
			m_ClientHandle = value;
		}
	}

	public uint EventId
	{
		set
		{
			m_EventId = value;
		}
	}

	public LogEventParamPair[] Params
	{
		set
		{
			Helper.Set<LogEventParamPair, LogEventParamPairInternal>(ref value, ref m_Params, out m_ParamsCount);
		}
	}

	public void Set(ref LogEventOptions other)
	{
		m_ApiVersion = 1;
		ClientHandle = other.ClientHandle;
		EventId = other.EventId;
		Params = other.Params;
	}

	public void Set(ref LogEventOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ClientHandle = other.Value.ClientHandle;
			EventId = other.Value.EventId;
			Params = other.Value.Params;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_Params);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public struct LogEventParamPair
{
	public LogEventParamPairParamValue ParamValue { get; set; }

	internal void Set(ref LogEventParamPairInternal other)
	{
		ParamValue = other.ParamValue;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogEventParamPairInternal : IGettable<LogEventParamPair>, ISettable<LogEventParamPair>, IDisposable
{
	private LogEventParamPairParamValueInternal m_ParamValue;

	public LogEventParamPairParamValue ParamValue
	{
		get
		{
			Helper.Get<LogEventParamPairParamValueInternal, LogEventParamPairParamValue>(ref m_ParamValue, out var to);
			return to;
		}
		set
		{
			Helper.Set(ref value, ref m_ParamValue);
		}
	}

	public void Set(ref LogEventParamPair other)
	{
		ParamValue = other.ParamValue;
	}

	public void Set(ref LogEventParamPair? other)
	{
		if (other.HasValue)
		{
			ParamValue = other.Value.ParamValue;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ParamValue);
	}

	public void Get(out LogEventParamPair output)
	{
		output = default(LogEventParamPair);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogEventParamPairParamValue
{
	private AntiCheatCommonEventParamType m_ParamValueType;

	private IntPtr? m_ClientHandle;

	private Utf8String m_String;

	private uint? m_UInt32;

	private int? m_Int32;

	private ulong? m_UInt64;

	private long? m_Int64;

	private Vec3f m_Vec3f;

	private Quat m_Quat;

	private float? m_Float;

	public AntiCheatCommonEventParamType ParamValueType
	{
		get
		{
			return m_ParamValueType;
		}
		private set
		{
			m_ParamValueType = value;
		}
	}

	public IntPtr? ClientHandle
	{
		get
		{
			Helper.Get(m_ClientHandle, out var to, m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientHandle, AntiCheatCommonEventParamType.ClientHandle, ref m_ParamValueType);
		}
	}

	public Utf8String String
	{
		get
		{
			Helper.Get(m_String, out var to, m_ParamValueType, AntiCheatCommonEventParamType.String);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_String, AntiCheatCommonEventParamType.String, ref m_ParamValueType);
		}
	}

	public uint? UInt32
	{
		get
		{
			Helper.Get(m_UInt32, out var to, m_ParamValueType, AntiCheatCommonEventParamType.UInt32);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UInt32, AntiCheatCommonEventParamType.UInt32, ref m_ParamValueType);
		}
	}

	public int? Int32
	{
		get
		{
			Helper.Get(m_Int32, out var to, m_ParamValueType, AntiCheatCommonEventParamType.Int32);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Int32, AntiCheatCommonEventParamType.Int32, ref m_ParamValueType);
		}
	}

	public ulong? UInt64
	{
		get
		{
			Helper.Get(m_UInt64, out var to, m_ParamValueType, AntiCheatCommonEventParamType.UInt64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UInt64, AntiCheatCommonEventParamType.UInt64, ref m_ParamValueType);
		}
	}

	public long? Int64
	{
		get
		{
			Helper.Get(m_Int64, out var to, m_ParamValueType, AntiCheatCommonEventParamType.Int64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Int64, AntiCheatCommonEventParamType.Int64, ref m_ParamValueType);
		}
	}

	public Vec3f Vec3f
	{
		get
		{
			Helper.Get(m_Vec3f, out Vec3f to, m_ParamValueType, AntiCheatCommonEventParamType.Vector3f);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Vec3f, AntiCheatCommonEventParamType.Vector3f, ref m_ParamValueType);
		}
	}

	public Quat Quat
	{
		get
		{
			Helper.Get(m_Quat, out Quat to, m_ParamValueType, AntiCheatCommonEventParamType.Quat);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Quat, AntiCheatCommonEventParamType.Quat, ref m_ParamValueType);
		}
	}

	public float? Float
	{
		get
		{
			Helper.Get(m_Float, out var to, m_ParamValueType, AntiCheatCommonEventParamType.Float);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Float, AntiCheatCommonEventParamType.Float, ref m_ParamValueType);
		}
	}

	public static implicit operator LogEventParamPairParamValue(IntPtr value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.ClientHandle = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(Utf8String value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.String = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(string value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.String = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(uint value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.UInt32 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(int value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Int32 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(ulong value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.UInt64 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(long value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Int64 = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(Vec3f value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Vec3f = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(Quat value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Quat = value;
		return result;
	}

	public static implicit operator LogEventParamPairParamValue(float value)
	{
		LogEventParamPairParamValue result = default(LogEventParamPairParamValue);
		result.Float = value;
		return result;
	}

	internal void Set(ref LogEventParamPairParamValueInternal other)
	{
		ClientHandle = other.ClientHandle;
		String = other.String;
		UInt32 = other.UInt32;
		Int32 = other.Int32;
		UInt64 = other.UInt64;
		Int64 = other.Int64;
		Vec3f = other.Vec3f;
		Quat = other.Quat;
		Float = other.Float;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Explicit, Pack = 8)]
internal struct LogEventParamPairParamValueInternal : IGettable<LogEventParamPairParamValue>, ISettable<LogEventParamPairParamValue>, IDisposable
{
	[FieldOffset(0)]
	private AntiCheatCommonEventParamType m_ParamValueType;

	[FieldOffset(8)]
	private IntPtr m_ClientHandle;

	[FieldOffset(8)]
	private IntPtr m_String;

	[FieldOffset(8)]
	private uint m_UInt32;

	[FieldOffset(8)]
	private int m_Int32;

	[FieldOffset(8)]
	private ulong m_UInt64;

	[FieldOffset(8)]
	private long m_Int64;

	[FieldOffset(8)]
	private Vec3fInternal m_Vec3f;

	[FieldOffset(8)]
	private QuatInternal m_Quat;

	[FieldOffset(8)]
	private float m_Float;

	public IntPtr? ClientHandle
	{
		get
		{
			Helper.Get(m_ClientHandle, out IntPtr? to, m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientHandle, AntiCheatCommonEventParamType.ClientHandle, ref m_ParamValueType, this);
		}
	}

	public Utf8String String
	{
		get
		{
			Helper.Get(m_String, out Utf8String to, m_ParamValueType, AntiCheatCommonEventParamType.String);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_String, AntiCheatCommonEventParamType.String, ref m_ParamValueType, this);
		}
	}

	public uint? UInt32
	{
		get
		{
			Helper.Get(m_UInt32, out uint? to, m_ParamValueType, AntiCheatCommonEventParamType.UInt32);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UInt32, AntiCheatCommonEventParamType.UInt32, ref m_ParamValueType, this);
		}
	}

	public int? Int32
	{
		get
		{
			Helper.Get(m_Int32, out int? to, m_ParamValueType, AntiCheatCommonEventParamType.Int32);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Int32, AntiCheatCommonEventParamType.Int32, ref m_ParamValueType, this);
		}
	}

	public ulong? UInt64
	{
		get
		{
			Helper.Get(m_UInt64, out ulong? to, m_ParamValueType, AntiCheatCommonEventParamType.UInt64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UInt64, AntiCheatCommonEventParamType.UInt64, ref m_ParamValueType, this);
		}
	}

	public long? Int64
	{
		get
		{
			Helper.Get(m_Int64, out long? to, m_ParamValueType, AntiCheatCommonEventParamType.Int64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Int64, AntiCheatCommonEventParamType.Int64, ref m_ParamValueType, this);
		}
	}

	public Vec3f Vec3f
	{
		get
		{
			Helper.Get(ref m_Vec3f, out Vec3f to, m_ParamValueType, AntiCheatCommonEventParamType.Vector3f);
			return to;
		}
		set
		{
			Helper.Set(ref value, ref m_Vec3f, AntiCheatCommonEventParamType.Vector3f, ref m_ParamValueType, this);
		}
	}

	public Quat Quat
	{
		get
		{
			Helper.Get(ref m_Quat, out Quat to, m_ParamValueType, AntiCheatCommonEventParamType.Quat);
			return to;
		}
		set
		{
			Helper.Set(ref value, ref m_Quat, AntiCheatCommonEventParamType.Quat, ref m_ParamValueType, this);
		}
	}

	public float? Float
	{
		get
		{
			Helper.Get(m_Float, out float? to, m_ParamValueType, AntiCheatCommonEventParamType.Float);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Float, AntiCheatCommonEventParamType.Float, ref m_ParamValueType, this);
		}
	}

	public void Set(ref LogEventParamPairParamValue other)
	{
		ClientHandle = other.ClientHandle;
		String = other.String;
		UInt32 = other.UInt32;
		Int32 = other.Int32;
		UInt64 = other.UInt64;
		Int64 = other.Int64;
		Vec3f = other.Vec3f;
		Quat = other.Quat;
		Float = other.Float;
	}

	public void Set(ref LogEventParamPairParamValue? other)
	{
		if (other.HasValue)
		{
			ClientHandle = other.Value.ClientHandle;
			String = other.Value.String;
			UInt32 = other.Value.UInt32;
			Int32 = other.Value.Int32;
			UInt64 = other.Value.UInt64;
			Int64 = other.Value.Int64;
			Vec3f = other.Value.Vec3f;
			Quat = other.Value.Quat;
			Float = other.Value.Float;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle, m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
		Helper.Dispose(ref m_String, m_ParamValueType, AntiCheatCommonEventParamType.String);
		Helper.Dispose(ref m_Vec3f);
		Helper.Dispose(ref m_Quat);
	}

	public void Get(out LogEventParamPairParamValue output)
	{
		output = default(LogEventParamPairParamValue);
		output.Set(ref this);
	}
}


public struct LogGameRoundEndOptions
{
	public uint WinningTeamId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogGameRoundEndOptionsInternal : ISettable<LogGameRoundEndOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_WinningTeamId;

	public uint WinningTeamId
	{
		set
		{
			m_WinningTeamId = value;
		}
	}

	public void Set(ref LogGameRoundEndOptions other)
	{
		m_ApiVersion = 1;
		WinningTeamId = other.WinningTeamId;
	}

	public void Set(ref LogGameRoundEndOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			WinningTeamId = other.Value.WinningTeamId;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogGameRoundStartOptions
{
	public Utf8String SessionIdentifier { get; set; }

	public Utf8String LevelName { get; set; }

	public Utf8String ModeName { get; set; }

	public uint RoundTimeSeconds { get; set; }

	public AntiCheatCommonGameRoundCompetitionType CompetitionType { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogGameRoundStartOptionsInternal : ISettable<LogGameRoundStartOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionIdentifier;

	private IntPtr m_LevelName;

	private IntPtr m_ModeName;

	private uint m_RoundTimeSeconds;

	private AntiCheatCommonGameRoundCompetitionType m_CompetitionType;

	public Utf8String SessionIdentifier
	{
		set
		{
			Helper.Set(value, ref m_SessionIdentifier);
		}
	}

	public Utf8String LevelName
	{
		set
		{
			Helper.Set(value, ref m_LevelName);
		}
	}

	public Utf8String ModeName
	{
		set
		{
			Helper.Set(value, ref m_ModeName);
		}
	}

	public uint RoundTimeSeconds
	{
		set
		{
			m_RoundTimeSeconds = value;
		}
	}

	public AntiCheatCommonGameRoundCompetitionType CompetitionType
	{
		set
		{
			m_CompetitionType = value;
		}
	}

	public void Set(ref LogGameRoundStartOptions other)
	{
		m_ApiVersion = 2;
		SessionIdentifier = other.SessionIdentifier;
		LevelName = other.LevelName;
		ModeName = other.ModeName;
		RoundTimeSeconds = other.RoundTimeSeconds;
		CompetitionType = other.CompetitionType;
	}

	public void Set(ref LogGameRoundStartOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			SessionIdentifier = other.Value.SessionIdentifier;
			LevelName = other.Value.LevelName;
			ModeName = other.Value.ModeName;
			RoundTimeSeconds = other.Value.RoundTimeSeconds;
			CompetitionType = other.Value.CompetitionType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionIdentifier);
		Helper.Dispose(ref m_LevelName);
		Helper.Dispose(ref m_ModeName);
	}
}


using System;

public struct LogPlayerDespawnOptions
{
	public IntPtr DespawnedPlayerHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerDespawnOptionsInternal : ISettable<LogPlayerDespawnOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_DespawnedPlayerHandle;

	public IntPtr DespawnedPlayerHandle
	{
		set
		{
			m_DespawnedPlayerHandle = value;
		}
	}

	public void Set(ref LogPlayerDespawnOptions other)
	{
		m_ApiVersion = 1;
		DespawnedPlayerHandle = other.DespawnedPlayerHandle;
	}

	public void Set(ref LogPlayerDespawnOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DespawnedPlayerHandle = other.Value.DespawnedPlayerHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DespawnedPlayerHandle);
	}
}


using System;

public struct LogPlayerReviveOptions
{
	public IntPtr RevivedPlayerHandle { get; set; }

	public IntPtr ReviverPlayerHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerReviveOptionsInternal : ISettable<LogPlayerReviveOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RevivedPlayerHandle;

	private IntPtr m_ReviverPlayerHandle;

	public IntPtr RevivedPlayerHandle
	{
		set
		{
			m_RevivedPlayerHandle = value;
		}
	}

	public IntPtr ReviverPlayerHandle
	{
		set
		{
			m_ReviverPlayerHandle = value;
		}
	}

	public void Set(ref LogPlayerReviveOptions other)
	{
		m_ApiVersion = 1;
		RevivedPlayerHandle = other.RevivedPlayerHandle;
		ReviverPlayerHandle = other.ReviverPlayerHandle;
	}

	public void Set(ref LogPlayerReviveOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			RevivedPlayerHandle = other.Value.RevivedPlayerHandle;
			ReviverPlayerHandle = other.Value.ReviverPlayerHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RevivedPlayerHandle);
		Helper.Dispose(ref m_ReviverPlayerHandle);
	}
}


using System;

public struct LogPlayerSpawnOptions
{
	public IntPtr SpawnedPlayerHandle { get; set; }

	public uint TeamId { get; set; }

	public uint CharacterId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerSpawnOptionsInternal : ISettable<LogPlayerSpawnOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SpawnedPlayerHandle;

	private uint m_TeamId;

	private uint m_CharacterId;

	public IntPtr SpawnedPlayerHandle
	{
		set
		{
			m_SpawnedPlayerHandle = value;
		}
	}

	public uint TeamId
	{
		set
		{
			m_TeamId = value;
		}
	}

	public uint CharacterId
	{
		set
		{
			m_CharacterId = value;
		}
	}

	public void Set(ref LogPlayerSpawnOptions other)
	{
		m_ApiVersion = 1;
		SpawnedPlayerHandle = other.SpawnedPlayerHandle;
		TeamId = other.TeamId;
		CharacterId = other.CharacterId;
	}

	public void Set(ref LogPlayerSpawnOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SpawnedPlayerHandle = other.Value.SpawnedPlayerHandle;
			TeamId = other.Value.TeamId;
			CharacterId = other.Value.CharacterId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SpawnedPlayerHandle);
	}
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerTakeDamageOptions
{
	public IntPtr VictimPlayerHandle { get; set; }

	public Vec3f? VictimPlayerPosition { get; set; }

	public Quat? VictimPlayerViewRotation { get; set; }

	public IntPtr AttackerPlayerHandle { get; set; }

	public Vec3f? AttackerPlayerPosition { get; set; }

	public Quat? AttackerPlayerViewRotation { get; set; }

	public bool IsHitscanAttack { get; set; }

	public bool HasLineOfSight { get; set; }

	public bool IsCriticalHit { get; set; }

	internal uint HitBoneId_DEPRECATED { get; set; }

	public float DamageTaken { get; set; }

	public float HealthRemaining { get; set; }

	public AntiCheatCommonPlayerTakeDamageSource DamageSource { get; set; }

	public AntiCheatCommonPlayerTakeDamageType DamageType { get; set; }

	public AntiCheatCommonPlayerTakeDamageResult DamageResult { get; set; }

	public LogPlayerUseWeaponData? PlayerUseWeaponData { get; set; }

	public uint TimeSincePlayerUseWeaponMs { get; set; }

	public Vec3f? DamagePosition { get; set; }

	public Vec3f? AttackerPlayerViewPosition { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerTakeDamageOptionsInternal : ISettable<LogPlayerTakeDamageOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_VictimPlayerHandle;

	private IntPtr m_VictimPlayerPosition;

	private IntPtr m_VictimPlayerViewRotation;

	private IntPtr m_AttackerPlayerHandle;

	private IntPtr m_AttackerPlayerPosition;

	private IntPtr m_AttackerPlayerViewRotation;

	private int m_IsHitscanAttack;

	private int m_HasLineOfSight;

	private int m_IsCriticalHit;

	private uint m_HitBoneId_DEPRECATED;

	private float m_DamageTaken;

	private float m_HealthRemaining;

	private AntiCheatCommonPlayerTakeDamageSource m_DamageSource;

	private AntiCheatCommonPlayerTakeDamageType m_DamageType;

	private AntiCheatCommonPlayerTakeDamageResult m_DamageResult;

	private IntPtr m_PlayerUseWeaponData;

	private uint m_TimeSincePlayerUseWeaponMs;

	private IntPtr m_DamagePosition;

	private IntPtr m_AttackerPlayerViewPosition;

	public IntPtr VictimPlayerHandle
	{
		set
		{
			m_VictimPlayerHandle = value;
		}
	}

	public Vec3f? VictimPlayerPosition
	{
		set
		{
			Helper.Set<Vec3f, Vec3fInternal>(ref value, ref m_VictimPlayerPosition);
		}
	}

	public Quat? VictimPlayerViewRotation
	{
		set
		{
			Helper.Set<Quat, QuatInternal>(ref value, ref m_VictimPlayerViewRotation);
		}
	}

	public IntPtr AttackerPlayerHandle
	{
		set
		{
			m_AttackerPlayerHandle = value;
		}
	}

	public Vec3f? AttackerPlayerPosition
	{
		set
		{
			Helper.Set<Vec3f, Vec3fInternal>(ref value, ref m_AttackerPlayerPosition);
		}
	}

	public Quat? AttackerPlayerViewRotation
	{
		set
		{
			Helper.Set<Quat, QuatInternal>(ref value, ref m_AttackerPlayerViewRotation);
		}
	}

	public bool IsHitscanAttack
	{
		set
		{
			Helper.Set(value, ref m_IsHitscanAttack);
		}
	}

	public bool HasLineOfSight
	{
		set
		{
			Helper.Set(value, ref m_HasLineOfSight);
		}
	}

	public bool IsCriticalHit
	{
		set
		{
			Helper.Set(value, ref m_IsCriticalHit);
		}
	}

	public uint HitBoneId_DEPRECATED
	{
		set
		{
			m_HitBoneId_DEPRECATED = value;
		}
	}

	public float DamageTaken
	{
		set
		{
			m_DamageTaken = value;
		}
	}

	public float HealthRemaining
	{
		set
		{
			m_HealthRemaining = value;
		}
	}

	public AntiCheatCommonPlayerTakeDamageSource DamageSource
	{
		set
		{
			m_DamageSource = value;
		}
	}

	public AntiCheatCommonPlayerTakeDamageType DamageType
	{
		set
		{
			m_DamageType = value;
		}
	}

	public AntiCheatCommonPlayerTakeDamageResult DamageResult
	{
		set
		{
			m_DamageResult = value;
		}
	}

	public LogPlayerUseWeaponData? PlayerUseWeaponData
	{
		set
		{
			Helper.Set<LogPlayerUseWeaponData, LogPlayerUseWeaponDataInternal>(ref value, ref m_PlayerUseWeaponData);
		}
	}

	public uint TimeSincePlayerUseWeaponMs
	{
		set
		{
			m_TimeSincePlayerUseWeaponMs = value;
		}
	}

	public Vec3f? DamagePosition
	{
		set
		{
			Helper.Set<Vec3f, Vec3fInternal>(ref value, ref m_DamagePosition);
		}
	}

	public Vec3f? AttackerPlayerViewPosition
	{
		set
		{
			Helper.Set<Vec3f, Vec3fInternal>(ref value, ref m_AttackerPlayerViewPosition);
		}
	}

	public void Set(ref LogPlayerTakeDamageOptions other)
	{
		m_ApiVersion = 4;
		VictimPlayerHandle = other.VictimPlayerHandle;
		VictimPlayerPosition = other.VictimPlayerPosition;
		VictimPlayerViewRotation = other.VictimPlayerViewRotation;
		AttackerPlayerHandle = other.AttackerPlayerHandle;
		AttackerPlayerPosition = other.AttackerPlayerPosition;
		AttackerPlayerViewRotation = other.AttackerPlayerViewRotation;
		IsHitscanAttack = other.IsHitscanAttack;
		HasLineOfSight = other.HasLineOfSight;
		IsCriticalHit = other.IsCriticalHit;
		HitBoneId_DEPRECATED = other.HitBoneId_DEPRECATED;
		DamageTaken = other.DamageTaken;
		HealthRemaining = other.HealthRemaining;
		DamageSource = other.DamageSource;
		DamageType = other.DamageType;
		DamageResult = other.DamageResult;
		PlayerUseWeaponData = other.PlayerUseWeaponData;
		TimeSincePlayerUseWeaponMs = other.TimeSincePlayerUseWeaponMs;
		DamagePosition = other.DamagePosition;
		AttackerPlayerViewPosition = other.AttackerPlayerViewPosition;
	}

	public void Set(ref LogPlayerTakeDamageOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			VictimPlayerHandle = other.Value.VictimPlayerHandle;
			VictimPlayerPosition = other.Value.VictimPlayerPosition;
			VictimPlayerViewRotation = other.Value.VictimPlayerViewRotation;
			AttackerPlayerHandle = other.Value.AttackerPlayerHandle;
			AttackerPlayerPosition = other.Value.AttackerPlayerPosition;
			AttackerPlayerViewRotation = other.Value.AttackerPlayerViewRotation;
			IsHitscanAttack = other.Value.IsHitscanAttack;
			HasLineOfSight = other.Value.HasLineOfSight;
			IsCriticalHit = other.Value.IsCriticalHit;
			HitBoneId_DEPRECATED = other.Value.HitBoneId_DEPRECATED;
			DamageTaken = other.Value.DamageTaken;
			HealthRemaining = other.Value.HealthRemaining;
			DamageSource = other.Value.DamageSource;
			DamageType = other.Value.DamageType;
			DamageResult = other.Value.DamageResult;
			PlayerUseWeaponData = other.Value.PlayerUseWeaponData;
			TimeSincePlayerUseWeaponMs = other.Value.TimeSincePlayerUseWeaponMs;
			DamagePosition = other.Value.DamagePosition;
			AttackerPlayerViewPosition = other.Value.AttackerPlayerViewPosition;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_VictimPlayerHandle);
		Helper.Dispose(ref m_VictimPlayerPosition);
		Helper.Dispose(ref m_VictimPlayerViewRotation);
		Helper.Dispose(ref m_AttackerPlayerHandle);
		Helper.Dispose(ref m_AttackerPlayerPosition);
		Helper.Dispose(ref m_AttackerPlayerViewRotation);
		Helper.Dispose(ref m_PlayerUseWeaponData);
		Helper.Dispose(ref m_DamagePosition);
		Helper.Dispose(ref m_AttackerPlayerViewPosition);
	}
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerTickOptions
{
	public IntPtr PlayerHandle { get; set; }

	public Vec3f? PlayerPosition { get; set; }

	public Quat? PlayerViewRotation { get; set; }

	public bool IsPlayerViewZoomed { get; set; }

	public float PlayerHealth { get; set; }

	public AntiCheatCommonPlayerMovementState PlayerMovementState { get; set; }

	public Vec3f? PlayerViewPosition { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerTickOptionsInternal
{
	public int m_ApiVersion;

	public IntPtr m_PlayerHandle;

	public IntPtr m_PlayerPosition;

	public IntPtr m_PlayerViewRotation;

	public int m_IsPlayerViewZoomed;

	public float m_PlayerHealth;

	public AntiCheatCommonPlayerMovementState m_PlayerMovementState;

	public IntPtr m_PlayerViewPosition;
}


using System;

public struct LogPlayerUseAbilityOptions
{
	public IntPtr PlayerHandle { get; set; }

	public uint AbilityId { get; set; }

	public uint AbilityDurationMs { get; set; }

	public uint AbilityCooldownMs { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerUseAbilityOptionsInternal : ISettable<LogPlayerUseAbilityOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlayerHandle;

	private uint m_AbilityId;

	private uint m_AbilityDurationMs;

	private uint m_AbilityCooldownMs;

	public IntPtr PlayerHandle
	{
		set
		{
			m_PlayerHandle = value;
		}
	}

	public uint AbilityId
	{
		set
		{
			m_AbilityId = value;
		}
	}

	public uint AbilityDurationMs
	{
		set
		{
			m_AbilityDurationMs = value;
		}
	}

	public uint AbilityCooldownMs
	{
		set
		{
			m_AbilityCooldownMs = value;
		}
	}

	public void Set(ref LogPlayerUseAbilityOptions other)
	{
		m_ApiVersion = 1;
		PlayerHandle = other.PlayerHandle;
		AbilityId = other.AbilityId;
		AbilityDurationMs = other.AbilityDurationMs;
		AbilityCooldownMs = other.AbilityCooldownMs;
	}

	public void Set(ref LogPlayerUseAbilityOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlayerHandle = other.Value.PlayerHandle;
			AbilityId = other.Value.AbilityId;
			AbilityDurationMs = other.Value.AbilityDurationMs;
			AbilityCooldownMs = other.Value.AbilityCooldownMs;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlayerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerUseWeaponData
{
	public IntPtr PlayerHandle { get; set; }

	public Vec3f? PlayerPosition { get; set; }

	public Quat? PlayerViewRotation { get; set; }

	public bool IsPlayerViewZoomed { get; set; }

	public bool IsMeleeAttack { get; set; }

	public Utf8String WeaponName { get; set; }

	internal void Set(ref LogPlayerUseWeaponDataInternal other)
	{
		PlayerHandle = other.PlayerHandle;
		PlayerPosition = other.PlayerPosition;
		PlayerViewRotation = other.PlayerViewRotation;
		IsPlayerViewZoomed = other.IsPlayerViewZoomed;
		IsMeleeAttack = other.IsMeleeAttack;
		WeaponName = other.WeaponName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerUseWeaponDataInternal : IGettable<LogPlayerUseWeaponData>, ISettable<LogPlayerUseWeaponData>, IDisposable
{
	private IntPtr m_PlayerHandle;

	private IntPtr m_PlayerPosition;

	private IntPtr m_PlayerViewRotation;

	private int m_IsPlayerViewZoomed;

	private int m_IsMeleeAttack;

	private IntPtr m_WeaponName;

	public IntPtr PlayerHandle
	{
		get
		{
			return m_PlayerHandle;
		}
		set
		{
			m_PlayerHandle = value;
		}
	}

	public Vec3f? PlayerPosition
	{
		get
		{
			Helper.Get<Vec3fInternal, Vec3f>(m_PlayerPosition, out Vec3f? to);
			return to;
		}
		set
		{
			Helper.Set<Vec3f, Vec3fInternal>(ref value, ref m_PlayerPosition);
		}
	}

	public Quat? PlayerViewRotation
	{
		get
		{
			Helper.Get<QuatInternal, Quat>(m_PlayerViewRotation, out Quat? to);
			return to;
		}
		set
		{
			Helper.Set<Quat, QuatInternal>(ref value, ref m_PlayerViewRotation);
		}
	}

	public bool IsPlayerViewZoomed
	{
		get
		{
			Helper.Get(m_IsPlayerViewZoomed, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsPlayerViewZoomed);
		}
	}

	public bool IsMeleeAttack
	{
		get
		{
			Helper.Get(m_IsMeleeAttack, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsMeleeAttack);
		}
	}

	public Utf8String WeaponName
	{
		get
		{
			Helper.Get(m_WeaponName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_WeaponName);
		}
	}

	public void Set(ref LogPlayerUseWeaponData other)
	{
		PlayerHandle = other.PlayerHandle;
		PlayerPosition = other.PlayerPosition;
		PlayerViewRotation = other.PlayerViewRotation;
		IsPlayerViewZoomed = other.IsPlayerViewZoomed;
		IsMeleeAttack = other.IsMeleeAttack;
		WeaponName = other.WeaponName;
	}

	public void Set(ref LogPlayerUseWeaponData? other)
	{
		if (other.HasValue)
		{
			PlayerHandle = other.Value.PlayerHandle;
			PlayerPosition = other.Value.PlayerPosition;
			PlayerViewRotation = other.Value.PlayerViewRotation;
			IsPlayerViewZoomed = other.Value.IsPlayerViewZoomed;
			IsMeleeAttack = other.Value.IsMeleeAttack;
			WeaponName = other.Value.WeaponName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlayerHandle);
		Helper.Dispose(ref m_PlayerPosition);
		Helper.Dispose(ref m_PlayerViewRotation);
		Helper.Dispose(ref m_WeaponName);
	}

	public void Get(out LogPlayerUseWeaponData output)
	{
		output = default(LogPlayerUseWeaponData);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public struct LogPlayerUseWeaponOptions
{
	public LogPlayerUseWeaponData? UseWeaponData { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LogPlayerUseWeaponOptionsInternal : ISettable<LogPlayerUseWeaponOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UseWeaponData;

	public LogPlayerUseWeaponData? UseWeaponData
	{
		set
		{
			Helper.Set<LogPlayerUseWeaponData, LogPlayerUseWeaponDataInternal>(ref value, ref m_UseWeaponData);
		}
	}

	public void Set(ref LogPlayerUseWeaponOptions other)
	{
		m_ApiVersion = 2;
		UseWeaponData = other.UseWeaponData;
	}

	public void Set(ref LogPlayerUseWeaponOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			UseWeaponData = other.Value.UseWeaponData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UseWeaponData);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct OnClientActionRequiredCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientAction ClientAction { get; set; }

	public AntiCheatCommonClientActionReason ActionReasonCode { get; set; }

	public Utf8String ActionReasonDetailsString { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnClientActionRequiredCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		ClientHandle = other.ClientHandle;
		ClientAction = other.ClientAction;
		ActionReasonCode = other.ActionReasonCode;
		ActionReasonDetailsString = other.ActionReasonDetailsString;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnClientActionRequiredCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnClientActionRequiredCallbackInfo>, ISettable<OnClientActionRequiredCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientAction m_ClientAction;

	private AntiCheatCommonClientActionReason m_ActionReasonCode;

	private IntPtr m_ActionReasonDetailsString;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public IntPtr ClientHandle
	{
		get
		{
			return m_ClientHandle;
		}
		set
		{
			m_ClientHandle = value;
		}
	}

	public AntiCheatCommonClientAction ClientAction
	{
		get
		{
			return m_ClientAction;
		}
		set
		{
			m_ClientAction = value;
		}
	}

	public AntiCheatCommonClientActionReason ActionReasonCode
	{
		get
		{
			return m_ActionReasonCode;
		}
		set
		{
			m_ActionReasonCode = value;
		}
	}

	public Utf8String ActionReasonDetailsString
	{
		get
		{
			Helper.Get(m_ActionReasonDetailsString, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ActionReasonDetailsString);
		}
	}

	public void Set(ref OnClientActionRequiredCallbackInfo other)
	{
		ClientData = other.ClientData;
		ClientHandle = other.ClientHandle;
		ClientAction = other.ClientAction;
		ActionReasonCode = other.ActionReasonCode;
		ActionReasonDetailsString = other.ActionReasonDetailsString;
	}

	public void Set(ref OnClientActionRequiredCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			ClientHandle = other.Value.ClientHandle;
			ClientAction = other.Value.ClientAction;
			ActionReasonCode = other.Value.ActionReasonCode;
			ActionReasonDetailsString = other.Value.ActionReasonDetailsString;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_ActionReasonDetailsString);
	}

	public void Get(out OnClientActionRequiredCallbackInfo output)
	{
		output = default(OnClientActionRequiredCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct OnClientAuthStatusChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientAuthStatus ClientAuthStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnClientAuthStatusChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		ClientHandle = other.ClientHandle;
		ClientAuthStatus = other.ClientAuthStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnClientAuthStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnClientAuthStatusChangedCallbackInfo>, ISettable<OnClientAuthStatusChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientAuthStatus m_ClientAuthStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public IntPtr ClientHandle
	{
		get
		{
			return m_ClientHandle;
		}
		set
		{
			m_ClientHandle = value;
		}
	}

	public AntiCheatCommonClientAuthStatus ClientAuthStatus
	{
		get
		{
			return m_ClientAuthStatus;
		}
		set
		{
			m_ClientAuthStatus = value;
		}
	}

	public void Set(ref OnClientAuthStatusChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
		ClientHandle = other.ClientHandle;
		ClientAuthStatus = other.ClientAuthStatus;
	}

	public void Set(ref OnClientAuthStatusChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			ClientHandle = other.Value.ClientHandle;
			ClientAuthStatus = other.Value.ClientAuthStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ClientHandle);
	}

	public void Get(out OnClientAuthStatusChangedCallbackInfo output)
	{
		output = default(OnClientAuthStatusChangedCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct OnMessageToClientCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr ClientHandle { get; set; }

	public ArraySegment<byte> MessageData { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnMessageToClientCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		ClientHandle = other.ClientHandle;
		MessageData = other.MessageData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnMessageToClientCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnMessageToClientCallbackInfo>, ISettable<OnMessageToClientCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_ClientHandle;

	private IntPtr m_MessageData;

	private uint m_MessageDataSizeBytes;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public IntPtr ClientHandle
	{
		get
		{
			return m_ClientHandle;
		}
		set
		{
			m_ClientHandle = value;
		}
	}

	public ArraySegment<byte> MessageData
	{
		get
		{
			Helper.Get(m_MessageData, out var to, m_MessageDataSizeBytes);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_MessageData, out m_MessageDataSizeBytes);
		}
	}

	public void Set(ref OnMessageToClientCallbackInfo other)
	{
		ClientData = other.ClientData;
		ClientHandle = other.ClientHandle;
		MessageData = other.MessageData;
	}

	public void Set(ref OnMessageToClientCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			ClientHandle = other.Value.ClientHandle;
			MessageData = other.Value.MessageData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ClientHandle);
		Helper.Dispose(ref m_MessageData);
	}

	public void Get(out OnMessageToClientCallbackInfo output)
	{
		output = default(OnMessageToClientCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public struct Quat
{
	public float w { get; set; }

	public float x { get; set; }

	public float y { get; set; }

	public float z { get; set; }

	internal void Set(ref QuatInternal other)
	{
		w = other.w;
		x = other.x;
		y = other.y;
		z = other.z;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QuatInternal : IGettable<Quat>, ISettable<Quat>, IDisposable
{
	private float m_w;

	private float m_x;

	private float m_y;

	private float m_z;

	public float w
	{
		get
		{
			return m_w;
		}
		set
		{
			m_w = value;
		}
	}

	public float x
	{
		get
		{
			return m_x;
		}
		set
		{
			m_x = value;
		}
	}

	public float y
	{
		get
		{
			return m_y;
		}
		set
		{
			m_y = value;
		}
	}

	public float z
	{
		get
		{
			return m_z;
		}
		set
		{
			m_z = value;
		}
	}

	public void Set(ref Quat other)
	{
		w = other.w;
		x = other.x;
		y = other.y;
		z = other.z;
	}

	public void Set(ref Quat? other)
	{
		if (other.HasValue)
		{
			w = other.Value.w;
			x = other.Value.x;
			y = other.Value.y;
			z = other.Value.z;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out Quat output)
	{
		output = default(Quat);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterEventOptions
{
	public uint EventId { get; set; }

	public Utf8String EventName { get; set; }

	public AntiCheatCommonEventType EventType { get; set; }

	public RegisterEventParamDef[] ParamDefs { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterEventOptionsInternal : ISettable<RegisterEventOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_EventId;

	private IntPtr m_EventName;

	private AntiCheatCommonEventType m_EventType;

	private uint m_ParamDefsCount;

	private IntPtr m_ParamDefs;

	public uint EventId
	{
		set
		{
			m_EventId = value;
		}
	}

	public Utf8String EventName
	{
		set
		{
			Helper.Set(value, ref m_EventName);
		}
	}

	public AntiCheatCommonEventType EventType
	{
		set
		{
			m_EventType = value;
		}
	}

	public RegisterEventParamDef[] ParamDefs
	{
		set
		{
			Helper.Set<RegisterEventParamDef, RegisterEventParamDefInternal>(ref value, ref m_ParamDefs, out m_ParamDefsCount);
		}
	}

	public void Set(ref RegisterEventOptions other)
	{
		m_ApiVersion = 1;
		EventId = other.EventId;
		EventName = other.EventName;
		EventType = other.EventType;
		ParamDefs = other.ParamDefs;
	}

	public void Set(ref RegisterEventOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			EventId = other.Value.EventId;
			EventName = other.Value.EventName;
			EventType = other.Value.EventType;
			ParamDefs = other.Value.ParamDefs;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_EventName);
		Helper.Dispose(ref m_ParamDefs);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterEventParamDef
{
	public Utf8String ParamName { get; set; }

	public AntiCheatCommonEventParamType ParamType { get; set; }

	internal void Set(ref RegisterEventParamDefInternal other)
	{
		ParamName = other.ParamName;
		ParamType = other.ParamType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterEventParamDefInternal : IGettable<RegisterEventParamDef>, ISettable<RegisterEventParamDef>, IDisposable
{
	private IntPtr m_ParamName;

	private AntiCheatCommonEventParamType m_ParamType;

	public Utf8String ParamName
	{
		get
		{
			Helper.Get(m_ParamName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParamName);
		}
	}

	public AntiCheatCommonEventParamType ParamType
	{
		get
		{
			return m_ParamType;
		}
		set
		{
			m_ParamType = value;
		}
	}

	public void Set(ref RegisterEventParamDef other)
	{
		ParamName = other.ParamName;
		ParamType = other.ParamType;
	}

	public void Set(ref RegisterEventParamDef? other)
	{
		if (other.HasValue)
		{
			ParamName = other.Value.ParamName;
			ParamType = other.Value.ParamType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ParamName);
	}

	public void Get(out RegisterEventParamDef output)
	{
		output = default(RegisterEventParamDef);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices.AntiCheatCommon;

public struct SetClientDetailsOptions
{
	public IntPtr ClientHandle { get; set; }

	public AntiCheatCommonClientFlags ClientFlags { get; set; }

	public AntiCheatCommonClientInput ClientInputMethod { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetClientDetailsOptionsInternal : ISettable<SetClientDetailsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_ClientHandle;

	private AntiCheatCommonClientFlags m_ClientFlags;

	private AntiCheatCommonClientInput m_ClientInputMethod;

	public IntPtr ClientHandle
	{
		set
		{
			m_ClientHandle = value;
		}
	}

	public AntiCheatCommonClientFlags ClientFlags
	{
		set
		{
			m_ClientFlags = value;
		}
	}

	public AntiCheatCommonClientInput ClientInputMethod
	{
		set
		{
			m_ClientInputMethod = value;
		}
	}

	public void Set(ref SetClientDetailsOptions other)
	{
		m_ApiVersion = 1;
		ClientHandle = other.ClientHandle;
		ClientFlags = other.ClientFlags;
		ClientInputMethod = other.ClientInputMethod;
	}

	public void Set(ref SetClientDetailsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ClientHandle = other.Value.ClientHandle;
			ClientFlags = other.Value.ClientFlags;
			ClientInputMethod = other.Value.ClientInputMethod;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientHandle);
	}
}


using Epic.OnlineServices;

public struct SetGameSessionIdOptions
{
	public Utf8String GameSessionId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetGameSessionIdOptionsInternal : ISettable<SetGameSessionIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_GameSessionId;

	public Utf8String GameSessionId
	{
		set
		{
			Helper.Set(value, ref m_GameSessionId);
		}
	}

	public void Set(ref SetGameSessionIdOptions other)
	{
		m_ApiVersion = 1;
		GameSessionId = other.GameSessionId;
	}

	public void Set(ref SetGameSessionIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			GameSessionId = other.Value.GameSessionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_GameSessionId);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public struct Vec3f
{
	public float x { get; set; }

	public float y { get; set; }

	public float z { get; set; }

	internal void Set(ref Vec3fInternal other)
	{
		x = other.x;
		y = other.y;
		z = other.z;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct Vec3fInternal : IGettable<Vec3f>, ISettable<Vec3f>, IDisposable
{
	private float m_x;

	private float m_y;

	private float m_z;

	public float x
	{
		get
		{
			return m_x;
		}
		set
		{
			m_x = value;
		}
	}

	public float y
	{
		get
		{
			return m_y;
		}
		set
		{
			m_y = value;
		}
	}

	public float z
	{
		get
		{
			return m_z;
		}
		set
		{
			m_z = value;
		}
	}

	public void Set(ref Vec3f other)
	{
		x = other.x;
		y = other.y;
		z = other.z;
	}

	public void Set(ref Vec3f? other)
	{
		if (other.HasValue)
		{
			x = other.Value.x;
			y = other.Value.y;
			z = other.Value.z;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out Vec3f output)
	{
		output = default(Vec3f);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct AddExternalIntegrityCatalogOptions
{
	public Utf8String PathToBinFile { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddExternalIntegrityCatalogOptionsInternal : ISettable<AddExternalIntegrityCatalogOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PathToBinFile;

	public Utf8String PathToBinFile
	{
		set
		{
			Helper.Set(value, ref m_PathToBinFile);
		}
	}

	public void Set(ref AddExternalIntegrityCatalogOptions other)
	{
		m_ApiVersion = 1;
		PathToBinFile = other.PathToBinFile;
	}

	public void Set(ref AddExternalIntegrityCatalogOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PathToBinFile = other.Value.PathToBinFile;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PathToBinFile);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyClientIntegrityViolatedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyClientIntegrityViolatedOptionsInternal : ISettable<AddNotifyClientIntegrityViolatedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyClientIntegrityViolatedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyClientIntegrityViolatedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMessageToPeerOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyMessageToPeerOptionsInternal : ISettable<AddNotifyMessageToPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMessageToPeerOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyMessageToPeerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMessageToServerOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyMessageToServerOptionsInternal : ISettable<AddNotifyMessageToServerOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMessageToServerOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyMessageToServerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyPeerActionRequiredOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPeerActionRequiredOptionsInternal : ISettable<AddNotifyPeerActionRequiredOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyPeerActionRequiredOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyPeerActionRequiredOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyPeerAuthStatusChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyPeerAuthStatusChangedOptionsInternal : ISettable<AddNotifyPeerAuthStatusChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyPeerAuthStatusChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyPeerAuthStatusChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;

public sealed class AntiCheatClientInterface : Handle
{
	private static byte[] PollStatusStaticBuffer = new byte[256];

	public const int AddexternalintegritycatalogApiLatest = 1;

	public const int AddnotifyclientintegrityviolatedApiLatest = 1;

	public const int AddnotifymessagetopeerApiLatest = 1;

	public const int AddnotifymessagetoserverApiLatest = 1;

	public const int AddnotifypeeractionrequiredApiLatest = 1;

	public const int AddnotifypeerauthstatuschangedApiLatest = 1;

	public const int BeginsessionApiLatest = 3;

	public const int EndsessionApiLatest = 1;

	public const int GetprotectmessageoutputlengthApiLatest = 1;

	public const int OnmessagetopeercallbackMaxMessageSize = 512;

	public const int OnmessagetoservercallbackMaxMessageSize = 512;

	public IntPtr PeerSelf = (IntPtr)(-1);

	public const int PollstatusApiLatest = 1;

	public const int ProtectmessageApiLatest = 1;

	public const int ReceivemessagefrompeerApiLatest = 1;

	public const int ReceivemessagefromserverApiLatest = 1;

	public const int RegisterpeerApiLatest = 3;

	public const int RegisterpeerMaxAuthenticationtimeout = 120;

	public const int RegisterpeerMinAuthenticationtimeout = 40;

	public const int UnprotectmessageApiLatest = 1;

	public const int UnregisterpeerApiLatest = 1;

	public AntiCheatClientInterface()
	{
	}

	public AntiCheatClientInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AddExternalIntegrityCatalog(ref AddExternalIntegrityCatalogOptions options)
	{
		AddExternalIntegrityCatalogOptionsInternal options2 = default(AddExternalIntegrityCatalogOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_AddExternalIntegrityCatalog(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ulong AddNotifyClientIntegrityViolated(ref AddNotifyClientIntegrityViolatedOptions options, object clientData, OnClientIntegrityViolatedCallback notificationFn)
	{
		AddNotifyClientIntegrityViolatedOptionsInternal options2 = default(AddNotifyClientIntegrityViolatedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnClientIntegrityViolatedCallbackInternal onClientIntegrityViolatedCallbackInternal = OnClientIntegrityViolatedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onClientIntegrityViolatedCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyClientIntegrityViolated(base.InnerHandle, ref options2, clientDataAddress, onClientIntegrityViolatedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyMessageToPeer(ref AddNotifyMessageToPeerOptions options, object clientData, OnMessageToPeerCallback notificationFn)
	{
		AddNotifyMessageToPeerOptionsInternal options2 = default(AddNotifyMessageToPeerOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnMessageToPeerCallbackInternal onMessageToPeerCallbackInternal = OnMessageToPeerCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onMessageToPeerCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyMessageToPeer(base.InnerHandle, ref options2, clientDataAddress, onMessageToPeerCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyMessageToServer(ref AddNotifyMessageToServerOptions options, object clientData, OnMessageToServerCallback notificationFn)
	{
		AddNotifyMessageToServerOptionsInternal options2 = default(AddNotifyMessageToServerOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnMessageToServerCallbackInternal onMessageToServerCallbackInternal = OnMessageToServerCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onMessageToServerCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyMessageToServer(base.InnerHandle, ref options2, clientDataAddress, onMessageToServerCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyPeerActionRequired(ref AddNotifyPeerActionRequiredOptions options, object clientData, OnPeerActionRequiredCallback notificationFn)
	{
		AddNotifyPeerActionRequiredOptionsInternal options2 = default(AddNotifyPeerActionRequiredOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPeerActionRequiredCallbackInternal onPeerActionRequiredCallbackInternal = OnPeerActionRequiredCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onPeerActionRequiredCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyPeerActionRequired(base.InnerHandle, ref options2, clientDataAddress, onPeerActionRequiredCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyPeerAuthStatusChanged(ref AddNotifyPeerAuthStatusChangedOptions options, object clientData, OnPeerAuthStatusChangedCallback notificationFn)
	{
		AddNotifyPeerAuthStatusChangedOptionsInternal options2 = default(AddNotifyPeerAuthStatusChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnPeerAuthStatusChangedCallbackInternal onPeerAuthStatusChangedCallbackInternal = OnPeerAuthStatusChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onPeerAuthStatusChangedCallbackInternal);
		ulong num = Bindings.EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(base.InnerHandle, ref options2, clientDataAddress, onPeerAuthStatusChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result BeginSession(ref BeginSessionOptions options)
	{
		BeginSessionOptionsInternal options2 = default(BeginSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_BeginSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result EndSession(ref EndSessionOptions options)
	{
		EndSessionOptionsInternal options2 = default(EndSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_EndSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetProtectMessageOutputLength(ref GetProtectMessageOutputLengthOptions options, out uint outBufferSizeBytes)
	{
		GetProtectMessageOutputLengthOptionsInternal options2 = default(GetProtectMessageOutputLengthOptionsInternal);
		options2.Set(ref options);
		outBufferSizeBytes = Helper.GetDefault<uint>();
		Result result = Bindings.EOS_AntiCheatClient_GetProtectMessageOutputLength(base.InnerHandle, ref options2, ref outBufferSizeBytes);
		Helper.Dispose(ref options2);
		return result;
	}

	public unsafe Result PollStatus(ref PollStatusOptions options, out AntiCheatClientViolationType outViolationType, out Utf8String outMessage)
	{
		outMessage = Utf8String.EmptyString;
		PollStatusOptionsInternal disposable = default(PollStatusOptionsInternal);
		disposable.Set(ref options);
		outViolationType = Helper.GetDefault<AntiCheatClientViolationType>();
		_ = options.OutMessageLength;
		Result num;
		fixed (byte* pollStatusStaticBuffer = PollStatusStaticBuffer)
		{
			num = Bindings.EOS_AntiCheatClient_PollStatus(outMessage: new IntPtr(pollStatusStaticBuffer), handle: base.InnerHandle, options: ref disposable, outViolationType: ref outViolationType);
			if (num == Result.Success)
			{
				outMessage = new Utf8String(PollStatusStaticBuffer);
			}
		}
		Helper.Dispose(ref disposable);
		return num;
	}

	public unsafe Result ProtectMessage(ref ProtectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			ProtectMessageOptionsInternal options2 = default(ProtectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			outBytesWritten = 0u;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatClient_ProtectMessage(base.InnerHandle, ref options2, outBuffer2, ref outBytesWritten);
			}
		}
		return result;
	}

	public Result ReceiveMessageFromPeer(ref ReceiveMessageFromPeerOptions options)
	{
		ReceiveMessageFromPeerOptionsInternal options2 = default(ReceiveMessageFromPeerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_ReceiveMessageFromPeer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result ReceiveMessageFromServer(ref ReceiveMessageFromServerOptions options)
	{
		ReceiveMessageFromServerOptionsInternal options2 = default(ReceiveMessageFromServerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_ReceiveMessageFromServer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result RegisterPeer(ref RegisterPeerOptions options)
	{
		RegisterPeerOptionsInternal options2 = default(RegisterPeerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_RegisterPeer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyClientIntegrityViolated(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyMessageToPeer(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyMessageToPeer(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyMessageToServer(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyMessageToServer(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerActionRequired(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyPeerAuthStatusChanged(ulong notificationId)
	{
		Bindings.EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public unsafe Result UnprotectMessage(ref UnprotectMessageOptions options, ArraySegment<byte> outBuffer, out uint outBytesWritten)
	{
		Result result;
		fixed (byte* array = options.Data.Array)
		{
			IntPtr data = IntPtr.Add((IntPtr)array, options.Data.Offset);
			UnprotectMessageOptionsInternal options2 = default(UnprotectMessageOptionsInternal);
			options2.m_ApiVersion = 1;
			options2.m_Data = data;
			options2.m_DataLengthBytes = (uint)options.Data.Count;
			options2.m_OutBufferSizeBytes = options.OutBufferSizeBytes;
			outBytesWritten = 0u;
			fixed (byte* array2 = outBuffer.Array)
			{
				IntPtr outBuffer2 = IntPtr.Add((IntPtr)array2, outBuffer.Offset);
				result = Bindings.EOS_AntiCheatClient_UnprotectMessage(base.InnerHandle, ref options2, outBuffer2, ref outBytesWritten);
			}
		}
		return result;
	}

	public Result UnregisterPeer(ref UnregisterPeerOptions options)
	{
		UnregisterPeerOptionsInternal options2 = default(UnregisterPeerOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_AntiCheatClient_UnregisterPeer(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnClientIntegrityViolatedCallbackInternal))]
	internal static void OnClientIntegrityViolatedCallbackInternalImplementation(ref OnClientIntegrityViolatedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientIntegrityViolatedCallbackInfoInternal, OnClientIntegrityViolatedCallback, OnClientIntegrityViolatedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnMessageToPeerCallbackInternal))]
	internal static void OnMessageToPeerCallbackInternalImplementation(ref OnMessageToClientCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnMessageToClientCallbackInfoInternal, OnMessageToPeerCallback, OnMessageToClientCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnMessageToServerCallbackInternal))]
	internal static void OnMessageToServerCallbackInternalImplementation(ref OnMessageToServerCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnMessageToServerCallbackInfoInternal, OnMessageToServerCallback, OnMessageToServerCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerActionRequiredCallbackInternal))]
	internal static void OnPeerActionRequiredCallbackInternalImplementation(ref OnClientActionRequiredCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientActionRequiredCallbackInfoInternal, OnPeerActionRequiredCallback, OnClientActionRequiredCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnPeerAuthStatusChangedCallbackInternal))]
	internal static void OnPeerAuthStatusChangedCallbackInternalImplementation(ref OnClientAuthStatusChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnClientAuthStatusChangedCallbackInfoInternal, OnPeerAuthStatusChangedCallback, OnClientAuthStatusChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum AntiCheatClientMode
{
	Invalid,
	ClientServer,
	PeerToPeer
}


public enum AntiCheatClientViolationType
{
	Invalid,
	IntegrityCatalogNotFound,
	IntegrityCatalogError,
	IntegrityCatalogCertificateRevoked,
	IntegrityCatalogMissingMainExecutable,
	GameFileMismatch,
	RequiredGameFileNotFound,
	UnknownGameFileForbidden,
	SystemFileUntrusted,
	ForbiddenModuleLoaded,
	CorruptedMemory,
	ForbiddenToolDetected,
	InternalAntiCheatViolation,
	CorruptedNetworkMessageFlow,
	VirtualMachineNotAllowed,
	ForbiddenSystemConfiguration
}


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

public struct BeginSessionOptions
{
	public ProductUserId LocalUserId { get; set; }

	public AntiCheatClientMode Mode { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BeginSessionOptionsInternal : ISettable<BeginSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private AntiCheatClientMode m_Mode;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public AntiCheatClientMode Mode
	{
		set
		{
			m_Mode = value;
		}
	}

	public void Set(ref BeginSessionOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		Mode = other.Mode;
	}

	public void Set(ref BeginSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			Mode = other.Value.Mode;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct EndSessionOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EndSessionOptionsInternal : ISettable<EndSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref EndSessionOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref EndSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public struct GetProtectMessageOutputLengthOptions
{
	public uint DataLengthBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetProtectMessageOutputLengthOptionsInternal : ISettable<GetProtectMessageOutputLengthOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DataLengthBytes;

	public uint DataLengthBytes
	{
		set
		{
			m_DataLengthBytes = value;
		}
	}

	public void Set(ref GetProtectMessageOutputLengthOptions other)
	{
		m_ApiVersion = 1;
		DataLengthBytes = other.DataLengthBytes;
	}

	public void Set(ref GetProtectMessageOutputLengthOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DataLengthBytes = other.Value.DataLengthBytes;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.AntiCheatClient;

public delegate void OnClientIntegrityViolatedCallback(ref OnClientIntegrityViolatedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatClient;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnClientIntegrityViolatedCallbackInternal(ref OnClientIntegrityViolatedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

public struct OnClientIntegrityViolatedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public AntiCheatClientViolationType ViolationType { get; set; }

	public Utf8String ViolationMessage { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnClientIntegrityViolatedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		ViolationType = other.ViolationType;
		ViolationMessage = other.ViolationMessage;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnClientIntegrityViolatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnClientIntegrityViolatedCallbackInfo>, ISettable<OnClientIntegrityViolatedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private AntiCheatClientViolationType m_ViolationType;

	private IntPtr m_ViolationMessage;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public AntiCheatClientViolationType ViolationType
	{
		get
		{
			return m_ViolationType;
		}
		set
		{
			m_ViolationType = value;
		}
	}

	public Utf8String ViolationMessage
	{
		get
		{
			Helper.Get(m_ViolationMessage, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ViolationMessage);
		}
	}

	public void Set(ref OnClientIntegrityViolatedCallbackInfo other)
	{
		ClientData = other.ClientData;
		ViolationType = other.ViolationType;
		ViolationMessage = other.ViolationMessage;
	}

	public void Set(ref OnClientIntegrityViolatedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			ViolationType = other.Value.ViolationType;
			ViolationMessage = other.Value.ViolationMessage;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ViolationMessage);
	}

	public void Get(out OnClientIntegrityViolatedCallbackInfo output)
	{
		output = default(OnClientIntegrityViolatedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnMessageToPeerCallback(ref OnMessageToClientCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMessageToPeerCallbackInternal(ref OnMessageToClientCallbackInfoInternal data);


using Epic.OnlineServices.AntiCheatClient;

public delegate void OnMessageToServerCallback(ref OnMessageToServerCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatClient;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMessageToServerCallbackInternal(ref OnMessageToServerCallbackInfoInternal data);


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

public struct OnMessageToServerCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ArraySegment<byte> MessageData { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnMessageToServerCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		MessageData = other.MessageData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnMessageToServerCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnMessageToServerCallbackInfo>, ISettable<OnMessageToServerCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_MessageData;

	private uint m_MessageDataSizeBytes;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ArraySegment<byte> MessageData
	{
		get
		{
			Helper.Get(m_MessageData, out var to, m_MessageDataSizeBytes);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_MessageData, out m_MessageDataSizeBytes);
		}
	}

	public void Set(ref OnMessageToServerCallbackInfo other)
	{
		ClientData = other.ClientData;
		MessageData = other.MessageData;
	}

	public void Set(ref OnMessageToServerCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			MessageData = other.Value.MessageData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_MessageData);
	}

	public void Get(out OnMessageToServerCallbackInfo output)
	{
		output = default(OnMessageToServerCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnPeerActionRequiredCallback(ref OnClientActionRequiredCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerActionRequiredCallbackInternal(ref OnClientActionRequiredCallbackInfoInternal data);


using Epic.OnlineServices.AntiCheatCommon;

public delegate void OnPeerAuthStatusChangedCallback(ref OnClientAuthStatusChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.AntiCheatCommon;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnPeerAuthStatusChangedCallbackInternal(ref OnClientAuthStatusChangedCallbackInfoInternal data);


public struct PollStatusOptions
{
	public uint OutMessageLength { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PollStatusOptionsInternal : ISettable<PollStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_OutMessageLength;

	public uint OutMessageLength
	{
		set
		{
			m_OutMessageLength = value;
		}
	}

	public void Set(ref PollStatusOptions other)
	{
		m_ApiVersion = 1;
		OutMessageLength = other.OutMessageLength;
	}

	public void Set(ref PollStatusOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			OutMessageLength = other.Value.OutMessageLength;
		}
	}

	public void Dispose()
	{
	}
}


using System;

public struct ProtectMessageOptions
{
	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ProtectMessageOptionsInternal
{
	public int m_ApiVersion;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct ReceiveMessageFromPeerOptions
{
	public IntPtr PeerHandle { get; set; }

	public ArraySegment<byte> Data { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReceiveMessageFromPeerOptionsInternal : ISettable<ReceiveMessageFromPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PeerHandle;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public IntPtr PeerHandle
	{
		set
		{
			m_PeerHandle = value;
		}
	}

	public ArraySegment<byte> Data
	{
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public void Set(ref ReceiveMessageFromPeerOptions other)
	{
		m_ApiVersion = 1;
		PeerHandle = other.PeerHandle;
		Data = other.Data;
	}

	public void Set(ref ReceiveMessageFromPeerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PeerHandle = other.Value.PeerHandle;
			Data = other.Value.Data;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PeerHandle);
		Helper.Dispose(ref m_Data);
	}
}


using System;

public struct ReceiveMessageFromServerOptions
{
	public ArraySegment<byte> Data { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReceiveMessageFromServerOptionsInternal : ISettable<ReceiveMessageFromServerOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public ArraySegment<byte> Data
	{
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public void Set(ref ReceiveMessageFromServerOptions other)
	{
		m_ApiVersion = 1;
		Data = other.Data;
	}

	public void Set(ref ReceiveMessageFromServerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Data = other.Value.Data;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Data);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatCommon;

public struct RegisterPeerOptions
{
	public IntPtr PeerHandle { get; set; }

	public AntiCheatCommonClientType ClientType { get; set; }

	public AntiCheatCommonClientPlatform ClientPlatform { get; set; }

	public uint AuthenticationTimeout { get; set; }

	internal Utf8String AccountId_DEPRECATED { get; set; }

	public Utf8String IpAddress { get; set; }

	public ProductUserId PeerProductUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterPeerOptionsInternal : ISettable<RegisterPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PeerHandle;

	private AntiCheatCommonClientType m_ClientType;

	private AntiCheatCommonClientPlatform m_ClientPlatform;

	private uint m_AuthenticationTimeout;

	private IntPtr m_AccountId_DEPRECATED;

	private IntPtr m_IpAddress;

	private IntPtr m_PeerProductUserId;

	public IntPtr PeerHandle
	{
		set
		{
			m_PeerHandle = value;
		}
	}

	public AntiCheatCommonClientType ClientType
	{
		set
		{
			m_ClientType = value;
		}
	}

	public AntiCheatCommonClientPlatform ClientPlatform
	{
		set
		{
			m_ClientPlatform = value;
		}
	}

	public uint AuthenticationTimeout
	{
		set
		{
			m_AuthenticationTimeout = value;
		}
	}

	public Utf8String AccountId_DEPRECATED
	{
		set
		{
			Helper.Set(value, ref m_AccountId_DEPRECATED);
		}
	}

	public Utf8String IpAddress
	{
		set
		{
			Helper.Set(value, ref m_IpAddress);
		}
	}

	public ProductUserId PeerProductUserId
	{
		set
		{
			Helper.Set(value, ref m_PeerProductUserId);
		}
	}

	public void Set(ref RegisterPeerOptions other)
	{
		m_ApiVersion = 3;
		PeerHandle = other.PeerHandle;
		ClientType = other.ClientType;
		ClientPlatform = other.ClientPlatform;
		AuthenticationTimeout = other.AuthenticationTimeout;
		AccountId_DEPRECATED = other.AccountId_DEPRECATED;
		IpAddress = other.IpAddress;
		PeerProductUserId = other.PeerProductUserId;
	}

	public void Set(ref RegisterPeerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			PeerHandle = other.Value.PeerHandle;
			ClientType = other.Value.ClientType;
			ClientPlatform = other.Value.ClientPlatform;
			AuthenticationTimeout = other.Value.AuthenticationTimeout;
			AccountId_DEPRECATED = other.Value.AccountId_DEPRECATED;
			IpAddress = other.Value.IpAddress;
			PeerProductUserId = other.Value.PeerProductUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PeerHandle);
		Helper.Dispose(ref m_AccountId_DEPRECATED);
		Helper.Dispose(ref m_IpAddress);
		Helper.Dispose(ref m_PeerProductUserId);
	}
}


using System;

public struct UnprotectMessageOptions
{
	public ArraySegment<byte> Data { get; set; }

	public uint OutBufferSizeBytes { get; set; }
}


using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnprotectMessageOptionsInternal
{
	public int m_ApiVersion;

	public uint m_DataLengthBytes;

	public IntPtr m_Data;

	public uint m_OutBufferSizeBytes;
}


using System;

public struct UnregisterPeerOptions
{
	public IntPtr PeerHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.AntiCheatClient;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnregisterPeerOptionsInternal : ISettable<UnregisterPeerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PeerHandle;

	public IntPtr PeerHandle
	{
		set
		{
			m_PeerHandle = value;
		}
	}

	public void Set(ref UnregisterPeerOptions other)
	{
		m_ApiVersion = 1;
		PeerHandle = other.PeerHandle;
	}

	public void Set(ref UnregisterPeerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PeerHandle = other.Value.PeerHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PeerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public struct AndroidInitializeOptions
{
	public IntPtr AllocateMemoryFunction { get; set; }

	public IntPtr ReallocateMemoryFunction { get; set; }

	public IntPtr ReleaseMemoryFunction { get; set; }

	public Utf8String ProductName { get; set; }

	public Utf8String ProductVersion { get; set; }

	public IntPtr Reserved { get; set; }

	public AndroidInitializeOptionsSystemInitializeOptions? SystemInitializeOptions { get; set; }

	public InitializeThreadAffinity? OverrideThreadAffinity { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AndroidInitializeOptionsInternal : ISettable<AndroidInitializeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AllocateMemoryFunction;

	private IntPtr m_ReallocateMemoryFunction;

	private IntPtr m_ReleaseMemoryFunction;

	private IntPtr m_ProductName;

	private IntPtr m_ProductVersion;

	private IntPtr m_Reserved;

	private IntPtr m_SystemInitializeOptions;

	private IntPtr m_OverrideThreadAffinity;

	public IntPtr AllocateMemoryFunction
	{
		set
		{
			m_AllocateMemoryFunction = value;
		}
	}

	public IntPtr ReallocateMemoryFunction
	{
		set
		{
			m_ReallocateMemoryFunction = value;
		}
	}

	public IntPtr ReleaseMemoryFunction
	{
		set
		{
			m_ReleaseMemoryFunction = value;
		}
	}

	public Utf8String ProductName
	{
		set
		{
			Helper.Set(value, ref m_ProductName);
		}
	}

	public Utf8String ProductVersion
	{
		set
		{
			Helper.Set(value, ref m_ProductVersion);
		}
	}

	public IntPtr Reserved
	{
		set
		{
			m_Reserved = value;
		}
	}

	public AndroidInitializeOptionsSystemInitializeOptions? SystemInitializeOptions
	{
		set
		{
			Helper.Set<AndroidInitializeOptionsSystemInitializeOptions, AndroidInitializeOptionsSystemInitializeOptionsInternal>(ref value, ref m_SystemInitializeOptions);
		}
	}

	public InitializeThreadAffinity? OverrideThreadAffinity
	{
		set
		{
			Helper.Set<InitializeThreadAffinity, InitializeThreadAffinityInternal>(ref value, ref m_OverrideThreadAffinity);
		}
	}

	public void Set(ref AndroidInitializeOptions other)
	{
		m_ApiVersion = 4;
		AllocateMemoryFunction = other.AllocateMemoryFunction;
		ReallocateMemoryFunction = other.ReallocateMemoryFunction;
		ReleaseMemoryFunction = other.ReleaseMemoryFunction;
		ProductName = other.ProductName;
		ProductVersion = other.ProductVersion;
		m_Reserved = other.Reserved;
		if (m_Reserved == IntPtr.Zero)
		{
			Helper.Set(new int[2] { 1, 1 }, ref m_Reserved);
		}
		SystemInitializeOptions = other.SystemInitializeOptions;
		OverrideThreadAffinity = other.OverrideThreadAffinity;
	}

	public void Set(ref AndroidInitializeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			AllocateMemoryFunction = other.Value.AllocateMemoryFunction;
			ReallocateMemoryFunction = other.Value.ReallocateMemoryFunction;
			ReleaseMemoryFunction = other.Value.ReleaseMemoryFunction;
			ProductName = other.Value.ProductName;
			ProductVersion = other.Value.ProductVersion;
			m_Reserved = other.Value.Reserved;
			if (m_Reserved == IntPtr.Zero)
			{
				Helper.Set(new int[2] { 1, 1 }, ref m_Reserved);
			}
			SystemInitializeOptions = other.Value.SystemInitializeOptions;
			OverrideThreadAffinity = other.Value.OverrideThreadAffinity;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AllocateMemoryFunction);
		Helper.Dispose(ref m_ReallocateMemoryFunction);
		Helper.Dispose(ref m_ReleaseMemoryFunction);
		Helper.Dispose(ref m_ProductName);
		Helper.Dispose(ref m_ProductVersion);
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_SystemInitializeOptions);
		Helper.Dispose(ref m_OverrideThreadAffinity);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public struct AndroidInitializeOptionsSystemInitializeOptions
{
	public IntPtr Reserved { get; set; }

	public Utf8String OptionalInternalDirectory { get; set; }

	public Utf8String OptionalExternalDirectory { get; set; }

	internal void Set(ref AndroidInitializeOptionsSystemInitializeOptionsInternal other)
	{
		Reserved = other.Reserved;
		OptionalInternalDirectory = other.OptionalInternalDirectory;
		OptionalExternalDirectory = other.OptionalExternalDirectory;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AndroidInitializeOptionsSystemInitializeOptionsInternal : IGettable<AndroidInitializeOptionsSystemInitializeOptions>, ISettable<AndroidInitializeOptionsSystemInitializeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Reserved;

	private IntPtr m_OptionalInternalDirectory;

	private IntPtr m_OptionalExternalDirectory;

	public IntPtr Reserved
	{
		get
		{
			return m_Reserved;
		}
		set
		{
			m_Reserved = value;
		}
	}

	public Utf8String OptionalInternalDirectory
	{
		get
		{
			Helper.Get(m_OptionalInternalDirectory, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OptionalInternalDirectory);
		}
	}

	public Utf8String OptionalExternalDirectory
	{
		get
		{
			Helper.Get(m_OptionalExternalDirectory, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OptionalExternalDirectory);
		}
	}

	public void Set(ref AndroidInitializeOptionsSystemInitializeOptions other)
	{
		m_ApiVersion = 2;
		Reserved = other.Reserved;
		OptionalInternalDirectory = other.OptionalInternalDirectory;
		OptionalExternalDirectory = other.OptionalExternalDirectory;
	}

	public void Set(ref AndroidInitializeOptionsSystemInitializeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			m_Reserved = other.Value.Reserved;
			if (m_Reserved == IntPtr.Zero)
			{
				Helper.Set(new int[2] { 1, 1 }, ref m_Reserved);
			}
			OptionalInternalDirectory = other.Value.OptionalInternalDirectory;
			OptionalExternalDirectory = other.Value.OptionalExternalDirectory;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_OptionalInternalDirectory);
		Helper.Dispose(ref m_OptionalExternalDirectory);
	}

	public void Get(out AndroidInitializeOptionsSystemInitializeOptions output)
	{
		output = default(AndroidInitializeOptionsSystemInitializeOptions);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatServer;
using Epic.OnlineServices.Auth;
using Epic.OnlineServices.Connect;
using Epic.OnlineServices.CustomInvites;
using Epic.OnlineServices.Ecom;
using Epic.OnlineServices.Friends;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.KWS;
using Epic.OnlineServices.Leaderboards;
using Epic.OnlineServices.Lobby;
using Epic.OnlineServices.Metrics;
using Epic.OnlineServices.Mods;
using Epic.OnlineServices.P2P;
using Epic.OnlineServices.Platform;
using Epic.OnlineServices.PlayerDataStorage;
using Epic.OnlineServices.Presence;
using Epic.OnlineServices.ProgressionSnapshot;
using Epic.OnlineServices.Reports;
using Epic.OnlineServices.RTC;
using Epic.OnlineServices.RTCAdmin;
using Epic.OnlineServices.Sanctions;
using Epic.OnlineServices.Sessions;
using Epic.OnlineServices.Stats;
using Epic.OnlineServices.TitleStorage;
using Epic.OnlineServices.UI;
using Epic.OnlineServices.UserInfo;

public sealed class PlatformInterface : Handle
{
	public const int AndroidInitializeoptionssysteminitializeoptionsApiLatest = 2;

	public static readonly Utf8String CheckforlauncherandrestartEnvVar = "EOS_LAUNCHED_BY_EPIC";

	public const int ClientcredentialsClientidMaxLength = 64;

	public const int ClientcredentialsClientsecretMaxLength = 64;

	public const int CountrycodeMaxBufferLen = 5;

	public const int CountrycodeMaxLength = 4;

	public const int GetdesktopcrossplaystatusApiLatest = 1;

	public const int InitializeApiLatest = 4;

	public const int InitializeThreadaffinityApiLatest = 3;

	public const int InitializeoptionsProductnameMaxLength = 64;

	public const int InitializeoptionsProductversionMaxLength = 64;

	public const int LocalecodeMaxBufferLen = 10;

	public const int LocalecodeMaxLength = 9;

	public const int OptionsApiLatest = 14;

	public const int OptionsDeploymentidMaxLength = 64;

	public const int OptionsEncryptionkeyLength = 64;

	public const int OptionsProductidMaxLength = 64;

	public const int OptionsSandboxidMaxLength = 64;

	public const int RtcoptionsApiLatest = 2;

	public const int WindowsRtcoptionsplatformspecificoptionsApiLatest = 1;

	public static Result Initialize(ref AndroidInitializeOptions options)
	{
		AndroidInitializeOptionsInternal options2 = default(AndroidInitializeOptionsInternal);
		options2.Set(ref options);
		Result result = AndroidBindings.EOS_Initialize(ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public PlatformInterface()
	{
	}

	public PlatformInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CheckForLauncherAndRestart()
	{
		return Bindings.EOS_Platform_CheckForLauncherAndRestart(base.InnerHandle);
	}

	public static PlatformInterface Create(ref Epic.OnlineServices.Platform.Options options)
	{
		Epic.OnlineServices.Platform.OptionsInternal options2 = default(Epic.OnlineServices.Platform.OptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_Platform_Create(ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out PlatformInterface to);
		return to;
	}

	public AchievementsInterface GetAchievementsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAchievementsInterface(base.InnerHandle), out AchievementsInterface to);
		return to;
	}

	public Result GetActiveCountryCode(EpicAccountId localUserId, out Utf8String outBuffer)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		int inOutBufferLength = 5;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetActiveCountryCode(base.InnerHandle, to, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result GetActiveLocaleCode(EpicAccountId localUserId, out Utf8String outBuffer)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(localUserId, ref to);
		int inOutBufferLength = 10;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetActiveLocaleCode(base.InnerHandle, to, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public AntiCheatClientInterface GetAntiCheatClientInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAntiCheatClientInterface(base.InnerHandle), out AntiCheatClientInterface to);
		return to;
	}

	public AntiCheatServerInterface GetAntiCheatServerInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAntiCheatServerInterface(base.InnerHandle), out AntiCheatServerInterface to);
		return to;
	}

	public ApplicationStatus GetApplicationStatus()
	{
		return Bindings.EOS_Platform_GetApplicationStatus(base.InnerHandle);
	}

	public AuthInterface GetAuthInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetAuthInterface(base.InnerHandle), out AuthInterface to);
		return to;
	}

	public ConnectInterface GetConnectInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetConnectInterface(base.InnerHandle), out ConnectInterface to);
		return to;
	}

	public CustomInvitesInterface GetCustomInvitesInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetCustomInvitesInterface(base.InnerHandle), out CustomInvitesInterface to);
		return to;
	}

	public Result GetDesktopCrossplayStatus(ref GetDesktopCrossplayStatusOptions options, out DesktopCrossplayStatusInfo outDesktopCrossplayStatusInfo)
	{
		GetDesktopCrossplayStatusOptionsInternal options2 = default(GetDesktopCrossplayStatusOptionsInternal);
		options2.Set(ref options);
		DesktopCrossplayStatusInfoInternal outDesktopCrossplayStatusInfo2 = Helper.GetDefault<DesktopCrossplayStatusInfoInternal>();
		Result result = Bindings.EOS_Platform_GetDesktopCrossplayStatus(base.InnerHandle, ref options2, ref outDesktopCrossplayStatusInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<DesktopCrossplayStatusInfoInternal, DesktopCrossplayStatusInfo>(ref outDesktopCrossplayStatusInfo2, out outDesktopCrossplayStatusInfo);
		return result;
	}

	public EcomInterface GetEcomInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetEcomInterface(base.InnerHandle), out EcomInterface to);
		return to;
	}

	public FriendsInterface GetFriendsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetFriendsInterface(base.InnerHandle), out FriendsInterface to);
		return to;
	}

	public IntegratedPlatformInterface GetIntegratedPlatformInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetIntegratedPlatformInterface(base.InnerHandle), out IntegratedPlatformInterface to);
		return to;
	}

	public KWSInterface GetKWSInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetKWSInterface(base.InnerHandle), out KWSInterface to);
		return to;
	}

	public LeaderboardsInterface GetLeaderboardsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetLeaderboardsInterface(base.InnerHandle), out LeaderboardsInterface to);
		return to;
	}

	public LobbyInterface GetLobbyInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetLobbyInterface(base.InnerHandle), out LobbyInterface to);
		return to;
	}

	public MetricsInterface GetMetricsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetMetricsInterface(base.InnerHandle), out MetricsInterface to);
		return to;
	}

	public ModsInterface GetModsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetModsInterface(base.InnerHandle), out ModsInterface to);
		return to;
	}

	public NetworkStatus GetNetworkStatus()
	{
		return Bindings.EOS_Platform_GetNetworkStatus(base.InnerHandle);
	}

	public Result GetOverrideCountryCode(out Utf8String outBuffer)
	{
		int inOutBufferLength = 5;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetOverrideCountryCode(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result GetOverrideLocaleCode(out Utf8String outBuffer)
	{
		int inOutBufferLength = 10;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Platform_GetOverrideLocaleCode(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public P2PInterface GetP2PInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetP2PInterface(base.InnerHandle), out P2PInterface to);
		return to;
	}

	public PlayerDataStorageInterface GetPlayerDataStorageInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetPlayerDataStorageInterface(base.InnerHandle), out PlayerDataStorageInterface to);
		return to;
	}

	public PresenceInterface GetPresenceInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetPresenceInterface(base.InnerHandle), out PresenceInterface to);
		return to;
	}

	public ProgressionSnapshotInterface GetProgressionSnapshotInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetProgressionSnapshotInterface(base.InnerHandle), out ProgressionSnapshotInterface to);
		return to;
	}

	public RTCAdminInterface GetRTCAdminInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetRTCAdminInterface(base.InnerHandle), out RTCAdminInterface to);
		return to;
	}

	public RTCInterface GetRTCInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetRTCInterface(base.InnerHandle), out RTCInterface to);
		return to;
	}

	public ReportsInterface GetReportsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetReportsInterface(base.InnerHandle), out ReportsInterface to);
		return to;
	}

	public SanctionsInterface GetSanctionsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetSanctionsInterface(base.InnerHandle), out SanctionsInterface to);
		return to;
	}

	public SessionsInterface GetSessionsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetSessionsInterface(base.InnerHandle), out SessionsInterface to);
		return to;
	}

	public StatsInterface GetStatsInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetStatsInterface(base.InnerHandle), out StatsInterface to);
		return to;
	}

	public TitleStorageInterface GetTitleStorageInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetTitleStorageInterface(base.InnerHandle), out TitleStorageInterface to);
		return to;
	}

	public UIInterface GetUIInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetUIInterface(base.InnerHandle), out UIInterface to);
		return to;
	}

	public UserInfoInterface GetUserInfoInterface()
	{
		Helper.Get(Bindings.EOS_Platform_GetUserInfoInterface(base.InnerHandle), out UserInfoInterface to);
		return to;
	}

	public static Result Initialize(ref InitializeOptions options)
	{
		InitializeOptionsInternal options2 = default(InitializeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Initialize(ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_Platform_Release(base.InnerHandle);
	}

	public Result SetApplicationStatus(ApplicationStatus newStatus)
	{
		return Bindings.EOS_Platform_SetApplicationStatus(base.InnerHandle, newStatus);
	}

	public Result SetNetworkStatus(NetworkStatus newStatus)
	{
		return Bindings.EOS_Platform_SetNetworkStatus(base.InnerHandle, newStatus);
	}

	public Result SetOverrideCountryCode(Utf8String newCountryCode)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(newCountryCode, ref to);
		Result result = Bindings.EOS_Platform_SetOverrideCountryCode(base.InnerHandle, to);
		Helper.Dispose(ref to);
		return result;
	}

	public Result SetOverrideLocaleCode(Utf8String newLocaleCode)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(newLocaleCode, ref to);
		Result result = Bindings.EOS_Platform_SetOverrideLocaleCode(base.InnerHandle, to);
		Helper.Dispose(ref to);
		return result;
	}

	public static Result Shutdown()
	{
		return Bindings.EOS_Shutdown();
	}

	public void Tick()
	{
		Bindings.EOS_Platform_Tick(base.InnerHandle);
	}

	public static Utf8String ToString(ApplicationStatus applicationStatus)
	{
		Helper.Get(Bindings.EOS_EApplicationStatus_ToString(applicationStatus), out Utf8String to);
		return to;
	}

	public static Utf8String ToString(NetworkStatus networkStatus)
	{
		Helper.Get(Bindings.EOS_ENetworkStatus_ToString(networkStatus), out Utf8String to);
		return to;
	}

	public static PlatformInterface Create(ref WindowsOptions options)
	{
		WindowsOptionsInternal options2 = default(WindowsOptionsInternal);
		options2.Set(ref options);
		IntPtr from = WindowsBindings.EOS_Platform_Create(ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out PlatformInterface to);
		return to;
	}
}


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr AllocateMemoryFunc(UIntPtr sizeInBytes, UIntPtr alignment);


public enum ApplicationStatus
{
	BackgroundConstrained,
	BackgroundUnconstrained,
	BackgroundSuspended,
	Foreground
}


using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public struct ClientCredentials
{
	public Utf8String ClientId { get; set; }

	public Utf8String ClientSecret { get; set; }

	internal void Set(ref ClientCredentialsInternal other)
	{
		ClientId = other.ClientId;
		ClientSecret = other.ClientSecret;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ClientCredentialsInternal : IGettable<ClientCredentials>, ISettable<ClientCredentials>, IDisposable
{
	private IntPtr m_ClientId;

	private IntPtr m_ClientSecret;

	public Utf8String ClientId
	{
		get
		{
			Helper.Get(m_ClientId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientId);
		}
	}

	public Utf8String ClientSecret
	{
		get
		{
			Helper.Get(m_ClientSecret, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientSecret);
		}
	}

	public void Set(ref ClientCredentials other)
	{
		ClientId = other.ClientId;
		ClientSecret = other.ClientSecret;
	}

	public void Set(ref ClientCredentials? other)
	{
		if (other.HasValue)
		{
			ClientId = other.Value.ClientId;
			ClientSecret = other.Value.ClientSecret;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientId);
		Helper.Dispose(ref m_ClientSecret);
	}

	public void Get(out ClientCredentials output)
	{
		output = default(ClientCredentials);
		output.Set(ref this);
	}
}


public enum DesktopCrossplayStatus
{
	Ok,
	ApplicationNotBootstrapped,
	ServiceNotInstalled,
	ServiceStartFailed,
	ServiceNotRunning,
	OverlayDisabled,
	OverlayNotInstalled,
	OverlayTrustCheckFailed,
	OverlayLoadFailed
}


using Epic.OnlineServices.Platform;

public struct DesktopCrossplayStatusInfo
{
	public DesktopCrossplayStatus Status { get; set; }

	public int ServiceInitResult { get; set; }

	internal void Set(ref DesktopCrossplayStatusInfoInternal other)
	{
		Status = other.Status;
		ServiceInitResult = other.ServiceInitResult;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DesktopCrossplayStatusInfoInternal : IGettable<DesktopCrossplayStatusInfo>, ISettable<DesktopCrossplayStatusInfo>, IDisposable
{
	private DesktopCrossplayStatus m_Status;

	private int m_ServiceInitResult;

	public DesktopCrossplayStatus Status
	{
		get
		{
			return m_Status;
		}
		set
		{
			m_Status = value;
		}
	}

	public int ServiceInitResult
	{
		get
		{
			return m_ServiceInitResult;
		}
		set
		{
			m_ServiceInitResult = value;
		}
	}

	public void Set(ref DesktopCrossplayStatusInfo other)
	{
		Status = other.Status;
		ServiceInitResult = other.ServiceInitResult;
	}

	public void Set(ref DesktopCrossplayStatusInfo? other)
	{
		if (other.HasValue)
		{
			Status = other.Value.Status;
			ServiceInitResult = other.Value.ServiceInitResult;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out DesktopCrossplayStatusInfo output)
	{
		output = default(DesktopCrossplayStatusInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetDesktopCrossplayStatusOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetDesktopCrossplayStatusOptionsInternal : ISettable<GetDesktopCrossplayStatusOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetDesktopCrossplayStatusOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetDesktopCrossplayStatusOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public struct InitializeOptions
{
	public IntPtr AllocateMemoryFunction { get; set; }

	public IntPtr ReallocateMemoryFunction { get; set; }

	public IntPtr ReleaseMemoryFunction { get; set; }

	public Utf8String ProductName { get; set; }

	public Utf8String ProductVersion { get; set; }

	public IntPtr Reserved { get; set; }

	public IntPtr SystemInitializeOptions { get; set; }

	public InitializeThreadAffinity? OverrideThreadAffinity { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct InitializeOptionsInternal : ISettable<InitializeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AllocateMemoryFunction;

	private IntPtr m_ReallocateMemoryFunction;

	private IntPtr m_ReleaseMemoryFunction;

	private IntPtr m_ProductName;

	private IntPtr m_ProductVersion;

	private IntPtr m_Reserved;

	private IntPtr m_SystemInitializeOptions;

	private IntPtr m_OverrideThreadAffinity;

	public IntPtr AllocateMemoryFunction
	{
		set
		{
			m_AllocateMemoryFunction = value;
		}
	}

	public IntPtr ReallocateMemoryFunction
	{
		set
		{
			m_ReallocateMemoryFunction = value;
		}
	}

	public IntPtr ReleaseMemoryFunction
	{
		set
		{
			m_ReleaseMemoryFunction = value;
		}
	}

	public Utf8String ProductName
	{
		set
		{
			Helper.Set(value, ref m_ProductName);
		}
	}

	public Utf8String ProductVersion
	{
		set
		{
			Helper.Set(value, ref m_ProductVersion);
		}
	}

	public IntPtr Reserved
	{
		set
		{
			m_Reserved = value;
		}
	}

	public IntPtr SystemInitializeOptions
	{
		set
		{
			m_SystemInitializeOptions = value;
		}
	}

	public InitializeThreadAffinity? OverrideThreadAffinity
	{
		set
		{
			Helper.Set<InitializeThreadAffinity, InitializeThreadAffinityInternal>(ref value, ref m_OverrideThreadAffinity);
		}
	}

	public void Set(ref InitializeOptions other)
	{
		m_ApiVersion = 4;
		AllocateMemoryFunction = other.AllocateMemoryFunction;
		ReallocateMemoryFunction = other.ReallocateMemoryFunction;
		ReleaseMemoryFunction = other.ReleaseMemoryFunction;
		ProductName = other.ProductName;
		ProductVersion = other.ProductVersion;
		Reserved = other.Reserved;
		SystemInitializeOptions = other.SystemInitializeOptions;
		OverrideThreadAffinity = other.OverrideThreadAffinity;
	}

	public void Set(ref InitializeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			AllocateMemoryFunction = other.Value.AllocateMemoryFunction;
			ReallocateMemoryFunction = other.Value.ReallocateMemoryFunction;
			ReleaseMemoryFunction = other.Value.ReleaseMemoryFunction;
			ProductName = other.Value.ProductName;
			ProductVersion = other.Value.ProductVersion;
			m_Reserved = other.Value.Reserved;
			if (m_Reserved == IntPtr.Zero)
			{
				Helper.Set(new int[2] { 1, 1 }, ref m_Reserved);
			}
			SystemInitializeOptions = other.Value.SystemInitializeOptions;
			OverrideThreadAffinity = other.Value.OverrideThreadAffinity;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AllocateMemoryFunction);
		Helper.Dispose(ref m_ReallocateMemoryFunction);
		Helper.Dispose(ref m_ReleaseMemoryFunction);
		Helper.Dispose(ref m_ProductName);
		Helper.Dispose(ref m_ProductVersion);
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_SystemInitializeOptions);
		Helper.Dispose(ref m_OverrideThreadAffinity);
	}
}


using Epic.OnlineServices.Platform;

public struct InitializeThreadAffinity
{
	public ulong NetworkWork { get; set; }

	public ulong StorageIo { get; set; }

	public ulong WebSocketIo { get; set; }

	public ulong P2PIo { get; set; }

	public ulong HttpRequestIo { get; set; }

	public ulong RTCIo { get; set; }

	public ulong EmbeddedOverlayMainThread { get; set; }

	public ulong EmbeddedOverlayWorkerThreads { get; set; }

	internal void Set(ref InitializeThreadAffinityInternal other)
	{
		NetworkWork = other.NetworkWork;
		StorageIo = other.StorageIo;
		WebSocketIo = other.WebSocketIo;
		P2PIo = other.P2PIo;
		HttpRequestIo = other.HttpRequestIo;
		RTCIo = other.RTCIo;
		EmbeddedOverlayMainThread = other.EmbeddedOverlayMainThread;
		EmbeddedOverlayWorkerThreads = other.EmbeddedOverlayWorkerThreads;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct InitializeThreadAffinityInternal : IGettable<InitializeThreadAffinity>, ISettable<InitializeThreadAffinity>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_NetworkWork;

	private ulong m_StorageIo;

	private ulong m_WebSocketIo;

	private ulong m_P2PIo;

	private ulong m_HttpRequestIo;

	private ulong m_RTCIo;

	private ulong m_EmbeddedOverlayMainThread;

	private ulong m_EmbeddedOverlayWorkerThreads;

	public ulong NetworkWork
	{
		get
		{
			return m_NetworkWork;
		}
		set
		{
			m_NetworkWork = value;
		}
	}

	public ulong StorageIo
	{
		get
		{
			return m_StorageIo;
		}
		set
		{
			m_StorageIo = value;
		}
	}

	public ulong WebSocketIo
	{
		get
		{
			return m_WebSocketIo;
		}
		set
		{
			m_WebSocketIo = value;
		}
	}

	public ulong P2PIo
	{
		get
		{
			return m_P2PIo;
		}
		set
		{
			m_P2PIo = value;
		}
	}

	public ulong HttpRequestIo
	{
		get
		{
			return m_HttpRequestIo;
		}
		set
		{
			m_HttpRequestIo = value;
		}
	}

	public ulong RTCIo
	{
		get
		{
			return m_RTCIo;
		}
		set
		{
			m_RTCIo = value;
		}
	}

	public ulong EmbeddedOverlayMainThread
	{
		get
		{
			return m_EmbeddedOverlayMainThread;
		}
		set
		{
			m_EmbeddedOverlayMainThread = value;
		}
	}

	public ulong EmbeddedOverlayWorkerThreads
	{
		get
		{
			return m_EmbeddedOverlayWorkerThreads;
		}
		set
		{
			m_EmbeddedOverlayWorkerThreads = value;
		}
	}

	public void Set(ref InitializeThreadAffinity other)
	{
		m_ApiVersion = 3;
		NetworkWork = other.NetworkWork;
		StorageIo = other.StorageIo;
		WebSocketIo = other.WebSocketIo;
		P2PIo = other.P2PIo;
		HttpRequestIo = other.HttpRequestIo;
		RTCIo = other.RTCIo;
		EmbeddedOverlayMainThread = other.EmbeddedOverlayMainThread;
		EmbeddedOverlayWorkerThreads = other.EmbeddedOverlayWorkerThreads;
	}

	public void Set(ref InitializeThreadAffinity? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			NetworkWork = other.Value.NetworkWork;
			StorageIo = other.Value.StorageIo;
			WebSocketIo = other.Value.WebSocketIo;
			P2PIo = other.Value.P2PIo;
			HttpRequestIo = other.Value.HttpRequestIo;
			RTCIo = other.Value.RTCIo;
			EmbeddedOverlayMainThread = other.Value.EmbeddedOverlayMainThread;
			EmbeddedOverlayWorkerThreads = other.Value.EmbeddedOverlayWorkerThreads;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out InitializeThreadAffinity output)
	{
		output = default(InitializeThreadAffinity);
		output.Set(ref this);
	}
}


public enum NetworkStatus
{
	Disabled,
	Offline,
	Online
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.Platform;

public struct Options
{
	public IntPtr Reserved { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public ClientCredentials ClientCredentials { get; set; }

	public bool IsServer { get; set; }

	public Utf8String EncryptionKey { get; set; }

	public Utf8String OverrideCountryCode { get; set; }

	public Utf8String OverrideLocaleCode { get; set; }

	public Utf8String DeploymentId { get; set; }

	public PlatformFlags Flags { get; set; }

	public Utf8String CacheDirectory { get; set; }

	public uint TickBudgetInMilliseconds { get; set; }

	public RTCOptions? RTCOptions { get; set; }

	public IntegratedPlatformOptionsContainer IntegratedPlatformOptionsContainerHandle { get; set; }

	public IntPtr SystemSpecificOptions { get; set; }

	public double? TaskNetworkTimeoutSeconds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OptionsInternal : ISettable<Epic.OnlineServices.Platform.Options>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Reserved;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private ClientCredentialsInternal m_ClientCredentials;

	private int m_IsServer;

	private IntPtr m_EncryptionKey;

	private IntPtr m_OverrideCountryCode;

	private IntPtr m_OverrideLocaleCode;

	private IntPtr m_DeploymentId;

	private PlatformFlags m_Flags;

	private IntPtr m_CacheDirectory;

	private uint m_TickBudgetInMilliseconds;

	private IntPtr m_RTCOptions;

	private IntPtr m_IntegratedPlatformOptionsContainerHandle;

	private IntPtr m_SystemSpecificOptions;

	private IntPtr m_TaskNetworkTimeoutSeconds;

	public IntPtr Reserved
	{
		set
		{
			m_Reserved = value;
		}
	}

	public Utf8String ProductId
	{
		set
		{
			Helper.Set(value, ref m_ProductId);
		}
	}

	public Utf8String SandboxId
	{
		set
		{
			Helper.Set(value, ref m_SandboxId);
		}
	}

	public ClientCredentials ClientCredentials
	{
		set
		{
			Helper.Set(ref value, ref m_ClientCredentials);
		}
	}

	public bool IsServer
	{
		set
		{
			Helper.Set(value, ref m_IsServer);
		}
	}

	public Utf8String EncryptionKey
	{
		set
		{
			Helper.Set(value, ref m_EncryptionKey);
		}
	}

	public Utf8String OverrideCountryCode
	{
		set
		{
			Helper.Set(value, ref m_OverrideCountryCode);
		}
	}

	public Utf8String OverrideLocaleCode
	{
		set
		{
			Helper.Set(value, ref m_OverrideLocaleCode);
		}
	}

	public Utf8String DeploymentId
	{
		set
		{
			Helper.Set(value, ref m_DeploymentId);
		}
	}

	public PlatformFlags Flags
	{
		set
		{
			m_Flags = value;
		}
	}

	public Utf8String CacheDirectory
	{
		set
		{
			Helper.Set(value, ref m_CacheDirectory);
		}
	}

	public uint TickBudgetInMilliseconds
	{
		set
		{
			m_TickBudgetInMilliseconds = value;
		}
	}

	public RTCOptions? RTCOptions
	{
		set
		{
			Helper.Set<RTCOptions, RTCOptionsInternal>(ref value, ref m_RTCOptions);
		}
	}

	public IntegratedPlatformOptionsContainer IntegratedPlatformOptionsContainerHandle
	{
		set
		{
			Helper.Set(value, ref m_IntegratedPlatformOptionsContainerHandle);
		}
	}

	public IntPtr SystemSpecificOptions
	{
		set
		{
			m_SystemSpecificOptions = value;
		}
	}

	public double? TaskNetworkTimeoutSeconds
	{
		set
		{
			Helper.Set(value, ref m_TaskNetworkTimeoutSeconds);
		}
	}

	public void Set(ref Epic.OnlineServices.Platform.Options other)
	{
		m_ApiVersion = 14;
		Reserved = other.Reserved;
		ProductId = other.ProductId;
		SandboxId = other.SandboxId;
		ClientCredentials = other.ClientCredentials;
		IsServer = other.IsServer;
		EncryptionKey = other.EncryptionKey;
		OverrideCountryCode = other.OverrideCountryCode;
		OverrideLocaleCode = other.OverrideLocaleCode;
		DeploymentId = other.DeploymentId;
		Flags = other.Flags;
		CacheDirectory = other.CacheDirectory;
		TickBudgetInMilliseconds = other.TickBudgetInMilliseconds;
		RTCOptions = other.RTCOptions;
		IntegratedPlatformOptionsContainerHandle = other.IntegratedPlatformOptionsContainerHandle;
		SystemSpecificOptions = other.SystemSpecificOptions;
		TaskNetworkTimeoutSeconds = other.TaskNetworkTimeoutSeconds;
	}

	public void Set(ref Epic.OnlineServices.Platform.Options? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 14;
			Reserved = other.Value.Reserved;
			ProductId = other.Value.ProductId;
			SandboxId = other.Value.SandboxId;
			ClientCredentials = other.Value.ClientCredentials;
			IsServer = other.Value.IsServer;
			EncryptionKey = other.Value.EncryptionKey;
			OverrideCountryCode = other.Value.OverrideCountryCode;
			OverrideLocaleCode = other.Value.OverrideLocaleCode;
			DeploymentId = other.Value.DeploymentId;
			Flags = other.Value.Flags;
			CacheDirectory = other.Value.CacheDirectory;
			TickBudgetInMilliseconds = other.Value.TickBudgetInMilliseconds;
			RTCOptions = other.Value.RTCOptions;
			IntegratedPlatformOptionsContainerHandle = other.Value.IntegratedPlatformOptionsContainerHandle;
			SystemSpecificOptions = other.Value.SystemSpecificOptions;
			TaskNetworkTimeoutSeconds = other.Value.TaskNetworkTimeoutSeconds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_ProductId);
		Helper.Dispose(ref m_SandboxId);
		Helper.Dispose(ref m_ClientCredentials);
		Helper.Dispose(ref m_EncryptionKey);
		Helper.Dispose(ref m_OverrideCountryCode);
		Helper.Dispose(ref m_OverrideLocaleCode);
		Helper.Dispose(ref m_DeploymentId);
		Helper.Dispose(ref m_CacheDirectory);
		Helper.Dispose(ref m_RTCOptions);
		Helper.Dispose(ref m_IntegratedPlatformOptionsContainerHandle);
		Helper.Dispose(ref m_SystemSpecificOptions);
		Helper.Dispose(ref m_TaskNetworkTimeoutSeconds);
	}
}


using System;

[Flags]
public enum PlatformFlags : ulong
{
	None = 0uL,
	LoadingInEditor = 1uL,
	DisableOverlay = 2uL,
	DisableSocialOverlay = 4uL,
	Reserved1 = 8uL,
	WindowsEnableOverlayD3D9 = 0x10uL,
	WindowsEnableOverlayD3D10 = 0x20uL,
	WindowsEnableOverlayOpengl = 0x40uL,
	ConsoleEnableOverlayAutomaticUnloading = 0x80uL
}


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr ReallocateMemoryFunc(IntPtr pointer, UIntPtr sizeInBytes, UIntPtr alignment);


using System;
using System.Runtime.InteropServices;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void ReleaseMemoryFunc(IntPtr pointer);


public enum RTCBackgroundMode
{
	LeaveRooms,
	KeepRoomsAlive
}


using System;
using Epic.OnlineServices.Platform;

public struct RTCOptions
{
	public IntPtr PlatformSpecificOptions { get; set; }

	public RTCBackgroundMode BackgroundMode { get; set; }

	internal void Set(ref RTCOptionsInternal other)
	{
		PlatformSpecificOptions = other.PlatformSpecificOptions;
		BackgroundMode = other.BackgroundMode;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RTCOptionsInternal : IGettable<RTCOptions>, ISettable<RTCOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformSpecificOptions;

	private RTCBackgroundMode m_BackgroundMode;

	public IntPtr PlatformSpecificOptions
	{
		get
		{
			return m_PlatformSpecificOptions;
		}
		set
		{
			m_PlatformSpecificOptions = value;
		}
	}

	public RTCBackgroundMode BackgroundMode
	{
		get
		{
			return m_BackgroundMode;
		}
		set
		{
			m_BackgroundMode = value;
		}
	}

	public void Set(ref RTCOptions other)
	{
		m_ApiVersion = 2;
		PlatformSpecificOptions = other.PlatformSpecificOptions;
		BackgroundMode = other.BackgroundMode;
	}

	public void Set(ref RTCOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			PlatformSpecificOptions = other.Value.PlatformSpecificOptions;
			BackgroundMode = other.Value.BackgroundMode;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformSpecificOptions);
	}

	public void Get(out RTCOptions output)
	{
		output = default(RTCOptions);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.Platform;

public struct WindowsOptions
{
	public IntPtr Reserved { get; set; }

	public Utf8String ProductId { get; set; }

	public Utf8String SandboxId { get; set; }

	public ClientCredentials ClientCredentials { get; set; }

	public bool IsServer { get; set; }

	public Utf8String EncryptionKey { get; set; }

	public Utf8String OverrideCountryCode { get; set; }

	public Utf8String OverrideLocaleCode { get; set; }

	public Utf8String DeploymentId { get; set; }

	public PlatformFlags Flags { get; set; }

	public Utf8String CacheDirectory { get; set; }

	public uint TickBudgetInMilliseconds { get; set; }

	public WindowsRTCOptions? RTCOptions { get; set; }

	public IntegratedPlatformOptionsContainer IntegratedPlatformOptionsContainerHandle { get; set; }

	public IntPtr SystemSpecificOptions { get; set; }

	public double? TaskNetworkTimeoutSeconds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct WindowsOptionsInternal : ISettable<WindowsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Reserved;

	private IntPtr m_ProductId;

	private IntPtr m_SandboxId;

	private ClientCredentialsInternal m_ClientCredentials;

	private int m_IsServer;

	private IntPtr m_EncryptionKey;

	private IntPtr m_OverrideCountryCode;

	private IntPtr m_OverrideLocaleCode;

	private IntPtr m_DeploymentId;

	private PlatformFlags m_Flags;

	private IntPtr m_CacheDirectory;

	private uint m_TickBudgetInMilliseconds;

	private IntPtr m_RTCOptions;

	private IntPtr m_IntegratedPlatformOptionsContainerHandle;

	private IntPtr m_SystemSpecificOptions;

	private IntPtr m_TaskNetworkTimeoutSeconds;

	public IntPtr Reserved
	{
		set
		{
			m_Reserved = value;
		}
	}

	public Utf8String ProductId
	{
		set
		{
			Helper.Set(value, ref m_ProductId);
		}
	}

	public Utf8String SandboxId
	{
		set
		{
			Helper.Set(value, ref m_SandboxId);
		}
	}

	public ClientCredentials ClientCredentials
	{
		set
		{
			Helper.Set(ref value, ref m_ClientCredentials);
		}
	}

	public bool IsServer
	{
		set
		{
			Helper.Set(value, ref m_IsServer);
		}
	}

	public Utf8String EncryptionKey
	{
		set
		{
			Helper.Set(value, ref m_EncryptionKey);
		}
	}

	public Utf8String OverrideCountryCode
	{
		set
		{
			Helper.Set(value, ref m_OverrideCountryCode);
		}
	}

	public Utf8String OverrideLocaleCode
	{
		set
		{
			Helper.Set(value, ref m_OverrideLocaleCode);
		}
	}

	public Utf8String DeploymentId
	{
		set
		{
			Helper.Set(value, ref m_DeploymentId);
		}
	}

	public PlatformFlags Flags
	{
		set
		{
			m_Flags = value;
		}
	}

	public Utf8String CacheDirectory
	{
		set
		{
			Helper.Set(value, ref m_CacheDirectory);
		}
	}

	public uint TickBudgetInMilliseconds
	{
		set
		{
			m_TickBudgetInMilliseconds = value;
		}
	}

	public WindowsRTCOptions? RTCOptions
	{
		set
		{
			Helper.Set<WindowsRTCOptions, WindowsRTCOptionsInternal>(ref value, ref m_RTCOptions);
		}
	}

	public IntegratedPlatformOptionsContainer IntegratedPlatformOptionsContainerHandle
	{
		set
		{
			Helper.Set(value, ref m_IntegratedPlatformOptionsContainerHandle);
		}
	}

	public IntPtr SystemSpecificOptions
	{
		set
		{
			m_SystemSpecificOptions = value;
		}
	}

	public double? TaskNetworkTimeoutSeconds
	{
		set
		{
			Helper.Set(value, ref m_TaskNetworkTimeoutSeconds);
		}
	}

	public void Set(ref WindowsOptions other)
	{
		m_ApiVersion = 14;
		Reserved = other.Reserved;
		ProductId = other.ProductId;
		SandboxId = other.SandboxId;
		ClientCredentials = other.ClientCredentials;
		IsServer = other.IsServer;
		EncryptionKey = other.EncryptionKey;
		OverrideCountryCode = other.OverrideCountryCode;
		OverrideLocaleCode = other.OverrideLocaleCode;
		DeploymentId = other.DeploymentId;
		Flags = other.Flags;
		CacheDirectory = other.CacheDirectory;
		TickBudgetInMilliseconds = other.TickBudgetInMilliseconds;
		RTCOptions = other.RTCOptions;
		IntegratedPlatformOptionsContainerHandle = other.IntegratedPlatformOptionsContainerHandle;
		SystemSpecificOptions = other.SystemSpecificOptions;
		TaskNetworkTimeoutSeconds = other.TaskNetworkTimeoutSeconds;
	}

	public void Set(ref WindowsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 14;
			Reserved = other.Value.Reserved;
			ProductId = other.Value.ProductId;
			SandboxId = other.Value.SandboxId;
			ClientCredentials = other.Value.ClientCredentials;
			IsServer = other.Value.IsServer;
			EncryptionKey = other.Value.EncryptionKey;
			OverrideCountryCode = other.Value.OverrideCountryCode;
			OverrideLocaleCode = other.Value.OverrideLocaleCode;
			DeploymentId = other.Value.DeploymentId;
			Flags = other.Value.Flags;
			CacheDirectory = other.Value.CacheDirectory;
			TickBudgetInMilliseconds = other.Value.TickBudgetInMilliseconds;
			RTCOptions = other.Value.RTCOptions;
			IntegratedPlatformOptionsContainerHandle = other.Value.IntegratedPlatformOptionsContainerHandle;
			SystemSpecificOptions = other.Value.SystemSpecificOptions;
			TaskNetworkTimeoutSeconds = other.Value.TaskNetworkTimeoutSeconds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Reserved);
		Helper.Dispose(ref m_ProductId);
		Helper.Dispose(ref m_SandboxId);
		Helper.Dispose(ref m_ClientCredentials);
		Helper.Dispose(ref m_EncryptionKey);
		Helper.Dispose(ref m_OverrideCountryCode);
		Helper.Dispose(ref m_OverrideLocaleCode);
		Helper.Dispose(ref m_DeploymentId);
		Helper.Dispose(ref m_CacheDirectory);
		Helper.Dispose(ref m_RTCOptions);
		Helper.Dispose(ref m_IntegratedPlatformOptionsContainerHandle);
		Helper.Dispose(ref m_SystemSpecificOptions);
		Helper.Dispose(ref m_TaskNetworkTimeoutSeconds);
	}
}


using Epic.OnlineServices.Platform;

public struct WindowsRTCOptions
{
	public WindowsRTCOptionsPlatformSpecificOptions? PlatformSpecificOptions { get; set; }

	public RTCBackgroundMode BackgroundMode { get; set; }

	internal void Set(ref WindowsRTCOptionsInternal other)
	{
		PlatformSpecificOptions = other.PlatformSpecificOptions;
		BackgroundMode = other.BackgroundMode;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct WindowsRTCOptionsInternal : IGettable<WindowsRTCOptions>, ISettable<WindowsRTCOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformSpecificOptions;

	private RTCBackgroundMode m_BackgroundMode;

	public WindowsRTCOptionsPlatformSpecificOptions? PlatformSpecificOptions
	{
		get
		{
			Helper.Get<WindowsRTCOptionsPlatformSpecificOptionsInternal, WindowsRTCOptionsPlatformSpecificOptions>(m_PlatformSpecificOptions, out WindowsRTCOptionsPlatformSpecificOptions? to);
			return to;
		}
		set
		{
			Helper.Set<WindowsRTCOptionsPlatformSpecificOptions, WindowsRTCOptionsPlatformSpecificOptionsInternal>(ref value, ref m_PlatformSpecificOptions);
		}
	}

	public RTCBackgroundMode BackgroundMode
	{
		get
		{
			return m_BackgroundMode;
		}
		set
		{
			m_BackgroundMode = value;
		}
	}

	public void Set(ref WindowsRTCOptions other)
	{
		m_ApiVersion = 2;
		PlatformSpecificOptions = other.PlatformSpecificOptions;
		BackgroundMode = other.BackgroundMode;
	}

	public void Set(ref WindowsRTCOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			PlatformSpecificOptions = other.Value.PlatformSpecificOptions;
			BackgroundMode = other.Value.BackgroundMode;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformSpecificOptions);
	}

	public void Get(out WindowsRTCOptions output)
	{
		output = default(WindowsRTCOptions);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public struct WindowsRTCOptionsPlatformSpecificOptions
{
	public Utf8String XAudio29DllPath { get; set; }

	internal void Set(ref WindowsRTCOptionsPlatformSpecificOptionsInternal other)
	{
		XAudio29DllPath = other.XAudio29DllPath;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct WindowsRTCOptionsPlatformSpecificOptionsInternal : IGettable<WindowsRTCOptionsPlatformSpecificOptions>, ISettable<WindowsRTCOptionsPlatformSpecificOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_XAudio29DllPath;

	public Utf8String XAudio29DllPath
	{
		get
		{
			Helper.Get(m_XAudio29DllPath, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_XAudio29DllPath);
		}
	}

	public void Set(ref WindowsRTCOptionsPlatformSpecificOptions other)
	{
		m_ApiVersion = 1;
		XAudio29DllPath = other.XAudio29DllPath;
	}

	public void Set(ref WindowsRTCOptionsPlatformSpecificOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			XAudio29DllPath = other.Value.XAudio29DllPath;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_XAudio29DllPath);
	}

	public void Get(out WindowsRTCOptionsPlatformSpecificOptions output)
	{
		output = default(WindowsRTCOptionsPlatformSpecificOptions);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public sealed class AchievementsInterface : Handle
{
	public const int AchievementUnlocktimeUndefined = -1;

	public const int AddnotifyachievementsunlockedApiLatest = 1;

	public const int Addnotifyachievementsunlockedv2ApiLatest = 2;

	public const int Copyachievementdefinitionv2ByachievementidApiLatest = 2;

	public const int Copyachievementdefinitionv2ByindexApiLatest = 2;

	public const int CopydefinitionbyachievementidApiLatest = 1;

	public const int CopydefinitionbyindexApiLatest = 1;

	public const int Copydefinitionv2ByachievementidApiLatest = 2;

	public const int Copydefinitionv2ByindexApiLatest = 2;

	public const int CopyplayerachievementbyachievementidApiLatest = 2;

	public const int CopyplayerachievementbyindexApiLatest = 2;

	public const int CopyunlockedachievementbyachievementidApiLatest = 1;

	public const int CopyunlockedachievementbyindexApiLatest = 1;

	public const int DefinitionApiLatest = 1;

	public const int Definitionv2ApiLatest = 2;

	public const int GetachievementdefinitioncountApiLatest = 1;

	public const int GetplayerachievementcountApiLatest = 1;

	public const int GetunlockedachievementcountApiLatest = 1;

	public const int PlayerachievementApiLatest = 2;

	public const int PlayerstatinfoApiLatest = 1;

	public const int QuerydefinitionsApiLatest = 3;

	public const int QueryplayerachievementsApiLatest = 2;

	public const int StatthresholdApiLatest = 1;

	public const int StatthresholdsApiLatest = 1;

	public const int UnlockachievementsApiLatest = 1;

	public const int UnlockedachievementApiLatest = 1;

	public AchievementsInterface()
	{
	}

	public AchievementsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyAchievementsUnlocked(ref AddNotifyAchievementsUnlockedOptions options, object clientData, OnAchievementsUnlockedCallback notificationFn)
	{
		AddNotifyAchievementsUnlockedOptionsInternal options2 = default(AddNotifyAchievementsUnlockedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAchievementsUnlockedCallbackInternal onAchievementsUnlockedCallbackInternal = OnAchievementsUnlockedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onAchievementsUnlockedCallbackInternal);
		ulong num = Bindings.EOS_Achievements_AddNotifyAchievementsUnlocked(base.InnerHandle, ref options2, clientDataAddress, onAchievementsUnlockedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyAchievementsUnlockedV2(ref AddNotifyAchievementsUnlockedV2Options options, object clientData, OnAchievementsUnlockedCallbackV2 notificationFn)
	{
		AddNotifyAchievementsUnlockedV2OptionsInternal options2 = default(AddNotifyAchievementsUnlockedV2OptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAchievementsUnlockedCallbackV2Internal onAchievementsUnlockedCallbackV2Internal = OnAchievementsUnlockedCallbackV2InternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onAchievementsUnlockedCallbackV2Internal);
		ulong num = Bindings.EOS_Achievements_AddNotifyAchievementsUnlockedV2(base.InnerHandle, ref options2, clientDataAddress, onAchievementsUnlockedCallbackV2Internal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyAchievementDefinitionByAchievementId(ref CopyAchievementDefinitionByAchievementIdOptions options, out Definition? outDefinition)
	{
		CopyAchievementDefinitionByAchievementIdOptionsInternal options2 = default(CopyAchievementDefinitionByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionByAchievementId(base.InnerHandle, ref options2, ref outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outDefinition2, out outDefinition);
		if (outDefinition.HasValue)
		{
			Bindings.EOS_Achievements_Definition_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyAchievementDefinitionByIndex(ref CopyAchievementDefinitionByIndexOptions options, out Definition? outDefinition)
	{
		CopyAchievementDefinitionByIndexOptionsInternal options2 = default(CopyAchievementDefinitionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionByIndex(base.InnerHandle, ref options2, ref outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionInternal, Definition>(outDefinition2, out outDefinition);
		if (outDefinition.HasValue)
		{
			Bindings.EOS_Achievements_Definition_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyAchievementDefinitionV2ByAchievementId(ref CopyAchievementDefinitionV2ByAchievementIdOptions options, out DefinitionV2? outDefinition)
	{
		CopyAchievementDefinitionV2ByAchievementIdOptionsInternal options2 = default(CopyAchievementDefinitionV2ByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(base.InnerHandle, ref options2, ref outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionV2Internal, DefinitionV2>(outDefinition2, out outDefinition);
		if (outDefinition.HasValue)
		{
			Bindings.EOS_Achievements_DefinitionV2_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyAchievementDefinitionV2ByIndex(ref CopyAchievementDefinitionV2ByIndexOptions options, out DefinitionV2? outDefinition)
	{
		CopyAchievementDefinitionV2ByIndexOptionsInternal options2 = default(CopyAchievementDefinitionV2ByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outDefinition2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyAchievementDefinitionV2ByIndex(base.InnerHandle, ref options2, ref outDefinition2);
		Helper.Dispose(ref options2);
		Helper.Get<DefinitionV2Internal, DefinitionV2>(outDefinition2, out outDefinition);
		if (outDefinition.HasValue)
		{
			Bindings.EOS_Achievements_DefinitionV2_Release(outDefinition2);
		}
		return result;
	}

	public Result CopyPlayerAchievementByAchievementId(ref CopyPlayerAchievementByAchievementIdOptions options, out PlayerAchievement? outAchievement)
	{
		CopyPlayerAchievementByAchievementIdOptionsInternal options2 = default(CopyPlayerAchievementByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyPlayerAchievementByAchievementId(base.InnerHandle, ref options2, ref outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<PlayerAchievementInternal, PlayerAchievement>(outAchievement2, out outAchievement);
		if (outAchievement.HasValue)
		{
			Bindings.EOS_Achievements_PlayerAchievement_Release(outAchievement2);
		}
		return result;
	}

	public Result CopyPlayerAchievementByIndex(ref CopyPlayerAchievementByIndexOptions options, out PlayerAchievement? outAchievement)
	{
		CopyPlayerAchievementByIndexOptionsInternal options2 = default(CopyPlayerAchievementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyPlayerAchievementByIndex(base.InnerHandle, ref options2, ref outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<PlayerAchievementInternal, PlayerAchievement>(outAchievement2, out outAchievement);
		if (outAchievement.HasValue)
		{
			Bindings.EOS_Achievements_PlayerAchievement_Release(outAchievement2);
		}
		return result;
	}

	public Result CopyUnlockedAchievementByAchievementId(ref CopyUnlockedAchievementByAchievementIdOptions options, out UnlockedAchievement? outAchievement)
	{
		CopyUnlockedAchievementByAchievementIdOptionsInternal options2 = default(CopyUnlockedAchievementByAchievementIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyUnlockedAchievementByAchievementId(base.InnerHandle, ref options2, ref outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<UnlockedAchievementInternal, UnlockedAchievement>(outAchievement2, out outAchievement);
		if (outAchievement.HasValue)
		{
			Bindings.EOS_Achievements_UnlockedAchievement_Release(outAchievement2);
		}
		return result;
	}

	public Result CopyUnlockedAchievementByIndex(ref CopyUnlockedAchievementByIndexOptions options, out UnlockedAchievement? outAchievement)
	{
		CopyUnlockedAchievementByIndexOptionsInternal options2 = default(CopyUnlockedAchievementByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outAchievement2 = IntPtr.Zero;
		Result result = Bindings.EOS_Achievements_CopyUnlockedAchievementByIndex(base.InnerHandle, ref options2, ref outAchievement2);
		Helper.Dispose(ref options2);
		Helper.Get<UnlockedAchievementInternal, UnlockedAchievement>(outAchievement2, out outAchievement);
		if (outAchievement.HasValue)
		{
			Bindings.EOS_Achievements_UnlockedAchievement_Release(outAchievement2);
		}
		return result;
	}

	public uint GetAchievementDefinitionCount(ref GetAchievementDefinitionCountOptions options)
	{
		GetAchievementDefinitionCountOptionsInternal options2 = default(GetAchievementDefinitionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Achievements_GetAchievementDefinitionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetPlayerAchievementCount(ref GetPlayerAchievementCountOptions options)
	{
		GetPlayerAchievementCountOptionsInternal options2 = default(GetPlayerAchievementCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Achievements_GetPlayerAchievementCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetUnlockedAchievementCount(ref GetUnlockedAchievementCountOptions options)
	{
		GetUnlockedAchievementCountOptionsInternal options2 = default(GetUnlockedAchievementCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Achievements_GetUnlockedAchievementCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryDefinitions(ref QueryDefinitionsOptions options, object clientData, OnQueryDefinitionsCompleteCallback completionDelegate)
	{
		QueryDefinitionsOptionsInternal options2 = default(QueryDefinitionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryDefinitionsCompleteCallbackInternal onQueryDefinitionsCompleteCallbackInternal = OnQueryDefinitionsCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryDefinitionsCompleteCallbackInternal);
		Bindings.EOS_Achievements_QueryDefinitions(base.InnerHandle, ref options2, clientDataAddress, onQueryDefinitionsCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryPlayerAchievements(ref QueryPlayerAchievementsOptions options, object clientData, OnQueryPlayerAchievementsCompleteCallback completionDelegate)
	{
		QueryPlayerAchievementsOptionsInternal options2 = default(QueryPlayerAchievementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryPlayerAchievementsCompleteCallbackInternal onQueryPlayerAchievementsCompleteCallbackInternal = OnQueryPlayerAchievementsCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryPlayerAchievementsCompleteCallbackInternal);
		Bindings.EOS_Achievements_QueryPlayerAchievements(base.InnerHandle, ref options2, clientDataAddress, onQueryPlayerAchievementsCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyAchievementsUnlocked(ulong inId)
	{
		Bindings.EOS_Achievements_RemoveNotifyAchievementsUnlocked(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void UnlockAchievements(ref UnlockAchievementsOptions options, object clientData, OnUnlockAchievementsCompleteCallback completionDelegate)
	{
		UnlockAchievementsOptionsInternal options2 = default(UnlockAchievementsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUnlockAchievementsCompleteCallbackInternal onUnlockAchievementsCompleteCallbackInternal = OnUnlockAchievementsCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUnlockAchievementsCompleteCallbackInternal);
		Bindings.EOS_Achievements_UnlockAchievements(base.InnerHandle, ref options2, clientDataAddress, onUnlockAchievementsCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnAchievementsUnlockedCallbackInternal))]
	internal static void OnAchievementsUnlockedCallbackInternalImplementation(ref OnAchievementsUnlockedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnAchievementsUnlockedCallbackInfoInternal, OnAchievementsUnlockedCallback, OnAchievementsUnlockedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnAchievementsUnlockedCallbackV2Internal))]
	internal static void OnAchievementsUnlockedCallbackV2InternalImplementation(ref OnAchievementsUnlockedCallbackV2InfoInternal data)
	{
		if (Helper.TryGetCallback<OnAchievementsUnlockedCallbackV2InfoInternal, OnAchievementsUnlockedCallbackV2, OnAchievementsUnlockedCallbackV2Info>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryDefinitionsCompleteCallbackInternal))]
	internal static void OnQueryDefinitionsCompleteCallbackInternalImplementation(ref OnQueryDefinitionsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryDefinitionsCompleteCallbackInfoInternal, OnQueryDefinitionsCompleteCallback, OnQueryDefinitionsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryPlayerAchievementsCompleteCallbackInternal))]
	internal static void OnQueryPlayerAchievementsCompleteCallbackInternalImplementation(ref OnQueryPlayerAchievementsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryPlayerAchievementsCompleteCallbackInfoInternal, OnQueryPlayerAchievementsCompleteCallback, OnQueryPlayerAchievementsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUnlockAchievementsCompleteCallbackInternal))]
	internal static void OnUnlockAchievementsCompleteCallbackInternalImplementation(ref OnUnlockAchievementsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnUnlockAchievementsCompleteCallbackInfoInternal, OnUnlockAchievementsCompleteCallback, OnUnlockAchievementsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAchievementsUnlockedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAchievementsUnlockedOptionsInternal : ISettable<AddNotifyAchievementsUnlockedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAchievementsUnlockedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyAchievementsUnlockedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAchievementsUnlockedV2Options
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAchievementsUnlockedV2OptionsInternal : ISettable<AddNotifyAchievementsUnlockedV2Options>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAchievementsUnlockedV2Options other)
	{
		m_ApiVersion = 2;
	}

	public void Set(ref AddNotifyAchievementsUnlockedV2Options? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyAchievementDefinitionByAchievementIdOptions
{
	public Utf8String AchievementId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyAchievementDefinitionByAchievementIdOptionsInternal : ISettable<CopyAchievementDefinitionByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	public Utf8String AchievementId
	{
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public void Set(ref CopyAchievementDefinitionByAchievementIdOptions other)
	{
		m_ApiVersion = 1;
		AchievementId = other.AchievementId;
	}

	public void Set(ref CopyAchievementDefinitionByAchievementIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AchievementId = other.Value.AchievementId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
	}
}


public struct CopyAchievementDefinitionByIndexOptions
{
	public uint AchievementIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyAchievementDefinitionByIndexOptionsInternal : ISettable<CopyAchievementDefinitionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AchievementIndex;

	public uint AchievementIndex
	{
		set
		{
			m_AchievementIndex = value;
		}
	}

	public void Set(ref CopyAchievementDefinitionByIndexOptions other)
	{
		m_ApiVersion = 1;
		AchievementIndex = other.AchievementIndex;
	}

	public void Set(ref CopyAchievementDefinitionByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AchievementIndex = other.Value.AchievementIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyAchievementDefinitionV2ByAchievementIdOptions
{
	public Utf8String AchievementId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyAchievementDefinitionV2ByAchievementIdOptionsInternal : ISettable<CopyAchievementDefinitionV2ByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	public Utf8String AchievementId
	{
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public void Set(ref CopyAchievementDefinitionV2ByAchievementIdOptions other)
	{
		m_ApiVersion = 2;
		AchievementId = other.AchievementId;
	}

	public void Set(ref CopyAchievementDefinitionV2ByAchievementIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			AchievementId = other.Value.AchievementId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
	}
}


public struct CopyAchievementDefinitionV2ByIndexOptions
{
	public uint AchievementIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyAchievementDefinitionV2ByIndexOptionsInternal : ISettable<CopyAchievementDefinitionV2ByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AchievementIndex;

	public uint AchievementIndex
	{
		set
		{
			m_AchievementIndex = value;
		}
	}

	public void Set(ref CopyAchievementDefinitionV2ByIndexOptions other)
	{
		m_ApiVersion = 2;
		AchievementIndex = other.AchievementIndex;
	}

	public void Set(ref CopyAchievementDefinitionV2ByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			AchievementIndex = other.Value.AchievementIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyPlayerAchievementByAchievementIdOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String AchievementId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyPlayerAchievementByAchievementIdOptionsInternal : ISettable<CopyPlayerAchievementByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_AchievementId;

	private IntPtr m_LocalUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String AchievementId
	{
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CopyPlayerAchievementByAchievementIdOptions other)
	{
		m_ApiVersion = 2;
		TargetUserId = other.TargetUserId;
		AchievementId = other.AchievementId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CopyPlayerAchievementByAchievementIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			TargetUserId = other.Value.TargetUserId;
			AchievementId = other.Value.AchievementId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AchievementId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyPlayerAchievementByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint AchievementIndex { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyPlayerAchievementByIndexOptionsInternal : ISettable<CopyPlayerAchievementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_AchievementIndex;

	private IntPtr m_LocalUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint AchievementIndex
	{
		set
		{
			m_AchievementIndex = value;
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CopyPlayerAchievementByIndexOptions other)
	{
		m_ApiVersion = 2;
		TargetUserId = other.TargetUserId;
		AchievementIndex = other.AchievementIndex;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CopyPlayerAchievementByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			TargetUserId = other.Value.TargetUserId;
			AchievementIndex = other.Value.AchievementIndex;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyUnlockedAchievementByAchievementIdOptions
{
	public ProductUserId UserId { get; set; }

	public Utf8String AchievementId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyUnlockedAchievementByAchievementIdOptionsInternal : ISettable<CopyUnlockedAchievementByAchievementIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_AchievementId;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String AchievementId
	{
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public void Set(ref CopyUnlockedAchievementByAchievementIdOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		AchievementId = other.AchievementId;
	}

	public void Set(ref CopyUnlockedAchievementByAchievementIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			AchievementId = other.Value.AchievementId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_AchievementId);
	}
}


using Epic.OnlineServices;

public struct CopyUnlockedAchievementByIndexOptions
{
	public ProductUserId UserId { get; set; }

	public uint AchievementIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyUnlockedAchievementByIndexOptionsInternal : ISettable<CopyUnlockedAchievementByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private uint m_AchievementIndex;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public uint AchievementIndex
	{
		set
		{
			m_AchievementIndex = value;
		}
	}

	public void Set(ref CopyUnlockedAchievementByIndexOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		AchievementIndex = other.AchievementIndex;
	}

	public void Set(ref CopyUnlockedAchievementByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			AchievementIndex = other.Value.AchievementIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct Definition
{
	public Utf8String AchievementId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String Description { get; set; }

	public Utf8String LockedDisplayName { get; set; }

	public Utf8String LockedDescription { get; set; }

	public Utf8String HiddenDescription { get; set; }

	public Utf8String CompletionDescription { get; set; }

	public Utf8String UnlockedIconId { get; set; }

	public Utf8String LockedIconId { get; set; }

	public bool IsHidden { get; set; }

	public StatThresholds[] StatThresholds { get; set; }

	internal void Set(ref DefinitionInternal other)
	{
		AchievementId = other.AchievementId;
		DisplayName = other.DisplayName;
		Description = other.Description;
		LockedDisplayName = other.LockedDisplayName;
		LockedDescription = other.LockedDescription;
		HiddenDescription = other.HiddenDescription;
		CompletionDescription = other.CompletionDescription;
		UnlockedIconId = other.UnlockedIconId;
		LockedIconId = other.LockedIconId;
		IsHidden = other.IsHidden;
		StatThresholds = other.StatThresholds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DefinitionInternal : IGettable<Definition>, ISettable<Definition>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private IntPtr m_DisplayName;

	private IntPtr m_Description;

	private IntPtr m_LockedDisplayName;

	private IntPtr m_LockedDescription;

	private IntPtr m_HiddenDescription;

	private IntPtr m_CompletionDescription;

	private IntPtr m_UnlockedIconId;

	private IntPtr m_LockedIconId;

	private int m_IsHidden;

	private int m_StatThresholdsCount;

	private IntPtr m_StatThresholds;

	public Utf8String AchievementId
	{
		get
		{
			Helper.Get(m_AchievementId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String Description
	{
		get
		{
			Helper.Get(m_Description, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Description);
		}
	}

	public Utf8String LockedDisplayName
	{
		get
		{
			Helper.Get(m_LockedDisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LockedDisplayName);
		}
	}

	public Utf8String LockedDescription
	{
		get
		{
			Helper.Get(m_LockedDescription, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LockedDescription);
		}
	}

	public Utf8String HiddenDescription
	{
		get
		{
			Helper.Get(m_HiddenDescription, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_HiddenDescription);
		}
	}

	public Utf8String CompletionDescription
	{
		get
		{
			Helper.Get(m_CompletionDescription, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_CompletionDescription);
		}
	}

	public Utf8String UnlockedIconId
	{
		get
		{
			Helper.Get(m_UnlockedIconId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockedIconId);
		}
	}

	public Utf8String LockedIconId
	{
		get
		{
			Helper.Get(m_LockedIconId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LockedIconId);
		}
	}

	public bool IsHidden
	{
		get
		{
			Helper.Get(m_IsHidden, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsHidden);
		}
	}

	public StatThresholds[] StatThresholds
	{
		get
		{
			Helper.Get<StatThresholdsInternal, StatThresholds>(m_StatThresholds, out var to, m_StatThresholdsCount);
			return to;
		}
		set
		{
			Helper.Set<StatThresholds, StatThresholdsInternal>(ref value, ref m_StatThresholds, out m_StatThresholdsCount);
		}
	}

	public void Set(ref Definition other)
	{
		m_ApiVersion = 1;
		AchievementId = other.AchievementId;
		DisplayName = other.DisplayName;
		Description = other.Description;
		LockedDisplayName = other.LockedDisplayName;
		LockedDescription = other.LockedDescription;
		HiddenDescription = other.HiddenDescription;
		CompletionDescription = other.CompletionDescription;
		UnlockedIconId = other.UnlockedIconId;
		LockedIconId = other.LockedIconId;
		IsHidden = other.IsHidden;
		StatThresholds = other.StatThresholds;
	}

	public void Set(ref Definition? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AchievementId = other.Value.AchievementId;
			DisplayName = other.Value.DisplayName;
			Description = other.Value.Description;
			LockedDisplayName = other.Value.LockedDisplayName;
			LockedDescription = other.Value.LockedDescription;
			HiddenDescription = other.Value.HiddenDescription;
			CompletionDescription = other.Value.CompletionDescription;
			UnlockedIconId = other.Value.UnlockedIconId;
			LockedIconId = other.Value.LockedIconId;
			IsHidden = other.Value.IsHidden;
			StatThresholds = other.Value.StatThresholds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_Description);
		Helper.Dispose(ref m_LockedDisplayName);
		Helper.Dispose(ref m_LockedDescription);
		Helper.Dispose(ref m_HiddenDescription);
		Helper.Dispose(ref m_CompletionDescription);
		Helper.Dispose(ref m_UnlockedIconId);
		Helper.Dispose(ref m_LockedIconId);
		Helper.Dispose(ref m_StatThresholds);
	}

	public void Get(out Definition output)
	{
		output = default(Definition);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct DefinitionV2
{
	public Utf8String AchievementId { get; set; }

	public Utf8String UnlockedDisplayName { get; set; }

	public Utf8String UnlockedDescription { get; set; }

	public Utf8String LockedDisplayName { get; set; }

	public Utf8String LockedDescription { get; set; }

	public Utf8String FlavorText { get; set; }

	public Utf8String UnlockedIconURL { get; set; }

	public Utf8String LockedIconURL { get; set; }

	public bool IsHidden { get; set; }

	public StatThresholds[] StatThresholds { get; set; }

	internal void Set(ref DefinitionV2Internal other)
	{
		AchievementId = other.AchievementId;
		UnlockedDisplayName = other.UnlockedDisplayName;
		UnlockedDescription = other.UnlockedDescription;
		LockedDisplayName = other.LockedDisplayName;
		LockedDescription = other.LockedDescription;
		FlavorText = other.FlavorText;
		UnlockedIconURL = other.UnlockedIconURL;
		LockedIconURL = other.LockedIconURL;
		IsHidden = other.IsHidden;
		StatThresholds = other.StatThresholds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DefinitionV2Internal : IGettable<DefinitionV2>, ISettable<DefinitionV2>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private IntPtr m_UnlockedDisplayName;

	private IntPtr m_UnlockedDescription;

	private IntPtr m_LockedDisplayName;

	private IntPtr m_LockedDescription;

	private IntPtr m_FlavorText;

	private IntPtr m_UnlockedIconURL;

	private IntPtr m_LockedIconURL;

	private int m_IsHidden;

	private uint m_StatThresholdsCount;

	private IntPtr m_StatThresholds;

	public Utf8String AchievementId
	{
		get
		{
			Helper.Get(m_AchievementId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public Utf8String UnlockedDisplayName
	{
		get
		{
			Helper.Get(m_UnlockedDisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockedDisplayName);
		}
	}

	public Utf8String UnlockedDescription
	{
		get
		{
			Helper.Get(m_UnlockedDescription, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockedDescription);
		}
	}

	public Utf8String LockedDisplayName
	{
		get
		{
			Helper.Get(m_LockedDisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LockedDisplayName);
		}
	}

	public Utf8String LockedDescription
	{
		get
		{
			Helper.Get(m_LockedDescription, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LockedDescription);
		}
	}

	public Utf8String FlavorText
	{
		get
		{
			Helper.Get(m_FlavorText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_FlavorText);
		}
	}

	public Utf8String UnlockedIconURL
	{
		get
		{
			Helper.Get(m_UnlockedIconURL, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockedIconURL);
		}
	}

	public Utf8String LockedIconURL
	{
		get
		{
			Helper.Get(m_LockedIconURL, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LockedIconURL);
		}
	}

	public bool IsHidden
	{
		get
		{
			Helper.Get(m_IsHidden, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsHidden);
		}
	}

	public StatThresholds[] StatThresholds
	{
		get
		{
			Helper.Get<StatThresholdsInternal, StatThresholds>(m_StatThresholds, out var to, m_StatThresholdsCount);
			return to;
		}
		set
		{
			Helper.Set<StatThresholds, StatThresholdsInternal>(ref value, ref m_StatThresholds, out m_StatThresholdsCount);
		}
	}

	public void Set(ref DefinitionV2 other)
	{
		m_ApiVersion = 2;
		AchievementId = other.AchievementId;
		UnlockedDisplayName = other.UnlockedDisplayName;
		UnlockedDescription = other.UnlockedDescription;
		LockedDisplayName = other.LockedDisplayName;
		LockedDescription = other.LockedDescription;
		FlavorText = other.FlavorText;
		UnlockedIconURL = other.UnlockedIconURL;
		LockedIconURL = other.LockedIconURL;
		IsHidden = other.IsHidden;
		StatThresholds = other.StatThresholds;
	}

	public void Set(ref DefinitionV2? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			AchievementId = other.Value.AchievementId;
			UnlockedDisplayName = other.Value.UnlockedDisplayName;
			UnlockedDescription = other.Value.UnlockedDescription;
			LockedDisplayName = other.Value.LockedDisplayName;
			LockedDescription = other.Value.LockedDescription;
			FlavorText = other.Value.FlavorText;
			UnlockedIconURL = other.Value.UnlockedIconURL;
			LockedIconURL = other.Value.LockedIconURL;
			IsHidden = other.Value.IsHidden;
			StatThresholds = other.Value.StatThresholds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
		Helper.Dispose(ref m_UnlockedDisplayName);
		Helper.Dispose(ref m_UnlockedDescription);
		Helper.Dispose(ref m_LockedDisplayName);
		Helper.Dispose(ref m_LockedDescription);
		Helper.Dispose(ref m_FlavorText);
		Helper.Dispose(ref m_UnlockedIconURL);
		Helper.Dispose(ref m_LockedIconURL);
		Helper.Dispose(ref m_StatThresholds);
	}

	public void Get(out DefinitionV2 output)
	{
		output = default(DefinitionV2);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetAchievementDefinitionCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetAchievementDefinitionCountOptionsInternal : ISettable<GetAchievementDefinitionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetAchievementDefinitionCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetAchievementDefinitionCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct GetPlayerAchievementCountOptions
{
	public ProductUserId UserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetPlayerAchievementCountOptionsInternal : ISettable<GetPlayerAchievementCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public void Set(ref GetPlayerAchievementCountOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
	}

	public void Set(ref GetPlayerAchievementCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;

public struct GetUnlockedAchievementCountOptions
{
	public ProductUserId UserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetUnlockedAchievementCountOptionsInternal : ISettable<GetUnlockedAchievementCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public void Set(ref GetUnlockedAchievementCountOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
	}

	public void Set(ref GetUnlockedAchievementCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnAchievementsUnlockedCallback(ref OnAchievementsUnlockedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAchievementsUnlockedCallbackInternal(ref OnAchievementsUnlockedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct OnAchievementsUnlockedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId UserId { get; set; }

	public Utf8String[] AchievementIds { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnAchievementsUnlockedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		UserId = other.UserId;
		AchievementIds = other.AchievementIds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnAchievementsUnlockedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackInfo>, ISettable<OnAchievementsUnlockedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_UserId;

	private uint m_AchievementsCount;

	private IntPtr m_AchievementIds;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId UserId
	{
		get
		{
			Helper.Get(m_UserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String[] AchievementIds
	{
		get
		{
			Helper.Get<Utf8String>(m_AchievementIds, out var to, m_AchievementsCount, isArrayItemAllocated: true);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AchievementIds, isArrayItemAllocated: true, out m_AchievementsCount);
		}
	}

	public void Set(ref OnAchievementsUnlockedCallbackInfo other)
	{
		ClientData = other.ClientData;
		UserId = other.UserId;
		AchievementIds = other.AchievementIds;
	}

	public void Set(ref OnAchievementsUnlockedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			UserId = other.Value.UserId;
			AchievementIds = other.Value.AchievementIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_AchievementIds);
	}

	public void Get(out OnAchievementsUnlockedCallbackInfo output)
	{
		output = default(OnAchievementsUnlockedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnAchievementsUnlockedCallbackV2(ref OnAchievementsUnlockedCallbackV2Info data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAchievementsUnlockedCallbackV2Internal(ref OnAchievementsUnlockedCallbackV2InfoInternal data);


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct OnAchievementsUnlockedCallbackV2Info : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId UserId { get; set; }

	public Utf8String AchievementId { get; set; }

	public DateTimeOffset? UnlockTime { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnAchievementsUnlockedCallbackV2InfoInternal other)
	{
		ClientData = other.ClientData;
		UserId = other.UserId;
		AchievementId = other.AchievementId;
		UnlockTime = other.UnlockTime;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnAchievementsUnlockedCallbackV2InfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackV2Info>, ISettable<OnAchievementsUnlockedCallbackV2Info>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_UserId;

	private IntPtr m_AchievementId;

	private long m_UnlockTime;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId UserId
	{
		get
		{
			Helper.Get(m_UserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String AchievementId
	{
		get
		{
			Helper.Get(m_AchievementId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public DateTimeOffset? UnlockTime
	{
		get
		{
			Helper.Get(m_UnlockTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockTime);
		}
	}

	public void Set(ref OnAchievementsUnlockedCallbackV2Info other)
	{
		ClientData = other.ClientData;
		UserId = other.UserId;
		AchievementId = other.AchievementId;
		UnlockTime = other.UnlockTime;
	}

	public void Set(ref OnAchievementsUnlockedCallbackV2Info? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			UserId = other.Value.UserId;
			AchievementId = other.Value.AchievementId;
			UnlockTime = other.Value.UnlockTime;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_AchievementId);
	}

	public void Get(out OnAchievementsUnlockedCallbackV2Info output)
	{
		output = default(OnAchievementsUnlockedCallbackV2Info);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnQueryDefinitionsCompleteCallback(ref OnQueryDefinitionsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryDefinitionsCompleteCallbackInternal(ref OnQueryDefinitionsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct OnQueryDefinitionsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryDefinitionsCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryDefinitionsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryDefinitionsCompleteCallbackInfo>, ISettable<OnQueryDefinitionsCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref OnQueryDefinitionsCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref OnQueryDefinitionsCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnQueryDefinitionsCompleteCallbackInfo output)
	{
		output = default(OnQueryDefinitionsCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnQueryPlayerAchievementsCompleteCallback(ref OnQueryPlayerAchievementsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryPlayerAchievementsCompleteCallbackInternal(ref OnQueryPlayerAchievementsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct OnQueryPlayerAchievementsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryPlayerAchievementsCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryPlayerAchievementsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryPlayerAchievementsCompleteCallbackInfo>, ISettable<OnQueryPlayerAchievementsCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref OnQueryPlayerAchievementsCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref OnQueryPlayerAchievementsCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out OnQueryPlayerAchievementsCompleteCallbackInfo output)
	{
		output = default(OnQueryPlayerAchievementsCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Achievements;

public delegate void OnUnlockAchievementsCompleteCallback(ref OnUnlockAchievementsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Achievements;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUnlockAchievementsCompleteCallbackInternal(ref OnUnlockAchievementsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct OnUnlockAchievementsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId UserId { get; set; }

	public uint AchievementsCount { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnUnlockAchievementsCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		UserId = other.UserId;
		AchievementsCount = other.AchievementsCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnUnlockAchievementsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnUnlockAchievementsCompleteCallbackInfo>, ISettable<OnUnlockAchievementsCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_UserId;

	private uint m_AchievementsCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId UserId
	{
		get
		{
			Helper.Get(m_UserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public uint AchievementsCount
	{
		get
		{
			return m_AchievementsCount;
		}
		set
		{
			m_AchievementsCount = value;
		}
	}

	public void Set(ref OnUnlockAchievementsCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		UserId = other.UserId;
		AchievementsCount = other.AchievementsCount;
	}

	public void Set(ref OnUnlockAchievementsCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			UserId = other.Value.UserId;
			AchievementsCount = other.Value.AchievementsCount;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_UserId);
	}

	public void Get(out OnUnlockAchievementsCompleteCallbackInfo output)
	{
		output = default(OnUnlockAchievementsCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct PlayerAchievement
{
	public Utf8String AchievementId { get; set; }

	public double Progress { get; set; }

	public DateTimeOffset? UnlockTime { get; set; }

	public PlayerStatInfo[] StatInfo { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String Description { get; set; }

	public Utf8String IconURL { get; set; }

	public Utf8String FlavorText { get; set; }

	internal void Set(ref PlayerAchievementInternal other)
	{
		AchievementId = other.AchievementId;
		Progress = other.Progress;
		UnlockTime = other.UnlockTime;
		StatInfo = other.StatInfo;
		DisplayName = other.DisplayName;
		Description = other.Description;
		IconURL = other.IconURL;
		FlavorText = other.FlavorText;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PlayerAchievementInternal : IGettable<PlayerAchievement>, ISettable<PlayerAchievement>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private double m_Progress;

	private long m_UnlockTime;

	private int m_StatInfoCount;

	private IntPtr m_StatInfo;

	private IntPtr m_DisplayName;

	private IntPtr m_Description;

	private IntPtr m_IconURL;

	private IntPtr m_FlavorText;

	public Utf8String AchievementId
	{
		get
		{
			Helper.Get(m_AchievementId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public double Progress
	{
		get
		{
			return m_Progress;
		}
		set
		{
			m_Progress = value;
		}
	}

	public DateTimeOffset? UnlockTime
	{
		get
		{
			Helper.Get(m_UnlockTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockTime);
		}
	}

	public PlayerStatInfo[] StatInfo
	{
		get
		{
			Helper.Get<PlayerStatInfoInternal, PlayerStatInfo>(m_StatInfo, out var to, m_StatInfoCount);
			return to;
		}
		set
		{
			Helper.Set<PlayerStatInfo, PlayerStatInfoInternal>(ref value, ref m_StatInfo, out m_StatInfoCount);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String Description
	{
		get
		{
			Helper.Get(m_Description, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Description);
		}
	}

	public Utf8String IconURL
	{
		get
		{
			Helper.Get(m_IconURL, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IconURL);
		}
	}

	public Utf8String FlavorText
	{
		get
		{
			Helper.Get(m_FlavorText, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_FlavorText);
		}
	}

	public void Set(ref PlayerAchievement other)
	{
		m_ApiVersion = 2;
		AchievementId = other.AchievementId;
		Progress = other.Progress;
		UnlockTime = other.UnlockTime;
		StatInfo = other.StatInfo;
		DisplayName = other.DisplayName;
		Description = other.Description;
		IconURL = other.IconURL;
		FlavorText = other.FlavorText;
	}

	public void Set(ref PlayerAchievement? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			AchievementId = other.Value.AchievementId;
			Progress = other.Value.Progress;
			UnlockTime = other.Value.UnlockTime;
			StatInfo = other.Value.StatInfo;
			DisplayName = other.Value.DisplayName;
			Description = other.Value.Description;
			IconURL = other.Value.IconURL;
			FlavorText = other.Value.FlavorText;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
		Helper.Dispose(ref m_StatInfo);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_Description);
		Helper.Dispose(ref m_IconURL);
		Helper.Dispose(ref m_FlavorText);
	}

	public void Get(out PlayerAchievement output)
	{
		output = default(PlayerAchievement);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct PlayerStatInfo
{
	public Utf8String Name { get; set; }

	public int CurrentValue { get; set; }

	public int ThresholdValue { get; set; }

	internal void Set(ref PlayerStatInfoInternal other)
	{
		Name = other.Name;
		CurrentValue = other.CurrentValue;
		ThresholdValue = other.ThresholdValue;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PlayerStatInfoInternal : IGettable<PlayerStatInfo>, ISettable<PlayerStatInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private int m_CurrentValue;

	private int m_ThresholdValue;

	public Utf8String Name
	{
		get
		{
			Helper.Get(m_Name, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Name);
		}
	}

	public int CurrentValue
	{
		get
		{
			return m_CurrentValue;
		}
		set
		{
			m_CurrentValue = value;
		}
	}

	public int ThresholdValue
	{
		get
		{
			return m_ThresholdValue;
		}
		set
		{
			m_ThresholdValue = value;
		}
	}

	public void Set(ref PlayerStatInfo other)
	{
		m_ApiVersion = 1;
		Name = other.Name;
		CurrentValue = other.CurrentValue;
		ThresholdValue = other.ThresholdValue;
	}

	public void Set(ref PlayerStatInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Name = other.Value.Name;
			CurrentValue = other.Value.CurrentValue;
			ThresholdValue = other.Value.ThresholdValue;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Name);
	}

	public void Get(out PlayerStatInfo output)
	{
		output = default(PlayerStatInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryDefinitionsOptions
{
	public ProductUserId LocalUserId { get; set; }

	internal EpicAccountId EpicUserId_DEPRECATED { get; set; }

	internal Utf8String[] HiddenAchievementIds_DEPRECATED { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryDefinitionsOptionsInternal : ISettable<QueryDefinitionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_EpicUserId_DEPRECATED;

	private IntPtr m_HiddenAchievementIds_DEPRECATED;

	private uint m_HiddenAchievementsCount_DEPRECATED;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId EpicUserId_DEPRECATED
	{
		set
		{
			Helper.Set(value, ref m_EpicUserId_DEPRECATED);
		}
	}

	public Utf8String[] HiddenAchievementIds_DEPRECATED
	{
		set
		{
			Helper.Set(value, ref m_HiddenAchievementIds_DEPRECATED, isArrayItemAllocated: true, out m_HiddenAchievementsCount_DEPRECATED);
		}
	}

	public void Set(ref QueryDefinitionsOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		EpicUserId_DEPRECATED = other.EpicUserId_DEPRECATED;
		HiddenAchievementIds_DEPRECATED = other.HiddenAchievementIds_DEPRECATED;
	}

	public void Set(ref QueryDefinitionsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			EpicUserId_DEPRECATED = other.Value.EpicUserId_DEPRECATED;
			HiddenAchievementIds_DEPRECATED = other.Value.HiddenAchievementIds_DEPRECATED;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_EpicUserId_DEPRECATED);
		Helper.Dispose(ref m_HiddenAchievementIds_DEPRECATED);
	}
}


using Epic.OnlineServices;

public struct QueryPlayerAchievementsOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryPlayerAchievementsOptionsInternal : ISettable<QueryPlayerAchievementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryPlayerAchievementsOptions other)
	{
		m_ApiVersion = 2;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryPlayerAchievementsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct StatThresholds
{
	public Utf8String Name { get; set; }

	public int Threshold { get; set; }

	internal void Set(ref StatThresholdsInternal other)
	{
		Name = other.Name;
		Threshold = other.Threshold;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct StatThresholdsInternal : IGettable<StatThresholds>, ISettable<StatThresholds>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private int m_Threshold;

	public Utf8String Name
	{
		get
		{
			Helper.Get(m_Name, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Name);
		}
	}

	public int Threshold
	{
		get
		{
			return m_Threshold;
		}
		set
		{
			m_Threshold = value;
		}
	}

	public void Set(ref StatThresholds other)
	{
		m_ApiVersion = 1;
		Name = other.Name;
		Threshold = other.Threshold;
	}

	public void Set(ref StatThresholds? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Name = other.Value.Name;
			Threshold = other.Value.Threshold;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Name);
	}

	public void Get(out StatThresholds output)
	{
		output = default(StatThresholds);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UnlockAchievementsOptions
{
	public ProductUserId UserId { get; set; }

	public Utf8String[] AchievementIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnlockAchievementsOptionsInternal : ISettable<UnlockAchievementsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_AchievementIds;

	private uint m_AchievementsCount;

	public ProductUserId UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String[] AchievementIds
	{
		set
		{
			Helper.Set(value, ref m_AchievementIds, isArrayItemAllocated: true, out m_AchievementsCount);
		}
	}

	public void Set(ref UnlockAchievementsOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		AchievementIds = other.AchievementIds;
	}

	public void Set(ref UnlockAchievementsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			AchievementIds = other.Value.AchievementIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_AchievementIds);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

public struct UnlockedAchievement
{
	public Utf8String AchievementId { get; set; }

	public DateTimeOffset? UnlockTime { get; set; }

	internal void Set(ref UnlockedAchievementInternal other)
	{
		AchievementId = other.AchievementId;
		UnlockTime = other.UnlockTime;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnlockedAchievementInternal : IGettable<UnlockedAchievement>, ISettable<UnlockedAchievement>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AchievementId;

	private long m_UnlockTime;

	public Utf8String AchievementId
	{
		get
		{
			Helper.Get(m_AchievementId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AchievementId);
		}
	}

	public DateTimeOffset? UnlockTime
	{
		get
		{
			Helper.Get(m_UnlockTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnlockTime);
		}
	}

	public void Set(ref UnlockedAchievement other)
	{
		m_ApiVersion = 1;
		AchievementId = other.AchievementId;
		UnlockTime = other.UnlockTime;
	}

	public void Set(ref UnlockedAchievement? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AchievementId = other.Value.AchievementId;
			UnlockTime = other.Value.UnlockTime;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AchievementId);
	}

	public void Get(out UnlockedAchievement output)
	{
		output = default(UnlockedAchievement);
		output.Set(ref this);
	}
}


using System;

[Flags]
public enum BypassOption
{
	Voice = 1,
	Chat = 4,
	Gesture = 8,
	CardGames = 0x10,
	Movement = 0x20,
	Ping = 0x40,
	Inventory = 0x80,
	Crafting = 0x100,
	Clan = 0x200,
	Contacts = 0x400,
	Attack = 0x800,
	Reload = 0x1000,
	Painting = 0x2000,
	Duck = 0x4000,
	Autorun = 0x8000
}


public enum Format
{
	Unknown = -1,
	BMP = 0,
	JPEG = 2,
	PNG = 13,
	TARGA = 17,
	TIFF = 18,
	PSD = 20,
	DDS = 24,
	HDR = 26,
	EXR = 29,
	J2K = 30,
	JP2 = 31,
	WEBP = 35,
	JXR = 36
}


public enum SaveFlags
{
	DEFAULT = 0,
	BMP_SAVE_RLE = 1,
	EXR_FLOAT = 1,
	EXR_NONE = 2,
	EXR_ZIP = 4,
	EXR_PIZ = 8,
	EXR_PXR24 = 16,
	EXR_B44 = 32,
	EXR_LC = 64,
	JPEG_QUALITYSUPERB = 128,
	JPEG_QUALITYGOOD = 256,
	JPEG_QUALITYNORMAL = 512,
	JPEG_QUALITYAVERAGE = 1024,
	JPEG_QUALITYBAD = 2048,
	JPEG_PROGRESSIVE = 8192,
	JPEG_SUBSAMPLING_411 = 4096,
	JPEG_SUBSAMPLING_420 = 16384,
	JPEG_SUBSAMPLING_422 = 32768,
	JPEG_SUBSAMPLING_444 = 65536,
	JPEG_OPTIMIZE = 131072,
	JPEG_BASELINE = 262144,
	PNG_Z_BEST_SPEED = 1,
	PNG_Z_DEFAULT_COMPRESSION = 6,
	PNG_Z_BEST_COMPRESSION = 9,
	PNG_Z_NO_COMPRESSION = 256,
	PNG_INTERLACED = 512,
	PNM_SAVE_ASCII = 1,
	TIFF_CMYK = 1,
	TIFF_PACKBITS = 256,
	TIFF_DEFLATE = 512,
	TIFF_ADOBE_DEFLATE = 1024,
	TIFF_NONE = 2048,
	TIFF_CCITTFAX3 = 4096,
	TIFF_CCITTFAX4 = 8192,
	TIFF_LZW = 16384,
	TIFF_JPEG = 32768
}


public enum LoadFlags
{
	DEFAULT = 0,
	GIF_LOAD256 = 1,
	GIF_PLAYBACK = 2,
	ICO_MAKEALPHA = 1,
	JPEG_FAST = 1,
	JPEG_ACCURATE = 2,
	JPEG_CMYK = 4,
	JPEG_EXIFROTATE = 8,
	PCD_BASE = 1,
	PCD_BASEDIV4 = 2,
	PCD_BASEDIV16 = 3,
	PNG_IGNOREGAMMA = 1,
	TARGA_LOAD_RGB888 = 1,
	TIFF_CMYK = 1,
	RAW_PREVIEW = 1,
	RAW_DISPLAY = 2
}


using System;

[Serializable]
public struct Header
{
	public uint size;

	public int width;

	public int height;

	public ushort planes;

	public ushort bitCount;

	public uint compression;

	public uint sizeImage;

	public int xPelsPerMeter;

	public int yPelsPerMeter;

	public uint clrUsed;

	public uint clrImportant;
}


using System;

[Serializable]
public struct Bitmap
{
	public IntPtr data;

	public static Bitmap Null = new Bitmap
	{
		data = IntPtr.Zero
	};

	public bool IsNull => data == IntPtr.Zero;

	public void Unload()
	{
		FreeImage.Unload(this);
		data = IntPtr.Zero;
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit)]
public struct RGBQuad
{
	[FieldOffset(0)]
	public byte rgbBlue;

	[FieldOffset(1)]
	public byte rgbGreen;

	[FieldOffset(2)]
	public byte rgbRed;

	[FieldOffset(3)]
	public byte rgbReserved;

	[FieldOffset(0)]
	public uint uintValue;
}


public enum Filter
{
	Box,
	Bicubic,
	Bilinear,
	Bspline,
	CatmullRom,
	Lanczos3
}


private enum Pass
{
	Threshold,
	Kawase,
	Compose
}


public enum OverlayBlendMode
{
	Additive,
	ScreenBlend,
	Multiply,
	Overlay,
	AlphaBlend
}


public enum ResolutionType
{
	Low,
	Normal,
	High
}


public enum BlendModeType
{
	Screen,
	Add
}


using UnityEngine;

public class ReflectionProbeState
{
	public ReflectionProbe Probe;

	public GameObject ProbeInstance;

	public int ProbeRenderID = -1;

	public void InitializePrimary(Vector3 position, GameObject prefab)
	{
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Expected O, but got Unknown
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)ProbeInstance))
		{
			if (!Object.op_Implicit((Object)(object)prefab))
			{
				ProbeInstance = new GameObject();
				((Object)ProbeInstance).name = "Primary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.AddComponent<ReflectionProbe>();
				Probe.size = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
			}
			else
			{
				ProbeInstance = Object.Instantiate<GameObject>(prefab);
				((Object)ProbeInstance).name = "Primary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.GetComponent<ReflectionProbe>();
				Probe.size = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
			}
		}
	}

	public void InitializeSecondary(Vector3 position, GameObject prefab)
	{
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Expected O, but got Unknown
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)ProbeInstance))
		{
			if (!Object.op_Implicit((Object)(object)prefab))
			{
				ProbeInstance = new GameObject();
				((Object)ProbeInstance).name = "Secondary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.AddComponent<ReflectionProbe>();
				Probe.size = new Vector3(0f, 0f, 0f);
				Probe.importance = 0;
			}
			else
			{
				ProbeInstance = Object.Instantiate<GameObject>(prefab);
				((Object)ProbeInstance).name = "Secondary Reflection Probe";
				ProbeInstance.transform.position = position;
				Probe = ProbeInstance.GetComponent<ReflectionProbe>();
				Probe.size = new Vector3(0f, 0f, 0f);
				Probe.importance = 0;
			}
		}
	}
}


public enum RainType
{
	None,
	Light,
	Heavy
}


public enum CloudType
{
	None,
	Few,
	Scattered,
	Broken,
	Overcast
}


public enum AtmosphereType
{
	Clear,
	Storm,
	Dust,
	Fog
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


public enum ExposureMode
{
	Constant,
	DeltaTime
}


public enum SampleCount
{
	Low,
	Medium,
	High,
	Variable
}


private enum DebugMode
{
	Off,
	Velocity,
	NeighborMax,
	Depth
}


public enum LensFlareStyle
{
	Ghosting,
	Anamorphic,
	Combined
}


public enum TweakMode
{
	Basic,
	Complex
}


public enum HDRBloomMode
{
	Auto,
	On,
	Off
}


public enum BloomScreenBlendMode
{
	Screen,
	Add
}


public enum BloomQuality
{
	Cheap,
	High
}


public enum Resolution
{
	Low,
	High
}


public enum BlurType
{
	Standard,
	Sgx
}


public enum BlurType
{
	StandardGauss,
	SgxGauss
}


public enum MotionBlurFilter
{
	CameraMotion,
	LocalBlur,
	Reconstruction,
	ReconstructionDX11,
	ReconstructionDisc
}


public enum ColorCorrectionMode
{
	Simple,
	Advanced
}


public enum BlurType
{
	DiscBlur,
	DX11
}


public enum BlurSampleCount
{
	Low,
	Medium,
	High
}


public enum Dof34QualitySetting
{
	OnlyBackground = 1,
	BackgroundAndForeground
}


public enum DofResolution
{
	High = 2,
	Medium,
	Low
}


public enum DofBlurriness
{
	Low = 1,
	High = 2,
	VeryHigh = 4
}


public enum BokehDestination
{
	Background = 1,
	Foreground,
	BackgroundAndForeground
}


public enum EdgeDetectMode
{
	TriangleDepthNormals,
	RobertsCrossDepthNormals,
	SobelDepth,
	SobelDepthThin,
	TriangleLuminance
}


public enum OverlayBlendMode
{
	Additive,
	ScreenBlend,
	Multiply,
	Overlay,
	AlphaBlend
}


public enum SSAOSamples
{
	Low,
	Medium,
	High
}


public enum SunShaftsResolution
{
	Low,
	Normal,
	High
}


public enum ShaftsScreenBlendMode
{
	Screen,
	Add
}


public enum TiltShiftMode
{
	TiltShiftMode,
	IrisMode
}


public enum TiltShiftQuality
{
	Preview,
	Normal,
	High
}


public enum TonemapperType
{
	SimpleReinhard,
	UserCurve,
	Hable,
	Photographic,
	OptimizedHejiDawson,
	AdaptiveReinhard,
	AdaptiveReinhardAutoWhite
}


public enum AdaptiveTexSize
{
	Square16 = 0x10,
	Square32 = 0x20,
	Square64 = 0x40,
	Square128 = 0x80,
	Square256 = 0x100,
	Square512 = 0x200,
	Square1024 = 0x400
}


public enum AberrationMode
{
	Simple,
	Advanced
}


using System;
using System.Runtime.InteropServices;
using UnityEngine;

public static class BufferReadback
{
	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_CreateForTexture")]
	public static extern IntPtr CreateForTexture(IntPtr tex, uint width, uint height, uint format);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_CreateForBuffer")]
	public static extern IntPtr CreateForBuffer(IntPtr buf, uint size);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_Destroy")]
	public static extern void Destroy(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_IssueRead")]
	public static extern void IssueRead(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetDataSize")]
	public static extern uint GetDataSize(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetDataStride")]
	public static extern uint GetDataStride(IntPtr inst);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
	public static extern void GetData(IntPtr inst, ref byte data);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
	public static extern void GetData(IntPtr inst, ref Color32 data);

	[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
	public static extern void GetData(IntPtr inst, ref float data);
}


public enum PokerResult
{
	RoyalFlush,
	StraightFlush,
	FourOfAKind,
	FullHouse,
	Flush,
	Straight,
	ThreeOfAKind,
	TwoPair,
	Pair,
	HighCard
}


using System;

[Serializable]
private class DataFile
{
	public string[] RandomUsernames;
}


private struct Allocation
{
	public int Size { get; private set; }

	public object Cache { get; private set; }

	public bool? IsArrayItemAllocated { get; private set; }

	public Allocation(int size, object cache, bool? isArrayItemAllocated = null)
	{
		Size = size;
		Cache = cache;
		IsArrayItemAllocated = isArrayItemAllocated;
	}
}


using System.Runtime.InteropServices;

private struct PinnedBuffer
{
	public GCHandle Handle { get; private set; }

	public int RefCount { get; set; }

	public PinnedBuffer(GCHandle handle)
	{
		Handle = handle;
		RefCount = 1;
	}
}


using System;

private class DelegateHolder
{
	public Delegate Public { get; private set; }

	public Delegate Private { get; private set; }

	public Delegate[] StructDelegates { get; private set; }

	public ulong? NotificationId { get; set; }

	public DelegateHolder(Delegate publicDelegate, Delegate privateDelegate, params Delegate[] structDelegates)
	{
		Public = publicDelegate;
		Private = privateDelegate;
		StructDelegates = structDelegates;
	}
}


