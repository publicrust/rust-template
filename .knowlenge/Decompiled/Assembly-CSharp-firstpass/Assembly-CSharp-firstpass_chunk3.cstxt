using System;
using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Camera Motion Blur")]
public class CameraMotionBlur : PostEffectsBase
{
	public enum MotionBlurFilter
	{
		CameraMotion,
		LocalBlur,
		Reconstruction,
		ReconstructionDX11,
		ReconstructionDisc
	}

	private static float MAX_RADIUS = 10f;

	public MotionBlurFilter filterType = MotionBlurFilter.Reconstruction;

	public bool preview;

	public Vector3 previewScale = Vector3.one;

	public float movementScale;

	public float rotationScale = 1f;

	public float maxVelocity = 8f;

	public float minVelocity = 0.1f;

	public float velocityScale = 0.375f;

	public float softZDistance = 0.005f;

	public int velocityDownsample = 1;

	public LayerMask excludeLayers = LayerMask.op_Implicit(0);

	private GameObject tmpCam;

	public Shader shader;

	public Shader dx11MotionBlurShader;

	public Shader replacementClear;

	private Material motionBlurMaterial;

	private Material dx11MotionBlurMaterial;

	public Texture2D noiseTexture;

	public float jitter = 0.05f;

	public bool showVelocity;

	public float showVelocityScale = 1f;

	private Matrix4x4 currentViewProjMat;

	private Matrix4x4 prevViewProjMat;

	private int prevFrameCount;

	private bool wasActive;

	private Vector3 prevFrameForward = Vector3.forward;

	private Vector3 prevFrameUp = Vector3.up;

	private Vector3 prevFramePos = Vector3.zero;

	private Camera _camera;

	private void CalculateViewProjection()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		Matrix4x4 worldToCameraMatrix = _camera.worldToCameraMatrix;
		Matrix4x4 gPUProjectionMatrix = GL.GetGPUProjectionMatrix(_camera.projectionMatrix, true);
		currentViewProjMat = gPUProjectionMatrix * worldToCameraMatrix;
	}

	private new void Start()
	{
		CheckResources();
		if ((Object)(object)_camera == (Object)null)
		{
			_camera = ((Component)this).GetComponent<Camera>();
		}
		wasActive = ((Component)this).gameObject.activeInHierarchy;
		CalculateViewProjection();
		Remember();
		wasActive = false;
	}

	private void OnEnable()
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)_camera == (Object)null)
		{
			_camera = ((Component)this).GetComponent<Camera>();
		}
		Camera obj = _camera;
		obj.depthTextureMode = (DepthTextureMode)(obj.depthTextureMode | 1);
	}

	private void OnDisable()
	{
		if ((Object)null != (Object)(object)motionBlurMaterial)
		{
			Object.DestroyImmediate((Object)(object)motionBlurMaterial);
			motionBlurMaterial = null;
		}
		if ((Object)null != (Object)(object)dx11MotionBlurMaterial)
		{
			Object.DestroyImmediate((Object)(object)dx11MotionBlurMaterial);
			dx11MotionBlurMaterial = null;
		}
		if ((Object)null != (Object)(object)tmpCam)
		{
			Object.DestroyImmediate((Object)(object)tmpCam);
			tmpCam = null;
		}
	}

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true, needHdr: true);
		motionBlurMaterial = CheckShaderAndCreateMaterial(shader, motionBlurMaterial);
		if (supportDX11 && filterType == MotionBlurFilter.ReconstructionDX11)
		{
			dx11MotionBlurMaterial = CheckShaderAndCreateMaterial(dx11MotionBlurShader, dx11MotionBlurMaterial);
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_0383: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0393: Unknown result type (might be due to invalid IL or missing references)
		//IL_0398: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0435: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0579: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0509: Unknown result type (might be due to invalid IL or missing references)
		//IL_050e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		if (filterType == MotionBlurFilter.CameraMotion)
		{
			StartFrame();
		}
		RenderTextureFormat val = (RenderTextureFormat)(SystemInfo.SupportsRenderTextureFormat((RenderTextureFormat)13) ? 13 : 2);
		RenderTexture temporary = RenderTexture.GetTemporary(divRoundUp(((Texture)source).width, velocityDownsample), divRoundUp(((Texture)source).height, velocityDownsample), 0, val);
		int num = 1;
		int num2 = 1;
		maxVelocity = Mathf.Max(2f, maxVelocity);
		float num3 = maxVelocity;
		bool flag = filterType == MotionBlurFilter.ReconstructionDX11 && (Object)(object)dx11MotionBlurMaterial == (Object)null;
		if (filterType == MotionBlurFilter.Reconstruction || flag || filterType == MotionBlurFilter.ReconstructionDisc)
		{
			maxVelocity = Mathf.Min(maxVelocity, MAX_RADIUS);
			num = divRoundUp(((Texture)temporary).width, (int)maxVelocity);
			num2 = divRoundUp(((Texture)temporary).height, (int)maxVelocity);
			num3 = ((Texture)temporary).width / num;
		}
		else
		{
			num = divRoundUp(((Texture)temporary).width, (int)maxVelocity);
			num2 = divRoundUp(((Texture)temporary).height, (int)maxVelocity);
			num3 = ((Texture)temporary).width / num;
		}
		RenderTexture temporary2 = RenderTexture.GetTemporary(num, num2, 0, val);
		RenderTexture temporary3 = RenderTexture.GetTemporary(num, num2, 0, val);
		((Texture)temporary).filterMode = (FilterMode)0;
		((Texture)temporary2).filterMode = (FilterMode)0;
		((Texture)temporary3).filterMode = (FilterMode)0;
		if (Object.op_Implicit((Object)(object)noiseTexture))
		{
			((Texture)noiseTexture).filterMode = (FilterMode)0;
		}
		((Texture)source).wrapMode = (TextureWrapMode)1;
		((Texture)temporary).wrapMode = (TextureWrapMode)1;
		((Texture)temporary3).wrapMode = (TextureWrapMode)1;
		((Texture)temporary2).wrapMode = (TextureWrapMode)1;
		CalculateViewProjection();
		if (((Component)this).gameObject.activeInHierarchy && !wasActive)
		{
			Remember();
		}
		wasActive = ((Component)this).gameObject.activeInHierarchy;
		Matrix4x4 val2 = Matrix4x4.Inverse(currentViewProjMat);
		motionBlurMaterial.SetMatrix("_InvViewProj", val2);
		motionBlurMaterial.SetMatrix("_PrevViewProj", prevViewProjMat);
		motionBlurMaterial.SetMatrix("_ToPrevViewProjCombined", prevViewProjMat * val2);
		motionBlurMaterial.SetFloat("_MaxVelocity", num3);
		motionBlurMaterial.SetFloat("_MaxRadiusOrKInPaper", num3);
		motionBlurMaterial.SetFloat("_MinVelocity", minVelocity);
		motionBlurMaterial.SetFloat("_VelocityScale", velocityScale);
		motionBlurMaterial.SetFloat("_Jitter", jitter);
		motionBlurMaterial.SetTexture("_NoiseTex", (Texture)(object)noiseTexture);
		motionBlurMaterial.SetTexture("_VelTex", (Texture)(object)temporary);
		motionBlurMaterial.SetTexture("_NeighbourMaxTex", (Texture)(object)temporary3);
		motionBlurMaterial.SetTexture("_TileTexDebug", (Texture)(object)temporary2);
		if (preview)
		{
			Matrix4x4 worldToCameraMatrix = _camera.worldToCameraMatrix;
			Matrix4x4 identity = Matrix4x4.identity;
			((Matrix4x4)(ref identity)).SetTRS(previewScale * 0.3333f, Quaternion.identity, Vector3.one);
			Matrix4x4 gPUProjectionMatrix = GL.GetGPUProjectionMatrix(_camera.projectionMatrix, true);
			prevViewProjMat = gPUProjectionMatrix * identity * worldToCameraMatrix;
			motionBlurMaterial.SetMatrix("_PrevViewProj", prevViewProjMat);
			motionBlurMaterial.SetMatrix("_ToPrevViewProjCombined", prevViewProjMat * val2);
		}
		if (filterType == MotionBlurFilter.CameraMotion)
		{
			Vector4 zero = Vector4.zero;
			float num4 = Vector3.Dot(((Component)this).transform.up, Vector3.up);
			Vector3 val3 = prevFramePos - ((Component)this).transform.position;
			float magnitude = ((Vector3)(ref val3)).magnitude;
			float num5 = 1f;
			num5 = Vector3.Angle(((Component)this).transform.up, prevFrameUp) / _camera.fieldOfView * ((float)((Texture)source).width * 0.75f);
			zero.x = rotationScale * num5;
			num5 = Vector3.Angle(((Component)this).transform.forward, prevFrameForward) / _camera.fieldOfView * ((float)((Texture)source).width * 0.75f);
			zero.y = rotationScale * num4 * num5;
			num5 = Vector3.Angle(((Component)this).transform.forward, prevFrameForward) / _camera.fieldOfView * ((float)((Texture)source).width * 0.75f);
			zero.z = rotationScale * (1f - num4) * num5;
			if (magnitude > Mathf.Epsilon && movementScale > Mathf.Epsilon)
			{
				zero.w = movementScale * Vector3.Dot(((Component)this).transform.forward, val3) * ((float)((Texture)source).width * 0.5f);
				zero.x += movementScale * Vector3.Dot(((Component)this).transform.up, val3) * ((float)((Texture)source).width * 0.5f);
				zero.y += movementScale * Vector3.Dot(((Component)this).transform.right, val3) * ((float)((Texture)source).width * 0.5f);
			}
			if (preview)
			{
				motionBlurMaterial.SetVector("_BlurDirectionPacked", new Vector4(previewScale.y, previewScale.x, 0f, previewScale.z) * 0.5f * _camera.fieldOfView);
			}
			else
			{
				motionBlurMaterial.SetVector("_BlurDirectionPacked", zero);
			}
		}
		else
		{
			Graphics.Blit((Texture)(object)source, temporary, motionBlurMaterial, 0);
			Camera val4 = null;
			if (((LayerMask)(ref excludeLayers)).value != 0)
			{
				val4 = GetTmpCam();
			}
			if (Object.op_Implicit((Object)(object)val4) && ((LayerMask)(ref excludeLayers)).value != 0 && Object.op_Implicit((Object)(object)replacementClear) && replacementClear.isSupported)
			{
				val4.targetTexture = temporary;
				val4.cullingMask = LayerMask.op_Implicit(excludeLayers);
				val4.RenderWithShader(replacementClear, "");
			}
		}
		if (!preview && Time.frameCount != prevFrameCount)
		{
			prevFrameCount = Time.frameCount;
			Remember();
		}
		((Texture)source).filterMode = (FilterMode)1;
		if (showVelocity)
		{
			motionBlurMaterial.SetFloat("_DisplayVelocityScale", showVelocityScale);
			Graphics.Blit((Texture)(object)temporary, destination, motionBlurMaterial, 1);
		}
		else if (filterType == MotionBlurFilter.ReconstructionDX11 && !flag)
		{
			dx11MotionBlurMaterial.SetFloat("_MinVelocity", minVelocity);
			dx11MotionBlurMaterial.SetFloat("_VelocityScale", velocityScale);
			dx11MotionBlurMaterial.SetFloat("_Jitter", jitter);
			dx11MotionBlurMaterial.SetTexture("_NoiseTex", (Texture)(object)noiseTexture);
			dx11MotionBlurMaterial.SetTexture("_VelTex", (Texture)(object)temporary);
			dx11MotionBlurMaterial.SetTexture("_NeighbourMaxTex", (Texture)(object)temporary3);
			dx11MotionBlurMaterial.SetFloat("_SoftZDistance", Mathf.Max(0.00025f, softZDistance));
			dx11MotionBlurMaterial.SetFloat("_MaxRadiusOrKInPaper", num3);
			Graphics.Blit((Texture)(object)temporary, temporary2, dx11MotionBlurMaterial, 0);
			Graphics.Blit((Texture)(object)temporary2, temporary3, dx11MotionBlurMaterial, 1);
			Graphics.Blit((Texture)(object)source, destination, dx11MotionBlurMaterial, 2);
		}
		else if (filterType == MotionBlurFilter.Reconstruction || flag)
		{
			motionBlurMaterial.SetFloat("_SoftZDistance", Mathf.Max(0.00025f, softZDistance));
			Graphics.Blit((Texture)(object)temporary, temporary2, motionBlurMaterial, 2);
			Graphics.Blit((Texture)(object)temporary2, temporary3, motionBlurMaterial, 3);
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 4);
		}
		else if (filterType == MotionBlurFilter.CameraMotion)
		{
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 6);
		}
		else if (filterType == MotionBlurFilter.ReconstructionDisc)
		{
			motionBlurMaterial.SetFloat("_SoftZDistance", Mathf.Max(0.00025f, softZDistance));
			Graphics.Blit((Texture)(object)temporary, temporary2, motionBlurMaterial, 2);
			Graphics.Blit((Texture)(object)temporary2, temporary3, motionBlurMaterial, 3);
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 7);
		}
		else
		{
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 5);
		}
		RenderTexture.ReleaseTemporary(temporary);
		RenderTexture.ReleaseTemporary(temporary2);
		RenderTexture.ReleaseTemporary(temporary3);
	}

	private void Remember()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		prevViewProjMat = currentViewProjMat;
		prevFrameForward = ((Component)this).transform.forward;
		prevFrameUp = ((Component)this).transform.up;
		prevFramePos = ((Component)this).transform.position;
	}

	private Camera GetTmpCam()
	{
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Expected O, but got Unknown
		if ((Object)(object)tmpCam == (Object)null)
		{
			string text = "_" + ((Object)_camera).name + "_MotionBlurTmpCam";
			GameObject val = GameObject.Find(text);
			if ((Object)null == (Object)(object)val)
			{
				tmpCam = new GameObject(text, new Type[1] { typeof(Camera) });
			}
			else
			{
				tmpCam = val;
			}
		}
		((Object)tmpCam).hideFlags = (HideFlags)52;
		tmpCam.transform.position = ((Component)_camera).transform.position;
		tmpCam.transform.rotation = ((Component)_camera).transform.rotation;
		tmpCam.transform.localScale = ((Component)_camera).transform.localScale;
		tmpCam.GetComponent<Camera>().CopyFrom(_camera);
		((Behaviour)tmpCam.GetComponent<Camera>()).enabled = false;
		tmpCam.GetComponent<Camera>().depthTextureMode = (DepthTextureMode)0;
		tmpCam.GetComponent<Camera>().clearFlags = (CameraClearFlags)4;
		return tmpCam.GetComponent<Camera>();
	}

	private void StartFrame()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		prevFramePos = Vector3.Slerp(prevFramePos, ((Component)this).transform.position, 0.75f);
	}

	private static int divRoundUp(int x, int d)
	{
		return (x + d - 1) / d;
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (Curves, Saturation)")]
public class ColorCorrectionCurves : PostEffectsBase, IImageEffect
{
	public enum ColorCorrectionMode
	{
		Simple,
		Advanced
	}

	public AnimationCurve redChannel = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	public AnimationCurve greenChannel = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	public AnimationCurve blueChannel = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	public bool useDepthCorrection;

	public AnimationCurve zCurve = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	public AnimationCurve depthRedChannel = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	public AnimationCurve depthGreenChannel = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	public AnimationCurve depthBlueChannel = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
	{
		new Keyframe(0f, 0f),
		new Keyframe(1f, 1f)
	});

	private Material ccMaterial;

	private Material ccDepthMaterial;

	private Material selectiveCcMaterial;

	private Texture2D rgbChannelTex;

	private Texture2D rgbDepthChannelTex;

	private Texture2D zCurveTex;

	public float saturation = 1f;

	public bool selectiveCc;

	public Color selectiveFromColor = Color.white;

	public Color selectiveToColor = Color.white;

	public ColorCorrectionMode mode;

	public bool updateTextures = true;

	public Shader colorCorrectionCurvesShader;

	public Shader simpleColorCorrectionCurvesShader;

	public Shader colorCorrectionSelectiveShader;

	private bool updateTexturesOnStartup = true;

	private new void Start()
	{
		base.Start();
		updateTexturesOnStartup = true;
	}

	private void Awake()
	{
	}

	public override bool CheckResources()
	{
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Expected O, but got Unknown
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Expected O, but got Unknown
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Expected O, but got Unknown
		CheckSupport(mode == ColorCorrectionMode.Advanced);
		ccMaterial = CheckShaderAndCreateMaterial(simpleColorCorrectionCurvesShader, ccMaterial);
		ccDepthMaterial = CheckShaderAndCreateMaterial(colorCorrectionCurvesShader, ccDepthMaterial);
		selectiveCcMaterial = CheckShaderAndCreateMaterial(colorCorrectionSelectiveShader, selectiveCcMaterial);
		if (!Object.op_Implicit((Object)(object)rgbChannelTex))
		{
			rgbChannelTex = new Texture2D(256, 4, (TextureFormat)5, false, true);
		}
		if (!Object.op_Implicit((Object)(object)rgbDepthChannelTex))
		{
			rgbDepthChannelTex = new Texture2D(256, 4, (TextureFormat)5, false, true);
		}
		if (!Object.op_Implicit((Object)(object)zCurveTex))
		{
			zCurveTex = new Texture2D(256, 1, (TextureFormat)5, false, true);
		}
		((Object)rgbChannelTex).hideFlags = (HideFlags)52;
		((Object)rgbDepthChannelTex).hideFlags = (HideFlags)52;
		((Object)zCurveTex).hideFlags = (HideFlags)52;
		((Texture)rgbChannelTex).wrapMode = (TextureWrapMode)1;
		((Texture)rgbDepthChannelTex).wrapMode = (TextureWrapMode)1;
		((Texture)zCurveTex).wrapMode = (TextureWrapMode)1;
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public void UpdateParameters()
	{
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		CheckResources();
		if (redChannel != null && greenChannel != null && blueChannel != null)
		{
			for (float num = 0f; num <= 1f; num += 0.003921569f)
			{
				float num2 = Mathf.Clamp(redChannel.Evaluate(num), 0f, 1f);
				float num3 = Mathf.Clamp(greenChannel.Evaluate(num), 0f, 1f);
				float num4 = Mathf.Clamp(blueChannel.Evaluate(num), 0f, 1f);
				rgbChannelTex.SetPixel((int)Mathf.Floor(num * 255f), 0, new Color(num2, num2, num2));
				rgbChannelTex.SetPixel((int)Mathf.Floor(num * 255f), 1, new Color(num3, num3, num3));
				rgbChannelTex.SetPixel((int)Mathf.Floor(num * 255f), 2, new Color(num4, num4, num4));
				float num5 = Mathf.Clamp(zCurve.Evaluate(num), 0f, 1f);
				zCurveTex.SetPixel((int)Mathf.Floor(num * 255f), 0, new Color(num5, num5, num5));
				num2 = Mathf.Clamp(depthRedChannel.Evaluate(num), 0f, 1f);
				num3 = Mathf.Clamp(depthGreenChannel.Evaluate(num), 0f, 1f);
				num4 = Mathf.Clamp(depthBlueChannel.Evaluate(num), 0f, 1f);
				rgbDepthChannelTex.SetPixel((int)Mathf.Floor(num * 255f), 0, new Color(num2, num2, num2));
				rgbDepthChannelTex.SetPixel((int)Mathf.Floor(num * 255f), 1, new Color(num3, num3, num3));
				rgbDepthChannelTex.SetPixel((int)Mathf.Floor(num * 255f), 2, new Color(num4, num4, num4));
			}
			rgbChannelTex.Apply();
			rgbDepthChannelTex.Apply();
			zCurveTex.Apply();
		}
	}

	private void UpdateTextures()
	{
		UpdateParameters();
	}

	public bool IsActive()
	{
		if (((Behaviour)this).enabled)
		{
			return CheckResources();
		}
		return false;
	}

	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		if (updateTexturesOnStartup)
		{
			UpdateParameters();
			updateTexturesOnStartup = false;
		}
		if (useDepthCorrection)
		{
			Camera component = ((Component)this).GetComponent<Camera>();
			component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 1);
		}
		RenderTexture val = destination;
		if (selectiveCc)
		{
			val = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height);
		}
		if (useDepthCorrection)
		{
			ccDepthMaterial.SetTexture("_RgbTex", (Texture)(object)rgbChannelTex);
			ccDepthMaterial.SetTexture("_ZCurve", (Texture)(object)zCurveTex);
			ccDepthMaterial.SetTexture("_RgbDepthTex", (Texture)(object)rgbDepthChannelTex);
			ccDepthMaterial.SetFloat("_Saturation", saturation);
			Graphics.Blit((Texture)(object)source, val, ccDepthMaterial);
		}
		else
		{
			ccMaterial.SetTexture("_RgbTex", (Texture)(object)rgbChannelTex);
			ccMaterial.SetFloat("_Saturation", saturation);
			Graphics.Blit((Texture)(object)source, val, ccMaterial);
		}
		if (selectiveCc)
		{
			selectiveCcMaterial.SetColor("selColor", selectiveFromColor);
			selectiveCcMaterial.SetColor("targetColor", selectiveToColor);
			Graphics.Blit((Texture)(object)val, destination, selectiveCcMaterial);
			RenderTexture.ReleaseTemporary(val);
		}
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (3D Lookup Texture)")]
public class ColorCorrectionLookup : PostEffectsBase
{
	public Shader shader;

	private Material material;

	public Texture3D converted3DLut;

	public string basedOnTempTex = "";

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		material = CheckShaderAndCreateMaterial(shader, material);
		if (!isSupported || !SystemInfo.supports3DTextures)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)material))
		{
			Object.DestroyImmediate((Object)(object)material);
			material = null;
		}
	}

	private void OnDestroy()
	{
		if (Object.op_Implicit((Object)(object)converted3DLut))
		{
			Object.DestroyImmediate((Object)(object)converted3DLut);
		}
		converted3DLut = null;
	}

	public void SetIdentityLut()
	{
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Expected O, but got Unknown
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		int num = 16;
		Color[] array = (Color[])(object)new Color[num * num * num];
		float num2 = 1f / (1f * (float)num - 1f);
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num; j++)
			{
				for (int k = 0; k < num; k++)
				{
					array[i + j * num + k * num * num] = new Color((float)i * 1f * num2, (float)j * 1f * num2, (float)k * 1f * num2, 1f);
				}
			}
		}
		if (Object.op_Implicit((Object)(object)converted3DLut))
		{
			Object.DestroyImmediate((Object)(object)converted3DLut);
		}
		converted3DLut = new Texture3D(num, num, num, (TextureFormat)5, false);
		converted3DLut.SetPixels(array);
		converted3DLut.Apply();
		basedOnTempTex = "";
	}

	public bool ValidDimensions(Texture2D tex2d)
	{
		if (!Object.op_Implicit((Object)(object)tex2d))
		{
			return false;
		}
		if (((Texture)tex2d).height != Mathf.FloorToInt(Mathf.Sqrt((float)((Texture)tex2d).width)))
		{
			return false;
		}
		return true;
	}

	public void Convert(Texture2D temp2DTex, string path)
	{
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Expected O, but got Unknown
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		if (Object.op_Implicit((Object)(object)temp2DTex))
		{
			int num = ((Texture)temp2DTex).width * ((Texture)temp2DTex).height;
			num = ((Texture)temp2DTex).height;
			if (!ValidDimensions(temp2DTex))
			{
				Debug.LogWarning((object)("The given 2D texture " + ((Object)temp2DTex).name + " cannot be used as a 3D LUT."));
				basedOnTempTex = "";
				return;
			}
			Color[] pixels = temp2DTex.GetPixels();
			Color[] array = (Color[])(object)new Color[pixels.Length];
			for (int i = 0; i < num; i++)
			{
				for (int j = 0; j < num; j++)
				{
					for (int k = 0; k < num; k++)
					{
						int num2 = num - j - 1;
						array[i + j * num + k * num * num] = pixels[k * num + i + num2 * num * num];
					}
				}
			}
			if (Object.op_Implicit((Object)(object)converted3DLut))
			{
				Object.DestroyImmediate((Object)(object)converted3DLut);
			}
			converted3DLut = new Texture3D(num, num, num, (TextureFormat)5, false);
			converted3DLut.SetPixels(array);
			converted3DLut.Apply();
			basedOnTempTex = path;
		}
		else
		{
			Debug.LogError((object)"Couldn't color correct with 3D LUT texture. Image Effect will be disabled.");
		}
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Invalid comparison between Unknown and I4
		if (!CheckResources() || !SystemInfo.supports3DTextures)
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		if ((Object)(object)converted3DLut == (Object)null)
		{
			SetIdentityLut();
		}
		int width = ((Texture)converted3DLut).width;
		((Texture)converted3DLut).wrapMode = (TextureWrapMode)1;
		material.SetFloat("_Scale", (float)(width - 1) / (1f * (float)width));
		material.SetFloat("_Offset", 1f / (2f * (float)width));
		material.SetTexture("_ClutTex", (Texture)(object)converted3DLut);
		Graphics.Blit((Texture)(object)source, destination, material, ((int)QualitySettings.activeColorSpace == 1) ? 1 : 0);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (Ramp)")]
public class ColorCorrectionRamp : ImageEffectBase
{
	public Texture textureRamp;

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		base.material.SetTexture("_RampTex", textureRamp);
		Graphics.Blit((Texture)(object)source, destination, base.material);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Color Adjustments/Contrast Enhance (Unsharp Mask)")]
internal class ContrastEnhance : PostEffectsBase
{
	public float intensity = 0.5f;

	public float threshold;

	private Material separableBlurMaterial;

	private Material contrastCompositeMaterial;

	public float blurSpread = 1f;

	public Shader separableBlurShader;

	public Shader contrastCompositeShader;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		contrastCompositeMaterial = CheckShaderAndCreateMaterial(contrastCompositeShader, contrastCompositeMaterial);
		separableBlurMaterial = CheckShaderAndCreateMaterial(separableBlurShader, separableBlurMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		int width = ((Texture)source).width;
		int height = ((Texture)source).height;
		RenderTexture temporary = RenderTexture.GetTemporary(width / 2, height / 2, 0);
		Graphics.Blit((Texture)(object)source, temporary);
		RenderTexture temporary2 = RenderTexture.GetTemporary(width / 4, height / 4, 0);
		Graphics.Blit((Texture)(object)temporary, temporary2);
		RenderTexture.ReleaseTemporary(temporary);
		separableBlurMaterial.SetVector("offsets", new Vector4(0f, blurSpread * 1f / (float)((Texture)temporary2).height, 0f, 0f));
		RenderTexture temporary3 = RenderTexture.GetTemporary(width / 4, height / 4, 0);
		Graphics.Blit((Texture)(object)temporary2, temporary3, separableBlurMaterial);
		RenderTexture.ReleaseTemporary(temporary2);
		separableBlurMaterial.SetVector("offsets", new Vector4(blurSpread * 1f / (float)((Texture)temporary2).width, 0f, 0f, 0f));
		temporary2 = RenderTexture.GetTemporary(width / 4, height / 4, 0);
		Graphics.Blit((Texture)(object)temporary3, temporary2, separableBlurMaterial);
		RenderTexture.ReleaseTemporary(temporary3);
		contrastCompositeMaterial.SetTexture("_MainTexBlurred", (Texture)(object)temporary2);
		contrastCompositeMaterial.SetFloat("intensity", intensity);
		contrastCompositeMaterial.SetFloat("threshhold", threshold);
		Graphics.Blit((Texture)(object)source, destination, contrastCompositeMaterial);
		RenderTexture.ReleaseTemporary(temporary2);
	}
}


using UnityEngine;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Color Adjustments/Contrast Stretch")]
public class ContrastStretch : MonoBehaviour
{
	public float adaptationSpeed = 0.02f;

	public float limitMinimum = 0.2f;

	public float limitMaximum = 0.6f;

	private RenderTexture[] adaptRenderTex = (RenderTexture[])(object)new RenderTexture[2];

	private int curAdaptIndex;

	public Shader shaderLum;

	private Material m_materialLum;

	public Shader shaderReduce;

	private Material m_materialReduce;

	public Shader shaderAdapt;

	private Material m_materialAdapt;

	public Shader shaderApply;

	private Material m_materialApply;

	protected Material materialLum
	{
		get
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			if ((Object)(object)m_materialLum == (Object)null)
			{
				m_materialLum = new Material(shaderLum);
				((Object)m_materialLum).hideFlags = (HideFlags)61;
			}
			return m_materialLum;
		}
	}

	protected Material materialReduce
	{
		get
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			if ((Object)(object)m_materialReduce == (Object)null)
			{
				m_materialReduce = new Material(shaderReduce);
				((Object)m_materialReduce).hideFlags = (HideFlags)61;
			}
			return m_materialReduce;
		}
	}

	protected Material materialAdapt
	{
		get
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			if ((Object)(object)m_materialAdapt == (Object)null)
			{
				m_materialAdapt = new Material(shaderAdapt);
				((Object)m_materialAdapt).hideFlags = (HideFlags)61;
			}
			return m_materialAdapt;
		}
	}

	protected Material materialApply
	{
		get
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			if ((Object)(object)m_materialApply == (Object)null)
			{
				m_materialApply = new Material(shaderApply);
				((Object)m_materialApply).hideFlags = (HideFlags)61;
			}
			return m_materialApply;
		}
	}

	private void Start()
	{
		if (!SystemInfo.supportsImageEffects)
		{
			((Behaviour)this).enabled = false;
		}
		else if (!shaderAdapt.isSupported || !shaderApply.isSupported || !shaderLum.isSupported || !shaderReduce.isSupported)
		{
			((Behaviour)this).enabled = false;
		}
	}

	private void OnEnable()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Expected O, but got Unknown
		for (int i = 0; i < 2; i++)
		{
			if (!Object.op_Implicit((Object)(object)adaptRenderTex[i]))
			{
				adaptRenderTex[i] = new RenderTexture(1, 1, 0);
				((Object)adaptRenderTex[i]).hideFlags = (HideFlags)61;
			}
		}
	}

	private void OnDisable()
	{
		for (int i = 0; i < 2; i++)
		{
			Object.DestroyImmediate((Object)(object)adaptRenderTex[i]);
			adaptRenderTex[i] = null;
		}
		if (Object.op_Implicit((Object)(object)m_materialLum))
		{
			Object.DestroyImmediate((Object)(object)m_materialLum);
		}
		if (Object.op_Implicit((Object)(object)m_materialReduce))
		{
			Object.DestroyImmediate((Object)(object)m_materialReduce);
		}
		if (Object.op_Implicit((Object)(object)m_materialAdapt))
		{
			Object.DestroyImmediate((Object)(object)m_materialAdapt);
		}
		if (Object.op_Implicit((Object)(object)m_materialApply))
		{
			Object.DestroyImmediate((Object)(object)m_materialApply);
		}
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		RenderTexture val = RenderTexture.GetTemporary(((Texture)source).width / 1, ((Texture)source).height / 1);
		Graphics.Blit((Texture)(object)source, val, materialLum);
		while (((Texture)val).width > 1 || ((Texture)val).height > 1)
		{
			int num = ((Texture)val).width / 2;
			if (num < 1)
			{
				num = 1;
			}
			int num2 = ((Texture)val).height / 2;
			if (num2 < 1)
			{
				num2 = 1;
			}
			RenderTexture temporary = RenderTexture.GetTemporary(num, num2);
			Graphics.Blit((Texture)(object)val, temporary, materialReduce);
			RenderTexture.ReleaseTemporary(val);
			val = temporary;
		}
		CalculateAdaptation((Texture)(object)val);
		materialApply.SetTexture("_AdaptTex", (Texture)(object)adaptRenderTex[curAdaptIndex]);
		Graphics.Blit((Texture)(object)source, destination, materialApply);
		RenderTexture.ReleaseTemporary(val);
	}

	private void CalculateAdaptation(Texture curTexture)
	{
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		int num = curAdaptIndex;
		curAdaptIndex = (curAdaptIndex + 1) % 2;
		float num2 = 1f - Mathf.Pow(1f - adaptationSpeed, 30f * Time.deltaTime);
		num2 = Mathf.Clamp(num2, 0.01f, 1f);
		materialAdapt.SetTexture("_CurTex", curTexture);
		materialAdapt.SetVector("_AdaptParams", new Vector4(num2, limitMinimum, limitMaximum, 0f));
		Graphics.SetRenderTarget(adaptRenderTex[curAdaptIndex]);
		GL.Clear(false, true, Color.black);
		Graphics.Blit((Texture)(object)adaptRenderTex[num], adaptRenderTex[curAdaptIndex], materialAdapt);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Edge Detection/Crease Shading")]
internal class CreaseShading : PostEffectsBase
{
	public float intensity = 0.5f;

	public int softness = 1;

	public float spread = 1f;

	public Shader blurShader;

	private Material blurMaterial;

	public Shader depthFetchShader;

	private Material depthFetchMaterial;

	public Shader creaseApplyShader;

	private Material creaseApplyMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		blurMaterial = CheckShaderAndCreateMaterial(blurShader, blurMaterial);
		depthFetchMaterial = CheckShaderAndCreateMaterial(depthFetchShader, depthFetchMaterial);
		creaseApplyMaterial = CheckShaderAndCreateMaterial(creaseApplyShader, creaseApplyMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		int width = ((Texture)source).width;
		int height = ((Texture)source).height;
		float num = 1f * (float)width / (1f * (float)height);
		float num2 = 0.001953125f;
		RenderTexture temporary = RenderTexture.GetTemporary(width, height, 0);
		RenderTexture val = RenderTexture.GetTemporary(width / 2, height / 2, 0);
		Graphics.Blit((Texture)(object)source, temporary, depthFetchMaterial);
		Graphics.Blit((Texture)(object)temporary, val);
		for (int i = 0; i < softness; i++)
		{
			RenderTexture temporary2 = RenderTexture.GetTemporary(width / 2, height / 2, 0);
			blurMaterial.SetVector("offsets", new Vector4(0f, spread * num2, 0f, 0f));
			Graphics.Blit((Texture)(object)val, temporary2, blurMaterial);
			RenderTexture.ReleaseTemporary(val);
			val = temporary2;
			temporary2 = RenderTexture.GetTemporary(width / 2, height / 2, 0);
			blurMaterial.SetVector("offsets", new Vector4(spread * num2 / num, 0f, 0f, 0f));
			Graphics.Blit((Texture)(object)val, temporary2, blurMaterial);
			RenderTexture.ReleaseTemporary(val);
			val = temporary2;
		}
		creaseApplyMaterial.SetTexture("_HrDepthTex", (Texture)(object)temporary);
		creaseApplyMaterial.SetTexture("_LrDepthTex", (Texture)(object)val);
		creaseApplyMaterial.SetFloat("intensity", intensity);
		Graphics.Blit((Texture)(object)source, destination, creaseApplyMaterial);
		RenderTexture.ReleaseTemporary(temporary);
		RenderTexture.ReleaseTemporary(val);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Depth-aware Background Blur")]
public class DepthAwareBackgroundBlur : DepthOfField
{
	public float StartDistance = 20f;

	public float BlurSize = 5f;

	public BlurSampleCount BlurQuality;

	private void Awake()
	{
		base.ForceOnlyFarBlur = true;
		focalLength = StartDistance;
		maxBlurSize = BlurSize;
		blurSampleCount = BlurQuality;
	}
}


using System;
using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Depth of Field (Lens Blur, Scatter, DX11)")]
public class DepthOfField : PostEffectsBase
{
	public enum BlurType
	{
		DiscBlur,
		DX11
	}

	public enum BlurSampleCount
	{
		Low,
		Medium,
		High
	}

	public bool visualizeFocus;

	public float focalLength = 10f;

	public float focalSize = 0.05f;

	public float aperture = 11.5f;

	public Transform focalTransform;

	public float maxBlurSize = 2f;

	public bool highResolution;

	public BlurType blurType;

	public BlurSampleCount blurSampleCount = BlurSampleCount.High;

	public bool nearBlur;

	public float foregroundOverlap = 1f;

	private bool forceOnlyFarBlur;

	public Shader dofHdrShader;

	private Material dofHdrMaterial;

	public Shader dx11BokehShader;

	private Material dx11bokehMaterial;

	public float dx11BokehThreshold = 0.5f;

	public float dx11SpawnHeuristic = 0.0875f;

	public Texture2D dx11BokehTexture;

	public float dx11BokehScale = 1.2f;

	public float dx11BokehIntensity = 2.5f;

	private float focalDistance01 = 10f;

	private ComputeBuffer cbDrawArgs;

	private ComputeBuffer cbPoints;

	private float internalBlurWidth = 1f;

	public bool ForceOnlyFarBlur
	{
		get
		{
			return forceOnlyFarBlur;
		}
		set
		{
			forceOnlyFarBlur = value;
		}
	}

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		dofHdrMaterial = CheckShaderAndCreateMaterial(dofHdrShader, dofHdrMaterial);
		if (supportDX11 && blurType == BlurType.DX11)
		{
			dx11bokehMaterial = CheckShaderAndCreateMaterial(dx11BokehShader, dx11bokehMaterial);
			CreateComputeResources();
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnEnable()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Camera component = ((Component)this).GetComponent<Camera>();
		component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 1);
	}

	private void OnDisable()
	{
		ReleaseComputeResources();
		if (Object.op_Implicit((Object)(object)dofHdrMaterial))
		{
			Object.DestroyImmediate((Object)(object)dofHdrMaterial);
		}
		dofHdrMaterial = null;
		if (Object.op_Implicit((Object)(object)dx11bokehMaterial))
		{
			Object.DestroyImmediate((Object)(object)dx11bokehMaterial);
		}
		dx11bokehMaterial = null;
	}

	private void ReleaseComputeResources()
	{
		if (cbDrawArgs != null)
		{
			cbDrawArgs.Release();
		}
		cbDrawArgs = null;
		if (cbPoints != null)
		{
			cbPoints.Release();
		}
		cbPoints = null;
	}

	private void CreateComputeResources()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Expected O, but got Unknown
		if (cbDrawArgs == null)
		{
			cbDrawArgs = new ComputeBuffer(1, 16, (ComputeBufferType)256);
			int[] data = new int[4] { 0, 1, 0, 0 };
			cbDrawArgs.SetData((Array)data);
		}
		if (cbPoints == null)
		{
			cbPoints = new ComputeBuffer(90000, 28, (ComputeBufferType)2);
		}
	}

	private float FocalDistance01(float worldDist)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		return ((Component)this).GetComponent<Camera>().WorldToViewportPoint((worldDist - ((Component)this).GetComponent<Camera>().nearClipPlane) * ((Component)((Component)this).GetComponent<Camera>()).transform.forward + ((Component)((Component)this).GetComponent<Camera>()).transform.position).z / (((Component)this).GetComponent<Camera>().farClipPlane - ((Component)this).GetComponent<Camera>().nearClipPlane);
	}

	private void WriteCoc(RenderTexture fromTo, bool fgDilate)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		dofHdrMaterial.SetTexture("_FgOverlap", (Texture)null);
		KeywordUtil.EnsureKeywordState(dofHdrMaterial, "FORCE_ONLY_FAR_BLUR", forceOnlyFarBlur);
		if (nearBlur && fgDilate)
		{
			int num = ((Texture)fromTo).width / 2;
			int num2 = ((Texture)fromTo).height / 2;
			RenderTexture temporary = RenderTexture.GetTemporary(num, num2, 0, fromTo.format);
			Graphics.Blit((Texture)(object)fromTo, temporary, dofHdrMaterial, 4);
			float num3 = internalBlurWidth * foregroundOverlap;
			dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, num3, 0f, num3));
			RenderTexture temporary2 = RenderTexture.GetTemporary(num, num2, 0, fromTo.format);
			Graphics.Blit((Texture)(object)temporary, temporary2, dofHdrMaterial, 2);
			RenderTexture.ReleaseTemporary(temporary);
			dofHdrMaterial.SetVector("_Offsets", new Vector4(num3, 0f, 0f, num3));
			temporary = RenderTexture.GetTemporary(num, num2, 0, fromTo.format);
			Graphics.Blit((Texture)(object)temporary2, temporary, dofHdrMaterial, 2);
			RenderTexture.ReleaseTemporary(temporary2);
			dofHdrMaterial.SetTexture("_FgOverlap", (Texture)(object)temporary);
			fromTo.MarkRestoreExpected();
			Graphics.Blit((Texture)(object)fromTo, fromTo, dofHdrMaterial, 13);
			RenderTexture.ReleaseTemporary(temporary);
		}
		else
		{
			fromTo.MarkRestoreExpected();
			Graphics.Blit((Texture)(object)fromTo, fromTo, dofHdrMaterial, 0);
		}
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Invalid comparison between Unknown and I4
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0965: Unknown result type (might be due to invalid IL or missing references)
		//IL_0982: Unknown result type (might be due to invalid IL or missing references)
		//IL_052a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0590: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07af: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_087b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0880: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0766: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		RenderTexture val = null;
		if ((int)source.format != 2)
		{
			val = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, (RenderTextureFormat)2);
			Graphics.Blit((Texture)(object)source, val);
			source = val;
		}
		if (aperture < 0f)
		{
			aperture = 0f;
		}
		if (maxBlurSize < 0.1f)
		{
			maxBlurSize = 0.1f;
		}
		focalSize = Mathf.Clamp(focalSize, 0f, 2f);
		internalBlurWidth = Mathf.Max(maxBlurSize, 0f);
		focalDistance01 = (Object.op_Implicit((Object)(object)focalTransform) ? (((Component)this).GetComponent<Camera>().WorldToViewportPoint(focalTransform.position).z / ((Component)this).GetComponent<Camera>().farClipPlane) : FocalDistance01(focalLength));
		dofHdrMaterial.SetVector("_CurveParams", new Vector4(1f, focalSize, aperture / 10f, focalDistance01));
		RenderTexture val2 = null;
		RenderTexture val3 = null;
		RenderTexture val4 = null;
		RenderTexture val5 = null;
		float num = internalBlurWidth * foregroundOverlap;
		if (visualizeFocus)
		{
			WriteCoc(source, fgDilate: true);
			Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, 16);
		}
		else if (blurType == BlurType.DX11 && Object.op_Implicit((Object)(object)dx11bokehMaterial))
		{
			if (highResolution)
			{
				internalBlurWidth = ((internalBlurWidth < 0.1f) ? 0.1f : internalBlurWidth);
				num = internalBlurWidth * foregroundOverlap;
				val2 = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, source.format);
				RenderTexture temporary = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, source.format);
				WriteCoc(source, fgDilate: false);
				val4 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				val5 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				Graphics.Blit((Texture)(object)source, val4, dofHdrMaterial, 15);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, 1.5f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val4, val5, dofHdrMaterial, 19);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(1.5f, 0f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val5, val4, dofHdrMaterial, 19);
				if (nearBlur)
				{
					Graphics.Blit((Texture)(object)source, val5, dofHdrMaterial, 4);
				}
				dx11bokehMaterial.SetTexture("_BlurredColor", (Texture)(object)val4);
				dx11bokehMaterial.SetFloat("_SpawnHeuristic", dx11SpawnHeuristic);
				dx11bokehMaterial.SetVector("_BokehParams", new Vector4(dx11BokehScale, dx11BokehIntensity, Mathf.Clamp(dx11BokehThreshold, 0.005f, 4f), internalBlurWidth));
				dx11bokehMaterial.SetTexture("_FgCocMask", (Texture)(object)(nearBlur ? val5 : null));
				Graphics.SetRandomWriteTarget(1, cbPoints);
				Graphics.Blit((Texture)(object)source, val2, dx11bokehMaterial, 0);
				Graphics.ClearRandomWriteTargets();
				if (nearBlur)
				{
					dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, num, 0f, num));
					Graphics.Blit((Texture)(object)val5, val4, dofHdrMaterial, 2);
					dofHdrMaterial.SetVector("_Offsets", new Vector4(num, 0f, 0f, num));
					Graphics.Blit((Texture)(object)val4, val5, dofHdrMaterial, 2);
					Graphics.Blit((Texture)(object)val5, val2, dofHdrMaterial, 3);
				}
				Graphics.Blit((Texture)(object)val2, temporary, dofHdrMaterial, 20);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(internalBlurWidth, 0f, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)val2, source, dofHdrMaterial, 5);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)source, temporary, dofHdrMaterial, 21);
				Graphics.SetRenderTarget(temporary);
				ComputeBuffer.CopyCount(cbPoints, cbDrawArgs, 0);
				dx11bokehMaterial.SetBuffer("pointBuffer", cbPoints);
				dx11bokehMaterial.SetTexture("_MainTex", (Texture)(object)dx11BokehTexture);
				dx11bokehMaterial.SetVector("_Screen", Vector4.op_Implicit(new Vector3(1f / (1f * (float)((Texture)source).width), 1f / (1f * (float)((Texture)source).height), internalBlurWidth)));
				dx11bokehMaterial.SetPass(2);
				Graphics.DrawProceduralIndirectNow((MeshTopology)5, cbDrawArgs, 0);
				Graphics.Blit((Texture)(object)temporary, destination);
				RenderTexture.ReleaseTemporary(temporary);
				RenderTexture.ReleaseTemporary(val4);
				RenderTexture.ReleaseTemporary(val5);
			}
			else
			{
				val2 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				val3 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				num = internalBlurWidth * foregroundOverlap;
				WriteCoc(source, fgDilate: false);
				((Texture)source).filterMode = (FilterMode)1;
				Graphics.Blit((Texture)(object)source, val2, dofHdrMaterial, 6);
				val4 = RenderTexture.GetTemporary(((Texture)val2).width >> 1, ((Texture)val2).height >> 1, 0, val2.format);
				val5 = RenderTexture.GetTemporary(((Texture)val2).width >> 1, ((Texture)val2).height >> 1, 0, val2.format);
				Graphics.Blit((Texture)(object)val2, val4, dofHdrMaterial, 15);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, 1.5f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val4, val5, dofHdrMaterial, 19);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(1.5f, 0f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val5, val4, dofHdrMaterial, 19);
				RenderTexture val6 = null;
				if (nearBlur)
				{
					val6 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
					Graphics.Blit((Texture)(object)source, val6, dofHdrMaterial, 4);
				}
				dx11bokehMaterial.SetTexture("_BlurredColor", (Texture)(object)val4);
				dx11bokehMaterial.SetFloat("_SpawnHeuristic", dx11SpawnHeuristic);
				dx11bokehMaterial.SetVector("_BokehParams", new Vector4(dx11BokehScale, dx11BokehIntensity, Mathf.Clamp(dx11BokehThreshold, 0.005f, 4f), internalBlurWidth));
				dx11bokehMaterial.SetTexture("_FgCocMask", (Texture)(object)val6);
				Graphics.SetRandomWriteTarget(1, cbPoints);
				Graphics.Blit((Texture)(object)val2, val3, dx11bokehMaterial, 0);
				Graphics.ClearRandomWriteTargets();
				RenderTexture.ReleaseTemporary(val4);
				RenderTexture.ReleaseTemporary(val5);
				if (nearBlur)
				{
					dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, num, 0f, num));
					Graphics.Blit((Texture)(object)val6, val2, dofHdrMaterial, 2);
					dofHdrMaterial.SetVector("_Offsets", new Vector4(num, 0f, 0f, num));
					Graphics.Blit((Texture)(object)val2, val6, dofHdrMaterial, 2);
					Graphics.Blit((Texture)(object)val6, val3, dofHdrMaterial, 3);
				}
				dofHdrMaterial.SetVector("_Offsets", new Vector4(internalBlurWidth, 0f, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)val3, val2, dofHdrMaterial, 5);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)val2, val3, dofHdrMaterial, 5);
				Graphics.SetRenderTarget(val3);
				ComputeBuffer.CopyCount(cbPoints, cbDrawArgs, 0);
				dx11bokehMaterial.SetBuffer("pointBuffer", cbPoints);
				dx11bokehMaterial.SetTexture("_MainTex", (Texture)(object)dx11BokehTexture);
				dx11bokehMaterial.SetVector("_Screen", Vector4.op_Implicit(new Vector3(1f / (1f * (float)((Texture)val3).width), 1f / (1f * (float)((Texture)val3).height), internalBlurWidth)));
				dx11bokehMaterial.SetPass(1);
				Graphics.DrawProceduralIndirectNow((MeshTopology)5, cbDrawArgs, 0);
				dofHdrMaterial.SetTexture("_LowRez", (Texture)(object)val3);
				dofHdrMaterial.SetTexture("_FgOverlap", (Texture)(object)val6);
				dofHdrMaterial.SetVector("_Offsets", 1f * (float)((Texture)source).width / (1f * (float)((Texture)val3).width) * internalBlurWidth * Vector4.one);
				Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, 9);
				if (Object.op_Implicit((Object)(object)val6))
				{
					RenderTexture.ReleaseTemporary(val6);
				}
			}
		}
		else
		{
			((Texture)source).filterMode = (FilterMode)1;
			if (highResolution)
			{
				internalBlurWidth *= 2f;
			}
			WriteCoc(source, fgDilate: true);
			val2 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
			val3 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
			int num2 = ((blurSampleCount == BlurSampleCount.High || blurSampleCount == BlurSampleCount.Medium) ? 17 : 11);
			if (highResolution)
			{
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0.025f, internalBlurWidth));
				Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, num2);
			}
			else
			{
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0.1f, internalBlurWidth));
				Graphics.Blit((Texture)(object)source, val2, dofHdrMaterial, 6);
				Graphics.Blit((Texture)(object)val2, val3, dofHdrMaterial, num2);
				dofHdrMaterial.SetTexture("_LowRez", (Texture)(object)val3);
				dofHdrMaterial.SetTexture("_FgOverlap", (Texture)null);
				dofHdrMaterial.SetVector("_Offsets", Vector4.one * (1f * (float)((Texture)source).width / (1f * (float)((Texture)val3).width)) * internalBlurWidth);
				Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, (blurSampleCount == BlurSampleCount.High) ? 18 : 12);
			}
		}
		if (Object.op_Implicit((Object)(object)val2))
		{
			RenderTexture.ReleaseTemporary(val2);
		}
		if (Object.op_Implicit((Object)(object)val3))
		{
			RenderTexture.ReleaseTemporary(val3);
		}
		if (Object.op_Implicit((Object)(object)val))
		{
			RenderTexture.ReleaseTemporary(val);
		}
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Depth of Field (deprecated)")]
public class DepthOfFieldDeprecated : PostEffectsBase
{
	public enum Dof34QualitySetting
	{
		OnlyBackground = 1,
		BackgroundAndForeground
	}

	public enum DofResolution
	{
		High = 2,
		Medium,
		Low
	}

	public enum DofBlurriness
	{
		Low = 1,
		High = 2,
		VeryHigh = 4
	}

	public enum BokehDestination
	{
		Background = 1,
		Foreground,
		BackgroundAndForeground
	}

	private static int SMOOTH_DOWNSAMPLE_PASS = 6;

	private static float BOKEH_EXTRA_BLUR = 2f;

	public Dof34QualitySetting quality = Dof34QualitySetting.OnlyBackground;

	public DofResolution resolution = DofResolution.Low;

	public bool simpleTweakMode = true;

	public float focalPoint = 1f;

	public float smoothness = 0.5f;

	public float focalZDistance;

	public float focalZStartCurve = 1f;

	public float focalZEndCurve = 1f;

	private float focalStartCurve = 2f;

	private float focalEndCurve = 2f;

	private float focalDistance01 = 0.1f;

	public Transform objectFocus;

	public float focalSize;

	public DofBlurriness bluriness = DofBlurriness.High;

	public float maxBlurSpread = 1.75f;

	public float foregroundBlurExtrude = 1.15f;

	public Shader dofBlurShader;

	private Material dofBlurMaterial;

	public Shader dofShader;

	private Material dofMaterial;

	public bool visualize;

	public BokehDestination bokehDestination = BokehDestination.Background;

	private float widthOverHeight = 1.25f;

	private float oneOverBaseSize = 0.001953125f;

	public bool bokeh;

	public bool bokehSupport = true;

	public Shader bokehShader;

	public Texture2D bokehTexture;

	public float bokehScale = 2.4f;

	public float bokehIntensity = 0.15f;

	public float bokehThresholdContrast = 0.1f;

	public float bokehThresholdLuminance = 0.55f;

	public int bokehDownsample = 1;

	private Material bokehMaterial;

	private Camera _camera;

	private RenderTexture foregroundTexture;

	private RenderTexture mediumRezWorkTexture;

	private RenderTexture finalDefocus;

	private RenderTexture lowRezWorkTexture;

	private RenderTexture bokehSource;

	private RenderTexture bokehSource2;

	private void CreateMaterials()
	{
		dofBlurMaterial = CheckShaderAndCreateMaterial(dofBlurShader, dofBlurMaterial);
		dofMaterial = CheckShaderAndCreateMaterial(dofShader, dofMaterial);
		bokehSupport = bokehShader.isSupported;
		if (bokeh && bokehSupport && Object.op_Implicit((Object)(object)bokehShader))
		{
			bokehMaterial = CheckShaderAndCreateMaterial(bokehShader, bokehMaterial);
		}
	}

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		dofBlurMaterial = CheckShaderAndCreateMaterial(dofBlurShader, dofBlurMaterial);
		dofMaterial = CheckShaderAndCreateMaterial(dofShader, dofMaterial);
		bokehSupport = bokehShader.isSupported;
		if (bokeh && bokehSupport && Object.op_Implicit((Object)(object)bokehShader))
		{
			bokehMaterial = CheckShaderAndCreateMaterial(bokehShader, bokehMaterial);
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnDisable()
	{
		Quads.Cleanup();
	}

	private void OnEnable()
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		_camera = ((Component)this).GetComponent<Camera>();
		Camera obj = _camera;
		obj.depthTextureMode = (DepthTextureMode)(obj.depthTextureMode | 1);
	}

	private float FocalDistance01(float worldDist)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		return _camera.WorldToViewportPoint((worldDist - _camera.nearClipPlane) * ((Component)_camera).transform.forward + ((Component)_camera).transform.position).z / (_camera.farClipPlane - _camera.nearClipPlane);
	}

	private int GetDividerBasedOnQuality()
	{
		int result = 1;
		if (resolution == DofResolution.Medium)
		{
			result = 2;
		}
		else if (resolution == DofResolution.Low)
		{
			result = 2;
		}
		return result;
	}

	private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
	{
		int num = baseDivider;
		if (resolution == DofResolution.High)
		{
			num *= 2;
		}
		if (resolution == DofResolution.Low)
		{
			num *= 2;
		}
		return num;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d0: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		if (smoothness < 0.1f)
		{
			smoothness = 0.1f;
		}
		bokeh = bokeh && bokehSupport;
		float num = (bokeh ? BOKEH_EXTRA_BLUR : 1f);
		bool flag = quality > Dof34QualitySetting.OnlyBackground;
		float num2 = focalSize / (_camera.farClipPlane - _camera.nearClipPlane);
		if (simpleTweakMode)
		{
			focalDistance01 = (Object.op_Implicit((Object)(object)objectFocus) ? (_camera.WorldToViewportPoint(objectFocus.position).z / _camera.farClipPlane) : FocalDistance01(focalPoint));
			focalStartCurve = focalDistance01 * smoothness;
			focalEndCurve = focalStartCurve;
			flag = flag && focalPoint > _camera.nearClipPlane + Mathf.Epsilon;
		}
		else
		{
			if (Object.op_Implicit((Object)(object)objectFocus))
			{
				Vector3 val = _camera.WorldToViewportPoint(objectFocus.position);
				val.z /= _camera.farClipPlane;
				focalDistance01 = val.z;
			}
			else
			{
				focalDistance01 = FocalDistance01(focalZDistance);
			}
			focalStartCurve = focalZStartCurve;
			focalEndCurve = focalZEndCurve;
			flag = flag && focalPoint > _camera.nearClipPlane + Mathf.Epsilon;
		}
		widthOverHeight = 1f * (float)((Texture)source).width / (1f * (float)((Texture)source).height);
		oneOverBaseSize = 0.001953125f;
		dofMaterial.SetFloat("_ForegroundBlurExtrude", foregroundBlurExtrude);
		dofMaterial.SetVector("_CurveParams", new Vector4(simpleTweakMode ? (1f / focalStartCurve) : focalStartCurve, simpleTweakMode ? (1f / focalEndCurve) : focalEndCurve, num2 * 0.5f, focalDistance01));
		dofMaterial.SetVector("_InvRenderTargetSize", new Vector4(1f / (1f * (float)((Texture)source).width), 1f / (1f * (float)((Texture)source).height), 0f, 0f));
		int dividerBasedOnQuality = GetDividerBasedOnQuality();
		int lowResolutionDividerBasedOnQuality = GetLowResolutionDividerBasedOnQuality(dividerBasedOnQuality);
		AllocateTextures(flag, source, dividerBasedOnQuality, lowResolutionDividerBasedOnQuality);
		Graphics.Blit((Texture)(object)source, source, dofMaterial, 3);
		Downsample(source, mediumRezWorkTexture);
		Blur(mediumRezWorkTexture, mediumRezWorkTexture, DofBlurriness.Low, 4, maxBlurSpread);
		if (bokeh && (BokehDestination.Foreground & bokehDestination) != 0)
		{
			dofMaterial.SetVector("_Threshhold", new Vector4(bokehThresholdContrast, bokehThresholdLuminance, 0.95f, 0f));
			Graphics.Blit((Texture)(object)mediumRezWorkTexture, bokehSource2, dofMaterial, 11);
			Graphics.Blit((Texture)(object)mediumRezWorkTexture, lowRezWorkTexture);
			Blur(lowRezWorkTexture, lowRezWorkTexture, bluriness, 0, maxBlurSpread * num);
		}
		else
		{
			Downsample(mediumRezWorkTexture, lowRezWorkTexture);
			Blur(lowRezWorkTexture, lowRezWorkTexture, bluriness, 0, maxBlurSpread);
		}
		dofBlurMaterial.SetTexture("_TapLow", (Texture)(object)lowRezWorkTexture);
		dofBlurMaterial.SetTexture("_TapMedium", (Texture)(object)mediumRezWorkTexture);
		Graphics.Blit((Texture)null, finalDefocus, dofBlurMaterial, 3);
		if (bokeh && (BokehDestination.Foreground & bokehDestination) != 0)
		{
			AddBokeh(bokehSource2, bokehSource, finalDefocus);
		}
		dofMaterial.SetTexture("_TapLowBackground", (Texture)(object)finalDefocus);
		dofMaterial.SetTexture("_TapMedium", (Texture)(object)mediumRezWorkTexture);
		Graphics.Blit((Texture)(object)source, flag ? foregroundTexture : destination, dofMaterial, visualize ? 2 : 0);
		if (flag)
		{
			Graphics.Blit((Texture)(object)foregroundTexture, source, dofMaterial, 5);
			Downsample(source, mediumRezWorkTexture);
			BlurFg(mediumRezWorkTexture, mediumRezWorkTexture, DofBlurriness.Low, 2, maxBlurSpread);
			if (bokeh && (BokehDestination.Foreground & bokehDestination) != 0)
			{
				dofMaterial.SetVector("_Threshhold", new Vector4(bokehThresholdContrast * 0.5f, bokehThresholdLuminance, 0f, 0f));
				Graphics.Blit((Texture)(object)mediumRezWorkTexture, bokehSource2, dofMaterial, 11);
				Graphics.Blit((Texture)(object)mediumRezWorkTexture, lowRezWorkTexture);
				BlurFg(lowRezWorkTexture, lowRezWorkTexture, bluriness, 1, maxBlurSpread * num);
			}
			else
			{
				BlurFg(mediumRezWorkTexture, lowRezWorkTexture, bluriness, 1, maxBlurSpread);
			}
			Graphics.Blit((Texture)(object)lowRezWorkTexture, finalDefocus);
			dofMaterial.SetTexture("_TapLowForeground", (Texture)(object)finalDefocus);
			Graphics.Blit((Texture)(object)source, destination, dofMaterial, visualize ? 1 : 4);
			if (bokeh && (BokehDestination.Foreground & bokehDestination) != 0)
			{
				AddBokeh(bokehSource2, bokehSource, destination);
			}
		}
		ReleaseTextures();
	}

	private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
	{
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		RenderTexture temporary = RenderTexture.GetTemporary(((Texture)to).width, ((Texture)to).height);
		if (iterations > DofBlurriness.Low)
		{
			BlurHex(from, to, blurPass, spread, temporary);
			if (iterations > DofBlurriness.High)
			{
				dofBlurMaterial.SetVector("offsets", new Vector4(0f, spread * oneOverBaseSize, 0f, 0f));
				Graphics.Blit((Texture)(object)to, temporary, dofBlurMaterial, blurPass);
				dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, 0f, 0f, 0f));
				Graphics.Blit((Texture)(object)temporary, to, dofBlurMaterial, blurPass);
			}
		}
		else
		{
			dofBlurMaterial.SetVector("offsets", new Vector4(0f, spread * oneOverBaseSize, 0f, 0f));
			Graphics.Blit((Texture)(object)from, temporary, dofBlurMaterial, blurPass);
			dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, 0f, 0f, 0f));
			Graphics.Blit((Texture)(object)temporary, to, dofBlurMaterial, blurPass);
		}
		RenderTexture.ReleaseTemporary(temporary);
	}

	private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
	{
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		dofBlurMaterial.SetTexture("_TapHigh", (Texture)(object)from);
		RenderTexture temporary = RenderTexture.GetTemporary(((Texture)to).width, ((Texture)to).height);
		if (iterations > DofBlurriness.Low)
		{
			BlurHex(from, to, blurPass, spread, temporary);
			if (iterations > DofBlurriness.High)
			{
				dofBlurMaterial.SetVector("offsets", new Vector4(0f, spread * oneOverBaseSize, 0f, 0f));
				Graphics.Blit((Texture)(object)to, temporary, dofBlurMaterial, blurPass);
				dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, 0f, 0f, 0f));
				Graphics.Blit((Texture)(object)temporary, to, dofBlurMaterial, blurPass);
			}
		}
		else
		{
			dofBlurMaterial.SetVector("offsets", new Vector4(0f, spread * oneOverBaseSize, 0f, 0f));
			Graphics.Blit((Texture)(object)from, temporary, dofBlurMaterial, blurPass);
			dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, 0f, 0f, 0f));
			Graphics.Blit((Texture)(object)temporary, to, dofBlurMaterial, blurPass);
		}
		RenderTexture.ReleaseTemporary(temporary);
	}

	private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		dofBlurMaterial.SetVector("offsets", new Vector4(0f, spread * oneOverBaseSize, 0f, 0f));
		Graphics.Blit((Texture)(object)from, tmp, dofBlurMaterial, blurPass);
		dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, 0f, 0f, 0f));
		Graphics.Blit((Texture)(object)tmp, to, dofBlurMaterial, blurPass);
		dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, spread * oneOverBaseSize, 0f, 0f));
		Graphics.Blit((Texture)(object)to, tmp, dofBlurMaterial, blurPass);
		dofBlurMaterial.SetVector("offsets", new Vector4(spread / widthOverHeight * oneOverBaseSize, (0f - spread) * oneOverBaseSize, 0f, 0f));
		Graphics.Blit((Texture)(object)tmp, to, dofBlurMaterial, blurPass);
	}

	private void Downsample(RenderTexture from, RenderTexture to)
	{
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		dofMaterial.SetVector("_InvRenderTargetSize", new Vector4(1f / (1f * (float)((Texture)to).width), 1f / (1f * (float)((Texture)to).height), 0f, 0f));
		Graphics.Blit((Texture)(object)from, to, dofMaterial, SMOOTH_DOWNSAMPLE_PASS);
	}

	private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
	{
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)bokehMaterial))
		{
			return;
		}
		Mesh[] meshes = Quads.GetMeshes(((Texture)tempTex).width, ((Texture)tempTex).height);
		RenderTexture.active = tempTex;
		GL.Clear(false, true, new Color(0f, 0f, 0f, 0f));
		GL.PushMatrix();
		GL.LoadIdentity();
		((Texture)bokehInfo).filterMode = (FilterMode)0;
		float num = (float)((Texture)bokehInfo).width * 1f / ((float)((Texture)bokehInfo).height * 1f);
		float num2 = 2f / (1f * (float)((Texture)bokehInfo).width);
		num2 += bokehScale * maxBlurSpread * BOKEH_EXTRA_BLUR * oneOverBaseSize;
		bokehMaterial.SetTexture("_Source", (Texture)(object)bokehInfo);
		bokehMaterial.SetTexture("_MainTex", (Texture)(object)bokehTexture);
		bokehMaterial.SetVector("_ArScale", new Vector4(num2, num2 * num, 0.5f, 0.5f * num));
		bokehMaterial.SetFloat("_Intensity", bokehIntensity);
		bokehMaterial.SetPass(0);
		Mesh[] array = meshes;
		foreach (Mesh val in array)
		{
			if (Object.op_Implicit((Object)(object)val))
			{
				Graphics.DrawMeshNow(val, Matrix4x4.identity);
			}
		}
		GL.PopMatrix();
		Graphics.Blit((Texture)(object)tempTex, finalTarget, dofMaterial, 8);
		((Texture)bokehInfo).filterMode = (FilterMode)1;
	}

	private void ReleaseTextures()
	{
		if (Object.op_Implicit((Object)(object)foregroundTexture))
		{
			RenderTexture.ReleaseTemporary(foregroundTexture);
		}
		if (Object.op_Implicit((Object)(object)finalDefocus))
		{
			RenderTexture.ReleaseTemporary(finalDefocus);
		}
		if (Object.op_Implicit((Object)(object)mediumRezWorkTexture))
		{
			RenderTexture.ReleaseTemporary(mediumRezWorkTexture);
		}
		if (Object.op_Implicit((Object)(object)lowRezWorkTexture))
		{
			RenderTexture.ReleaseTemporary(lowRezWorkTexture);
		}
		if (Object.op_Implicit((Object)(object)bokehSource))
		{
			RenderTexture.ReleaseTemporary(bokehSource);
		}
		if (Object.op_Implicit((Object)(object)bokehSource2))
		{
			RenderTexture.ReleaseTemporary(bokehSource2);
		}
	}

	private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
	{
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		foregroundTexture = null;
		if (blurForeground)
		{
			foregroundTexture = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0);
		}
		mediumRezWorkTexture = RenderTexture.GetTemporary(((Texture)source).width / divider, ((Texture)source).height / divider, 0);
		finalDefocus = RenderTexture.GetTemporary(((Texture)source).width / divider, ((Texture)source).height / divider, 0);
		lowRezWorkTexture = RenderTexture.GetTemporary(((Texture)source).width / lowTexDivider, ((Texture)source).height / lowTexDivider, 0);
		bokehSource = null;
		bokehSource2 = null;
		if (bokeh)
		{
			bokehSource = RenderTexture.GetTemporary(((Texture)source).width / (lowTexDivider * bokehDownsample), ((Texture)source).height / (lowTexDivider * bokehDownsample), 0, (RenderTextureFormat)2);
			bokehSource2 = RenderTexture.GetTemporary(((Texture)source).width / (lowTexDivider * bokehDownsample), ((Texture)source).height / (lowTexDivider * bokehDownsample), 0, (RenderTextureFormat)2);
			((Texture)bokehSource).filterMode = (FilterMode)1;
			((Texture)bokehSource2).filterMode = (FilterMode)1;
			RenderTexture.active = bokehSource2;
			GL.Clear(false, true, new Color(0f, 0f, 0f, 0f));
		}
		((Texture)source).filterMode = (FilterMode)1;
		((Texture)finalDefocus).filterMode = (FilterMode)1;
		((Texture)mediumRezWorkTexture).filterMode = (FilterMode)1;
		((Texture)lowRezWorkTexture).filterMode = (FilterMode)1;
		if (Object.op_Implicit((Object)(object)foregroundTexture))
		{
			((Texture)foregroundTexture).filterMode = (FilterMode)1;
		}
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Edge Detection/Edge Detection")]
public class EdgeDetection : PostEffectsBase
{
	public enum EdgeDetectMode
	{
		TriangleDepthNormals,
		RobertsCrossDepthNormals,
		SobelDepth,
		SobelDepthThin,
		TriangleLuminance
	}

	public EdgeDetectMode mode = EdgeDetectMode.SobelDepthThin;

	public float sensitivityDepth = 1f;

	public float sensitivityNormals = 1f;

	public float lumThreshold = 0.2f;

	public float edgeExp = 1f;

	public float sampleDist = 1f;

	public float edgesOnly;

	public Color edgesOnlyBgColor = Color.white;

	public Shader edgeDetectShader;

	private Material edgeDetectMaterial;

	private EdgeDetectMode oldMode = EdgeDetectMode.SobelDepthThin;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		edgeDetectMaterial = CheckShaderAndCreateMaterial(edgeDetectShader, edgeDetectMaterial);
		if (mode != oldMode)
		{
			SetCameraFlag();
		}
		oldMode = mode;
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private new void Start()
	{
		oldMode = mode;
	}

	private void SetCameraFlag()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		if (mode == EdgeDetectMode.SobelDepth || mode == EdgeDetectMode.SobelDepthThin)
		{
			Camera component = ((Component)this).GetComponent<Camera>();
			component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 1);
		}
		else if (mode == EdgeDetectMode.TriangleDepthNormals || mode == EdgeDetectMode.RobertsCrossDepthNormals)
		{
			Camera component2 = ((Component)this).GetComponent<Camera>();
			component2.depthTextureMode = (DepthTextureMode)(component2.depthTextureMode | 2);
		}
	}

	private void OnEnable()
	{
		SetCameraFlag();
	}

	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor(sensitivityDepth, sensitivityNormals);
		edgeDetectMaterial.SetVector("_Sensitivity", new Vector4(val.x, val.y, 1f, val.y));
		edgeDetectMaterial.SetFloat("_BgFade", edgesOnly);
		edgeDetectMaterial.SetFloat("_SampleDistance", sampleDist);
		edgeDetectMaterial.SetVector("_BgColor", Color.op_Implicit(edgesOnlyBgColor));
		edgeDetectMaterial.SetFloat("_Exponent", edgeExp);
		edgeDetectMaterial.SetFloat("_Threshold", lumThreshold);
		Graphics.Blit((Texture)(object)source, destination, edgeDetectMaterial, (int)mode);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Displacement/Fisheye")]
internal class Fisheye : PostEffectsBase
{
	public float strengthX = 0.05f;

	public float strengthY = 0.05f;

	public Shader fishEyeShader;

	private Material fisheyeMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		fisheyeMaterial = CheckShaderAndCreateMaterial(fishEyeShader, fisheyeMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		float num = 5f / 32f;
		float num2 = (float)((Texture)source).width * 1f / ((float)((Texture)source).height * 1f);
		fisheyeMaterial.SetVector("intensity", new Vector4(strengthX * num2 * num, strengthY * num, strengthX * num2 * num, strengthY * num));
		Graphics.Blit((Texture)(object)source, destination, fisheyeMaterial);
	}
}


using System;
using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Rendering/Global Fog")]
internal class GlobalFog : PostEffectsBase
{
	[Tooltip("Apply distance-based fog?")]
	public bool distanceFog = true;

	[Tooltip("Distance fog is based on radial distance from camera when checked")]
	public bool useRadialDistance;

	[Tooltip("Apply height-based fog?")]
	public bool heightFog = true;

	[Tooltip("Fog top Y coordinate")]
	public float height = 1f;

	[Range(0.001f, 10f)]
	public float heightDensity = 2f;

	[Tooltip("Push fog away from the camera by this amount")]
	public float startDistance;

	public Shader fogShader;

	private Material fogMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		fogMaterial = CheckShaderAndCreateMaterial(fogShader, fogMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Invalid comparison between Unknown and I4
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_0314: Unknown result type (might be due to invalid IL or missing references)
		//IL_032e: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources() || (!distanceFog && !heightFog))
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		Camera component = ((Component)this).GetComponent<Camera>();
		Transform transform = ((Component)component).transform;
		float nearClipPlane = component.nearClipPlane;
		float farClipPlane = component.farClipPlane;
		float fieldOfView = component.fieldOfView;
		float aspect = component.aspect;
		Matrix4x4 identity = Matrix4x4.identity;
		float num = fieldOfView * 0.5f;
		Vector3 val = transform.right * nearClipPlane * Mathf.Tan(num * ((float)Math.PI / 180f)) * aspect;
		Vector3 val2 = transform.up * nearClipPlane * Mathf.Tan(num * ((float)Math.PI / 180f));
		Vector3 val3 = transform.forward * nearClipPlane - val + val2;
		float num2 = ((Vector3)(ref val3)).magnitude * farClipPlane / nearClipPlane;
		((Vector3)(ref val3)).Normalize();
		val3 *= num2;
		Vector3 val4 = transform.forward * nearClipPlane + val + val2;
		((Vector3)(ref val4)).Normalize();
		val4 *= num2;
		Vector3 val5 = transform.forward * nearClipPlane + val - val2;
		((Vector3)(ref val5)).Normalize();
		val5 *= num2;
		Vector3 val6 = transform.forward * nearClipPlane - val - val2;
		((Vector3)(ref val6)).Normalize();
		val6 *= num2;
		((Matrix4x4)(ref identity)).SetRow(0, Vector4.op_Implicit(val3));
		((Matrix4x4)(ref identity)).SetRow(1, Vector4.op_Implicit(val4));
		((Matrix4x4)(ref identity)).SetRow(2, Vector4.op_Implicit(val5));
		((Matrix4x4)(ref identity)).SetRow(3, Vector4.op_Implicit(val6));
		Vector3 position = transform.position;
		float num3 = position.y - height;
		float num4 = ((num3 <= 0f) ? 1f : 0f);
		fogMaterial.SetMatrix("_FrustumCornersWS", identity);
		fogMaterial.SetVector("_CameraWS", Vector4.op_Implicit(position));
		fogMaterial.SetVector("_HeightParams", new Vector4(height, num3, num4, heightDensity * 0.5f));
		fogMaterial.SetVector("_DistanceParams", new Vector4(0f - Mathf.Max(startDistance, 0f), 0f, 0f, 0f));
		FogMode fogMode = RenderSettings.fogMode;
		float fogDensity = RenderSettings.fogDensity;
		float fogStartDistance = RenderSettings.fogStartDistance;
		float fogEndDistance = RenderSettings.fogEndDistance;
		bool flag = (int)fogMode == 1;
		float num5 = (flag ? (fogEndDistance - fogStartDistance) : 0f);
		float num6 = ((Mathf.Abs(num5) > 0.0001f) ? (1f / num5) : 0f);
		Vector4 val7 = default(Vector4);
		val7.x = fogDensity * 1.2011224f;
		val7.y = fogDensity * 1.442695f;
		val7.z = (flag ? (0f - num6) : 0f);
		val7.w = (flag ? (fogEndDistance * num6) : 0f);
		fogMaterial.SetVector("_SceneFogParams", val7);
		fogMaterial.SetVector("_SceneFogMode", new Vector4((float)fogMode, (float)(useRadialDistance ? 1 : 0), 0f, 0f));
		int num7 = 0;
		CustomGraphicsBlit(passNr: (!distanceFog || !heightFog) ? (distanceFog ? 1 : 2) : 0, source: source, dest: destination, fxMaterial: fogMaterial);
	}

	private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
	{
		RenderTexture.active = dest;
		fxMaterial.SetTexture("_MainTex", (Texture)(object)source);
		GL.PushMatrix();
		GL.LoadOrtho();
		fxMaterial.SetPass(passNr);
		GL.Begin(7);
		GL.MultiTexCoord2(0, 0f, 0f);
		GL.Vertex3(0f, 0f, 3f);
		GL.MultiTexCoord2(0, 1f, 0f);
		GL.Vertex3(1f, 0f, 2f);
		GL.MultiTexCoord2(0, 1f, 1f);
		GL.Vertex3(1f, 1f, 1f);
		GL.MultiTexCoord2(0, 0f, 1f);
		GL.Vertex3(0f, 1f, 0f);
		GL.End();
		GL.PopMatrix();
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Color Adjustments/Grayscale")]
public class Grayscale : ImageEffectBase
{
	public Texture textureRamp;

	public float rampOffset;

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		base.material.SetTexture("_RampTex", textureRamp);
		base.material.SetFloat("_RampOffset", rampOffset);
		Graphics.Blit((Texture)(object)source, destination, base.material);
	}
}


using UnityEngine;

[RequireComponent(typeof(Camera))]
[AddComponentMenu("")]
public class ImageEffectBase : MonoBehaviour
{
	public Shader shader;

	private Material m_Material;

	protected Material material
	{
		get
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			if ((Object)(object)m_Material == (Object)null)
			{
				m_Material = new Material(shader);
				((Object)m_Material).hideFlags = (HideFlags)61;
			}
			return m_Material;
		}
	}

	protected virtual void Start()
	{
		if (!SystemInfo.supportsImageEffects)
		{
			((Behaviour)this).enabled = false;
		}
		else if (!Object.op_Implicit((Object)(object)shader) || !shader.isSupported)
		{
			((Behaviour)this).enabled = false;
		}
	}

	protected virtual void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)m_Material))
		{
			Object.DestroyImmediate((Object)(object)m_Material);
		}
	}
}


using System;
using UnityEngine;

[AddComponentMenu("")]
public class ImageEffects
{
	public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		if (((Texture)source).texelSize.y < 0f)
		{
			center.y = 1f - center.y;
			angle = 0f - angle;
		}
		Matrix4x4 val = Matrix4x4.TRS(Vector3.zero, Quaternion.Euler(0f, 0f, angle), Vector3.one);
		material.SetMatrix("_RotationMatrix", val);
		material.SetVector("_CenterRadius", new Vector4(center.x, center.y, radius.x, radius.y));
		material.SetFloat("_Angle", angle * ((float)Math.PI / 180f));
		Graphics.Blit((Texture)(object)source, destination, material);
	}

	[Obsolete("Use Graphics.Blit(source,dest) instead")]
	public static void Blit(RenderTexture source, RenderTexture dest)
	{
		Graphics.Blit((Texture)(object)source, dest);
	}

	[Obsolete("Use Graphics.Blit(source, destination, material) instead")]
	public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
	{
		Graphics.Blit((Texture)(object)source, dest, material);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Blur/Motion Blur (Color Accumulation)")]
[RequireComponent(typeof(Camera))]
public class MotionBlur : ImageEffectBase
{
	public float blurAmount = 0.8f;

	public bool extraBlur;

	private RenderTexture accumTexture;

	protected override void Start()
	{
		if (!SystemInfo.supportsRenderTextures)
		{
			((Behaviour)this).enabled = false;
		}
		else
		{
			base.Start();
		}
	}

	protected override void OnDisable()
	{
		base.OnDisable();
		Object.DestroyImmediate((Object)(object)accumTexture);
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Expected O, but got Unknown
		if ((Object)(object)accumTexture == (Object)null || ((Texture)accumTexture).width != ((Texture)source).width || ((Texture)accumTexture).height != ((Texture)source).height)
		{
			Object.DestroyImmediate((Object)(object)accumTexture);
			accumTexture = new RenderTexture(((Texture)source).width, ((Texture)source).height, 0);
			((Object)accumTexture).hideFlags = (HideFlags)61;
			Graphics.Blit((Texture)(object)source, accumTexture);
		}
		if (extraBlur)
		{
			RenderTexture temporary = RenderTexture.GetTemporary(((Texture)source).width / 4, ((Texture)source).height / 4, 0);
			accumTexture.MarkRestoreExpected();
			Graphics.Blit((Texture)(object)accumTexture, temporary);
			Graphics.Blit((Texture)(object)temporary, accumTexture);
			RenderTexture.ReleaseTemporary(temporary);
		}
		blurAmount = Mathf.Clamp(blurAmount, 0f, 0.92f);
		base.material.SetTexture("_MainTex", (Texture)(object)accumTexture);
		base.material.SetFloat("_AccumOrig", 1f - blurAmount);
		accumTexture.MarkRestoreExpected();
		Graphics.Blit((Texture)(object)source, accumTexture, base.material);
		Graphics.Blit((Texture)(object)accumTexture, destination);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Noise/Noise And Grain (Filmic)")]
public class NoiseAndGrain : PostEffectsBase, IImageEffect
{
	public float intensityMultiplier = 0.25f;

	public float generalIntensity = 0.5f;

	public float blackIntensity = 1f;

	public float whiteIntensity = 1f;

	public float midGrey = 0.2f;

	public bool dx11Grain;

	public float softness;

	public bool monochrome;

	public Vector3 intensities = new Vector3(1f, 1f, 1f);

	public Vector3 tiling = new Vector3(64f, 64f, 64f);

	public float monochromeTiling = 64f;

	public FilterMode filterMode = (FilterMode)1;

	public Texture2D noiseTexture;

	public Shader noiseShader;

	private Material noiseMaterial;

	public Shader dx11NoiseShader;

	private Material dx11NoiseMaterial;

	private static float TILE_AMOUNT = 64f;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		noiseMaterial = CheckShaderAndCreateMaterial(noiseShader, noiseMaterial);
		if (dx11Grain && supportDX11)
		{
			dx11NoiseMaterial = CheckShaderAndCreateMaterial(dx11NoiseShader, dx11NoiseMaterial);
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public bool IsActive()
	{
		if (((Behaviour)this).enabled && CheckResources())
		{
			return (Object)(object)noiseTexture != (Object)null;
		}
		return false;
	}

	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e4: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources() || (Object)null == (Object)(object)noiseTexture)
		{
			Graphics.Blit((Texture)(object)source, destination);
			if ((Object)null == (Object)(object)noiseTexture)
			{
				Debug.LogWarning((object)"Noise & Grain effect failing as noise texture is not assigned. please assign.", (Object)(object)((Component)this).transform);
			}
			return;
		}
		softness = Mathf.Clamp(softness, 0f, 0.99f);
		if (dx11Grain && supportDX11)
		{
			dx11NoiseMaterial.SetFloat("_DX11NoiseTime", (float)Time.frameCount);
			dx11NoiseMaterial.SetTexture("_NoiseTex", (Texture)(object)noiseTexture);
			dx11NoiseMaterial.SetVector("_NoisePerChannel", Vector4.op_Implicit(monochrome ? Vector3.one : intensities));
			dx11NoiseMaterial.SetVector("_MidGrey", Vector4.op_Implicit(new Vector3(midGrey, 1f / (1f - midGrey), -1f / midGrey)));
			dx11NoiseMaterial.SetVector("_NoiseAmount", Vector4.op_Implicit(new Vector3(generalIntensity, blackIntensity, whiteIntensity) * intensityMultiplier));
			if (softness > Mathf.Epsilon)
			{
				RenderTexture temporary = RenderTexture.GetTemporary((int)((float)((Texture)source).width * (1f - softness)), (int)((float)((Texture)source).height * (1f - softness)));
				DrawNoiseQuadGrid(source, temporary, dx11NoiseMaterial, noiseTexture, monochrome ? 3 : 2);
				dx11NoiseMaterial.SetTexture("_NoiseTex", (Texture)(object)temporary);
				Graphics.Blit((Texture)(object)source, destination, dx11NoiseMaterial, 4);
				RenderTexture.ReleaseTemporary(temporary);
			}
			else
			{
				DrawNoiseQuadGrid(source, destination, dx11NoiseMaterial, noiseTexture, monochrome ? 1 : 0);
			}
			return;
		}
		if (Object.op_Implicit((Object)(object)noiseTexture))
		{
			((Texture)noiseTexture).wrapMode = (TextureWrapMode)0;
			((Texture)noiseTexture).filterMode = filterMode;
		}
		noiseMaterial.SetTexture("_NoiseTex", (Texture)(object)noiseTexture);
		noiseMaterial.SetVector("_NoisePerChannel", Vector4.op_Implicit(monochrome ? Vector3.one : intensities));
		noiseMaterial.SetVector("_NoiseTilingPerChannel", Vector4.op_Implicit(monochrome ? (Vector3.one * monochromeTiling) : tiling));
		noiseMaterial.SetVector("_MidGrey", Vector4.op_Implicit(new Vector3(midGrey, 1f / (1f - midGrey), -1f / midGrey)));
		noiseMaterial.SetVector("_NoiseAmount", Vector4.op_Implicit(new Vector3(generalIntensity, blackIntensity, whiteIntensity) * intensityMultiplier));
		if (softness > Mathf.Epsilon)
		{
			RenderTexture temporary2 = RenderTexture.GetTemporary((int)((float)((Texture)source).width * (1f - softness)), (int)((float)((Texture)source).height * (1f - softness)));
			DrawNoiseQuadGrid(source, temporary2, noiseMaterial, noiseTexture, 2);
			noiseMaterial.SetTexture("_NoiseTex", (Texture)(object)temporary2);
			Graphics.Blit((Texture)(object)source, destination, noiseMaterial, 1);
			RenderTexture.ReleaseTemporary(temporary2);
		}
		else
		{
			DrawNoiseQuadGrid(source, destination, noiseMaterial, noiseTexture, 0);
		}
	}

	private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
	{
		RenderTexture.active = dest;
		float num = (float)((Texture)noise).width * 1f;
		float num2 = 1f * (float)((Texture)source).width / TILE_AMOUNT;
		fxMaterial.SetTexture("_MainTex", (Texture)(object)source);
		GL.PushMatrix();
		GL.LoadOrtho();
		float num3 = 1f * (float)((Texture)source).width / (1f * (float)((Texture)source).height);
		float num4 = 1f / num2;
		float num5 = num4 * num3;
		float num6 = num / ((float)((Texture)noise).width * 1f);
		fxMaterial.SetPass(passNr);
		GL.Begin(7);
		for (float num7 = 0f; num7 < 1f; num7 += num4)
		{
			for (float num8 = 0f; num8 < 1f; num8 += num5)
			{
				float num9 = Random.Range(0f, 1f);
				float num10 = Random.Range(0f, 1f);
				num9 = Mathf.Floor(num9 * num) / num;
				num10 = Mathf.Floor(num10 * num) / num;
				float num11 = 1f / num;
				GL.MultiTexCoord2(0, num9, num10);
				GL.MultiTexCoord2(1, 0f, 0f);
				GL.Vertex3(num7, num8, 0.1f);
				GL.MultiTexCoord2(0, num9 + num6 * num11, num10);
				GL.MultiTexCoord2(1, 1f, 0f);
				GL.Vertex3(num7 + num4, num8, 0.1f);
				GL.MultiTexCoord2(0, num9 + num6 * num11, num10 + num6 * num11);
				GL.MultiTexCoord2(1, 1f, 1f);
				GL.Vertex3(num7 + num4, num8 + num5, 0.1f);
				GL.MultiTexCoord2(0, num9, num10 + num6 * num11);
				GL.MultiTexCoord2(1, 0f, 1f);
				GL.Vertex3(num7, num8 + num5, 0.1f);
			}
		}
		GL.End();
		GL.PopMatrix();
	}
}


using UnityEngine;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Noise/Noise and Scratches")]
public class NoiseAndScratches : MonoBehaviour
{
	public bool monochrome = true;

	private bool rgbFallback;

	public float grainIntensityMin = 0.1f;

	public float grainIntensityMax = 0.2f;

	public float grainSize = 2f;

	public float scratchIntensityMin = 0.05f;

	public float scratchIntensityMax = 0.25f;

	public float scratchFPS = 10f;

	public float scratchJitter = 0.01f;

	public Texture grainTexture;

	public Texture scratchTexture;

	public Shader shaderRGB;

	public Shader shaderYUV;

	private Material m_MaterialRGB;

	private Material m_MaterialYUV;

	private float scratchTimeLeft;

	private float scratchX;

	private float scratchY;

	protected Material material
	{
		get
		{
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Expected O, but got Unknown
			if ((Object)(object)m_MaterialRGB == (Object)null)
			{
				m_MaterialRGB = new Material(shaderRGB);
				((Object)m_MaterialRGB).hideFlags = (HideFlags)61;
			}
			if ((Object)(object)m_MaterialYUV == (Object)null && !rgbFallback)
			{
				m_MaterialYUV = new Material(shaderYUV);
				((Object)m_MaterialYUV).hideFlags = (HideFlags)61;
			}
			if (rgbFallback || monochrome)
			{
				return m_MaterialRGB;
			}
			return m_MaterialYUV;
		}
	}

	protected void Start()
	{
		if (!SystemInfo.supportsImageEffects)
		{
			((Behaviour)this).enabled = false;
		}
		else if ((Object)(object)shaderRGB == (Object)null || (Object)(object)shaderYUV == (Object)null)
		{
			Debug.Log((object)"Noise shaders are not set up! Disabling noise effect.");
			((Behaviour)this).enabled = false;
		}
		else if (!shaderRGB.isSupported)
		{
			((Behaviour)this).enabled = false;
		}
		else if (!shaderYUV.isSupported)
		{
			rgbFallback = true;
		}
	}

	protected void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)m_MaterialRGB))
		{
			Object.DestroyImmediate((Object)(object)m_MaterialRGB);
		}
		if (Object.op_Implicit((Object)(object)m_MaterialYUV))
		{
			Object.DestroyImmediate((Object)(object)m_MaterialYUV);
		}
	}

	private void SanitizeParameters()
	{
		grainIntensityMin = Mathf.Clamp(grainIntensityMin, 0f, 5f);
		grainIntensityMax = Mathf.Clamp(grainIntensityMax, 0f, 5f);
		scratchIntensityMin = Mathf.Clamp(scratchIntensityMin, 0f, 5f);
		scratchIntensityMax = Mathf.Clamp(scratchIntensityMax, 0f, 5f);
		scratchFPS = Mathf.Clamp(scratchFPS, 1f, 30f);
		scratchJitter = Mathf.Clamp(scratchJitter, 0f, 1f);
		grainSize = Mathf.Clamp(grainSize, 0.1f, 50f);
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		SanitizeParameters();
		if (scratchTimeLeft <= 0f)
		{
			scratchTimeLeft = Random.value * 2f / scratchFPS;
			scratchX = Random.value;
			scratchY = Random.value;
		}
		scratchTimeLeft -= Time.deltaTime;
		Material val = material;
		val.SetTexture("_GrainTex", grainTexture);
		val.SetTexture("_ScratchTex", scratchTexture);
		float num = 1f / grainSize;
		val.SetVector("_GrainOffsetScale", new Vector4(Random.value, Random.value, (float)Screen.width / (float)grainTexture.width * num, (float)Screen.height / (float)grainTexture.height * num));
		val.SetVector("_ScratchOffsetScale", new Vector4(scratchX + Random.value * scratchJitter, scratchY + Random.value * scratchJitter, (float)Screen.width / (float)scratchTexture.width, (float)Screen.height / (float)scratchTexture.height));
		val.SetVector("_Intensity", new Vector4(Random.Range(grainIntensityMin, grainIntensityMax), Random.Range(scratchIntensityMin, scratchIntensityMax), 0f, 0f));
		Graphics.Blit((Texture)(object)source, destination, val);
	}
}


using UnityEngine;

[ExecuteInEditMode]
public class PostEffectsBase : MonoBehaviour
{
	protected bool supportImageEffects = true;

	protected bool supportHDRTextures = true;

	protected bool supportDepthTextures = true;

	protected bool supportDX11;

	private bool checkedSystemInfo;

	protected bool isSupported = true;

	private Camera camera;

	public Camera Camera => camera = (((Object)(object)camera != (Object)null) ? camera : ((Component)this).GetComponent<Camera>());

	protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
	{
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Expected O, but got Unknown
		if (!Object.op_Implicit((Object)(object)s))
		{
			Debug.Log((object)("Missing shader in " + ((object)this).ToString()));
			((Behaviour)this).enabled = false;
			return null;
		}
		if (s.isSupported && Object.op_Implicit((Object)(object)m2Create) && (Object)(object)m2Create.shader == (Object)(object)s)
		{
			return m2Create;
		}
		if (!s.isSupported)
		{
			NotSupported();
			Debug.Log((object)("The shader " + ((object)s).ToString() + " on effect " + ((object)this).ToString() + " is not supported on this platform!"));
			return null;
		}
		m2Create = new Material(s);
		((Object)m2Create).hideFlags = (HideFlags)52;
		if (Object.op_Implicit((Object)(object)m2Create))
		{
			return m2Create;
		}
		return null;
	}

	protected Material CreateMaterial(Shader s, Material m2Create)
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Expected O, but got Unknown
		if (!Object.op_Implicit((Object)(object)s))
		{
			Debug.Log((object)("Missing shader in " + ((object)this).ToString()));
			return null;
		}
		if (Object.op_Implicit((Object)(object)m2Create) && (Object)(object)m2Create.shader == (Object)(object)s && s.isSupported)
		{
			return m2Create;
		}
		if (!s.isSupported)
		{
			return null;
		}
		m2Create = new Material(s);
		((Object)m2Create).hideFlags = (HideFlags)52;
		if (Object.op_Implicit((Object)(object)m2Create))
		{
			return m2Create;
		}
		return null;
	}

	private void OnEnable()
	{
		isSupported = true;
	}

	protected bool CheckSupport()
	{
		return CheckSupport(needDepth: false);
	}

	public virtual bool CheckResources()
	{
		Debug.LogWarning((object)("CheckResources () for " + ((object)this).ToString() + " should be overwritten."));
		return isSupported;
	}

	protected void Start()
	{
		CheckResources();
	}

	protected bool CheckSupport(bool needDepth)
	{
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		if (!checkedSystemInfo)
		{
			supportImageEffects = SystemInfo.supportsImageEffects;
			supportHDRTextures = SystemInfo.SupportsRenderTextureFormat((RenderTextureFormat)2);
			supportDepthTextures = SystemInfo.SupportsRenderTextureFormat((RenderTextureFormat)1);
			supportDX11 = SystemInfo.graphicsShaderLevel >= 50 && SystemInfo.supportsComputeShaders;
			checkedSystemInfo = true;
		}
		isSupported = true;
		if (!supportImageEffects)
		{
			NotSupported();
			return false;
		}
		if (needDepth && !supportDepthTextures)
		{
			NotSupported();
			return false;
		}
		if (needDepth)
		{
			Camera obj = Camera;
			obj.depthTextureMode = (DepthTextureMode)(obj.depthTextureMode | 1);
		}
		return true;
	}

	protected bool CheckSupport(bool needDepth, bool needHdr)
	{
		if (!CheckSupport(needDepth))
		{
			return false;
		}
		if (needHdr && !supportHDRTextures)
		{
			NotSupported();
			return false;
		}
		return true;
	}

	public bool Dx11Support()
	{
		return supportDX11;
	}

	protected void ReportAutoDisable()
	{
		Debug.LogWarning((object)("The image effect " + ((object)this).ToString() + " has been disabled as it's not supported on the current platform."));
	}

	private bool CheckShader(Shader s)
	{
		Debug.Log((object)("The shader " + ((object)s).ToString() + " on effect " + ((object)this).ToString() + " is not part of the Unity 3.2+ effects suite anymore. For best performance and quality, please ensure you are using the latest Standard Assets Image Effects (Pro only) package."));
		if (!s.isSupported)
		{
			NotSupported();
			return false;
		}
		return false;
	}

	protected void NotSupported()
	{
		((Behaviour)this).enabled = false;
		isSupported = false;
	}

	protected void DrawBorder(RenderTexture dest, Material material)
	{
		RenderTexture.active = dest;
		bool flag = true;
		GL.PushMatrix();
		GL.LoadOrtho();
		for (int i = 0; i < material.passCount; i++)
		{
			material.SetPass(i);
			float num;
			float num2;
			if (flag)
			{
				num = 1f;
				num2 = 0f;
			}
			else
			{
				num = 0f;
				num2 = 1f;
			}
			float num3 = 0f + 1f / ((float)((Texture)dest).width * 1f);
			float num4 = 0f;
			float num5 = 1f;
			GL.Begin(7);
			GL.TexCoord2(0f, num);
			GL.Vertex3(0f, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(0f, num5, 0.1f);
			float num6 = 1f - 1f / ((float)((Texture)dest).width * 1f);
			num3 = 1f;
			num4 = 0f;
			num5 = 1f;
			GL.TexCoord2(0f, num);
			GL.Vertex3(num6, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(num6, num5, 0.1f);
			num3 = 1f;
			num4 = 0f;
			num5 = 0f + 1f / ((float)((Texture)dest).height * 1f);
			GL.TexCoord2(0f, num);
			GL.Vertex3(0f, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(0f, num5, 0.1f);
			num3 = 1f;
			num4 = 1f - 1f / ((float)((Texture)dest).height * 1f);
			num5 = 1f;
			GL.TexCoord2(0f, num);
			GL.Vertex3(0f, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(0f, num5, 0.1f);
			GL.End();
		}
		GL.PopMatrix();
	}
}


using System;
using UnityEngine;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
internal class PostEffectsHelper : MonoBehaviour
{
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		Debug.Log((object)"OnRenderImage in Helper called ...");
	}

	private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		RenderTexture.active = dest;
		material.SetTexture("_MainTex", (Texture)(object)source);
		bool flag = true;
		GL.PushMatrix();
		GL.LoadIdentity();
		GL.LoadProjectionMatrix(cameraForProjectionMatrix.projectionMatrix);
		float num = cameraForProjectionMatrix.fieldOfView * 0.5f * ((float)Math.PI / 180f);
		float num2 = Mathf.Cos(num) / Mathf.Sin(num);
		float aspect = cameraForProjectionMatrix.aspect;
		float num3 = aspect / (0f - num2);
		float num4 = aspect / num2;
		float num5 = 1f / (0f - num2);
		float num6 = 1f / num2;
		float num7 = 1f;
		num3 *= dist * num7;
		num4 *= dist * num7;
		num5 *= dist * num7;
		num6 *= dist * num7;
		float num8 = 0f - dist;
		for (int i = 0; i < material.passCount; i++)
		{
			material.SetPass(i);
			GL.Begin(7);
			float num9;
			float num10;
			if (flag)
			{
				num9 = 1f;
				num10 = 0f;
			}
			else
			{
				num9 = 0f;
				num10 = 1f;
			}
			GL.TexCoord2(0f, num9);
			GL.Vertex3(num3, num5, num8);
			GL.TexCoord2(1f, num9);
			GL.Vertex3(num4, num5, num8);
			GL.TexCoord2(1f, num10);
			GL.Vertex3(num4, num6, num8);
			GL.TexCoord2(0f, num10);
			GL.Vertex3(num3, num6, num8);
			GL.End();
		}
		GL.PopMatrix();
	}

	private static void DrawBorder(RenderTexture dest, Material material)
	{
		RenderTexture.active = dest;
		bool flag = true;
		GL.PushMatrix();
		GL.LoadOrtho();
		for (int i = 0; i < material.passCount; i++)
		{
			material.SetPass(i);
			float num;
			float num2;
			if (flag)
			{
				num = 1f;
				num2 = 0f;
			}
			else
			{
				num = 0f;
				num2 = 1f;
			}
			float num3 = 0f + 1f / ((float)((Texture)dest).width * 1f);
			float num4 = 0f;
			float num5 = 1f;
			GL.Begin(7);
			GL.TexCoord2(0f, num);
			GL.Vertex3(0f, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(0f, num5, 0.1f);
			float num6 = 1f - 1f / ((float)((Texture)dest).width * 1f);
			num3 = 1f;
			num4 = 0f;
			num5 = 1f;
			GL.TexCoord2(0f, num);
			GL.Vertex3(num6, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(num6, num5, 0.1f);
			num3 = 1f;
			num4 = 0f;
			num5 = 0f + 1f / ((float)((Texture)dest).height * 1f);
			GL.TexCoord2(0f, num);
			GL.Vertex3(0f, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(0f, num5, 0.1f);
			num3 = 1f;
			num4 = 1f - 1f / ((float)((Texture)dest).height * 1f);
			num5 = 1f;
			GL.TexCoord2(0f, num);
			GL.Vertex3(0f, num4, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(num3, num4, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(num3, num5, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(0f, num5, 0.1f);
			GL.End();
		}
		GL.PopMatrix();
	}

	private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
	{
		RenderTexture.active = dest;
		material.SetTexture("_MainTex", (Texture)(object)source);
		bool flag = true;
		GL.PushMatrix();
		GL.LoadOrtho();
		for (int i = 0; i < material.passCount; i++)
		{
			material.SetPass(i);
			GL.Begin(7);
			float num;
			float num2;
			if (flag)
			{
				num = 1f;
				num2 = 0f;
			}
			else
			{
				num = 0f;
				num2 = 1f;
			}
			GL.TexCoord2(0f, num);
			GL.Vertex3(x1, y1, 0.1f);
			GL.TexCoord2(1f, num);
			GL.Vertex3(x2, y1, 0.1f);
			GL.TexCoord2(1f, num2);
			GL.Vertex3(x2, y2, 0.1f);
			GL.TexCoord2(0f, num2);
			GL.Vertex3(x1, y2, 0.1f);
			GL.End();
		}
		GL.PopMatrix();
	}
}


using UnityEngine;

internal class Quads
{
	private static Mesh[] meshes;

	private static int currentQuads;

	private static bool HasMeshes()
	{
		if (meshes == null)
		{
			return false;
		}
		Mesh[] array = meshes;
		foreach (Mesh val in array)
		{
			if ((Object)null == (Object)(object)val)
			{
				return false;
			}
		}
		return true;
	}

	public static void Cleanup()
	{
		if (meshes == null)
		{
			return;
		}
		for (int i = 0; i < meshes.Length; i++)
		{
			if ((Object)null != (Object)(object)meshes[i])
			{
				Object.DestroyImmediate((Object)(object)meshes[i]);
				meshes[i] = null;
			}
		}
		meshes = null;
	}

	public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
	{
		if (HasMeshes() && currentQuads == totalWidth * totalHeight)
		{
			return meshes;
		}
		int num = 10833;
		int num2 = (currentQuads = totalWidth * totalHeight);
		meshes = (Mesh[])(object)new Mesh[Mathf.CeilToInt(1f * (float)num2 / (1f * (float)num))];
		int num3 = 0;
		int num4 = 0;
		for (num3 = 0; num3 < num2; num3 += num)
		{
			int triCount = Mathf.FloorToInt((float)Mathf.Clamp(num2 - num3, 0, num));
			meshes[num4] = GetMesh(triCount, num3, totalWidth, totalHeight);
			num4++;
		}
		return meshes;
	}

	private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		Mesh val = new Mesh();
		((Object)val).hideFlags = (HideFlags)52;
		Vector3[] array = (Vector3[])(object)new Vector3[triCount * 4];
		Vector2[] array2 = (Vector2[])(object)new Vector2[triCount * 4];
		Vector2[] array3 = (Vector2[])(object)new Vector2[triCount * 4];
		int[] array4 = new int[triCount * 6];
		Vector3 val2 = default(Vector3);
		for (int i = 0; i < triCount; i++)
		{
			int num = i * 4;
			int num2 = i * 6;
			int num3 = triOffset + i;
			float num4 = Mathf.Floor((float)(num3 % totalWidth)) / (float)totalWidth;
			float num5 = Mathf.Floor((float)(num3 / totalWidth)) / (float)totalHeight;
			((Vector3)(ref val2))..ctor(num4 * 2f - 1f, num5 * 2f - 1f, 1f);
			array[num] = val2;
			array[num + 1] = val2;
			array[num + 2] = val2;
			array[num + 3] = val2;
			array2[num] = new Vector2(0f, 0f);
			array2[num + 1] = new Vector2(1f, 0f);
			array2[num + 2] = new Vector2(0f, 1f);
			array2[num + 3] = new Vector2(1f, 1f);
			array3[num] = new Vector2(num4, num5);
			array3[num + 1] = new Vector2(num4, num5);
			array3[num + 2] = new Vector2(num4, num5);
			array3[num + 3] = new Vector2(num4, num5);
			array4[num2] = num;
			array4[num2 + 1] = num + 1;
			array4[num2 + 2] = num + 2;
			array4[num2 + 3] = num + 1;
			array4[num2 + 4] = num + 2;
			array4[num2 + 5] = num + 3;
		}
		val.vertices = array;
		val.triangles = array4;
		val.uv = array2;
		val.uv2 = array3;
		return val;
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Other/Screen Overlay")]
public class ScreenOverlay : PostEffectsBase, IImageEffect
{
	public enum OverlayBlendMode
	{
		Additive,
		ScreenBlend,
		Multiply,
		Overlay,
		AlphaBlend
	}

	public OverlayBlendMode blendMode = OverlayBlendMode.Overlay;

	public float intensity = 1f;

	public Texture texture;

	public Shader overlayShader;

	private Material overlayMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		overlayMaterial = CheckShaderAndCreateMaterial(overlayShader, overlayMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public bool IsActive()
	{
		if (((Behaviour)this).enabled)
		{
			return CheckResources();
		}
		return false;
	}

	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		Vector4 val = default(Vector4);
		((Vector4)(ref val))..ctor(1f, 0f, 0f, 1f);
		overlayMaterial.SetVector("_UV_Transform", val);
		overlayMaterial.SetFloat("_Intensity", intensity);
		overlayMaterial.SetTexture("_Overlay", texture);
		Graphics.Blit((Texture)(object)source, destination, overlayMaterial, (int)blendMode);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Obscurance")]
internal class ScreenSpaceAmbientObscurance : PostEffectsBase
{
	[Range(0f, 3f)]
	public float intensity = 0.5f;

	[Range(0.1f, 3f)]
	public float radius = 0.2f;

	[Range(0f, 3f)]
	public int blurIterations = 1;

	[Range(0f, 5f)]
	public float blurFilterDistance = 1.25f;

	[Range(0f, 1f)]
	public int downsample;

	public Texture2D rand;

	public Shader aoShader;

	private Material aoMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		aoMaterial = CheckShaderAndCreateMaterial(aoShader, aoMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)aoMaterial))
		{
			Object.DestroyImmediate((Object)(object)aoMaterial);
		}
		aoMaterial = null;
	}

	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		Matrix4x4 projectionMatrix = ((Component)this).GetComponent<Camera>().projectionMatrix;
		Matrix4x4 inverse = ((Matrix4x4)(ref projectionMatrix)).inverse;
		Vector4 val = default(Vector4);
		((Vector4)(ref val))..ctor(-2f / ((float)Screen.width * ((Matrix4x4)(ref projectionMatrix))[0]), -2f / ((float)Screen.height * ((Matrix4x4)(ref projectionMatrix))[5]), (1f - ((Matrix4x4)(ref projectionMatrix))[2]) / ((Matrix4x4)(ref projectionMatrix))[0], (1f + ((Matrix4x4)(ref projectionMatrix))[6]) / ((Matrix4x4)(ref projectionMatrix))[5]);
		aoMaterial.SetVector("_ProjInfo", val);
		aoMaterial.SetMatrix("_ProjectionInv", inverse);
		aoMaterial.SetTexture("_Rand", (Texture)(object)rand);
		aoMaterial.SetFloat("_Radius", radius);
		aoMaterial.SetFloat("_Radius2", radius * radius);
		aoMaterial.SetFloat("_Intensity", intensity);
		aoMaterial.SetFloat("_BlurFilterDistance", blurFilterDistance);
		int width = ((Texture)source).width;
		int height = ((Texture)source).height;
		RenderTexture val2 = RenderTexture.GetTemporary(width >> downsample, height >> downsample);
		Graphics.Blit((Texture)(object)source, val2, aoMaterial, 0);
		if (downsample > 0)
		{
			RenderTexture temporary = RenderTexture.GetTemporary(width, height);
			Graphics.Blit((Texture)(object)val2, temporary, aoMaterial, 4);
			RenderTexture.ReleaseTemporary(val2);
			val2 = temporary;
		}
		for (int i = 0; i < blurIterations; i++)
		{
			aoMaterial.SetVector("_Axis", Vector4.op_Implicit(new Vector2(1f, 0f)));
			RenderTexture temporary = RenderTexture.GetTemporary(width, height);
			Graphics.Blit((Texture)(object)val2, temporary, aoMaterial, 1);
			RenderTexture.ReleaseTemporary(val2);
			aoMaterial.SetVector("_Axis", Vector4.op_Implicit(new Vector2(0f, 1f)));
			val2 = RenderTexture.GetTemporary(width, height);
			Graphics.Blit((Texture)(object)temporary, val2, aoMaterial, 1);
			RenderTexture.ReleaseTemporary(temporary);
		}
		aoMaterial.SetTexture("_AOTex", (Texture)(object)val2);
		Graphics.Blit((Texture)(object)source, destination, aoMaterial, 2);
		RenderTexture.ReleaseTemporary(val2);
	}
}


using System;
using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Occlusion")]
public class ScreenSpaceAmbientOcclusion : MonoBehaviour
{
	public enum SSAOSamples
	{
		Low,
		Medium,
		High
	}

	public float m_Radius = 0.4f;

	public SSAOSamples m_SampleCount = SSAOSamples.Medium;

	public float m_OcclusionIntensity = 1.5f;

	public int m_Blur = 2;

	public int m_Downsampling = 2;

	public float m_OcclusionAttenuation = 1f;

	public float m_MinZ = 0.01f;

	public Shader m_SSAOShader;

	private Material m_SSAOMaterial;

	public Texture2D m_RandomTexture;

	private bool m_Supported;

	private static Material CreateMaterial(Shader shader)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Expected O, but got Unknown
		if (!Object.op_Implicit((Object)(object)shader))
		{
			return null;
		}
		return new Material(shader)
		{
			hideFlags = (HideFlags)61
		};
	}

	private static void DestroyMaterial(Material mat)
	{
		if (Object.op_Implicit((Object)(object)mat))
		{
			Object.DestroyImmediate((Object)(object)mat);
			mat = null;
		}
	}

	private void OnDisable()
	{
		DestroyMaterial(m_SSAOMaterial);
	}

	private void Start()
	{
		if (!SystemInfo.supportsImageEffects || !SystemInfo.SupportsRenderTextureFormat((RenderTextureFormat)1))
		{
			m_Supported = false;
			((Behaviour)this).enabled = false;
			return;
		}
		CreateMaterials();
		if (!Object.op_Implicit((Object)(object)m_SSAOMaterial) || m_SSAOMaterial.passCount != 5)
		{
			m_Supported = false;
			((Behaviour)this).enabled = false;
		}
		else
		{
			m_Supported = true;
		}
	}

	private void OnEnable()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Camera component = ((Component)this).GetComponent<Camera>();
		component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 2);
	}

	private void CreateMaterials()
	{
		if (!Object.op_Implicit((Object)(object)m_SSAOMaterial) && m_SSAOShader.isSupported)
		{
			m_SSAOMaterial = CreateMaterial(m_SSAOShader);
			m_SSAOMaterial.SetTexture("_RandomTexture", (Texture)(object)m_RandomTexture);
		}
	}

	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		if (!m_Supported || !m_SSAOShader.isSupported)
		{
			((Behaviour)this).enabled = false;
			return;
		}
		CreateMaterials();
		m_Downsampling = Mathf.Clamp(m_Downsampling, 1, 6);
		m_Radius = Mathf.Clamp(m_Radius, 0.05f, 1f);
		m_MinZ = Mathf.Clamp(m_MinZ, 1E-05f, 0.5f);
		m_OcclusionIntensity = Mathf.Clamp(m_OcclusionIntensity, 0.5f, 4f);
		m_OcclusionAttenuation = Mathf.Clamp(m_OcclusionAttenuation, 0.2f, 2f);
		m_Blur = Mathf.Clamp(m_Blur, 0, 4);
		RenderTexture val = RenderTexture.GetTemporary(((Texture)source).width / m_Downsampling, ((Texture)source).height / m_Downsampling, 0);
		float fieldOfView = ((Component)this).GetComponent<Camera>().fieldOfView;
		float farClipPlane = ((Component)this).GetComponent<Camera>().farClipPlane;
		float num = Mathf.Tan(fieldOfView * ((float)Math.PI / 180f) * 0.5f) * farClipPlane;
		float num2 = num * ((Component)this).GetComponent<Camera>().aspect;
		m_SSAOMaterial.SetVector("_FarCorner", Vector4.op_Implicit(new Vector3(num2, num, farClipPlane)));
		int num3;
		int num4;
		if (Object.op_Implicit((Object)(object)m_RandomTexture))
		{
			num3 = ((Texture)m_RandomTexture).width;
			num4 = ((Texture)m_RandomTexture).height;
		}
		else
		{
			num3 = 1;
			num4 = 1;
		}
		m_SSAOMaterial.SetVector("_NoiseScale", Vector4.op_Implicit(new Vector3((float)((Texture)val).width / (float)num3, (float)((Texture)val).height / (float)num4, 0f)));
		m_SSAOMaterial.SetVector("_Params", new Vector4(m_Radius, m_MinZ, 1f / m_OcclusionAttenuation, m_OcclusionIntensity));
		bool num5 = m_Blur > 0;
		Graphics.Blit((Texture)(object)(num5 ? null : source), val, m_SSAOMaterial, (int)m_SampleCount);
		if (num5)
		{
			RenderTexture temporary = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0);
			m_SSAOMaterial.SetVector("_TexelOffsetScale", new Vector4((float)m_Blur / (float)((Texture)source).width, 0f, 0f, 0f));
			m_SSAOMaterial.SetTexture("_SSAO", (Texture)(object)val);
			Graphics.Blit((Texture)null, temporary, m_SSAOMaterial, 3);
			RenderTexture.ReleaseTemporary(val);
			RenderTexture temporary2 = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0);
			m_SSAOMaterial.SetVector("_TexelOffsetScale", new Vector4(0f, (float)m_Blur / (float)((Texture)source).height, 0f, 0f));
			m_SSAOMaterial.SetTexture("_SSAO", (Texture)(object)temporary);
			Graphics.Blit((Texture)(object)source, temporary2, m_SSAOMaterial, 3);
			RenderTexture.ReleaseTemporary(temporary);
			val = temporary2;
		}
		m_SSAOMaterial.SetTexture("_SSAO", (Texture)(object)val);
		Graphics.Blit((Texture)(object)source, destination, m_SSAOMaterial, 4);
		RenderTexture.ReleaseTemporary(val);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Color Adjustments/Sepia Tone")]
public class SepiaTone : ImageEffectBase
{
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		Graphics.Blit((Texture)(object)source, destination, base.material);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Rendering/Sun Shafts")]
public class SunShafts : PostEffectsBase
{
	public enum SunShaftsResolution
	{
		Low,
		Normal,
		High
	}

	public enum ShaftsScreenBlendMode
	{
		Screen,
		Add
	}

	public SunShaftsResolution resolution = SunShaftsResolution.Normal;

	public ShaftsScreenBlendMode screenBlendMode;

	public Transform sunTransform;

	public int radialBlurIterations = 2;

	public Color sunColor = Color.white;

	public Color sunThreshold = new Color(0.87f, 0.74f, 0.65f);

	public float sunShaftBlurRadius = 2.5f;

	public float sunShaftIntensity = 1.15f;

	public float maxRadius = 0.75f;

	public bool useDepthTexture = true;

	public Shader sunShaftsShader;

	private Material sunShaftsMaterial;

	public Shader simpleClearShader;

	private Material simpleClearMaterial;

	public override bool CheckResources()
	{
		CheckSupport(useDepthTexture);
		sunShaftsMaterial = CheckShaderAndCreateMaterial(sunShaftsShader, sunShaftsMaterial);
		simpleClearMaterial = CheckShaderAndCreateMaterial(simpleClearShader, simpleClearMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_0355: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		if (useDepthTexture)
		{
			Camera component = ((Component)this).GetComponent<Camera>();
			component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 1);
		}
		int num = 4;
		if (resolution == SunShaftsResolution.Normal)
		{
			num = 2;
		}
		else if (resolution == SunShaftsResolution.High)
		{
			num = 1;
		}
		Vector3 val = Vector3.one * 0.5f;
		if (Object.op_Implicit((Object)(object)sunTransform))
		{
			val = ((Component)this).GetComponent<Camera>().WorldToViewportPoint(sunTransform.position);
		}
		else
		{
			((Vector3)(ref val))..ctor(0.5f, 0.5f, 0f);
		}
		int num2 = ((Texture)source).width / num;
		int num3 = ((Texture)source).height / num;
		RenderTexture temporary = RenderTexture.GetTemporary(num2, num3, 0);
		sunShaftsMaterial.SetVector("_BlurRadius4", new Vector4(1f, 1f, 0f, 0f) * sunShaftBlurRadius);
		sunShaftsMaterial.SetVector("_SunPosition", new Vector4(val.x, val.y, val.z, maxRadius));
		sunShaftsMaterial.SetVector("_SunThreshold", Color.op_Implicit(sunThreshold));
		if (!useDepthTexture)
		{
			RenderTextureFormat val2 = (RenderTextureFormat)(((Component)this).GetComponent<Camera>().allowHDR ? 9 : 7);
			RenderTexture val3 = (RenderTexture.active = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, val2));
			GL.ClearWithSkybox(false, ((Component)this).GetComponent<Camera>());
			sunShaftsMaterial.SetTexture("_Skybox", (Texture)(object)val3);
			Graphics.Blit((Texture)(object)source, temporary, sunShaftsMaterial, 3);
			RenderTexture.ReleaseTemporary(val3);
		}
		else
		{
			Graphics.Blit((Texture)(object)source, temporary, sunShaftsMaterial, 2);
		}
		DrawBorder(temporary, simpleClearMaterial);
		radialBlurIterations = Mathf.Clamp(radialBlurIterations, 1, 4);
		float num4 = sunShaftBlurRadius * 0.0013020834f;
		sunShaftsMaterial.SetVector("_BlurRadius4", new Vector4(num4, num4, 0f, 0f));
		sunShaftsMaterial.SetVector("_SunPosition", new Vector4(val.x, val.y, val.z, maxRadius));
		for (int i = 0; i < radialBlurIterations; i++)
		{
			RenderTexture temporary3 = RenderTexture.GetTemporary(num2, num3, 0);
			Graphics.Blit((Texture)(object)temporary, temporary3, sunShaftsMaterial, 1);
			RenderTexture.ReleaseTemporary(temporary);
			num4 = sunShaftBlurRadius * (((float)i * 2f + 1f) * 6f) / 768f;
			sunShaftsMaterial.SetVector("_BlurRadius4", new Vector4(num4, num4, 0f, 0f));
			temporary = RenderTexture.GetTemporary(num2, num3, 0);
			Graphics.Blit((Texture)(object)temporary3, temporary, sunShaftsMaterial, 1);
			RenderTexture.ReleaseTemporary(temporary3);
			num4 = sunShaftBlurRadius * (((float)i * 2f + 2f) * 6f) / 768f;
			sunShaftsMaterial.SetVector("_BlurRadius4", new Vector4(num4, num4, 0f, 0f));
		}
		if (val.z >= 0f)
		{
			sunShaftsMaterial.SetVector("_SunColor", new Vector4(sunColor.r, sunColor.g, sunColor.b, sunColor.a) * sunShaftIntensity);
		}
		else
		{
			sunShaftsMaterial.SetVector("_SunColor", Vector4.zero);
		}
		sunShaftsMaterial.SetTexture("_ColorBuffer", (Texture)(object)temporary);
		Graphics.Blit((Texture)(object)source, destination, sunShaftsMaterial, (screenBlendMode != 0) ? 4 : 0);
		RenderTexture.ReleaseTemporary(temporary);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Tilt Shift (Lens Blur)")]
internal class TiltShift : PostEffectsBase
{
	public enum TiltShiftMode
	{
		TiltShiftMode,
		IrisMode
	}

	public enum TiltShiftQuality
	{
		Preview,
		Normal,
		High
	}

	public TiltShiftMode mode;

	public TiltShiftQuality quality = TiltShiftQuality.Normal;

	[Range(0f, 15f)]
	public float blurArea = 1f;

	[Range(0f, 25f)]
	public float maxBlurSize = 5f;

	[Range(0f, 1f)]
	public int downsample;

	public Shader tiltShiftShader;

	private Material tiltShiftMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		tiltShiftMaterial = CheckShaderAndCreateMaterial(tiltShiftShader, tiltShiftMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		tiltShiftMaterial.SetFloat("_BlurSize", (maxBlurSize < 0f) ? 0f : maxBlurSize);
		tiltShiftMaterial.SetFloat("_BlurArea", blurArea);
		((Texture)source).filterMode = (FilterMode)1;
		RenderTexture val = destination;
		if ((float)downsample > 0f)
		{
			val = RenderTexture.GetTemporary(((Texture)source).width >> downsample, ((Texture)source).height >> downsample, 0, source.format);
			((Texture)val).filterMode = (FilterMode)1;
		}
		int num = (int)quality;
		num *= 2;
		Graphics.Blit((Texture)(object)source, val, tiltShiftMaterial, (mode == TiltShiftMode.TiltShiftMode) ? num : (num + 1));
		if (downsample > 0)
		{
			tiltShiftMaterial.SetTexture("_Blurred", (Texture)(object)val);
			Graphics.Blit((Texture)(object)source, destination, tiltShiftMaterial, 6);
		}
		if ((Object)(object)val != (Object)(object)destination)
		{
			RenderTexture.ReleaseTemporary(val);
		}
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Color Adjustments/Tonemapping")]
public class Tonemapping : PostEffectsBase
{
	public enum TonemapperType
	{
		SimpleReinhard,
		UserCurve,
		Hable,
		Photographic,
		OptimizedHejiDawson,
		AdaptiveReinhard,
		AdaptiveReinhardAutoWhite
	}

	public enum AdaptiveTexSize
	{
		Square16 = 0x10,
		Square32 = 0x20,
		Square64 = 0x40,
		Square128 = 0x80,
		Square256 = 0x100,
		Square512 = 0x200,
		Square1024 = 0x400
	}

	public TonemapperType type = TonemapperType.Photographic;

	public AdaptiveTexSize adaptiveTextureSize = AdaptiveTexSize.Square256;

	public AnimationCurve remapCurve;

	private Texture2D curveTex;

	public float exposureAdjustment = 1.5f;

	public float middleGrey = 0.4f;

	public float white = 2f;

	public float adaptionSpeed = 1.5f;

	public Shader tonemapper;

	public bool validRenderTextureFormat = true;

	private Material tonemapMaterial;

	private RenderTexture rt;

	private RenderTextureFormat rtFormat = (RenderTextureFormat)2;

	public override bool CheckResources()
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Expected O, but got Unknown
		CheckSupport(needDepth: false, needHdr: true);
		tonemapMaterial = CheckShaderAndCreateMaterial(tonemapper, tonemapMaterial);
		if (!Object.op_Implicit((Object)(object)curveTex) && type == TonemapperType.UserCurve)
		{
			curveTex = new Texture2D(256, 1, (TextureFormat)5, false, true);
			((Object)curveTex).name = "ToneMapping.curveTex";
			((Texture)curveTex).filterMode = (FilterMode)1;
			((Texture)curveTex).wrapMode = (TextureWrapMode)1;
			((Object)curveTex).hideFlags = (HideFlags)52;
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public float UpdateCurve()
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Expected O, but got Unknown
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		float num = 1f;
		if (remapCurve.keys.Length < 1)
		{
			remapCurve = new AnimationCurve((Keyframe[])(object)new Keyframe[2]
			{
				new Keyframe(0f, 0f),
				new Keyframe(2f, 1f)
			});
		}
		if (remapCurve != null)
		{
			if (remapCurve.length > 0)
			{
				Keyframe val = remapCurve[remapCurve.length - 1];
				num = ((Keyframe)(ref val)).time;
			}
			for (float num2 = 0f; num2 <= 1f; num2 += 0.003921569f)
			{
				float num3 = remapCurve.Evaluate(num2 * 1f * num);
				curveTex.SetPixel((int)Mathf.Floor(num2 * 255f), 0, new Color(num3, num3, num3));
			}
			curveTex.Apply();
		}
		return 1f / num;
	}

	private void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)rt))
		{
			Object.DestroyImmediate((Object)(object)rt);
			rt = null;
		}
		if (Object.op_Implicit((Object)(object)tonemapMaterial))
		{
			Object.DestroyImmediate((Object)(object)tonemapMaterial);
			tonemapMaterial = null;
		}
		if (Object.op_Implicit((Object)(object)curveTex))
		{
			Object.DestroyImmediate((Object)(object)curveTex);
			curveTex = null;
		}
	}

	private bool CreateInternalRenderTexture()
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Expected O, but got Unknown
		if (Object.op_Implicit((Object)(object)rt))
		{
			return false;
		}
		rtFormat = (RenderTextureFormat)(SystemInfo.SupportsRenderTextureFormat((RenderTextureFormat)13) ? 13 : 2);
		rt = new RenderTexture(1, 1, 0, rtFormat);
		((Object)rt).hideFlags = (HideFlags)52;
		return true;
	}

	[ImageEffectTransformsToLDR]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e6: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		exposureAdjustment = ((exposureAdjustment < 0.001f) ? 0.001f : exposureAdjustment);
		if (type == TonemapperType.UserCurve)
		{
			float num = UpdateCurve();
			tonemapMaterial.SetFloat("_RangeScale", num);
			tonemapMaterial.SetTexture("_Curve", (Texture)(object)curveTex);
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 4);
			return;
		}
		if (type == TonemapperType.SimpleReinhard)
		{
			tonemapMaterial.SetFloat("_ExposureAdjustment", exposureAdjustment);
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 6);
			return;
		}
		if (type == TonemapperType.Hable)
		{
			tonemapMaterial.SetFloat("_ExposureAdjustment", exposureAdjustment);
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 5);
			return;
		}
		if (type == TonemapperType.Photographic)
		{
			tonemapMaterial.SetFloat("_ExposureAdjustment", exposureAdjustment);
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 8);
			return;
		}
		if (type == TonemapperType.OptimizedHejiDawson)
		{
			tonemapMaterial.SetFloat("_ExposureAdjustment", 0.5f * exposureAdjustment);
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 7);
			return;
		}
		bool flag = CreateInternalRenderTexture();
		RenderTexture temporary = RenderTexture.GetTemporary((int)adaptiveTextureSize, (int)adaptiveTextureSize, 0, rtFormat);
		Graphics.Blit((Texture)(object)source, temporary);
		int num2 = (int)Mathf.Log((float)((Texture)temporary).width * 1f, 2f);
		int num3 = 2;
		RenderTexture[] array = (RenderTexture[])(object)new RenderTexture[num2];
		for (int i = 0; i < num2; i++)
		{
			array[i] = RenderTexture.GetTemporary(((Texture)temporary).width / num3, ((Texture)temporary).width / num3, 0, rtFormat);
			num3 *= 2;
		}
		RenderTexture val = array[num2 - 1];
		Graphics.Blit((Texture)(object)temporary, array[0], tonemapMaterial, 1);
		if (type == TonemapperType.AdaptiveReinhardAutoWhite)
		{
			for (int j = 0; j < num2 - 1; j++)
			{
				Graphics.Blit((Texture)(object)array[j], array[j + 1], tonemapMaterial, 9);
				val = array[j + 1];
			}
		}
		else if (type == TonemapperType.AdaptiveReinhard)
		{
			for (int k = 0; k < num2 - 1; k++)
			{
				Graphics.Blit((Texture)(object)array[k], array[k + 1]);
				val = array[k + 1];
			}
		}
		adaptionSpeed = ((adaptionSpeed < 0.001f) ? 0.001f : adaptionSpeed);
		tonemapMaterial.SetFloat("_AdaptionSpeed", adaptionSpeed);
		rt.MarkRestoreExpected();
		Graphics.Blit((Texture)(object)val, rt, tonemapMaterial, flag ? 3 : 2);
		middleGrey = ((middleGrey < 0.001f) ? 0.001f : middleGrey);
		tonemapMaterial.SetVector("_HdrParams", new Vector4(middleGrey, middleGrey, middleGrey, white * white));
		tonemapMaterial.SetTexture("_SmallTex", (Texture)(object)rt);
		if (type == TonemapperType.AdaptiveReinhard)
		{
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 0);
		}
		else if (type == TonemapperType.AdaptiveReinhardAutoWhite)
		{
			Graphics.Blit((Texture)(object)source, destination, tonemapMaterial, 10);
		}
		else
		{
			Debug.LogError((object)"No valid adaptive tonemapper type found!");
			Graphics.Blit((Texture)(object)source, destination);
		}
		for (int l = 0; l < num2; l++)
		{
			RenderTexture.ReleaseTemporary(array[l]);
		}
		RenderTexture.ReleaseTemporary(temporary);
	}
}


using UnityEngine;

internal class Triangles
{
	private static Mesh[] meshes;

	private static int currentTris;

	private static bool HasMeshes()
	{
		if (meshes == null)
		{
			return false;
		}
		for (int i = 0; i < meshes.Length; i++)
		{
			if ((Object)null == (Object)(object)meshes[i])
			{
				return false;
			}
		}
		return true;
	}

	private static void Cleanup()
	{
		if (meshes == null)
		{
			return;
		}
		for (int i = 0; i < meshes.Length; i++)
		{
			if ((Object)null != (Object)(object)meshes[i])
			{
				Object.DestroyImmediate((Object)(object)meshes[i]);
				meshes[i] = null;
			}
		}
		meshes = null;
	}

	private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
	{
		if (HasMeshes() && currentTris == totalWidth * totalHeight)
		{
			return meshes;
		}
		int num = 21666;
		int num2 = (currentTris = totalWidth * totalHeight);
		meshes = (Mesh[])(object)new Mesh[Mathf.CeilToInt(1f * (float)num2 / (1f * (float)num))];
		int num3 = 0;
		int num4 = 0;
		for (num3 = 0; num3 < num2; num3 += num)
		{
			int triCount = Mathf.FloorToInt((float)Mathf.Clamp(num2 - num3, 0, num));
			meshes[num4] = GetMesh(triCount, num3, totalWidth, totalHeight);
			num4++;
		}
		return meshes;
	}

	private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		Mesh val = new Mesh();
		((Object)val).name = "ImageEffectsTriangles";
		((Object)val).hideFlags = (HideFlags)52;
		Vector3[] array = (Vector3[])(object)new Vector3[triCount * 3];
		Vector2[] array2 = (Vector2[])(object)new Vector2[triCount * 3];
		Vector2[] array3 = (Vector2[])(object)new Vector2[triCount * 3];
		int[] array4 = new int[triCount * 3];
		Vector3 val2 = default(Vector3);
		for (int i = 0; i < triCount; i++)
		{
			int num = i * 3;
			int num2 = triOffset + i;
			float num3 = Mathf.Floor((float)(num2 % totalWidth)) / (float)totalWidth;
			float num4 = Mathf.Floor((float)(num2 / totalWidth)) / (float)totalHeight;
			((Vector3)(ref val2))..ctor(num3 * 2f - 1f, num4 * 2f - 1f, 1f);
			array[num] = val2;
			array[num + 1] = val2;
			array[num + 2] = val2;
			array2[num] = new Vector2(0f, 0f);
			array2[num + 1] = new Vector2(1f, 0f);
			array2[num + 2] = new Vector2(0f, 1f);
			array3[num] = new Vector2(num3, num4);
			array3[num + 1] = new Vector2(num3, num4);
			array3[num + 2] = new Vector2(num3, num4);
			array4[num] = num;
			array4[num + 1] = num + 1;
			array4[num + 2] = num + 2;
		}
		val.vertices = array;
		val.triangles = array4;
		val.uv = array2;
		val.uv2 = array3;
		return val;
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Displacement/Twirl")]
public class Twirl : ImageEffectBase
{
	public Vector2 radius = new Vector2(0.3f, 0.3f);

	public float angle = 50f;

	public Vector2 center = new Vector2(0.5f, 0.5f);

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		ImageEffects.RenderDistortion(base.material, source, destination, angle, center, radius);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Camera/Vignette and Chromatic Aberration")]
public class VignetteAndChromaticAberration : PostEffectsBase, IImageEffect
{
	public enum AberrationMode
	{
		Simple,
		Advanced
	}

	public AberrationMode mode;

	public float intensity = 0.375f;

	public float chromaticAberration = 0.2f;

	public float axialAberration = 0.5f;

	public float blur;

	public float blurSpread = 0.75f;

	public float luminanceDependency = 0.25f;

	public float blurDistance = 2.5f;

	public Shader vignetteShader;

	public Shader separableBlurShader;

	public Shader chromAberrationShader;

	private Material m_VignetteMaterial;

	private Material m_SeparableBlurMaterial;

	private Material m_ChromAberrationMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		m_VignetteMaterial = CheckShaderAndCreateMaterial(vignetteShader, m_VignetteMaterial);
		m_SeparableBlurMaterial = CheckShaderAndCreateMaterial(separableBlurShader, m_SeparableBlurMaterial);
		m_ChromAberrationMaterial = CheckShaderAndCreateMaterial(chromAberrationShader, m_ChromAberrationMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public bool IsActive()
	{
		if (((Behaviour)this).enabled)
		{
			return CheckResources();
		}
		return false;
	}

	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		int width = ((Texture)source).width;
		int height = ((Texture)source).height;
		bool flag = Mathf.Abs(blur) > 0f || Mathf.Abs(intensity) > 0f;
		float num = 1f * (float)width / (1f * (float)height);
		RenderTexture val = null;
		RenderTexture val2 = null;
		if (flag)
		{
			val = RenderTexture.GetTemporary(width, height, 0, source.format);
			if (Mathf.Abs(blur) > 0f)
			{
				val2 = RenderTexture.GetTemporary(width / 2, height / 2, 0, source.format);
				Graphics.Blit((Texture)(object)source, val2, m_ChromAberrationMaterial, 0);
				for (int i = 0; i < 2; i++)
				{
					m_SeparableBlurMaterial.SetVector("offsets", new Vector4(0f, blurSpread * 0.001953125f, 0f, 0f));
					RenderTexture temporary = RenderTexture.GetTemporary(width / 2, height / 2, 0, source.format);
					Graphics.Blit((Texture)(object)val2, temporary, m_SeparableBlurMaterial);
					RenderTexture.ReleaseTemporary(val2);
					m_SeparableBlurMaterial.SetVector("offsets", new Vector4(blurSpread * 0.001953125f / num, 0f, 0f, 0f));
					val2 = RenderTexture.GetTemporary(width / 2, height / 2, 0, source.format);
					Graphics.Blit((Texture)(object)temporary, val2, m_SeparableBlurMaterial);
					RenderTexture.ReleaseTemporary(temporary);
				}
			}
			m_VignetteMaterial.SetFloat("_Intensity", intensity);
			m_VignetteMaterial.SetFloat("_Blur", blur);
			m_VignetteMaterial.SetTexture("_VignetteTex", (Texture)(object)val2);
			Graphics.Blit((Texture)(object)source, val, m_VignetteMaterial, 0);
		}
		m_ChromAberrationMaterial.SetFloat("_ChromaticAberration", chromaticAberration);
		m_ChromAberrationMaterial.SetFloat("_AxialAberration", axialAberration);
		m_ChromAberrationMaterial.SetVector("_BlurDistance", Vector4.op_Implicit(new Vector2(0f - blurDistance, blurDistance)));
		m_ChromAberrationMaterial.SetFloat("_Luminance", 1f / Mathf.Max(Mathf.Epsilon, luminanceDependency));
		if (flag)
		{
			((Texture)val).wrapMode = (TextureWrapMode)1;
		}
		else
		{
			((Texture)source).wrapMode = (TextureWrapMode)1;
		}
		Graphics.Blit((Texture)(object)(flag ? val : source), destination, m_ChromAberrationMaterial, (mode != AberrationMode.Advanced) ? 1 : 2);
		RenderTexture.ReleaseTemporary(val);
		RenderTexture.ReleaseTemporary(val2);
	}
}


using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Displacement/Vortex")]
public class Vortex : ImageEffectBase
{
	public Vector2 radius = new Vector2(0.4f, 0.4f);

	public float angle = 50f;

	public Vector2 center = new Vector2(0.5f, 0.5f);

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		ImageEffects.RenderDistortion(base.material, source, destination, angle, center, radius);
	}
}


using System;
using System.Runtime.InteropServices;
using System.Security;
using UnityEngine;

[SuppressUnmanagedCodeSecurity]
public static class Graphics
{
	public static class BufferReadback
	{
		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_CreateForTexture")]
		public static extern IntPtr CreateForTexture(IntPtr tex, uint width, uint height, uint format);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_CreateForBuffer")]
		public static extern IntPtr CreateForBuffer(IntPtr buf, uint size);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_Destroy")]
		public static extern void Destroy(IntPtr inst);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_IssueRead")]
		public static extern void IssueRead(IntPtr inst);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetDataSize")]
		public static extern uint GetDataSize(IntPtr inst);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetDataStride")]
		public static extern uint GetDataStride(IntPtr inst);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
		public static extern void GetData(IntPtr inst, ref byte data);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
		public static extern void GetData(IntPtr inst, ref Color32 data);

		[DllImport("Renderer", EntryPoint = "GPU_BufferReadback_GetData")]
		public static extern void GetData(IntPtr inst, ref float data);
	}

	[DllImport("Renderer")]
	public static extern IntPtr GetRenderEventFunc();
}


using System;
using UnityEngine;

public struct DLSSData
{
	public IntPtr color;

	public IntPtr depth;

	public IntPtr motion;

	public IntPtr exposure;

	public IntPtr colorOutput;

	public int resetAccumulation;

	public float sharpness;

	public Vector2 jitterOffset;

	public Vector2 mVScale;

	public Vector2 viewportOffset;

	public Vector2 viewportSize;
}


public struct DlSSRecommendedSettings
{
	public float recommendedSharpness;

	public uint optimalRenderWidth;

	public uint optimalRenderHeight;

	public uint maximumRenderWidth;

	public uint maximumRenderHeight;

	public uint minimumRenderWidth;

	public uint minimumRenderHeight;
}


public enum NVSDK_NGX_PerfQuality_Value
{
	OFF = -1,
	NVSDK_NGX_PerfQuality_Value_MaxPerf,
	NVSDK_NGX_PerfQuality_Value_Balanced,
	NVSDK_NGX_PerfQuality_Value_MaxQuality,
	NVSDK_NGX_PerfQuality_Value_UltraPerformance,
	NVSDK_NGX_PerfQuality_Value_UltraQuality,
	NVSDK_NGX_PerfQuality_Value_DLAA
}


public static class Arrays
{
	public static ushort[] flushes = new ushort[7937]
	{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 9, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1599, 0, 0,
		0, 0, 0, 0, 0, 1598, 0, 0, 0, 1597,
		0, 1596, 8, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1595,
		0, 0, 0, 0, 0, 0, 0, 1594, 0, 0,
		0, 1593, 0, 1592, 1591, 0, 0, 0, 0, 0,
		0, 0, 0, 1590, 0, 0, 0, 1589, 0, 1588,
		1587, 0, 0, 0, 0, 1586, 0, 1585, 1584, 0,
		0, 1583, 1582, 0, 7, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1581, 0, 0, 0, 0, 0, 0,
		0, 1580, 0, 0, 0, 1579, 0, 1578, 1577, 0,
		0, 0, 0, 0, 0, 0, 0, 1576, 0, 0,
		0, 1575, 0, 1574, 1573, 0, 0, 0, 0, 1572,
		0, 1571, 1570, 0, 0, 1569, 1568, 0, 1567, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1566,
		0, 0, 0, 1565, 0, 1564, 1563, 0, 0, 0,
		0, 1562, 0, 1561, 1560, 0, 0, 1559, 1558, 0,
		1557, 0, 0, 0, 0, 0, 0, 1556, 0, 1555,
		1554, 0, 0, 1553, 1552, 0, 1551, 0, 0, 0,
		0, 1550, 1549, 0, 1548, 0, 0, 0, 6, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1547, 0, 0, 0, 0, 0, 0, 0, 1546,
		0, 0, 0, 1545, 0, 1544, 1543, 0, 0, 0,
		0, 0, 0, 0, 0, 1542, 0, 0, 0, 1541,
		0, 1540, 1539, 0, 0, 0, 0, 1538, 0, 1537,
		1536, 0, 0, 1535, 1534, 0, 1533, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1532, 0, 0,
		0, 1531, 0, 1530, 1529, 0, 0, 0, 0, 1528,
		0, 1527, 1526, 0, 0, 1525, 1524, 0, 1523, 0,
		0, 0, 0, 0, 0, 1522, 0, 1521, 1520, 0,
		0, 1519, 1518, 0, 1517, 0, 0, 0, 0, 1516,
		1515, 0, 1514, 0, 0, 0, 1513, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1512, 0, 0, 0, 1511, 0, 1510, 1509, 0,
		0, 0, 0, 1508, 0, 1507, 1506, 0, 0, 1505,
		1504, 0, 1503, 0, 0, 0, 0, 0, 0, 1502,
		0, 1501, 1500, 0, 0, 1499, 1498, 0, 1497, 0,
		0, 0, 0, 1496, 1495, 0, 1494, 0, 0, 0,
		1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1492, 0, 1491, 1490, 0, 0, 1489, 1488, 0,
		1487, 0, 0, 0, 0, 1486, 1485, 0, 1484, 0,
		0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
		0, 1482, 1481, 0, 1480, 0, 0, 0, 1479, 0,
		0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
		0, 0, 0, 0, 0, 1477, 0, 0, 0, 1476,
		0, 1475, 1474, 0, 0, 0, 0, 0, 0, 0,
		0, 1473, 0, 0, 0, 1472, 0, 1471, 1470, 0,
		0, 0, 0, 1469, 0, 1468, 1467, 0, 0, 1466,
		1465, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1463, 0, 0, 0, 1462, 0, 1461,
		1460, 0, 0, 0, 0, 1459, 0, 1458, 1457, 0,
		0, 1456, 1455, 0, 1454, 0, 0, 0, 0, 0,
		0, 1453, 0, 1452, 1451, 0, 0, 1450, 1449, 0,
		1448, 0, 0, 0, 0, 1447, 1446, 0, 1445, 0,
		0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
		0, 1442, 0, 1441, 1440, 0, 0, 0, 0, 1439,
		0, 1438, 1437, 0, 0, 1436, 1435, 0, 1434, 0,
		0, 0, 0, 0, 0, 1433, 0, 1432, 1431, 0,
		0, 1430, 1429, 0, 1428, 0, 0, 0, 0, 1427,
		1426, 0, 1425, 0, 0, 0, 1424, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1423, 0, 1422,
		1421, 0, 0, 1420, 1419, 0, 1418, 0, 0, 0,
		0, 1417, 1416, 0, 1415, 0, 0, 0, 1414, 0,
		0, 0, 0, 0, 0, 0, 0, 1413, 1412, 0,
		1411, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
		0, 0, 1409, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 1408, 0, 0, 0, 1407,
		0, 1406, 1405, 0, 0, 0, 0, 1404, 0, 1403,
		1402, 0, 0, 1401, 1400, 0, 1399, 0, 0, 0,
		0, 0, 0, 1398, 0, 1397, 1396, 0, 0, 1395,
		1394, 0, 1393, 0, 0, 0, 0, 1392, 1391, 0,
		1390, 0, 0, 0, 1389, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 1388, 0, 1387, 1386, 0,
		0, 1385, 1384, 0, 1383, 0, 0, 0, 0, 1382,
		1381, 0, 1380, 0, 0, 0, 1379, 0, 0, 0,
		0, 0, 0, 0, 0, 1378, 1377, 0, 1376, 0,
		0, 0, 1375, 0, 0, 0, 0, 0, 0, 0,
		1374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1373,
		0, 1372, 1371, 0, 0, 1370, 1369, 0, 1368, 0,
		0, 0, 0, 1367, 1366, 0, 1365, 0, 0, 0,
		1364, 0, 0, 0, 0, 0, 0, 0, 0, 1363,
		1362, 0, 1361, 0, 0, 0, 1360, 0, 0, 0,
		0, 0, 0, 0, 1359, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1358, 1357, 0, 1356, 0, 0, 0, 1355, 0,
		0, 0, 0, 0, 0, 0, 1354, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
		0, 0, 0, 0, 0, 0, 0, 1352, 0, 0,
		0, 1351, 0, 1350, 1349, 0, 0, 0, 0, 0,
		0, 0, 0, 1348, 0, 0, 0, 1347, 0, 1346,
		1345, 0, 0, 0, 0, 1344, 0, 1343, 1342, 0,
		0, 1341, 1340, 0, 1339, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 1338, 0, 0, 0, 1337,
		0, 1336, 1335, 0, 0, 0, 0, 1334, 0, 1333,
		1332, 0, 0, 1331, 1330, 0, 1329, 0, 0, 0,
		0, 0, 0, 1328, 0, 1327, 1326, 0, 0, 1325,
		1324, 0, 1323, 0, 0, 0, 0, 1322, 1321, 0,
		1320, 0, 0, 0, 1319, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
		0, 0, 0, 1317, 0, 1316, 1315, 0, 0, 0,
		0, 1314, 0, 1313, 1312, 0, 0, 1311, 1310, 0,
		1309, 0, 0, 0, 0, 0, 0, 1308, 0, 1307,
		1306, 0, 0, 1305, 1304, 0, 1303, 0, 0, 0,
		0, 1302, 1301, 0, 1300, 0, 0, 0, 1299, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1298,
		0, 1297, 1296, 0, 0, 1295, 1294, 0, 1293, 0,
		0, 0, 0, 1292, 1291, 0, 1290, 0, 0, 0,
		1289, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
		1287, 0, 1286, 0, 0, 0, 1285, 0, 0, 0,
		0, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1283, 0, 0,
		0, 1282, 0, 1281, 1280, 0, 0, 0, 0, 1279,
		0, 1278, 1277, 0, 0, 1276, 1275, 0, 1274, 0,
		0, 0, 0, 0, 0, 1273, 0, 1272, 1271, 0,
		0, 1270, 1269, 0, 1268, 0, 0, 0, 0, 1267,
		1266, 0, 1265, 0, 0, 0, 1264, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1263, 0, 1262,
		1261, 0, 0, 1260, 1259, 0, 1258, 0, 0, 0,
		0, 1257, 1256, 0, 1255, 0, 0, 0, 1254, 0,
		0, 0, 0, 0, 0, 0, 0, 1253, 1252, 0,
		1251, 0, 0, 0, 1250, 0, 0, 0, 0, 0,
		0, 0, 1249, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1248, 0, 1247, 1246, 0, 0, 1245, 1244, 0,
		1243, 0, 0, 0, 0, 1242, 1241, 0, 1240, 0,
		0, 0, 1239, 0, 0, 0, 0, 0, 0, 0,
		0, 1238, 1237, 0, 1236, 0, 0, 0, 1235, 0,
		0, 0, 0, 0, 0, 0, 1234, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1233, 1232, 0, 1231, 0, 0, 0,
		1230, 0, 0, 0, 0, 0, 0, 0, 1229, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1228, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1227, 0, 0, 0, 1226, 0, 1225,
		1224, 0, 0, 0, 0, 1223, 0, 1222, 1221, 0,
		0, 1220, 1219, 0, 1218, 0, 0, 0, 0, 0,
		0, 1217, 0, 1216, 1215, 0, 0, 1214, 1213, 0,
		1212, 0, 0, 0, 0, 1211, 1210, 0, 1209, 0,
		0, 0, 1208, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1207, 0, 1206, 1205, 0, 0, 1204,
		1203, 0, 1202, 0, 0, 0, 0, 1201, 1200, 0,
		1199, 0, 0, 0, 1198, 0, 0, 0, 0, 0,
		0, 0, 0, 1197, 1196, 0, 1195, 0, 0, 0,
		1194, 0, 0, 0, 0, 0, 0, 0, 1193, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1192, 0, 1191,
		1190, 0, 0, 1189, 1188, 0, 1187, 0, 0, 0,
		0, 1186, 1185, 0, 1184, 0, 0, 0, 1183, 0,
		0, 0, 0, 0, 0, 0, 0, 1182, 1181, 0,
		1180, 0, 0, 0, 1179, 0, 0, 0, 0, 0,
		0, 0, 1178, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1177,
		1176, 0, 1175, 0, 0, 0, 1174, 0, 0, 0,
		0, 0, 0, 0, 1173, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 1171, 0, 1170, 1169, 0,
		0, 1168, 1167, 0, 1166, 0, 0, 0, 0, 1165,
		1164, 0, 1163, 0, 0, 0, 1162, 0, 0, 0,
		0, 0, 0, 0, 0, 1161, 1160, 0, 1159, 0,
		0, 0, 1158, 0, 0, 0, 0, 0, 0, 0,
		1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1156, 1155, 0,
		1154, 0, 0, 0, 1153, 0, 0, 0, 0, 0,
		0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1151, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1150, 1149, 0, 1148, 0, 0, 0, 1147, 0,
		0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 1145, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1144, 0, 0, 0, 0, 0, 0,
		0, 1143, 0, 0, 0, 1142, 0, 1141, 1140, 0,
		0, 0, 0, 0, 0, 0, 0, 1139, 0, 0,
		0, 1138, 0, 1137, 1136, 0, 0, 0, 0, 1135,
		0, 1134, 1133, 0, 0, 1132, 1131, 0, 1130, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1129,
		0, 0, 0, 1128, 0, 1127, 1126, 0, 0, 0,
		0, 1125, 0, 1124, 1123, 0, 0, 1122, 1121, 0,
		1120, 0, 0, 0, 0, 0, 0, 1119, 0, 1118,
		1117, 0, 0, 1116, 1115, 0, 1114, 0, 0, 0,
		0, 1113, 1112, 0, 1111, 0, 0, 0, 1110, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1109, 0, 0, 0, 1108, 0, 1107,
		1106, 0, 0, 0, 0, 1105, 0, 1104, 1103, 0,
		0, 1102, 1101, 0, 1100, 0, 0, 0, 0, 0,
		0, 1099, 0, 1098, 1097, 0, 0, 1096, 1095, 0,
		1094, 0, 0, 0, 0, 1093, 1092, 0, 1091, 0,
		0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1089, 0, 1088, 1087, 0, 0, 1086,
		1085, 0, 1084, 0, 0, 0, 0, 1083, 1082, 0,
		1081, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
		0, 0, 0, 1079, 1078, 0, 1077, 0, 0, 0,
		1076, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1074, 0, 0, 0, 1073, 0, 1072, 1071, 0,
		0, 0, 0, 1070, 0, 1069, 1068, 0, 0, 1067,
		1066, 0, 1065, 0, 0, 0, 0, 0, 0, 1064,
		0, 1063, 1062, 0, 0, 1061, 1060, 0, 1059, 0,
		0, 0, 0, 1058, 1057, 0, 1056, 0, 0, 0,
		1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1054, 0, 1053, 1052, 0, 0, 1051, 1050, 0,
		1049, 0, 0, 0, 0, 1048, 1047, 0, 1046, 0,
		0, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
		0, 1044, 1043, 0, 1042, 0, 0, 0, 1041, 0,
		0, 0, 0, 0, 0, 0, 1040, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 1039, 0, 1038, 1037, 0,
		0, 1036, 1035, 0, 1034, 0, 0, 0, 0, 1033,
		1032, 0, 1031, 0, 0, 0, 1030, 0, 0, 0,
		0, 0, 0, 0, 0, 1029, 1028, 0, 1027, 0,
		0, 0, 1026, 0, 0, 0, 0, 0, 0, 0,
		1025, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1024, 1023, 0,
		1022, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
		0, 0, 1020, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 1018, 0, 0,
		0, 1017, 0, 1016, 1015, 0, 0, 0, 0, 1014,
		0, 1013, 1012, 0, 0, 1011, 1010, 0, 1009, 0,
		0, 0, 0, 0, 0, 1008, 0, 1007, 1006, 0,
		0, 1005, 1004, 0, 1003, 0, 0, 0, 0, 1002,
		1001, 0, 1000, 0, 0, 0, 999, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 998, 0, 997,
		996, 0, 0, 995, 994, 0, 993, 0, 0, 0,
		0, 992, 991, 0, 990, 0, 0, 0, 989, 0,
		0, 0, 0, 0, 0, 0, 0, 988, 987, 0,
		986, 0, 0, 0, 985, 0, 0, 0, 0, 0,
		0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 983, 0, 982, 981, 0, 0, 980, 979, 0,
		978, 0, 0, 0, 0, 977, 976, 0, 975, 0,
		0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
		0, 973, 972, 0, 971, 0, 0, 0, 970, 0,
		0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 968, 967, 0, 966, 0, 0, 0,
		965, 0, 0, 0, 0, 0, 0, 0, 964, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
		0, 961, 960, 0, 0, 959, 958, 0, 957, 0,
		0, 0, 0, 956, 955, 0, 954, 0, 0, 0,
		953, 0, 0, 0, 0, 0, 0, 0, 0, 952,
		951, 0, 950, 0, 0, 0, 949, 0, 0, 0,
		0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 947, 946, 0, 945, 0, 0, 0, 944, 0,
		0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 941, 940, 0, 939, 0,
		0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
		937, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 934,
		0, 0, 0, 933, 0, 932, 931, 0, 0, 0,
		0, 930, 0, 929, 928, 0, 0, 927, 926, 0,
		925, 0, 0, 0, 0, 0, 0, 924, 0, 923,
		922, 0, 0, 921, 920, 0, 919, 0, 0, 0,
		0, 918, 917, 0, 916, 0, 0, 0, 915, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 914,
		0, 913, 912, 0, 0, 911, 910, 0, 909, 0,
		0, 0, 0, 908, 907, 0, 906, 0, 0, 0,
		905, 0, 0, 0, 0, 0, 0, 0, 0, 904,
		903, 0, 902, 0, 0, 0, 901, 0, 0, 0,
		0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 899, 0, 898, 897, 0, 0, 896,
		895, 0, 894, 0, 0, 0, 0, 893, 892, 0,
		891, 0, 0, 0, 890, 0, 0, 0, 0, 0,
		0, 0, 0, 889, 888, 0, 887, 0, 0, 0,
		886, 0, 0, 0, 0, 0, 0, 0, 885, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 884, 883, 0, 882, 0,
		0, 0, 881, 0, 0, 0, 0, 0, 0, 0,
		880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 879, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 878, 0, 877, 876, 0, 0, 875, 874, 0,
		873, 0, 0, 0, 0, 872, 871, 0, 870, 0,
		0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
		0, 868, 867, 0, 866, 0, 0, 0, 865, 0,
		0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 863, 862, 0, 861, 0, 0, 0,
		860, 0, 0, 0, 0, 0, 0, 0, 859, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 857, 856, 0,
		855, 0, 0, 0, 854, 0, 0, 0, 0, 0,
		0, 0, 853, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 852, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 850, 0, 849,
		848, 0, 0, 847, 846, 0, 845, 0, 0, 0,
		0, 844, 843, 0, 842, 0, 0, 0, 841, 0,
		0, 0, 0, 0, 0, 0, 0, 840, 839, 0,
		838, 0, 0, 0, 837, 0, 0, 0, 0, 0,
		0, 0, 836, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
		834, 0, 833, 0, 0, 0, 832, 0, 0, 0,
		0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 829, 828, 0, 827, 0, 0, 0,
		826, 0, 0, 0, 0, 0, 0, 0, 825, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 824, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 823, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 822, 821, 0, 820, 0, 0, 0, 819, 0,
		0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 10, 0, 0, 0, 0, 0, 0, 0, 815,
		0, 0, 0, 814, 0, 813, 812, 0, 0, 0,
		0, 0, 0, 0, 0, 811, 0, 0, 0, 810,
		0, 809, 808, 0, 0, 0, 0, 807, 0, 806,
		805, 0, 0, 804, 803, 0, 802, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 801, 0, 0,
		0, 800, 0, 799, 798, 0, 0, 0, 0, 797,
		0, 796, 795, 0, 0, 794, 793, 0, 792, 0,
		0, 0, 0, 0, 0, 791, 0, 790, 789, 0,
		0, 788, 787, 0, 786, 0, 0, 0, 0, 785,
		784, 0, 783, 0, 0, 0, 782, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 781, 0, 0, 0, 780, 0, 779, 778, 0,
		0, 0, 0, 777, 0, 776, 775, 0, 0, 774,
		773, 0, 772, 0, 0, 0, 0, 0, 0, 771,
		0, 770, 769, 0, 0, 768, 767, 0, 766, 0,
		0, 0, 0, 765, 764, 0, 763, 0, 0, 0,
		762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 761, 0, 760, 759, 0, 0, 758, 757, 0,
		756, 0, 0, 0, 0, 755, 754, 0, 753, 0,
		0, 0, 752, 0, 0, 0, 0, 0, 0, 0,
		0, 751, 750, 0, 749, 0, 0, 0, 748, 0,
		0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
		0, 0, 0, 745, 0, 744, 743, 0, 0, 0,
		0, 742, 0, 741, 740, 0, 0, 739, 738, 0,
		737, 0, 0, 0, 0, 0, 0, 736, 0, 735,
		734, 0, 0, 733, 732, 0, 731, 0, 0, 0,
		0, 730, 729, 0, 728, 0, 0, 0, 727, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 726,
		0, 725, 724, 0, 0, 723, 722, 0, 721, 0,
		0, 0, 0, 720, 719, 0, 718, 0, 0, 0,
		717, 0, 0, 0, 0, 0, 0, 0, 0, 716,
		715, 0, 714, 0, 0, 0, 713, 0, 0, 0,
		0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 711, 0, 710, 709, 0, 0, 708,
		707, 0, 706, 0, 0, 0, 0, 705, 704, 0,
		703, 0, 0, 0, 702, 0, 0, 0, 0, 0,
		0, 0, 0, 701, 700, 0, 699, 0, 0, 0,
		698, 0, 0, 0, 0, 0, 0, 0, 697, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 696, 695, 0, 694, 0,
		0, 0, 693, 0, 0, 0, 0, 0, 0, 0,
		692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 691, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 690, 0, 0, 0, 689,
		0, 688, 687, 0, 0, 0, 0, 686, 0, 685,
		684, 0, 0, 683, 682, 0, 681, 0, 0, 0,
		0, 0, 0, 680, 0, 679, 678, 0, 0, 677,
		676, 0, 675, 0, 0, 0, 0, 674, 673, 0,
		672, 0, 0, 0, 671, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 670, 0, 669, 668, 0,
		0, 667, 666, 0, 665, 0, 0, 0, 0, 664,
		663, 0, 662, 0, 0, 0, 661, 0, 0, 0,
		0, 0, 0, 0, 0, 660, 659, 0, 658, 0,
		0, 0, 657, 0, 0, 0, 0, 0, 0, 0,
		656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 655,
		0, 654, 653, 0, 0, 652, 651, 0, 650, 0,
		0, 0, 0, 649, 648, 0, 647, 0, 0, 0,
		646, 0, 0, 0, 0, 0, 0, 0, 0, 645,
		644, 0, 643, 0, 0, 0, 642, 0, 0, 0,
		0, 0, 0, 0, 641, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 640, 639, 0, 638, 0, 0, 0, 637, 0,
		0, 0, 0, 0, 0, 0, 636, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 635, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 634, 0, 633,
		632, 0, 0, 631, 630, 0, 629, 0, 0, 0,
		0, 628, 627, 0, 626, 0, 0, 0, 625, 0,
		0, 0, 0, 0, 0, 0, 0, 624, 623, 0,
		622, 0, 0, 0, 621, 0, 0, 0, 0, 0,
		0, 0, 620, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 619,
		618, 0, 617, 0, 0, 0, 616, 0, 0, 0,
		0, 0, 0, 0, 615, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 613, 612, 0, 611, 0, 0, 0,
		610, 0, 0, 0, 0, 0, 0, 0, 609, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 608, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 607, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
		0, 605, 0, 604, 603, 0, 0, 0, 0, 602,
		0, 601, 600, 0, 0, 599, 598, 0, 597, 0,
		0, 0, 0, 0, 0, 596, 0, 595, 594, 0,
		0, 593, 592, 0, 591, 0, 0, 0, 0, 590,
		589, 0, 588, 0, 0, 0, 587, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 586, 0, 585,
		584, 0, 0, 583, 582, 0, 581, 0, 0, 0,
		0, 580, 579, 0, 578, 0, 0, 0, 577, 0,
		0, 0, 0, 0, 0, 0, 0, 576, 575, 0,
		574, 0, 0, 0, 573, 0, 0, 0, 0, 0,
		0, 0, 572, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 571, 0, 570, 569, 0, 0, 568, 567, 0,
		566, 0, 0, 0, 0, 565, 564, 0, 563, 0,
		0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
		0, 561, 560, 0, 559, 0, 0, 0, 558, 0,
		0, 0, 0, 0, 0, 0, 557, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 556, 555, 0, 554, 0, 0, 0,
		553, 0, 0, 0, 0, 0, 0, 0, 552, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 551, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 550,
		0, 549, 548, 0, 0, 547, 546, 0, 545, 0,
		0, 0, 0, 544, 543, 0, 542, 0, 0, 0,
		541, 0, 0, 0, 0, 0, 0, 0, 0, 540,
		539, 0, 538, 0, 0, 0, 537, 0, 0, 0,
		0, 0, 0, 0, 536, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 535, 534, 0, 533, 0, 0, 0, 532, 0,
		0, 0, 0, 0, 0, 0, 531, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 530, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 529, 528, 0, 527, 0,
		0, 0, 526, 0, 0, 0, 0, 0, 0, 0,
		525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 524, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 523, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 522, 0, 521, 520, 0,
		0, 519, 518, 0, 517, 0, 0, 0, 0, 516,
		515, 0, 514, 0, 0, 0, 513, 0, 0, 0,
		0, 0, 0, 0, 0, 512, 511, 0, 510, 0,
		0, 0, 509, 0, 0, 0, 0, 0, 0, 0,
		508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 507, 506, 0,
		505, 0, 0, 0, 504, 0, 0, 0, 0, 0,
		0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 502, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 501, 500, 0, 499, 0, 0, 0, 498, 0,
		0, 0, 0, 0, 0, 0, 497, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 495, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 494,
		493, 0, 492, 0, 0, 0, 491, 0, 0, 0,
		0, 0, 0, 0, 490, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 488, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 487, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 486, 0, 0, 0, 485, 0, 484, 483, 0,
		0, 0, 0, 482, 0, 481, 480, 0, 0, 479,
		478, 0, 477, 0, 0, 0, 0, 0, 0, 476,
		0, 475, 474, 0, 0, 473, 472, 0, 471, 0,
		0, 0, 0, 470, 469, 0, 468, 0, 0, 0,
		467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 466, 0, 465, 464, 0, 0, 463, 462, 0,
		461, 0, 0, 0, 0, 460, 459, 0, 458, 0,
		0, 0, 457, 0, 0, 0, 0, 0, 0, 0,
		0, 456, 455, 0, 454, 0, 0, 0, 453, 0,
		0, 0, 0, 0, 0, 0, 452, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 451, 0, 450, 449, 0,
		0, 448, 447, 0, 446, 0, 0, 0, 0, 445,
		444, 0, 443, 0, 0, 0, 442, 0, 0, 0,
		0, 0, 0, 0, 0, 441, 440, 0, 439, 0,
		0, 0, 438, 0, 0, 0, 0, 0, 0, 0,
		437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 436, 435, 0,
		434, 0, 0, 0, 433, 0, 0, 0, 0, 0,
		0, 0, 432, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 431, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 430, 0, 429, 428, 0, 0, 427,
		426, 0, 425, 0, 0, 0, 0, 424, 423, 0,
		422, 0, 0, 0, 421, 0, 0, 0, 0, 0,
		0, 0, 0, 420, 419, 0, 418, 0, 0, 0,
		417, 0, 0, 0, 0, 0, 0, 0, 416, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 415, 414, 0, 413, 0,
		0, 0, 412, 0, 0, 0, 0, 0, 0, 0,
		411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 410, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 409,
		408, 0, 407, 0, 0, 0, 406, 0, 0, 0,
		0, 0, 0, 0, 405, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
		0, 401, 400, 0, 0, 399, 398, 0, 397, 0,
		0, 0, 0, 396, 395, 0, 394, 0, 0, 0,
		393, 0, 0, 0, 0, 0, 0, 0, 0, 392,
		391, 0, 390, 0, 0, 0, 389, 0, 0, 0,
		0, 0, 0, 0, 388, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 387, 386, 0, 385, 0, 0, 0, 384, 0,
		0, 0, 0, 0, 0, 0, 383, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 382, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 381, 380, 0, 379, 0,
		0, 0, 378, 0, 0, 0, 0, 0, 0, 0,
		377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 376, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 375, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 374, 373, 0, 372, 0, 0, 0,
		371, 0, 0, 0, 0, 0, 0, 0, 370, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 369, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 368, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 366, 0, 365, 364, 0, 0, 363, 362, 0,
		361, 0, 0, 0, 0, 360, 359, 0, 358, 0,
		0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
		0, 356, 355, 0, 354, 0, 0, 0, 353, 0,
		0, 0, 0, 0, 0, 0, 352, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 351, 350, 0, 349, 0, 0, 0,
		348, 0, 0, 0, 0, 0, 0, 0, 347, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 346, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 345, 344, 0,
		343, 0, 0, 0, 342, 0, 0, 0, 0, 0,
		0, 0, 341, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 340, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 338, 337, 0, 336, 0,
		0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
		334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 333, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 332, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 331, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 330, 329, 0, 328, 0, 0, 0, 327, 0,
		0, 0, 0, 0, 0, 0, 326, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 325, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 324, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 1
	};

	public static readonly ushort[] unique5 = new ushort[7937]
	{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1608, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7462, 0, 0,
		0, 0, 0, 0, 0, 7461, 0, 0, 0, 7460,
		0, 7459, 1607, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7458,
		0, 0, 0, 0, 0, 0, 0, 7457, 0, 0,
		0, 7456, 0, 7455, 7454, 0, 0, 0, 0, 0,
		0, 0, 0, 7453, 0, 0, 0, 7452, 0, 7451,
		7450, 0, 0, 0, 0, 7449, 0, 7448, 7447, 0,
		0, 7446, 7445, 0, 1606, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 7444, 0, 0, 0, 0, 0, 0,
		0, 7443, 0, 0, 0, 7442, 0, 7441, 7440, 0,
		0, 0, 0, 0, 0, 0, 0, 7439, 0, 0,
		0, 7438, 0, 7437, 7436, 0, 0, 0, 0, 7435,
		0, 7434, 7433, 0, 0, 7432, 7431, 0, 7430, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7429,
		0, 0, 0, 7428, 0, 7427, 7426, 0, 0, 0,
		0, 7425, 0, 7424, 7423, 0, 0, 7422, 7421, 0,
		7420, 0, 0, 0, 0, 0, 0, 7419, 0, 7418,
		7417, 0, 0, 7416, 7415, 0, 7414, 0, 0, 0,
		0, 7413, 7412, 0, 7411, 0, 0, 0, 1605, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 7410, 0, 0, 0, 0, 0, 0, 0, 7409,
		0, 0, 0, 7408, 0, 7407, 7406, 0, 0, 0,
		0, 0, 0, 0, 0, 7405, 0, 0, 0, 7404,
		0, 7403, 7402, 0, 0, 0, 0, 7401, 0, 7400,
		7399, 0, 0, 7398, 7397, 0, 7396, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7395, 0, 0,
		0, 7394, 0, 7393, 7392, 0, 0, 0, 0, 7391,
		0, 7390, 7389, 0, 0, 7388, 7387, 0, 7386, 0,
		0, 0, 0, 0, 0, 7385, 0, 7384, 7383, 0,
		0, 7382, 7381, 0, 7380, 0, 0, 0, 0, 7379,
		7378, 0, 7377, 0, 0, 0, 7376, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 7375, 0, 0, 0, 7374, 0, 7373, 7372, 0,
		0, 0, 0, 7371, 0, 7370, 7369, 0, 0, 7368,
		7367, 0, 7366, 0, 0, 0, 0, 0, 0, 7365,
		0, 7364, 7363, 0, 0, 7362, 7361, 0, 7360, 0,
		0, 0, 0, 7359, 7358, 0, 7357, 0, 0, 0,
		7356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 7355, 0, 7354, 7353, 0, 0, 7352, 7351, 0,
		7350, 0, 0, 0, 0, 7349, 7348, 0, 7347, 0,
		0, 0, 7346, 0, 0, 0, 0, 0, 0, 0,
		0, 7345, 7344, 0, 7343, 0, 0, 0, 7342, 0,
		0, 0, 0, 0, 0, 0, 1604, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7341, 0, 0,
		0, 0, 0, 0, 0, 7340, 0, 0, 0, 7339,
		0, 7338, 7337, 0, 0, 0, 0, 0, 0, 0,
		0, 7336, 0, 0, 0, 7335, 0, 7334, 7333, 0,
		0, 0, 0, 7332, 0, 7331, 7330, 0, 0, 7329,
		7328, 0, 7327, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 7326, 0, 0, 0, 7325, 0, 7324,
		7323, 0, 0, 0, 0, 7322, 0, 7321, 7320, 0,
		0, 7319, 7318, 0, 7317, 0, 0, 0, 0, 0,
		0, 7316, 0, 7315, 7314, 0, 0, 7313, 7312, 0,
		7311, 0, 0, 0, 0, 7310, 7309, 0, 7308, 0,
		0, 0, 7307, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7306, 0, 0,
		0, 7305, 0, 7304, 7303, 0, 0, 0, 0, 7302,
		0, 7301, 7300, 0, 0, 7299, 7298, 0, 7297, 0,
		0, 0, 0, 0, 0, 7296, 0, 7295, 7294, 0,
		0, 7293, 7292, 0, 7291, 0, 0, 0, 0, 7290,
		7289, 0, 7288, 0, 0, 0, 7287, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7286, 0, 7285,
		7284, 0, 0, 7283, 7282, 0, 7281, 0, 0, 0,
		0, 7280, 7279, 0, 7278, 0, 0, 0, 7277, 0,
		0, 0, 0, 0, 0, 0, 0, 7276, 7275, 0,
		7274, 0, 0, 0, 7273, 0, 0, 0, 0, 0,
		0, 0, 7272, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 7271, 0, 0, 0, 7270,
		0, 7269, 7268, 0, 0, 0, 0, 7267, 0, 7266,
		7265, 0, 0, 7264, 7263, 0, 7262, 0, 0, 0,
		0, 0, 0, 7261, 0, 7260, 7259, 0, 0, 7258,
		7257, 0, 7256, 0, 0, 0, 0, 7255, 7254, 0,
		7253, 0, 0, 0, 7252, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 7251, 0, 7250, 7249, 0,
		0, 7248, 7247, 0, 7246, 0, 0, 0, 0, 7245,
		7244, 0, 7243, 0, 0, 0, 7242, 0, 0, 0,
		0, 0, 0, 0, 0, 7241, 7240, 0, 7239, 0,
		0, 0, 7238, 0, 0, 0, 0, 0, 0, 0,
		7237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7236,
		0, 7235, 7234, 0, 0, 7233, 7232, 0, 7231, 0,
		0, 0, 0, 7230, 7229, 0, 7228, 0, 0, 0,
		7227, 0, 0, 0, 0, 0, 0, 0, 0, 7226,
		7225, 0, 7224, 0, 0, 0, 7223, 0, 0, 0,
		0, 0, 0, 0, 7222, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 7221, 7220, 0, 7219, 0, 0, 0, 7218, 0,
		0, 0, 0, 0, 0, 0, 7217, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 1603, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7216,
		0, 0, 0, 0, 0, 0, 0, 7215, 0, 0,
		0, 7214, 0, 7213, 7212, 0, 0, 0, 0, 0,
		0, 0, 0, 7211, 0, 0, 0, 7210, 0, 7209,
		7208, 0, 0, 0, 0, 7207, 0, 7206, 7205, 0,
		0, 7204, 7203, 0, 7202, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 7201, 0, 0, 0, 7200,
		0, 7199, 7198, 0, 0, 0, 0, 7197, 0, 7196,
		7195, 0, 0, 7194, 7193, 0, 7192, 0, 0, 0,
		0, 0, 0, 7191, 0, 7190, 7189, 0, 0, 7188,
		7187, 0, 7186, 0, 0, 0, 0, 7185, 7184, 0,
		7183, 0, 0, 0, 7182, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7181,
		0, 0, 0, 7180, 0, 7179, 7178, 0, 0, 0,
		0, 7177, 0, 7176, 7175, 0, 0, 7174, 7173, 0,
		7172, 0, 0, 0, 0, 0, 0, 7171, 0, 7170,
		7169, 0, 0, 7168, 7167, 0, 7166, 0, 0, 0,
		0, 7165, 7164, 0, 7163, 0, 0, 0, 7162, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7161,
		0, 7160, 7159, 0, 0, 7158, 7157, 0, 7156, 0,
		0, 0, 0, 7155, 7154, 0, 7153, 0, 0, 0,
		7152, 0, 0, 0, 0, 0, 0, 0, 0, 7151,
		7150, 0, 7149, 0, 0, 0, 7148, 0, 0, 0,
		0, 0, 0, 0, 7147, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7146, 0, 0,
		0, 7145, 0, 7144, 7143, 0, 0, 0, 0, 7142,
		0, 7141, 7140, 0, 0, 7139, 7138, 0, 7137, 0,
		0, 0, 0, 0, 0, 7136, 0, 7135, 7134, 0,
		0, 7133, 7132, 0, 7131, 0, 0, 0, 0, 7130,
		7129, 0, 7128, 0, 0, 0, 7127, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7126, 0, 7125,
		7124, 0, 0, 7123, 7122, 0, 7121, 0, 0, 0,
		0, 7120, 7119, 0, 7118, 0, 0, 0, 7117, 0,
		0, 0, 0, 0, 0, 0, 0, 7116, 7115, 0,
		7114, 0, 0, 0, 7113, 0, 0, 0, 0, 0,
		0, 0, 7112, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 7111, 0, 7110, 7109, 0, 0, 7108, 7107, 0,
		7106, 0, 0, 0, 0, 7105, 7104, 0, 7103, 0,
		0, 0, 7102, 0, 0, 0, 0, 0, 0, 0,
		0, 7101, 7100, 0, 7099, 0, 0, 0, 7098, 0,
		0, 0, 0, 0, 0, 0, 7097, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 7096, 7095, 0, 7094, 0, 0, 0,
		7093, 0, 0, 0, 0, 0, 0, 0, 7092, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 7091, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 7090, 0, 0, 0, 7089, 0, 7088,
		7087, 0, 0, 0, 0, 7086, 0, 7085, 7084, 0,
		0, 7083, 7082, 0, 7081, 0, 0, 0, 0, 0,
		0, 7080, 0, 7079, 7078, 0, 0, 7077, 7076, 0,
		7075, 0, 0, 0, 0, 7074, 7073, 0, 7072, 0,
		0, 0, 7071, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 7070, 0, 7069, 7068, 0, 0, 7067,
		7066, 0, 7065, 0, 0, 0, 0, 7064, 7063, 0,
		7062, 0, 0, 0, 7061, 0, 0, 0, 0, 0,
		0, 0, 0, 7060, 7059, 0, 7058, 0, 0, 0,
		7057, 0, 0, 0, 0, 0, 0, 0, 7056, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7055, 0, 7054,
		7053, 0, 0, 7052, 7051, 0, 7050, 0, 0, 0,
		0, 7049, 7048, 0, 7047, 0, 0, 0, 7046, 0,
		0, 0, 0, 0, 0, 0, 0, 7045, 7044, 0,
		7043, 0, 0, 0, 7042, 0, 0, 0, 0, 0,
		0, 0, 7041, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 7040,
		7039, 0, 7038, 0, 0, 0, 7037, 0, 0, 0,
		0, 0, 0, 0, 7036, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		7035, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 7034, 0, 7033, 7032, 0,
		0, 7031, 7030, 0, 7029, 0, 0, 0, 0, 7028,
		7027, 0, 7026, 0, 0, 0, 7025, 0, 0, 0,
		0, 0, 0, 0, 0, 7024, 7023, 0, 7022, 0,
		0, 0, 7021, 0, 0, 0, 0, 0, 0, 0,
		7020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 7019, 7018, 0,
		7017, 0, 0, 0, 7016, 0, 0, 0, 0, 0,
		0, 0, 7015, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 7014, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 7013, 7012, 0, 7011, 0, 0, 0, 7010, 0,
		0, 0, 0, 0, 0, 0, 7009, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 7008, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1602, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 7007, 0, 0, 0, 0, 0, 0,
		0, 7006, 0, 0, 0, 7005, 0, 7004, 7003, 0,
		0, 0, 0, 0, 0, 0, 0, 7002, 0, 0,
		0, 7001, 0, 7000, 6999, 0, 0, 0, 0, 6998,
		0, 6997, 6996, 0, 0, 6995, 6994, 0, 6993, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6992,
		0, 0, 0, 6991, 0, 6990, 6989, 0, 0, 0,
		0, 6988, 0, 6987, 6986, 0, 0, 6985, 6984, 0,
		6983, 0, 0, 0, 0, 0, 0, 6982, 0, 6981,
		6980, 0, 0, 6979, 6978, 0, 6977, 0, 0, 0,
		0, 6976, 6975, 0, 6974, 0, 0, 0, 6973, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6972, 0, 0, 0, 6971, 0, 6970,
		6969, 0, 0, 0, 0, 6968, 0, 6967, 6966, 0,
		0, 6965, 6964, 0, 6963, 0, 0, 0, 0, 0,
		0, 6962, 0, 6961, 6960, 0, 0, 6959, 6958, 0,
		6957, 0, 0, 0, 0, 6956, 6955, 0, 6954, 0,
		0, 0, 6953, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6952, 0, 6951, 6950, 0, 0, 6949,
		6948, 0, 6947, 0, 0, 0, 0, 6946, 6945, 0,
		6944, 0, 0, 0, 6943, 0, 0, 0, 0, 0,
		0, 0, 0, 6942, 6941, 0, 6940, 0, 0, 0,
		6939, 0, 0, 0, 0, 0, 0, 0, 6938, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6937, 0, 0, 0, 6936, 0, 6935, 6934, 0,
		0, 0, 0, 6933, 0, 6932, 6931, 0, 0, 6930,
		6929, 0, 6928, 0, 0, 0, 0, 0, 0, 6927,
		0, 6926, 6925, 0, 0, 6924, 6923, 0, 6922, 0,
		0, 0, 0, 6921, 6920, 0, 6919, 0, 0, 0,
		6918, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6917, 0, 6916, 6915, 0, 0, 6914, 6913, 0,
		6912, 0, 0, 0, 0, 6911, 6910, 0, 6909, 0,
		0, 0, 6908, 0, 0, 0, 0, 0, 0, 0,
		0, 6907, 6906, 0, 6905, 0, 0, 0, 6904, 0,
		0, 0, 0, 0, 0, 0, 6903, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6902, 0, 6901, 6900, 0,
		0, 6899, 6898, 0, 6897, 0, 0, 0, 0, 6896,
		6895, 0, 6894, 0, 0, 0, 6893, 0, 0, 0,
		0, 0, 0, 0, 0, 6892, 6891, 0, 6890, 0,
		0, 0, 6889, 0, 0, 0, 0, 0, 0, 0,
		6888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6887, 6886, 0,
		6885, 0, 0, 0, 6884, 0, 0, 0, 0, 0,
		0, 0, 6883, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6882, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6881, 0, 0,
		0, 6880, 0, 6879, 6878, 0, 0, 0, 0, 6877,
		0, 6876, 6875, 0, 0, 6874, 6873, 0, 6872, 0,
		0, 0, 0, 0, 0, 6871, 0, 6870, 6869, 0,
		0, 6868, 6867, 0, 6866, 0, 0, 0, 0, 6865,
		6864, 0, 6863, 0, 0, 0, 6862, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6861, 0, 6860,
		6859, 0, 0, 6858, 6857, 0, 6856, 0, 0, 0,
		0, 6855, 6854, 0, 6853, 0, 0, 0, 6852, 0,
		0, 0, 0, 0, 0, 0, 0, 6851, 6850, 0,
		6849, 0, 0, 0, 6848, 0, 0, 0, 0, 0,
		0, 0, 6847, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6846, 0, 6845, 6844, 0, 0, 6843, 6842, 0,
		6841, 0, 0, 0, 0, 6840, 6839, 0, 6838, 0,
		0, 0, 6837, 0, 0, 0, 0, 0, 0, 0,
		0, 6836, 6835, 0, 6834, 0, 0, 0, 6833, 0,
		0, 0, 0, 0, 0, 0, 6832, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6831, 6830, 0, 6829, 0, 0, 0,
		6828, 0, 0, 0, 0, 0, 0, 0, 6827, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6826, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6825,
		0, 6824, 6823, 0, 0, 6822, 6821, 0, 6820, 0,
		0, 0, 0, 6819, 6818, 0, 6817, 0, 0, 0,
		6816, 0, 0, 0, 0, 0, 0, 0, 0, 6815,
		6814, 0, 6813, 0, 0, 0, 6812, 0, 0, 0,
		0, 0, 0, 0, 6811, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6810, 6809, 0, 6808, 0, 0, 0, 6807, 0,
		0, 0, 0, 0, 0, 0, 6806, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6805, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6804, 6803, 0, 6802, 0,
		0, 0, 6801, 0, 0, 0, 0, 0, 0, 0,
		6800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6799, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6798, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6797,
		0, 0, 0, 6796, 0, 6795, 6794, 0, 0, 0,
		0, 6793, 0, 6792, 6791, 0, 0, 6790, 6789, 0,
		6788, 0, 0, 0, 0, 0, 0, 6787, 0, 6786,
		6785, 0, 0, 6784, 6783, 0, 6782, 0, 0, 0,
		0, 6781, 6780, 0, 6779, 0, 0, 0, 6778, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6777,
		0, 6776, 6775, 0, 0, 6774, 6773, 0, 6772, 0,
		0, 0, 0, 6771, 6770, 0, 6769, 0, 0, 0,
		6768, 0, 0, 0, 0, 0, 0, 0, 0, 6767,
		6766, 0, 6765, 0, 0, 0, 6764, 0, 0, 0,
		0, 0, 0, 0, 6763, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6762, 0, 6761, 6760, 0, 0, 6759,
		6758, 0, 6757, 0, 0, 0, 0, 6756, 6755, 0,
		6754, 0, 0, 0, 6753, 0, 0, 0, 0, 0,
		0, 0, 0, 6752, 6751, 0, 6750, 0, 0, 0,
		6749, 0, 0, 0, 0, 0, 0, 0, 6748, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6747, 6746, 0, 6745, 0,
		0, 0, 6744, 0, 0, 0, 0, 0, 0, 0,
		6743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6742, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6741, 0, 6740, 6739, 0, 0, 6738, 6737, 0,
		6736, 0, 0, 0, 0, 6735, 6734, 0, 6733, 0,
		0, 0, 6732, 0, 0, 0, 0, 0, 0, 0,
		0, 6731, 6730, 0, 6729, 0, 0, 0, 6728, 0,
		0, 0, 0, 0, 0, 0, 6727, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6726, 6725, 0, 6724, 0, 0, 0,
		6723, 0, 0, 0, 0, 0, 0, 0, 6722, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6721, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6720, 6719, 0,
		6718, 0, 0, 0, 6717, 0, 0, 0, 0, 0,
		0, 0, 6716, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6715, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6713, 0, 6712,
		6711, 0, 0, 6710, 6709, 0, 6708, 0, 0, 0,
		0, 6707, 6706, 0, 6705, 0, 0, 0, 6704, 0,
		0, 0, 0, 0, 0, 0, 0, 6703, 6702, 0,
		6701, 0, 0, 0, 6700, 0, 0, 0, 0, 0,
		0, 0, 6699, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6698,
		6697, 0, 6696, 0, 0, 0, 6695, 0, 0, 0,
		0, 0, 0, 0, 6694, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6692, 6691, 0, 6690, 0, 0, 0,
		6689, 0, 0, 0, 0, 0, 0, 0, 6688, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6687, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6686, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6685, 6684, 0, 6683, 0, 0, 0, 6682, 0,
		0, 0, 0, 0, 0, 0, 6681, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6680, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6679, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 1601, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1609, 0, 0, 0, 0, 0, 0, 0, 6678,
		0, 0, 0, 6677, 0, 6676, 6675, 0, 0, 0,
		0, 0, 0, 0, 0, 6674, 0, 0, 0, 6673,
		0, 6672, 6671, 0, 0, 0, 0, 6670, 0, 6669,
		6668, 0, 0, 6667, 6666, 0, 6665, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6664, 0, 0,
		0, 6663, 0, 6662, 6661, 0, 0, 0, 0, 6660,
		0, 6659, 6658, 0, 0, 6657, 6656, 0, 6655, 0,
		0, 0, 0, 0, 0, 6654, 0, 6653, 6652, 0,
		0, 6651, 6650, 0, 6649, 0, 0, 0, 0, 6648,
		6647, 0, 6646, 0, 0, 0, 6645, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6644, 0, 0, 0, 6643, 0, 6642, 6641, 0,
		0, 0, 0, 6640, 0, 6639, 6638, 0, 0, 6637,
		6636, 0, 6635, 0, 0, 0, 0, 0, 0, 6634,
		0, 6633, 6632, 0, 0, 6631, 6630, 0, 6629, 0,
		0, 0, 0, 6628, 6627, 0, 6626, 0, 0, 0,
		6625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6624, 0, 6623, 6622, 0, 0, 6621, 6620, 0,
		6619, 0, 0, 0, 0, 6618, 6617, 0, 6616, 0,
		0, 0, 6615, 0, 0, 0, 0, 0, 0, 0,
		0, 6614, 6613, 0, 6612, 0, 0, 0, 6611, 0,
		0, 0, 0, 0, 0, 0, 6610, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6609,
		0, 0, 0, 6608, 0, 6607, 6606, 0, 0, 0,
		0, 6605, 0, 6604, 6603, 0, 0, 6602, 6601, 0,
		6600, 0, 0, 0, 0, 0, 0, 6599, 0, 6598,
		6597, 0, 0, 6596, 6595, 0, 6594, 0, 0, 0,
		0, 6593, 6592, 0, 6591, 0, 0, 0, 6590, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6589,
		0, 6588, 6587, 0, 0, 6586, 6585, 0, 6584, 0,
		0, 0, 0, 6583, 6582, 0, 6581, 0, 0, 0,
		6580, 0, 0, 0, 0, 0, 0, 0, 0, 6579,
		6578, 0, 6577, 0, 0, 0, 6576, 0, 0, 0,
		0, 0, 0, 0, 6575, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6574, 0, 6573, 6572, 0, 0, 6571,
		6570, 0, 6569, 0, 0, 0, 0, 6568, 6567, 0,
		6566, 0, 0, 0, 6565, 0, 0, 0, 0, 0,
		0, 0, 0, 6564, 6563, 0, 6562, 0, 0, 0,
		6561, 0, 0, 0, 0, 0, 0, 0, 6560, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6559, 6558, 0, 6557, 0,
		0, 0, 6556, 0, 0, 0, 0, 0, 0, 0,
		6555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6554, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6553, 0, 0, 0, 6552,
		0, 6551, 6550, 0, 0, 0, 0, 6549, 0, 6548,
		6547, 0, 0, 6546, 6545, 0, 6544, 0, 0, 0,
		0, 0, 0, 6543, 0, 6542, 6541, 0, 0, 6540,
		6539, 0, 6538, 0, 0, 0, 0, 6537, 6536, 0,
		6535, 0, 0, 0, 6534, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6533, 0, 6532, 6531, 0,
		0, 6530, 6529, 0, 6528, 0, 0, 0, 0, 6527,
		6526, 0, 6525, 0, 0, 0, 6524, 0, 0, 0,
		0, 0, 0, 0, 0, 6523, 6522, 0, 6521, 0,
		0, 0, 6520, 0, 0, 0, 0, 0, 0, 0,
		6519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6518,
		0, 6517, 6516, 0, 0, 6515, 6514, 0, 6513, 0,
		0, 0, 0, 6512, 6511, 0, 6510, 0, 0, 0,
		6509, 0, 0, 0, 0, 0, 0, 0, 0, 6508,
		6507, 0, 6506, 0, 0, 0, 6505, 0, 0, 0,
		0, 0, 0, 0, 6504, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6503, 6502, 0, 6501, 0, 0, 0, 6500, 0,
		0, 0, 0, 0, 0, 0, 6499, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6498, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6497, 0, 6496,
		6495, 0, 0, 6494, 6493, 0, 6492, 0, 0, 0,
		0, 6491, 6490, 0, 6489, 0, 0, 0, 6488, 0,
		0, 0, 0, 0, 0, 0, 0, 6487, 6486, 0,
		6485, 0, 0, 0, 6484, 0, 0, 0, 0, 0,
		0, 0, 6483, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6482,
		6481, 0, 6480, 0, 0, 0, 6479, 0, 0, 0,
		0, 0, 0, 0, 6478, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6476, 6475, 0, 6474, 0, 0, 0,
		6473, 0, 0, 0, 0, 0, 0, 0, 6472, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6471, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6470, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6469, 0, 0,
		0, 6468, 0, 6467, 6466, 0, 0, 0, 0, 6465,
		0, 6464, 6463, 0, 0, 6462, 6461, 0, 6460, 0,
		0, 0, 0, 0, 0, 6459, 0, 6458, 6457, 0,
		0, 6456, 6455, 0, 6454, 0, 0, 0, 0, 6453,
		6452, 0, 6451, 0, 0, 0, 6450, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6449, 0, 6448,
		6447, 0, 0, 6446, 6445, 0, 6444, 0, 0, 0,
		0, 6443, 6442, 0, 6441, 0, 0, 0, 6440, 0,
		0, 0, 0, 0, 0, 0, 0, 6439, 6438, 0,
		6437, 0, 0, 0, 6436, 0, 0, 0, 0, 0,
		0, 0, 6435, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6434, 0, 6433, 6432, 0, 0, 6431, 6430, 0,
		6429, 0, 0, 0, 0, 6428, 6427, 0, 6426, 0,
		0, 0, 6425, 0, 0, 0, 0, 0, 0, 0,
		0, 6424, 6423, 0, 6422, 0, 0, 0, 6421, 0,
		0, 0, 0, 0, 0, 0, 6420, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6419, 6418, 0, 6417, 0, 0, 0,
		6416, 0, 0, 0, 0, 0, 0, 0, 6415, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6414, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6413,
		0, 6412, 6411, 0, 0, 6410, 6409, 0, 6408, 0,
		0, 0, 0, 6407, 6406, 0, 6405, 0, 0, 0,
		6404, 0, 0, 0, 0, 0, 0, 0, 0, 6403,
		6402, 0, 6401, 0, 0, 0, 6400, 0, 0, 0,
		0, 0, 0, 0, 6399, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6398, 6397, 0, 6396, 0, 0, 0, 6395, 0,
		0, 0, 0, 0, 0, 0, 6394, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6393, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6392, 6391, 0, 6390, 0,
		0, 0, 6389, 0, 0, 0, 0, 0, 0, 0,
		6388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6387, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6386, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6385, 0, 6384, 6383, 0,
		0, 6382, 6381, 0, 6380, 0, 0, 0, 0, 6379,
		6378, 0, 6377, 0, 0, 0, 6376, 0, 0, 0,
		0, 0, 0, 0, 0, 6375, 6374, 0, 6373, 0,
		0, 0, 6372, 0, 0, 0, 0, 0, 0, 0,
		6371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6370, 6369, 0,
		6368, 0, 0, 0, 6367, 0, 0, 0, 0, 0,
		0, 0, 6366, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6365, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6364, 6363, 0, 6362, 0, 0, 0, 6361, 0,
		0, 0, 0, 0, 0, 0, 6360, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6359, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6358, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6357,
		6356, 0, 6355, 0, 0, 0, 6354, 0, 0, 0,
		0, 0, 0, 0, 6353, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6351, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6350, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6349, 0, 0, 0, 6348, 0, 6347, 6346, 0,
		0, 0, 0, 6345, 0, 6344, 6343, 0, 0, 6342,
		6341, 0, 6340, 0, 0, 0, 0, 0, 0, 6339,
		0, 6338, 6337, 0, 0, 6336, 6335, 0, 6334, 0,
		0, 0, 0, 6333, 6332, 0, 6331, 0, 0, 0,
		6330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6329, 0, 6328, 6327, 0, 0, 6326, 6325, 0,
		6324, 0, 0, 0, 0, 6323, 6322, 0, 6321, 0,
		0, 0, 6320, 0, 0, 0, 0, 0, 0, 0,
		0, 6319, 6318, 0, 6317, 0, 0, 0, 6316, 0,
		0, 0, 0, 0, 0, 0, 6315, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6314, 0, 6313, 6312, 0,
		0, 6311, 6310, 0, 6309, 0, 0, 0, 0, 6308,
		6307, 0, 6306, 0, 0, 0, 6305, 0, 0, 0,
		0, 0, 0, 0, 0, 6304, 6303, 0, 6302, 0,
		0, 0, 6301, 0, 0, 0, 0, 0, 0, 0,
		6300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6299, 6298, 0,
		6297, 0, 0, 0, 6296, 0, 0, 0, 0, 0,
		0, 0, 6295, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6294, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6293, 0, 6292, 6291, 0, 0, 6290,
		6289, 0, 6288, 0, 0, 0, 0, 6287, 6286, 0,
		6285, 0, 0, 0, 6284, 0, 0, 0, 0, 0,
		0, 0, 0, 6283, 6282, 0, 6281, 0, 0, 0,
		6280, 0, 0, 0, 0, 0, 0, 0, 6279, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6278, 6277, 0, 6276, 0,
		0, 0, 6275, 0, 0, 0, 0, 0, 0, 0,
		6274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6273, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6272,
		6271, 0, 6270, 0, 0, 0, 6269, 0, 0, 0,
		0, 0, 0, 0, 6268, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6266, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 6265,
		0, 6264, 6263, 0, 0, 6262, 6261, 0, 6260, 0,
		0, 0, 0, 6259, 6258, 0, 6257, 0, 0, 0,
		6256, 0, 0, 0, 0, 0, 0, 0, 0, 6255,
		6254, 0, 6253, 0, 0, 0, 6252, 0, 0, 0,
		0, 0, 0, 0, 6251, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6250, 6249, 0, 6248, 0, 0, 0, 6247, 0,
		0, 0, 0, 0, 0, 0, 6246, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6245, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6244, 6243, 0, 6242, 0,
		0, 0, 6241, 0, 0, 0, 0, 0, 0, 0,
		6240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6239, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6238, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6237, 6236, 0, 6235, 0, 0, 0,
		6234, 0, 0, 0, 0, 0, 0, 0, 6233, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6232, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6231, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6229, 0, 6228, 6227, 0, 0, 6226, 6225, 0,
		6224, 0, 0, 0, 0, 6223, 6222, 0, 6221, 0,
		0, 0, 6220, 0, 0, 0, 0, 0, 0, 0,
		0, 6219, 6218, 0, 6217, 0, 0, 0, 6216, 0,
		0, 0, 0, 0, 0, 0, 6215, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6214, 6213, 0, 6212, 0, 0, 0,
		6211, 0, 0, 0, 0, 0, 0, 0, 6210, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6209, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 6208, 6207, 0,
		6206, 0, 0, 0, 6205, 0, 0, 0, 0, 0,
		0, 0, 6204, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6203, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		6202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 6201, 6200, 0, 6199, 0,
		0, 0, 6198, 0, 0, 0, 0, 0, 0, 0,
		6197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 6196, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6195, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6194, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 6193, 6192, 0, 6191, 0, 0, 0, 6190, 0,
		0, 0, 0, 0, 0, 0, 6189, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 6188, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 6187, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 6186, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 1600
	};

	public static readonly int[] products = new int[4888]
	{
		48, 72, 80, 108, 112, 120, 162, 168, 176, 180,
		200, 208, 252, 264, 270, 272, 280, 300, 304, 312,
		368, 378, 392, 396, 405, 408, 420, 440, 450, 456,
		464, 468, 496, 500, 520, 552, 567, 588, 592, 594,
		612, 616, 630, 656, 660, 675, 680, 684, 696, 700,
		702, 728, 744, 750, 760, 780, 828, 882, 888, 891,
		918, 920, 924, 945, 952, 968, 980, 984, 990, 1020,
		1026, 1044, 1050, 1053, 1064, 1092, 1100, 1116, 1125, 1140,
		1144, 1160, 1170, 1240, 1242, 1250, 1288, 1300, 1323, 1332,
		1352, 1372, 1377, 1380, 1386, 1428, 1452, 1470, 1476, 1480,
		1485, 1496, 1530, 1539, 1540, 1566, 1575, 1596, 1624, 1638,
		1640, 1650, 1672, 1674, 1700, 1710, 1716, 1736, 1740, 1750,
		1755, 1768, 1820, 1860, 1863, 1875, 1900, 1932, 1950, 1976,
		1998, 2024, 2028, 2058, 2070, 2072, 2079, 2142, 2156, 2178,
		2205, 2214, 2220, 2244, 2295, 2296, 2300, 2312, 2349, 2380,
		2392, 2394, 2420, 2436, 2450, 2457, 2460, 2475, 2508, 2511,
		2548, 2550, 2552, 2565, 2574, 2584, 2604, 2610, 2625, 2652,
		2660, 2728, 2750, 2790, 2850, 2860, 2888, 2898, 2900, 2925,
		2964, 2997, 3016, 3036, 3042, 3087, 3100, 3105, 3108, 3128,
		3213, 3220, 3224, 3234, 3250, 3256, 3267, 3321, 3330, 3332,
		3366, 3380, 3388, 3430, 3444, 3450, 3465, 3468, 3496, 3588,
		3591, 3608, 3630, 3654, 3675, 3690, 3700, 3724, 3740, 3762,
		3822, 3825, 3828, 3848, 3850, 3861, 3876, 3906, 3915, 3944,
		3978, 4004, 4060, 4092, 4095, 4100, 4125, 4180, 4185, 4216,
		4232, 4250, 4264, 4275, 4332, 4340, 4347, 4350, 4375, 4408,
		4420, 4446, 4508, 4524, 4550, 4554, 4563, 4650, 4662, 4692,
		4712, 4732, 4750, 4802, 4836, 4851, 4875, 4884, 4940, 4995,
		4998, 5032, 5049, 5060, 5070, 5082, 5145, 5166, 5175, 5180,
		5202, 5236, 5244, 5324, 5336, 5355, 5382, 5390, 5412, 5445,
		5481, 5535, 5550, 5576, 5586, 5624, 5643, 5684, 5704, 5733,
		5740, 5742, 5750, 5772, 5775, 5780, 5814, 5852, 5859, 5916,
		5950, 5967, 5980, 5985, 6050, 6076, 6125, 6138, 6150, 6188,
		6232, 6292, 6324, 6348, 6370, 6375, 6380, 6396, 6435, 6460,
		6498, 6525, 6612, 6650, 6669, 6728, 6762, 6786, 6808, 6820,
		6825, 6831, 6875, 6916, 6975, 6993, 7038, 7068, 7084, 7098,
		7125, 7150, 7192, 7203, 7220, 7245, 7250, 7252, 7254, 7326,
		7436, 7497, 7540, 7544, 7546, 7548, 7605, 7623, 7688, 7749,
		7750, 7803, 7820, 7866, 7986, 8004, 8036, 8050, 8060, 8073,
		8085, 8092, 8118, 8125, 8140, 8228, 8325, 8330, 8364, 8372,
		8379, 8415, 8436, 8450, 8470, 8526, 8556, 8575, 8584, 8613,
		8625, 8658, 8670, 8721, 8740, 8788, 8874, 8918, 8925, 8932,
		9009, 9020, 9044, 9075, 9114, 9135, 9176, 9196, 9207, 9225,
		9250, 9310, 9348, 9350, 9405, 9438, 9486, 9512, 9522, 9548,
		9555, 9594, 9620, 9625, 9724, 9747, 9765, 9860, 9918, 9945,
		9975, 10092, 10108, 10143, 10150, 10168, 10179, 10212, 10250, 10450,
		10540, 10556, 10557, 10580, 10602, 10625, 10647, 10660, 10725, 10788,
		10830, 10850, 10868, 10875, 10878, 10881, 10948, 10952, 10989, 11020,
		11050, 11115, 11132, 11154, 11270, 11284, 11316, 11319, 11322, 11375,
		11385, 11396, 11492, 11532, 11625, 11655, 11662, 11780, 11781, 11799,
		11830, 11858, 11875, 11979, 12005, 12006, 12054, 12075, 12136, 12138,
		12177, 12236, 12342, 12350, 12495, 12546, 12580, 12628, 12650, 12654,
		12675, 12705, 12716, 12789, 12834, 12844, 12876, 12915, 12950, 12987,
		13005, 13034, 13156, 13167, 13182, 13310, 13311, 13340, 13377, 13448,
		13455, 13468, 13475, 13671, 13764, 13794, 13804, 13875, 13923, 13940,
		13965, 14014, 14022, 14025, 14036, 14060, 14157, 14210, 14212, 14229,
		14260, 14268, 14283, 14350, 14355, 14375, 14391, 14450, 14535, 14756,
		14812, 14875, 14877, 14924, 14950, 15004, 15028, 15125, 15138, 15162,
		15190, 15225, 15252, 15318, 15345, 15375, 15428, 15548, 15561, 15580,
		15675, 15730, 15778, 15870, 15884, 15903, 15925, 15939, 15950, 16150,
		16182, 16245, 16275, 16317, 16428, 16492, 16562, 16575, 16588, 16625,
		16698, 16731, 16796, 16820, 16905, 16965, 16974, 16983, 17020, 17050,
		17204, 17238, 17298, 17493, 17595, 17612, 17732, 17745, 17787, 17875,
		17908, 17980, 18009, 18050, 18081, 18125, 18130, 18135, 18204, 18207,
		18315, 18326, 18513, 18525, 18590, 18634, 18676, 18772, 18819, 18837,
		18850, 18860, 18865, 18975, 18981, 19074, 19220, 19228, 19251, 19266,
		19314, 19375, 19425, 19516, 19550, 19551, 19604, 19652, 19665, 19684,
		19773, 19844, 19894, 19964, 19965, 20090, 20097, 20125, 20150, 20172,
		20230, 20295, 20332, 20349, 20350, 20482, 20570, 20646, 20691, 20825,
		20956, 21021, 21033, 21054, 21125, 21164, 21175, 21266, 21315, 21402,
		21460, 21483, 21525, 21645, 21658, 21675, 21692, 21812, 21850, 21879,
		21964, 21970, 22022, 22185, 22218, 22295, 22425, 22506, 22542, 22550,
		22707, 22724, 22743, 22785, 22878, 22940, 22977, 22990, 23125, 23188,
		23275, 23276, 23322, 23375, 23452, 23548, 23595, 23667, 23715, 23751,
		23780, 23805, 23826, 23828, 23925, 23985, 24050, 24206, 24225, 24244,
		24273, 24453, 24548, 24633, 24642, 24650, 24794, 24795, 24843, 25012,
		25025, 25047, 25172, 25230, 25270, 25375, 25382, 25389, 25420, 25461,
		25575, 25625, 25636, 25641, 25857, 25916, 25947, 26026, 26125, 26350,
		26404, 26411, 26450, 26505, 26588, 26650, 26862, 26908, 27075, 27125,
		27195, 27306, 27380, 27404, 27436, 27489, 27508, 27531, 27550, 27625,
		27676, 27716, 27830, 27885, 27951, 28126, 28158, 28175, 28275, 28305,
		28322, 28413, 28611, 28652, 28730, 28798, 28830, 28899, 28971, 29155,
		29282, 29302, 29325, 29348, 29406, 29450, 29478, 29575, 29601, 29645,
		29716, 29766, 29841, 30015, 30044, 30135, 30225, 30258, 30303, 30340,
		30345, 30525, 30628, 30668, 30723, 30758, 30855, 30875, 30932, 30969,
		31059, 31213, 31262, 31365, 31372, 31434, 31450, 31581, 31625, 31635,
		31654, 31790, 31899, 31977, 32085, 32103, 32110, 32116, 32186, 32375,
		32487, 32585, 32708, 32725, 32775, 32946, 32955, 33033, 33201, 33212,
		33275, 33292, 33327, 33350, 33418, 33524, 33579, 33620, 33759, 33813,
		33825, 34276, 34317, 34485, 34606, 34684, 34713, 34850, 34914, 34983,
		35035, 35055, 35090, 35150, 35322, 35378, 35525, 35588, 35650, 35739,
		35836, 35875, 35972, 36075, 36125, 36244, 36309, 36556, 36575, 36822,
		36946, 36963, 36975, 37004, 37030, 37076, 37107, 37191, 37323, 37375,
		37444, 37468, 37510, 37518, 37570, 37791, 37845, 37905, 37975, 38073,
		38295, 38318, 38332, 38675, 38709, 38870, 38950, 38962, 39039, 39325,
		39445, 39494, 39525, 39556, 39627, 39675, 39710, 39875, 39882, 39886,
		39897, 39975, 40052, 40204, 40222, 40293, 40362, 40375, 40455, 40508,
		40817, 40898, 40959, 41070, 41154, 41262, 41325, 41405, 41492, 41503,
		41574, 41745, 41876, 42021, 42050, 42189, 42237, 42284, 42435, 42476,
		42483, 42550, 42625, 42772, 42826, 43095, 43197, 43225, 43245, 43263,
		43732, 43911, 43923, 43953, 44109, 44175, 44198, 44217, 44252, 44275,
		44289, 44506, 44649, 44764, 44770, 44919, 44950, 44954, 45125, 45254,
		45325, 45356, 45387, 45619, 45747, 45815, 46137, 46475, 46585, 46748,
		46893, 46930, 47068, 47125, 47138, 47150, 47151, 47175, 47212, 47396,
		47481, 47619, 47685, 47804, 48050, 48165, 48279, 48285, 48314, 48334,
		48484, 48668, 48807, 48875, 49010, 49036, 49049, 49077, 49126, 49130,
		49419, 49610, 49735, 49818, 49972, 50025, 50127, 50225, 50286, 50375,
		50430, 50468, 50575, 50578, 50692, 50875, 51129, 51205, 51425, 51615,
		51646, 51842, 51909, 52173, 52234, 52275, 52316, 52325, 52371, 52390,
		52514, 52598, 52635, 52725, 52767, 52972, 52983, 53067, 53165, 53428,
		53475, 53482, 53505, 53613, 53650, 53754, 53958, 53998, 54145, 54188,
		54418, 54549, 54625, 54910, 54925, 55055, 55223, 55233, 55419, 55506,
		55545, 55594, 55796, 55825, 55924, 56265, 56277, 56355, 56375, 56525,
		56637, 57122, 57188, 57195, 57350, 57475, 57477, 57498, 57681, 57722,
		57868, 57967, 58190, 58305, 58311, 58425, 58443, 58870, 59204, 59241,
		59409, 59450, 59565, 59644, 59675, 59774, 59823, 59829, 60125, 60236,
		60306, 60333, 60515, 60543, 60775, 61132, 61226, 61347, 61364, 61370,
		61605, 61625, 61642, 61659, 61731, 61828, 61893, 61985, 62271, 62361,
		62530, 62678, 62814, 63075, 63175, 63206, 63426, 63455, 63550, 63825,
		63916, 64124, 64141, 64158, 64239, 64467, 64676, 65065, 65219, 65348,
		65366, 65596, 65598, 65702, 65875, 65975, 66033, 66092, 66125, 66297,
		66470, 66625, 66748, 66759, 66861, 67146, 67155, 67270, 67425, 67431,
		67599, 67881, 67925, 68265, 68306, 68324, 68425, 68450, 68590, 68614,
		68770, 68782, 68875, 68894, 68913, 69003, 69290, 69454, 69575, 69597,
		69629, 69874, 69938, 70315, 70395, 70525, 70587, 70602, 70642, 70707,
		70725, 70805, 71094, 71188, 71225, 71668, 71687, 71825, 71995, 72075,
		72261, 72358, 72471, 72501, 72964, 73002, 73036, 73205, 73255, 73346,
		73515, 73593, 73625, 73689, 73695, 73964, 74415, 74431, 74698, 74727,
		74907, 74958, 75429, 75645, 75803, 75850, 75867, 76342, 76475, 76874,
		76895, 77077, 77121, 77198, 77372, 77469, 77763, 77996, 78039, 78155,
		78166, 78292, 78351, 78585, 78625, 78771, 78884, 78897, 78925, 79135,
		79475, 80073, 80142, 80223, 80275, 80465, 80475, 80631, 80852, 80937,
		80997, 81466, 81548, 81549, 81627, 82225, 82251, 82365, 82418, 82522,
		82654, 82708, 83030, 83259, 83375, 83391, 83398, 83421, 83486, 83545,
		83810, 84050, 84175, 84249, 84303, 84721, 85514, 85683, 85782, 85918,
		86025, 86247, 86275, 86428, 86515, 86583, 86756, 86779, 87125, 87172,
		87285, 87362, 87412, 87542, 87725, 87875, 88102, 88305, 88412, 88445,
		88806, 88825, 88837, 89001, 89125, 89175, 89590, 89661, 89930, 90117,
		90354, 90364, 90459, 91091, 91143, 91234, 91839, 92046, 92055, 92225,
		92365, 92414, 92463, 92510, 92575, 93058, 93092, 93275, 93357, 93775,
		93795, 93925, 94017, 94178, 94221, 94622, 94809, 95139, 95325, 95571,
		95795, 95830, 95874, 96026, 96237, 96278, 96425, 96596, 97006, 97175,
		97375, 97405, 97526, 97556, 97682, 98022, 98049, 98394, 98397, 98441,
		98494, 98553, 98716, 98735, 99127, 99275, 99567, 99705, 99715, 100510,
		100555, 100719, 100793, 100905, 101062, 102051, 102245, 102459, 102487, 102557,
		102675, 102885, 102921, 103075, 103155, 103156, 103173, 103246, 103341, 103675,
		103935, 104044, 104181, 104284, 104690, 104811, 104907, 104975, 105125, 105154,
		105183, 105524, 105710, 105754, 105903, 105963, 106227, 106375, 106641, 106782,
		106930, 107065, 107525, 107559, 107653, 107822, 108086, 108537, 109089, 109142,
		109174, 109330, 109388, 109417, 109503, 109554, 110019, 110075, 110331, 110495,
		110789, 110825, 110946, 111265, 111476, 111910, 111925, 112047, 112375, 112385,
		112406, 112437, 112651, 113135, 113553, 113775, 114057, 114308, 114513, 115258,
		115292, 115311, 115797, 116058, 116242, 116402, 116522, 116725, 116932, 116963,
		117249, 117325, 117334, 117438, 117670, 117711, 117845, 117875, 118490, 119119,
		119164, 119187, 119306, 120125, 120175, 120213, 120785, 120802, 120835, 121121,
		121670, 121923, 121975, 122018, 122199, 122525, 122815, 122825, 123025, 123627,
		123783, 123823, 123981, 124025, 124468, 124545, 124558, 124775, 124930, 125097,
		125229, 125426, 125541, 125715, 125829, 125902, 125948, 126075, 126445, 127075,
		127426, 127534, 127738, 127756, 128018, 128271, 128673, 128877, 128986, 129115,
		129311, 129514, 129605, 130134, 130203, 130585, 130975, 131043, 131118, 131285,
		131313, 131495, 132153, 132158, 132275, 132618, 133052, 133133, 133209, 133342,
		133570, 133705, 134113, 134125, 134162, 134199, 134385, 134895, 134995, 135014,
		135531, 135575, 136045, 136214, 136325, 136367, 136851, 137275, 137547, 137566,
		137924, 138069, 138229, 138621, 138765, 138985, 139113, 139564, 139587, 139601,
		139638, 140714, 140777, 141267, 141933, 142025, 142228, 142538, 142766, 142805,
		142970, 143143, 143375, 143745, 143811, 144039, 144279, 144305, 144417, 144925,
		145475, 145509, 145521, 146234, 146289, 146334, 146523, 146566, 146575, 147033,
		147175, 147436, 147591, 147706, 147741, 147994, 148010, 148625, 148666, 148707,
		148925, 149435, 149702, 149891, 150183, 150590, 150765, 150898, 151294, 151525,
		151593, 152218, 152438, 153062, 153065, 153410, 153425, 153729, 154105, 154652,
		154693, 154869, 155771, 156066, 156325, 156426, 156674, 156695, 157035, 157325,
		157339, 157604, 157731, 158015, 158389, 158565, 158631, 158804, 158875, 159562,
		159790, 160173, 160225, 160395, 161161, 161253, 161414, 161733, 161975, 162129,
		162578, 163370, 163415, 163713, 163761, 163990, 163995, 164169, 164255, 164331,
		164738, 164983, 165025, 165886, 166175, 166419, 166634, 167042, 167214, 167865,
		168175, 168609, 168674, 169099, 169169, 169756, 170126, 170338, 170765, 171125,
		171275, 171462, 171475, 171535, 171925, 171941, 171955, 172235, 172546, 172822,
		172887, 172975, 173225, 173635, 174087, 174097, 174363, 174603, 174685, 174783,
		174845, 174902, 175491, 175972, 176001, 176157, 176505, 176605, 177023, 177489,
		177735, 177970, 178126, 178334, 178746, 178802, 178959, 179075, 180154, 180761,
		180895, 181203, 181447, 181917, 182505, 182590, 182666, 182819, 183027, 183365,
		183425, 183483, 183799, 184093, 184382, 184910, 185725, 186093, 186238, 186694,
		186702, 186745, 186837, 186998, 187187, 187395, 187775, 188108, 188139, 188518,
		188853, 188922, 188993, 189625, 190333, 190463, 190855, 191139, 191301, 191425,
		191607, 191634, 191675, 192027, 192185, 192995, 193325, 193430, 193479, 194271,
		194463, 194579, 194996, 195201, 195415, 195730, 196075, 196137, 196677, 197098,
		197846, 198237, 198927, 199082, 199927, 200013, 200158, 200355, 200725, 201243,
		202027, 202521, 202612, 203203, 203319, 203522, 203665, 204321, 204425, 205751,
		205942, 206045, 206305, 206349, 206635, 206886, 207214, 207575, 208075, 208444,
		208495, 208658, 208715, 209209, 209457, 209525, 210125, 210749, 210826, 211071,
		212602, 213342, 213785, 213807, 214149, 214225, 214291, 214455, 214774, 214795,
		215747, 215878, 216775, 216890, 217217, 217341, 217558, 217906, 218405, 218530,
		218855, 219351, 219373, 219501, 219849, 220255, 221030, 221122, 221221, 221559,
		221991, 222015, 222111, 222425, 222999, 223706, 223975, 224516, 224553, 224825,
		224939, 225446, 225885, 225998, 226347, 226525, 226941, 228085, 228206, 228327,
		228475, 228657, 228718, 228781, 229586, 229593, 229957, 230115, 230318, 231035,
		231275, 231725, 231978, 232101, 232562, 232645, 232730, 232934, 233206, 233818,
		234025, 234099, 234175, 234639, 235011, 235246, 235445, 235543, 235586, 236406,
		236555, 237429, 237614, 238206, 239071, 239343, 239575, 239685, 240065, 240149,
		240526, 240695, 240737, 240994, 241129, 242121, 242515, 243089, 243815, 243867,
		243890, 244205, 244559, 244783, 245055, 245985, 246123, 246202, 246235, 247107,
		247225, 247247, 248788, 248829, 248897, 249067, 249158, 249951, 250325, 250563,
		250821, 251275, 252586, 252655, 253011, 253175, 253253, 254634, 255189, 255507,
		255626, 256711, 257193, 258115, 258819, 258874, 259233, 259259, 259325, 259407,
		259666, 260110, 260642, 260678, 260710, 261326, 261443, 261725, 262353, 262885,
		263097, 263302, 264275, 264385, 265475, 265727, 265837, 266955, 267189, 267197,
		267325, 267501, 267674, 268119, 268203, 269059, 269555, 270193, 270215, 270231,
		270802, 272194, 272855, 272935, 273325, 273581, 273885, 273999, 274022, 274846,
		275684, 276573, 276575, 277365, 277574, 278018, 278179, 278369, 278690, 279357,
		279775, 280041, 280053, 280497, 281015, 282302, 282777, 283383, 283475, 284053,
		284258, 284954, 285131, 285770, 287287, 287451, 287638, 287738, 288145, 288463,
		288827, 289289, 290145, 290605, 290966, 291005, 291305, 291893, 292175, 292201,
		292494, 293335, 293595, 293854, 294151, 294175, 295075, 295647, 296225, 296769,
		296989, 297910, 298265, 298623, 298775, 299299, 299367, 300237, 300713, 302005,
		303025, 303646, 303862, 303918, 304175, 304606, 305045, 305283, 305762, 305767,
		305942, 306397, 306475, 307582, 308074, 308357, 308913, 309442, 310329, 310821,
		311170, 311395, 312325, 312666, 312987, 313565, 314019, 314041, 314171, 314534,
		314755, 314870, 315425, 315514, 316239, 316342, 316825, 317471, 318478, 318565,
		318734, 318835, 318903, 319319, 319345, 319390, 320013, 320045, 322161, 322465,
		323449, 323785, 323817, 324818, 325335, 325622, 325703, 325822, 326337, 326859,
		326975, 327795, 328757, 329623, 330395, 331075, 331177, 331298, 331545, 331683,
		331731, 333355, 333925, 335405, 335559, 335699, 336091, 336743, 336774, 336973,
		337502, 337535, 338169, 338675, 338997, 339031, 339521, 340442, 340535, 341341,
		341446, 341734, 341887, 342309, 343077, 343915, 344379, 344729, 344810, 345477,
		347282, 347633, 347967, 348725, 348843, 349095, 349401, 349525, 349809, 350727,
		350987, 351538, 351785, 352869, 353379, 353717, 354609, 355570, 355946, 356345,
		356421, 356915, 357309, 357425, 359414, 359513, 360778, 360789, 361361, 361491,
		361675, 362674, 363562, 364021, 364154, 364994, 365585, 365835, 366415, 367114,
		368039, 369265, 369303, 369985, 370025, 370139, 371665, 371722, 372775, 373182,
		373737, 374255, 375193, 375683, 376475, 377245, 377377, 378235, 378301, 378879,
		378917, 380494, 380545, 381095, 381938, 381951, 381997, 382075, 382109, 382655,
		383439, 383525, 384307, 384659, 384826, 385526, 386425, 386630, 387686, 388311,
		388531, 389499, 390165, 390166, 390963, 391017, 391065, 391534, 391685, 391989,
		393421, 394010, 394953, 395937, 397010, 397822, 397969, 398866, 398905, 399475,
		400078, 400673, 400775, 401511, 401698, 401882, 402866, 403403, 403535, 404225,
		406203, 406334, 406445, 406802, 406847, 407407, 407827, 408291, 408425, 409975,
		410669, 410839, 411033, 411845, 412114, 412269, 413075, 413526, 413678, 414715,
		415454, 416361, 416585, 417027, 417074, 417175, 417571, 417605, 418035, 419881,
		421685, 422807, 423243, 423453, 424390, 424589, 424762, 424879, 425258, 425315,
		425546, 425845, 426374, 426387, 427025, 427063, 427431, 428655, 429598, 429913,
		430606, 431365, 431457, 431607, 432055, 435638, 435953, 436449, 437255, 438741,
		438991, 440657, 440781, 440818, 443989, 444925, 445315, 445835, 445991, 446369,
		446865, 447005, 447083, 447146, 447811, 447925, 448063, 450262, 450385, 451451,
		453299, 453871, 454138, 454181, 454597, 455469, 455793, 455877, 456025, 456475,
		456665, 456909, 458643, 458689, 458913, 458983, 459173, 460955, 461373, 462111,
		462275, 462346, 462553, 462722, 464163, 465595, 466697, 466735, 466755, 467495,
		468999, 469567, 470327, 471295, 471801, 472305, 472549, 473271, 474513, 474734,
		476749, 477158, 477717, 478101, 479085, 480491, 480766, 481481, 481574, 482734,
		483575, 484561, 485537, 486098, 486266, 487227, 487475, 487490, 488433, 488733,
		489325, 490637, 491878, 492499, 492745, 493025, 494615, 496223, 496947, 497705,
		497798, 498883, 499681, 500395, 501787, 502918, 503234, 505161, 505325, 506253,
		506530, 507566, 508079, 508277, 508805, 508898, 509675, 510663, 511819, 512006,
		512169, 512601, 512746, 512981, 514786, 514855, 516925, 516971, 517215, 517979,
		518035, 519622, 520331, 520421, 520923, 521110, 521594, 521645, 523957, 527065,
		527307, 528143, 529529, 531505, 532763, 533355, 533533, 533919, 535717, 536393,
		536558, 536935, 537251, 539121, 539695, 540175, 541167, 541282, 541717, 542087,
		542225, 542659, 543286, 543895, 544011, 544765, 544825, 545054, 545343, 546231,
		546325, 547491, 548359, 550671, 551614, 552575, 552805, 555458, 555611, 555814,
		555841, 557566, 557583, 558467, 559265, 559682, 559773, 561290, 562438, 563615,
		563914, 564775, 564949, 564995, 567853, 568178, 569023, 570515, 570741, 571795,
		572242, 572663, 572907, 573562, 573965, 574678, 575795, 576583, 577239, 578289,
		578347, 579945, 580601, 581405, 581529, 581647, 581825, 582335, 582958, 583015,
		583219, 584545, 584647, 585249, 585599, 587301, 588115, 588965, 590359, 591015,
		593021, 593929, 594035, 594146, 594473, 595441, 595515, 596183, 596733, 598299,
		600117, 600281, 600457, 600691, 601315, 602485, 602547, 602823, 603725, 603911,
		604299, 604877, 605098, 607202, 609501, 609725, 610203, 612157, 613118, 614422,
		615043, 615505, 616975, 618171, 618233, 620194, 620289, 620517, 620806, 620977,
		621970, 622895, 623162, 623181, 623441, 624169, 625611, 625807, 628694, 630539,
		631465, 633919, 634114, 634933, 636585, 637143, 637887, 638319, 639065, 639331,
		639561, 640211, 640871, 644397, 644725, 645337, 645909, 647185, 648907, 649078,
		649165, 650275, 651605, 651695, 651775, 651833, 653315, 653429, 653457, 654493,
		655402, 656183, 656903, 657662, 658255, 659525, 659813, 661227, 662966, 663803,
		664411, 665482, 669185, 670719, 671099, 675393, 676286, 677005, 677846, 680485,
		680846, 681207, 682486, 683501, 683675, 684574, 685055, 685069, 687115, 687242,
		687401, 689210, 689843, 692461, 692714, 693519, 693842, 693935, 694083, 695045,
		696725, 696787, 700553, 700843, 701437, 702559, 702658, 704099, 705686, 705755,
		708883, 709142, 709423, 709631, 710645, 712101, 712327, 712385, 714425, 715737,
		719095, 719345, 720575, 720797, 721149, 722361, 724101, 724594, 725249, 726869,
		727415, 729147, 729399, 729554, 730303, 730639, 730825, 731235, 733381, 734635,
		734638, 735034, 737426, 737817, 737891, 742577, 743002, 743774, 744107, 744775,
		746697, 748867, 749177, 751502, 751709, 754354, 754377, 754851, 755573, 756613,
		757393, 758582, 759115, 759655, 759795, 761349, 761453, 761515, 762671, 763347,
		764405, 764855, 768009, 768955, 769119, 770185, 772179, 773605, 773927, 774566,
		774706, 775489, 777925, 779433, 781665, 782254, 782391, 782971, 783959, 785213,
		785519, 785806, 786335, 787175, 788785, 789061, 790855, 790993, 791282, 792281,
		793117, 796195, 796835, 798475, 798721, 800513, 803551, 804287, 804837, 806113,
		809042, 809627, 811923, 812045, 812383, 813967, 814055, 814555, 814929, 815269,
		816221, 817581, 817663, 818363, 818662, 823361, 824182, 824551, 827421, 828134,
		828245, 828269, 828971, 829226, 829939, 830297, 830414, 831575, 831649, 832117,
		833187, 833721, 836349, 836969, 837199, 838409, 839523, 839914, 841841, 841935,
		843479, 843657, 843755, 845871, 850586, 851105, 852267, 853615, 854335, 858363,
		858458, 859027, 860343, 861707, 862017, 862025, 866723, 866822, 868205, 870758,
		872053, 872275, 873422, 874437, 876826, 877591, 877933, 878845, 884051, 884374,
		885391, 886414, 887777, 888925, 889778, 889865, 891219, 893809, 894179, 894691,
		896506, 898535, 898909, 900358, 901945, 906059, 906685, 907647, 908831, 908905,
		910385, 910803, 912247, 912373, 912485, 914641, 916487, 917662, 917785, 918731,
		919677, 921475, 921557, 921633, 924482, 926497, 926782, 927707, 927979, 929305,
		930291, 931209, 932955, 933658, 934743, 935693, 936859, 943041, 947546, 947807,
		949003, 950521, 951142, 951171, 951235, 952679, 954845, 955451, 959077, 960089,
		961961, 962065, 963815, 964894, 966329, 966575, 969215, 971509, 971618, 973063,
		973617, 975415, 978835, 979693, 980837, 983103, 983411, 985025, 986493, 988057,
		988418, 989417, 990437, 990698, 990847, 992525, 994449, 994555, 994903, 997165,
		997339, 997694, 998223, 998963, 1000195, 1004245, 1004663, 1004705, 1005238, 1006733,
		1007083, 1007165, 1012894, 1013173, 1014101, 1014429, 1015835, 1016738, 1016769, 1017005,
		1018381, 1021269, 1023729, 1024309, 1024426, 1026817, 1026861, 1028489, 1030285, 1030863,
		1032226, 1033815, 1034195, 1036849, 1037153, 1038635, 1039071, 1040763, 1042685, 1049191,
		1053987, 1056757, 1057978, 1058529, 1058743, 1059022, 1060975, 1061905, 1062761, 1063145,
		1063517, 1063713, 1063865, 1065935, 1066121, 1067857, 1070167, 1070558, 1070797, 1072478,
		1073995, 1076515, 1076537, 1078259, 1083047, 1083121, 1084039, 1085773, 1085926, 1086891,
		1088153, 1089095, 1094331, 1094951, 1095274, 1096381, 1099825, 1100869, 1101957, 1102045,
		1102551, 1103414, 1104299, 1105819, 1106139, 1106959, 1107197, 1114366, 1114503, 1114673,
		1115569, 1115661, 1117865, 1119371, 1121549, 1121894, 1123343, 1125655, 1127253, 1131531,
		1132058, 1132681, 1133407, 1135234, 1135345, 1136863, 1137873, 1139677, 1140377, 1146442,
		1147619, 1155865, 1156805, 1157819, 1159171, 1159543, 1161849, 1162059, 1162213, 1169311,
		1171001, 1172354, 1173381, 1175675, 1178709, 1181257, 1182446, 1183301, 1186835, 1186923,
		1187329, 1191547, 1192895, 1195061, 1196069, 1196506, 1196569, 1198483, 1199266, 1201915,
		1203935, 1206835, 1208938, 1209271, 1210547, 1211573, 1213511, 1213526, 1213563, 1213682,
		1215245, 1215487, 1215665, 1216171, 1218725, 1225367, 1227993, 1229695, 1230383, 1234838,
		1236273, 1239953, 1242201, 1242989, 1243839, 1244495, 1245621, 1245811, 1255133, 1255501,
		1257295, 1257949, 1257962, 1258085, 1259871, 1262723, 1263661, 1266325, 1266749, 1267474,
		1268915, 1269359, 1272245, 1272467, 1274539, 1275879, 1277479, 1279091, 1280015, 1281137,
		1281865, 1281974, 1282633, 1284899, 1285999, 1286965, 1287687, 1292669, 1293853, 1294033,
		1295723, 1299055, 1300233, 1301027, 1302775, 1303985, 1306137, 1306877, 1310133, 1310278,
		1314542, 1315239, 1316978, 1322893, 1325467, 1326561, 1329621, 1331729, 1334667, 1336783,
		1338623, 1339634, 1340003, 1341395, 1344718, 1344759, 1346891, 1349341, 1349834, 1350537,
		1351166, 1353205, 1354111, 1354886, 1356277, 1356901, 1358215, 1362635, 1365581, 1368334,
		1370369, 1370386, 1372019, 1376493, 1379035, 1381913, 1386723, 1388645, 1389223, 1389535,
		1390173, 1392377, 1393915, 1396031, 1399205, 1400273, 1400487, 1403207, 1403225, 1405943,
		1406095, 1406587, 1409785, 1410031, 1412327, 1414127, 1414562, 1416389, 1420445, 1421319,
		1422169, 1423807, 1426713, 1428163, 1430605, 1431382, 1432417, 1433531, 1433729, 1433905,
		1436695, 1437293, 1442399, 1442926, 1446071, 1447341, 1447873, 1448161, 1448402, 1454089,
		1457395, 1457427, 1459354, 1459759, 1465399, 1466641, 1468987, 1469194, 1472207, 1482627,
		1483339, 1485365, 1486047, 1486667, 1488403, 1489411, 1492309, 1496541, 1497067, 1497238,
		1503593, 1507121, 1507857, 1508638, 1511653, 1512118, 1512745, 1514071, 1515839, 1516262,
		1518005, 1519341, 1519817, 1524733, 1525107, 1526657, 1529099, 1531309, 1532795, 1533433,
		1536055, 1536639, 1542863, 1544491, 1548339, 1550485, 1552015, 1552661, 1554925, 1557905,
		1563419, 1565011, 1566461, 1567247, 1571735, 1575917, 1582009, 1582559, 1583023, 1585285,
		1586126, 1586899, 1586967, 1588533, 1589483, 1600313, 1602403, 1604986, 1605837, 1608717,
		1612682, 1616197, 1616402, 1617122, 1618211, 1619527, 1622695, 1628889, 1629887, 1635622,
		1638505, 1639187, 1641809, 1642911, 1644155, 1655121, 1657415, 1657466, 1661569, 1663705,
		1670053, 1671241, 1671549, 1675333, 1681691, 1682681, 1682841, 1685509, 1687829, 1689569,
		1690715, 1691701, 1692197, 1694173, 1694407, 1694615, 1698087, 1698619, 1701343, 1701931,
		1702115, 1702851, 1706215, 1709659, 1711435, 1711463, 1718105, 1719663, 1721573, 1722202,
		1723025, 1727878, 1729937, 1731785, 1734605, 1735327, 1739881, 1742293, 1750507, 1751629,
		1753037, 1756645, 1758531, 1760213, 1761319, 1764215, 1769261, 1771774, 1772855, 1773593,
		1773669, 1776481, 1778498, 1781143, 1786499, 1790921, 1791946, 1792021, 1794611, 1794759,
		1798899, 1801751, 1804231, 1804786, 1806091, 1807117, 1811485, 1812446, 1813407, 1818677,
		1820289, 1820523, 1822139, 1823885, 1825579, 1826246, 1834963, 1836595, 1837585, 1843565,
		1847042, 1847677, 1849243, 1852201, 1852257, 1852462, 1856261, 1857505, 1859435, 1869647,
		1870297, 1872431, 1877953, 1878755, 1879537, 1885885, 1886943, 1891279, 1894487, 1896455,
		1901211, 1901501, 1907689, 1908386, 1910051, 1916291, 1920983, 1922961, 1924814, 1929254,
		1930649, 1933459, 1936415, 1936765, 1939751, 1944103, 1945349, 1951481, 1952194, 1955635,
		1956449, 1957703, 1958887, 1964515, 1965417, 1968533, 1971813, 1973699, 1975103, 1975467,
		1976777, 1978205, 1979939, 1980218, 1982251, 1984279, 1987453, 1988623, 1994707, 1999283,
		1999591, 1999898, 2002481, 2002847, 2007467, 2009451, 2011373, 2017077, 2019127, 2019719,
		2022605, 2024751, 2026749, 2032329, 2040353, 2044471, 2046655, 2048449, 2050841, 2052501,
		2055579, 2056223, 2060455, 2062306, 2066801, 2070107, 2070335, 2071771, 2073065, 2076035,
		2079511, 2092717, 2099785, 2100659, 2111317, 2114698, 2116543, 2117843, 2120393, 2121843,
		2125207, 2126465, 2132273, 2132902, 2137822, 2141737, 2145913, 2146145, 2146981, 2147073,
		2150477, 2153437, 2155657, 2164389, 2167055, 2167957, 2170679, 2172603, 2172821, 2176895,
		2181067, 2183555, 2188021, 2189031, 2192065, 2193763, 2200429, 2203791, 2204534, 2207161,
		2209339, 2210351, 2210935, 2212873, 2215457, 2215763, 2216035, 2219399, 2221271, 2224445,
		2234837, 2237411, 2238067, 2241265, 2242454, 2245857, 2250895, 2257333, 2262957, 2266627,
		2268177, 2271773, 2274393, 2275229, 2284997, 2285258, 2289443, 2293907, 2294155, 2301817,
		2302658, 2304323, 2311205, 2313649, 2316955, 2320381, 2329187, 2330038, 2334145, 2336191,
		2338919, 2340503, 2343314, 2345057, 2357381, 2359379, 2362789, 2363153, 2363486, 2367001,
		2368333, 2368865, 2372461, 2377855, 2379189, 2382961, 2386241, 2388701, 2396009, 2397106,
		2399567, 2405347, 2407479, 2412235, 2416193, 2419023, 2422109, 2424499, 2424603, 2425683,
		2428447, 2429045, 2442862, 2444923, 2445773, 2453433, 2459303, 2461462, 2466827, 2469901,
		2471045, 2473211, 2476441, 2476745, 2481997, 2482597, 2486199, 2494235, 2497759, 2501369,
		2501917, 2505919, 2513095, 2519959, 2532235, 2536079, 2541845, 2542903, 2544971, 2551594,
		2553439, 2561065, 2571233, 2572619, 2580565, 2580991, 2581934, 2582827, 2583303, 2585843,
		2589151, 2591817, 2592629, 2598977, 2600507, 2603209, 2611037, 2612233, 2614447, 2618629,
		2618998, 2624369, 2630257, 2631218, 2636953, 2640239, 2641171, 2644213, 2644945, 2647555,
		2648657, 2655037, 2657661, 2667747, 2673539, 2674463, 2676395, 2678741, 2681195, 2681869,
		2687919, 2688907, 2700451, 2705329, 2707063, 2707179, 2709239, 2710981, 2711471, 2714815,
		2718669, 2732561, 2733511, 2737889, 2738185, 2739369, 2750321, 2758535, 2760953, 2764177,
		2766049, 2767787, 2769487, 2770563, 2771431, 2778693, 2785915, 2791613, 2792387, 2798939,
		2804735, 2816033, 2820103, 2827442, 2830145, 2831323, 2831647, 2838085, 2857921, 2861062,
		2862579, 2865317, 2866105, 2868767, 2884637, 2886689, 2887221, 2893757, 2893881, 2898469,
		2902291, 2904739, 2906449, 2915674, 2922029, 2926703, 2928291, 2930885, 2937874, 2939699,
		2951069, 2951897, 2956115, 2970327, 2977051, 2986159, 2988073, 2991265, 2997383, 2997797,
		2998165, 2999847, 3004603, 3005249, 3007693, 3022345, 3022438, 3025541, 3027973, 3033815,
		3033877, 3034205, 3047653, 3055019, 3056977, 3066613, 3068891, 3078251, 3082729, 3085771,
		3087095, 3090277, 3093409, 3093459, 3095309, 3101527, 3102449, 3114223, 3120469, 3124979,
		3130231, 3137771, 3140486, 3144905, 3147331, 3151253, 3154591, 3159637, 3160729, 3168685,
		3170366, 3172047, 3192101, 3197207, 3199353, 3204935, 3206269, 3206733, 3211817, 3230882,
		3234199, 3235687, 3243737, 3246473, 3255482, 3267803, 3268967, 3271021, 3275695, 3276971,
		3286355, 3292445, 3295331, 3299179, 3306801, 3307837, 3308987, 3316411, 3328039, 3328997,
		3332849, 3339611, 3346109, 3349085, 3361795, 3363681, 3372149, 3374585, 3377129, 3377543,
		3377915, 3379321, 3381487, 3387215, 3390361, 3400663, 3411067, 3414433, 3415997, 3420835,
		3424361, 3425965, 3427391, 3427887, 3445403, 3453839, 3453987, 3457817, 3459463, 3467443,
		3479998, 3487583, 3487627, 3491929, 3494413, 3495057, 3502969, 3514971, 3516263, 3518333,
		3531359, 3536405, 3537193, 3542851, 3545129, 3545229, 3558583, 3569929, 3578455, 3585491,
		3595659, 3604711, 3607315, 3607426, 3610477, 3612791, 3614693, 3617141, 3621005, 3624179,
		3628411, 3637933, 3646313, 3648385, 3651583, 3655847, 3660151, 3662497, 3664293, 3665441,
		3672985, 3683017, 3692193, 3693157, 3702923, 3706577, 3719573, 3728153, 3735407, 3743095,
		3744653, 3746953, 3748322, 3753673, 3765157, 3771595, 3779309, 3779831, 3780295, 3789227,
		3790655, 3800741, 3809927, 3816131, 3817879, 3827227, 3827391, 3833459, 3856214, 3860173,
		3861949, 3864619, 3872901, 3881273, 3900281, 3915083, 3926629, 3928497, 3929941, 3933137,
		3946813, 3946827, 3962203, 3965315, 3973319, 3985267, 3993743, 3997418, 4012465, 4012547,
		4024823, 4031261, 4031705, 4035239, 4039951, 4040509, 4041005, 4042687, 4042805, 4050553,
		4055843, 4081181, 4086511, 4089055, 4090757, 4093379, 4103239, 4121741, 4131833, 4133261,
		4138561, 4143665, 4148947, 4153546, 4170751, 4172201, 4180963, 4187771, 4197431, 4219007,
		4221811, 4231283, 4241163, 4247341, 4247887, 4260113, 4260883, 4273102, 4274803, 4277489,
		4291593, 4302397, 4305505, 4309279, 4314311, 4319695, 4321933, 4325633, 4352051, 4358341,
		4373511, 4375681, 4392287, 4395859, 4402867, 4405999, 4406811, 4416787, 4425499, 4429435,
		4433549, 4436159, 4446245, 4449731, 4458389, 4459939, 4467073, 4479865, 4486909, 4502641,
		4509973, 4511965, 4531115, 4533001, 4533657, 4554737, 4560743, 4565615, 4567277, 4574953,
		4585973, 4586959, 4600897, 4602578, 4609423, 4617605, 4617931, 4619527, 4621643, 4631155,
		4632959, 4672841, 4678223, 4688719, 4706513, 4709861, 4710729, 4721393, 4721519, 4724419,
		4729081, 4739311, 4742101, 4755549, 4757297, 4767521, 4770965, 4775147, 4777721, 4780723,
		4789169, 4793269, 4796351, 4803821, 4812035, 4821877, 4822543, 4823135, 4829513, 4834531,
		4846323, 4864057, 4871087, 4875277, 4880485, 4883223, 4884763, 4890467, 4893779, 4903301,
		4930783, 4936409, 4940377, 4950545, 4950967, 4951969, 4955143, 4999745, 5009837, 5034679,
		5035589, 5047141, 5050241, 5069407, 5084651, 5097301, 5100154, 5107739, 5135119, 5142179,
		5143333, 5155765, 5161217, 5178013, 5211503, 5219997, 5222587, 5231281, 5240333, 5258773,
		5271649, 5276851, 5280233, 5286745, 5292413, 5296877, 5306917, 5316979, 5321303, 5323153,
		5332255, 5343161, 5343899, 5344555, 5357183, 5382871, 5389969, 5397691, 5411139, 5436299,
		5448839, 5459441, 5487317, 5511335, 5517163, 5528809, 5538101, 5551441, 5570917, 5579977,
		5590127, 5592059, 5606135, 5617451, 5621447, 5622483, 5634343, 5635211, 5644387, 5651522,
		5656597, 5657407, 5659927, 5677243, 5690267, 5699369, 5713145, 5724677, 5748431, 5756645,
		5761691, 5768419, 5783557, 5784321, 5787191, 5801131, 5818879, 5824621, 5825095, 5827289,
		5837009, 5841557, 5852327, 5858285, 5888069, 5891843, 5896579, 5897657, 5898629, 5908715,
		5920039, 5964803, 5972593, 5975653, 5992765, 5996127, 5998331, 6009133, 6024007, 6024083,
		6027707, 6047573, 6068777, 6107155, 6129013, 6153655, 6159049, 6166241, 6170417, 6182423,
		6201209, 6224743, 6226319, 6229171, 6230319, 6243787, 6244423, 6247789, 6268121, 6271811,
		6298177, 6305431, 6315517, 6316751, 6322079, 6343561, 6378985, 6387767, 6391861, 6409653,
		6412009, 6424717, 6439537, 6447947, 6454835, 6464647, 6468037, 6483617, 6485011, 6503453,
		6528799, 6534047, 6547495, 6578045, 6580783, 6583811, 6585001, 6591499, 6595963, 6608797,
		6649159, 6658769, 6674393, 6675251, 6679351, 6704017, 6709469, 6725897, 6736849, 6752389,
		6791609, 6832679, 6876857, 6883643, 6903867, 6918791, 6930763, 6958627, 6971107, 6979061,
		6982823, 6999643, 7005547, 7039139, 7048421, 7050857, 7058519, 7065853, 7068605, 7119281,
		7132231, 7139269, 7152655, 7166363, 7172191, 7206529, 7218071, 7229981, 7243379, 7289185,
		7292311, 7296893, 7344685, 7358377, 7359707, 7367987, 7379021, 7395949, 7401443, 7424087,
		7431413, 7434817, 7451873, 7453021, 7464397, 7465157, 7482377, 7517179, 7525837, 7534519,
		7537123, 7556095, 7563113, 7620301, 7624109, 7650231, 7653043, 7685899, 7715869, 7777289,
		7780091, 7795229, 7800127, 7829729, 7848589, 7851215, 7858097, 7867273, 7872601, 7877647,
		7887919, 7888933, 7903283, 7925915, 7936093, 7947563, 7966211, 7979183, 7998403, 8026447,
		8054141, 8059303, 8077205, 8080567, 8084707, 8115389, 8138705, 8155133, 8155351, 8176753,
		8201599, 8234809, 8238581, 8258753, 8272201, 8297509, 8316649, 8329847, 8332831, 8339441,
		8389871, 8401553, 8420933, 8448337, 8452891, 8477283, 8480399, 8516807, 8544523, 8550017,
		8553401, 8560357, 8609599, 8615117, 8642273, 8675071, 8699995, 8707621, 8717789, 8723693,
		8740667, 8773921, 8782579, 8804429, 8806759, 8827423, 8869751, 8890211, 8894171, 8907509,
		8909119, 8930579, 8992813, 8995921, 9001687, 9018565, 9035849, 9036769, 9099743, 9116063,
		9166493, 9194653, 9209263, 9230371, 9303983, 9309829, 9370805, 9379019, 9389971, 9411631,
		9414613, 9472111, 9478093, 9485801, 9503329, 9523541, 9536099, 9549761, 9613007, 9622493,
		9640535, 9649489, 9659011, 9732047, 9744757, 9781739, 9806147, 9828767, 9855703, 9872267,
		9896047, 9926323, 9965009, 9968453, 9993545, 10013717, 10044353, 10050791, 10060709, 10083499,
		10158731, 10170301, 10188541, 10193761, 10204859, 10232447, 10275973, 10282559, 10309819, 10314971,
		10316297, 10354117, 10383865, 10405103, 10432409, 10482433, 10496123, 10506613, 10511293, 10553113,
		10578533, 10586477, 10610897, 10631543, 10652251, 10657993, 10682755, 10692677, 10737067, 10754551,
		10773529, 10784723, 10891199, 10896779, 10938133, 10991701, 10999439, 11096281, 11137363, 11173607,
		11194313, 11231207, 11233237, 11308087, 11342683, 11366807, 11386889, 11393027, 11394187, 11430103,
		11473481, 11473589, 11484911, 11506445, 11516531, 11528497, 11529979, 11560237, 11630839, 11647649,
		11648281, 11692487, 11730961, 11731109, 11758021, 11780899, 11870599, 11950639, 12005773, 12007943,
		12023777, 12041003, 12124937, 12166747, 12178753, 12179993, 12264871, 12311417, 12333497, 12404509,
		12447641, 12488149, 12511291, 12540151, 12568919, 12595651, 12625991, 12664619, 12689261, 12713977,
		12726523, 12750385, 12774821, 12815209, 12823423, 12836077, 12853003, 12871417, 12888227, 12901781,
		12999173, 12999337, 13018667, 13055191, 13119127, 13184083, 13306099, 13404989, 13435741, 13438339,
		13482071, 13496749, 13538041, 13590803, 13598129, 13642381, 13707797, 13739417, 13745537, 13759819,
		13791559, 13863863, 13895843, 13902787, 13955549, 13957343, 13990963, 14033767, 14088461, 14128805,
		14200637, 14223761, 14329471, 14332061, 14365121, 14404489, 14466563, 14471699, 14537411, 14575951,
		14638717, 14686963, 14742701, 14854177, 14955857, 14967277, 15060079, 15068197, 15117233, 15145247,
		15231541, 15247367, 15320479, 15340681, 15355819, 15362659, 15405791, 15464257, 15523091, 15538409,
		15550931, 15581189, 15699857, 15735841, 15745927, 15759439, 15878603, 15881473, 15999503, 16036207,
		16109023, 16158307, 16221281, 16267463, 16360919, 16398659, 16414841, 16460893, 16585361, 16593649,
		16623409, 16656623, 16782571, 16831853, 16895731, 16976747, 16999133, 17023487, 17102917, 17145467,
		17218237, 17272673, 17349337, 17389357, 17437013, 17529601, 17546899, 17596127, 17598389, 17769851,
		17850539, 17905151, 17974933, 18129667, 18171487, 18240449, 18285733, 18327913, 18378373, 18457339,
		18545843, 18588623, 18596903, 18738539, 18809653, 18812071, 18951881, 18999031, 19060859, 19096181,
		19139989, 19424693, 19498411, 19572593, 19591907, 19645847, 19780327, 19805323, 19840843, 19870597,
		19918169, 20089631, 20262569, 20309309, 20375401, 20413159, 20452727, 20607379, 20615771, 20755039,
		20764327, 20843129, 20922427, 20943073, 21000733, 21001829, 21160633, 21209177, 21240983, 21303313,
		21688549, 21709951, 21875251, 21925711, 21946439, 21985799, 22135361, 22186421, 22261483, 22365353,
		22450231, 22453117, 22619987, 22772507, 22844503, 22998827, 23207189, 23272297, 23383889, 23437829,
		23448269, 23502061, 23716519, 24033257, 24240143, 24319027, 24364093, 24528373, 24584953, 24783229,
		24877283, 24880481, 24971929, 24996571, 25054231, 25065391, 25314179, 25352141, 25690723, 25788221,
		25983217, 26169397, 26280467, 26480567, 26694131, 26782109, 26795437, 26860699, 26948111, 26998049,
		27180089, 27462497, 27566719, 27671597, 27698903, 27775163, 27909803, 27974183, 28050847, 28092913,
		28306813, 28713161, 28998521, 29343331, 29579983, 29692241, 29834617, 29903437, 29916757, 30118477,
		30259007, 30663121, 30693379, 30927079, 30998419, 31083371, 31860737, 31965743, 32515583, 32777819,
		32902213, 33059981, 33136241, 33151001, 33388541, 33530251, 33785551, 33978053, 34170277, 34270547,
		34758037, 35305141, 35421499, 35609059, 35691199, 36115589, 36321367, 36459209, 36634033, 36734893,
		36998113, 37155143, 37438043, 37864361, 37975471, 38152661, 39121913, 39458687, 39549707, 40019977,
		40594469, 40783879, 40997909, 41485399, 42277273, 42599173, 43105703, 43351309, 43724491, 43825351,
		44346461, 45192947, 45537047, 45970307, 46847789, 47204489, 47765779, 48037937, 48451463, 48677533,
		49140673, 50078671, 50459971, 52307677, 52929647, 53689459, 53939969, 54350669, 55915103, 57962561,
		58098991, 58651771, 59771317, 60226417, 61959979, 64379963, 64992503, 66233081, 66737381, 71339959,
		73952233, 76840601, 79052387, 81947069, 85147693, 87598591, 94352849, 104553157
	};

	public static readonly ushort[] values = new ushort[4888]
	{
		166, 322, 165, 310, 164, 2467, 154, 2466, 163, 3325,
		321, 162, 3324, 2464, 2401, 161, 2465, 3314, 160, 2461,
		159, 2400, 320, 3323, 153, 2457, 6185, 2463, 3303, 2452,
		158, 3322, 157, 298, 2460, 2446, 152, 3292, 156, 2398,
		3321, 2462, 5965, 155, 6184, 309, 2456, 3320, 2439, 3313,
		2395, 2459, 2431, 2335, 2451, 6181, 3319, 3281, 2422, 151,
		2391, 2445, 6183, 2399, 2455, 319, 3291, 2412, 5964, 6175,
		2386, 3318, 5745, 150, 2450, 6180, 3312, 3317, 297, 6165,
		2458, 2438, 5961, 2430, 2380, 142, 2444, 3311, 308, 3316,
		318, 286, 149, 6150, 5963, 6174, 3259, 5525, 3315, 2421,
		2397, 2454, 5955, 148, 6182, 2373, 3302, 6164, 2437, 5960,
		2411, 5744, 2449, 2365, 3310, 5945, 6178, 2429, 6129, 2334,
		2394, 2453, 6179, 6101, 147, 141, 3309, 6149, 5741, 2448,
		2356, 2443, 3215, 2269, 5930, 2420, 2396, 5954, 3290, 3248,
		3280, 2346, 6065, 6172, 2390, 2410, 3308, 317, 146, 6173,
		2442, 5944, 3258, 6128, 3270, 2393, 6020, 3301, 6162, 145,
		3289, 5735, 2436, 2385, 5958, 2447, 6100, 5909, 2333, 6169,
		6163, 2428, 2332, 5881, 5725, 6177, 316, 5929, 3307, 3300,
		6159, 144, 2435, 6147, 3204, 285, 3306, 2379, 6064, 2441,
		2389, 6148, 2427, 5524, 2329, 2419, 307, 143, 5845, 3288,
		5952, 3214, 3257, 2268, 6019, 5710, 5962, 3160, 2440, 6144,
		2384, 2409, 5305, 5908, 3269, 5800, 3305, 3287, 6171, 5942,
		5521, 3299, 6126, 2418, 5743, 2392, 6155, 5880, 2372, 2434,
		5949, 6176, 6127, 6098, 5959, 3304, 2331, 6161, 2364, 2426,
		315, 2325, 2408, 3298, 3094, 6099, 2378, 5689, 140, 2433,
		6168, 5939, 3286, 6123, 5740, 5927, 306, 5661, 5844, 6140,
		2425, 3213, 2320, 130, 6095, 3279, 2328, 6062, 6158, 2355,
		5515, 2417, 2388, 6146, 5085, 5304, 2267, 5799, 3297, 6063,
		3149, 6170, 6135, 274, 2432, 5953, 5924, 5523, 6017, 3247,
		2371, 2345, 5625, 2407, 5505, 2416, 2383, 3285, 2424, 3278,
		6018, 5906, 2314, 6059, 5742, 3159, 5935, 6160, 2363, 6119,
		5734, 2387, 6143, 5943, 3237, 3284, 296, 5878, 5580, 6167,
		2406, 3256, 6091, 3017, 5520, 2324, 6125, 6014, 5957, 6154,
		3083, 3296, 6114, 5724, 2382, 314, 5490, 5903, 2415, 6097,
		5739, 2377, 139, 6157, 3295, 2354, 5920, 6086, 6145, 5084,
		2319, 5738, 2423, 129, 3093, 5928, 2307, 3283, 5875, 5842,
		3212, 3277, 6122, 2405, 2266, 6055, 3203, 3246, 313, 2344,
		2299, 305, 6139, 5915, 2203, 6108, 3282, 5709, 6094, 2376,
		5522, 3158, 5797, 138, 6061, 3255, 3294, 5514, 6010, 6142,
		3276, 5951, 6050, 3193, 5303, 5469, 6080, 284, 2414, 2370,
		2313, 5839, 4865, 2381, 6134, 262, 5899, 2263, 5733, 6124,
		5956, 6016, 6153, 3236, 5441, 5907, 2413, 3254, 2362, 3293,
		2290, 5504, 6005, 5732, 5941, 5301, 5871, 2404, 3006, 6096,
		5519, 5794, 6058, 2330, 6166, 304, 5879, 6118, 5894, 5948,
		5723, 2929, 3092, 3275, 5688, 2403, 2369, 6044, 2280, 5722,
		6090, 6121, 2375, 3016, 5866, 137, 3202, 6013, 5737, 6073,
		4645, 5660, 6156, 2306, 5405, 2361, 6138, 312, 2353, 6113,
		5729, 5938, 3253, 5081, 5489, 6093, 5999, 2265, 5835, 2327,
		5926, 6060, 3211, 2830, 2298, 5843, 2259, 6085, 5950, 2374,
		5083, 3226, 136, 273, 128, 5888, 5360, 5708, 2402, 4864,
		2343, 6133, 5295, 5719, 5513, 5790, 6054, 6015, 5707, 5830,
		3192, 5302, 3157, 3274, 5860, 3210, 6037, 5798, 5624, 2352,
		3148, 2254, 6141, 5940, 2137, 2202, 2368, 6107, 2262, 311,
		5923, 6057, 3268, 3273, 6029, 5285, 6117, 2289, 5947, 6009,
		5503, 5518, 5785, 5731, 3252, 6049, 3245, 5468, 6152, 2360,
		6079, 5992, 303, 5579, 5905, 135, 2342, 3138, 5934, 6089,
		3015, 2323, 2367, 6012, 5704, 3251, 3156, 295, 2918, 4644,
		5440, 5687, 5984, 5824, 5877, 2279, 6112, 3209, 5937, 6004,
		5721, 5300, 2248, 4425, 3091, 2359, 3267, 5925, 5686, 5715,
		5853, 3082, 5659, 3272, 2720, 6084, 3182, 5728, 6120, 2318,
		5270, 3201, 6151, 2928, 5488, 5902, 5779, 2351, 6043, 5658,
		6137, 5075, 2819, 2258, 5919, 6053, 6092, 5082, 3225, 2326,
		3250, 6072, 2366, 3072, 3271, 134, 5404, 5874, 5975, 3147,
		5841, 5512, 3244, 5718, 5080, 2200, 6106, 3090, 2341, 5922,
		5683, 5998, 2264, 5706, 2350, 4861, 2829, 6132, 2358, 5065,
		5817, 133, 5623, 6008, 5700, 2253, 3208, 250, 5914, 6048,
		261, 3249, 2241, 6078, 2201, 5359, 5904, 2312, 5655, 2599,
		4863, 5796, 6136, 5933, 5622, 5502, 5294, 5809, 3243, 3266,
		3207, 5517, 2340, 5249, 294, 6056, 3235, 2233, 5467, 5772,
		6036, 5876, 5578, 5838, 5509, 3137, 6116, 6003, 5695, 5946,
		3155, 2136, 5298, 5898, 4424, 2261, 5703, 5221, 4855, 5577,
		302, 6131, 3081, 5439, 5764, 6028, 2349, 5284, 132, 6088,
		3265, 3014, 5050, 2322, 6011, 2927, 5299, 2247, 5870, 5901,
		5991, 3005, 4641, 6042, 5685, 5793, 5619, 5499, 5714, 6111,
		2357, 5936, 3089, 5918, 2709, 5679, 5487, 5893, 3181, 3206,
		5736, 3242, 6071, 4205, 4643, 2305, 2224, 5873, 5983, 2339,
		5657, 131, 6115, 5840, 3200, 6083, 301, 5078, 2317, 5651,
		5997, 127, 2995, 5865, 3154, 5574, 5185, 2828, 3071, 2297,
		5403, 5755, 2719, 6087, 238, 5511, 3013, 5913, 5674, 2321,
		6052, 3205, 5269, 5079, 2199, 2214, 4635, 3264, 5682, 5834,
		3127, 5795, 3146, 6110, 5074, 5292, 3985, 3199, 2348, 2257,
		118, 5484, 5699, 6105, 5029, 5646, 2071, 3191, 5921, 3224,
		6130, 5140, 2240, 5887, 6035, 5358, 5654, 2588, 5837, 5974,
		4862, 5621, 6082, 6007, 5501, 2134, 5293, 2316, 6047, 2347,
		5897, 126, 5466, 5789, 6077, 5001, 5615, 3241, 2311, 5829,
		5495, 4860, 2232, 5932, 5859, 2338, 5064, 6027, 5282, 2288,
		5508, 2252, 6051, 5730, 5694, 4845, 2135, 5297, 5869, 3088,
		272, 5990, 3004, 5668, 5438, 3153, 5792, 2598, 3240, 3145,
		5576, 6002, 2337, 5283, 2197, 6104, 5892, 5570, 4421, 3198,
		5516, 5784, 5248, 5610, 4204, 3061, 3263, 5982, 5640, 3080,
		3152, 2278, 3012, 5618, 293, 6006, 5498, 6046, 5720, 4625,
		5463, 300, 5678, 2926, 4423, 6076, 5864, 5486, 5900, 2310,
		6041, 6109, 5220, 4965, 4854, 5931, 2917, 4642, 3262, 2223,
		5823, 5480, 2718, 5727, 5917, 5049, 5565, 5267, 5077, 3234,
		2246, 5435, 5650, 6070, 5833, 2994, 4640, 2304, 4830, 5402,
		5872, 5573, 6081, 3011, 5072, 3239, 3984, 2315, 5852, 6001,
		125, 3171, 2336, 3765, 2005, 4415, 5673, 3180, 5996, 283,
		4920, 5268, 3087, 5886, 2907, 2213, 3079, 2827, 5778, 5973,
		3126, 5604, 2296, 3151, 5475, 5073, 5291, 5717, 2818, 5912,
		2925, 5788, 117, 5483, 3197, 5645, 5357, 249, 6040, 5705,
		5828, 4858, 3238, 3086, 5184, 5858, 5633, 5062, 292, 2193,
		3261, 6103, 299, 124, 5916, 5510, 2133, 3190, 2198, 6069,
		5465, 4634, 2597, 2303, 5399, 5559, 3196, 5614, 6034, 3150,
		5494, 5836, 4859, 6045, 2808, 5063, 5281, 5816, 5459, 2131,
		6075, 226, 5896, 2309, 5028, 5995, 2260, 5783, 5246, 2070,
		3144, 5139, 2239, 4610, 2826, 5667, 5437, 3260, 4809, 2295,
		3545, 6026, 3136, 2188, 6102, 2287, 5911, 5500, 3233, 5808,
		5431, 2984, 2196, 5868, 5354, 5569, 5989, 5702, 3003, 5000,
		5218, 4852, 5247, 5609, 5791, 6000, 2916, 3060, 2231, 3085,
		5639, 5289, 5771, 5822, 5597, 4781, 4405, 5454, 5507, 6074,
		5047, 5891, 2308, 4844, 260, 5296, 123, 3078, 5462, 4201,
		4422, 4638, 6033, 5684, 5981, 5219, 3195, 4853, 2277, 5713,
		5851, 106, 2924, 5763, 5589, 3232, 5479, 3764, 5895, 5426,
		6039, 282, 4420, 5048, 5863, 5564, 5266, 4203, 3084, 5434,
		5777, 5552, 4639, 6025, 5656, 5279, 3143, 5401, 2286, 2717,
		4390, 5071, 5497, 2817, 5726, 6068, 2182, 3170, 3010, 4624,
		2708, 2302, 5395, 5867, 237, 5988, 3002, 5485, 5832, 3194,
		4964, 5182, 4589, 2906, 3070, 5069, 3981, 2222, 5544, 5603,
		2923, 5994, 2256, 4745, 5474, 5890, 6038, 5076, 271, 2825,
		5448, 3009, 4195, 4632, 2294, 5681, 5885, 5980, 291, 5356,
		4829, 2276, 5972, 4857, 5910, 4561, 5183, 3983, 5632, 5061,
		5815, 2192, 5716, 5754, 5350, 6067, 5698, 2698, 2004, 5026,
		4414, 2068, 2301, 5390, 5862, 5787, 4919, 5137, 3231, 5827,
		122, 5420, 3116, 2212, 4633, 5653, 5857, 3544, 5059, 5398,
		5558, 3125, 4700, 2716, 5620, 5993, 2251, 3189, 5290, 2807,
		5807, 5264, 5458, 2130, 6032, 1939, 2824, 116, 5482, 4998,
		5027, 5831, 2293, 5245, 2069, 2596, 5138, 121, 2127, 3077,
		5770, 3975, 3142, 2587, 2255, 5535, 2187, 5345, 5693, 4842,
		2132, 3223, 5782, 2175, 2922, 5430, 2983, 6024, 5884, 5464,
		5275, 3008, 5353, 4999, 2285, 5217, 5971, 4851, 5575, 5493,
		3135, 5762, 4525, 5288, 3188, 5280, 5596, 3141, 5987, 3001,
		5453, 4418, 6031, 5786, 5046, 5701, 5826, 4843, 2896, 2167,
		4849, 6066, 4609, 2915, 2300, 4637, 5384, 5856, 2122, 5436,
		4808, 2577, 5617, 5821, 5889, 2250, 5044, 105, 4185, 4622,
		5588, 2707, 5677, 5979, 2195, 5425, 3007, 2245, 2275, 6023,
		4419, 3050, 2595, 4962, 3230, 2284, 5413, 4202, 2823, 3059,
		4480, 5712, 120, 5850, 2292, 5551, 4780, 5278, 4404, 5861,
		3761, 5986, 3000, 3179, 5781, 5243, 2181, 4369, 4623, 5649,
		5461, 5339, 5394, 4200, 2993, 4827, 2715, 5572, 5776, 3229,
		4963, 3134, 5181, 2797, 3076, 5260, 5068, 2816, 5543, 5753,
		5478, 3763, 4170, 2002, 3140, 4412, 5672, 5978, 4917, 3187,
		2274, 5265, 5215, 214, 3105, 3965, 5447, 4341, 2914, 119,
		2158, 4631, 6030, 5433, 281, 3069, 5820, 4828, 5400, 4389,
		5070, 3075, 3222, 3982, 2116, 5883, 3169, 5349, 115, 2244,
		2697, 2003, 5025, 5644, 4413, 5970, 2067, 4629, 5389, 5680,
		4918, 2714, 5136, 2921, 4588, 5419, 3115, 5711, 290, 5377,
		5849, 6022, 3980, 5255, 2586, 5058, 5814, 2283, 3139, 3755,
		4744, 5473, 5697, 5825, 259, 5023, 2065, 5263, 5855, 2148,
		5055, 4194, 5985, 2238, 225, 3950, 4997, 5613, 5775, 5355,
		2249, 5652, 3541, 4856, 2822, 4560, 3228, 2126, 2291, 5060,
		5369, 2815, 3221, 2191, 5806, 5534, 5882, 2594, 5344, 4995,
		5969, 4841, 2174, 4149, 4607, 5179, 5332, 5666, 5977, 2230,
		5274, 3068, 4806, 4305, 3543, 5769, 5397, 2273, 4699, 5506,
		202, 5780, 5239, 289, 5692, 3074, 5457, 4839, 2129, 2194,
		1938, 5854, 5568, 3039, 4417, 3186, 5244, 248, 5608, 2895,
		2166, 280, 4848, 3227, 2920, 4608, 5324, 5638, 3974, 5383,
		2121, 4778, 5813, 4807, 5761, 4402, 2713, 2576, 2186, 5696,
		2109, 5211, 2061, 2593, 2973, 5043, 2913, 4621, 5134, 5429,
		2237, 4198, 2982, 4260, 5819, 5352, 3185, 3049, 3535, 5216,
		4961, 4850, 5412, 5040, 5616, 3929, 6021, 5496, 3073, 5234,
		4524, 5287, 2243, 2282, 2687, 5805, 4779, 4403, 5452, 4619,
		2706, 5676, 5045, 2101, 5563, 3220, 5242, 3133, 5848, 4959,
		2919, 2999, 2229, 5338, 4199, 4636, 5768, 5968, 4826, 2221,
		3745, 4387, 3178, 2796, 5259, 5691, 2821, 5206, 4835, 104,
		4184, 3168, 2281, 3762, 2912, 2001, 5774, 5424, 4411, 5648,
		2992, 4916, 5818, 4824, 5214, 1873, 3104, 4586, 5571, 2814,
		2905, 5976, 2998, 5035, 2157, 3978, 4479, 2272, 5315, 5760,
		5602, 5277, 4742, 2242, 5752, 3760, 4388, 1999, 4409, 5671,
		2115, 5175, 4914, 4192, 2180, 4368, 3067, 5847, 5393, 2592,
		2211, 4628, 3124, 3730, 3184, 4121, 4558, 5180, 4587, 5631,
		3177, 2820, 5376, 5067, 2190, 3979, 5254, 2712, 2271, 4615,
		4169, 2705, 5675, 4743, 5481, 5773, 5228, 5022, 5643, 2064,
		2092, 3964, 5446, 2147, 5054, 4340, 4193, 5812, 4630, 2813,
		2566, 2220, 5557, 4697, 3132, 2585, 5019, 94, 3901, 4559,
		2806, 5368, 5130, 2236, 2128, 2711, 5170, 1936, 5348, 288,
		5647, 3525, 236, 5024, 2991, 3219, 2066, 5388, 5200, 4820,
		4994, 5612, 3183, 5135, 2911, 5492, 4606, 5178, 5418, 5331,
		3114, 3972, 5804, 5967, 4805, 2997, 3542, 5057, 2185, 5751,
		4698, 3754, 4991, 1995, 1807, 2962, 5238, 5670, 2082, 2228,
		5262, 4838, 279, 5767, 1937, 3949, 4604, 2210, 3038, 4996,
		5665, 5811, 3218, 3123, 4803, 3540, 5690, 5846, 5014, 2056,
		4085, 2125, 5323, 4522, 5286, 3973, 5595, 5966, 4777, 5125,
		4401, 3709, 2235, 2270, 114, 3176, 5343, 2108, 5210, 5642,
		2060, 3510, 5567, 2972, 4840, 2173, 5607, 4148, 5133, 4197,
		5759, 3058, 2591, 2996, 5273, 4304, 5637, 5803, 2584, 4775,
		4399, 5039, 2812, 4986, 103, 5233, 4182, 4523, 5587, 2686,
		2227, 4618, 190, 5460, 5766, 2885, 4416, 2100, 5611, 5491,
		5164, 2894, 2165, 4958, 4847, 4040, 4477, 3066, 5550, 2590,
		5382, 3028, 2120, 5276, 2704, 3131, 287, 5477, 3758, 4386,
		4955, 3865, 5042, 5205, 4834, 5562, 2179, 4183, 4366, 4620,
		2219, 4600, 5664, 4259, 5432, 5758, 5193, 4799, 3048, 3534,
		4960, 4823, 3217, 213, 4585, 5411, 3928, 4384, 5066, 5034,
		3977, 4478, 5810, 5542, 5314, 4167, 3130, 2710, 4741, 2990,
		270, 5008, 3759, 2050, 1998, 5566, 4408, 5241, 5119, 5174,
		5606, 4913, 3962, 2234, 4338, 4191, 3057, 4367, 4583, 5337,
		2904, 5636, 3489, 5750, 2786, 4825, 3744, 4771, 1990, 4395,
		5601, 2703, 5669, 2910, 4557, 4739, 2795, 5472, 4910, 3820,
		5258, 5802, 4950, 3681, 2209, 4614, 2696, 4168, 2000, 3175,
		4189, 4410, 247, 4980, 2218, 5227, 4915, 3216, 5213, 2091,
		1872, 3103, 2226, 3113, 3963, 4339, 5765, 4555, 2156, 2565,
		5630, 5056, 2589, 4696, 113, 5476, 3752, 5018, 5641, 93,
		2811, 2989, 4815, 2114, 5129, 5561, 5261, 3645, 5169, 1935,
		3947, 3174, 2583, 4627, 5199, 3538, 4819, 5396, 5556, 5749,
		5157, 3729, 82, 4694, 4120, 4380, 2124, 3065, 3971, 5375,
		5757, 4905, 2805, 5253, 5533, 5456, 258, 3753, 4990, 2208,
		3129, 1994, 1933, 201, 2961, 3122, 5021, 2172, 2063, 2081,
		4146, 4579, 2146, 5053, 2903, 5272, 3948, 4603, 4302, 3969,
		178, 4802, 5600, 3539, 5149, 4735, 112, 5471, 3900, 5013,
		3064, 2055, 2909, 4521, 5367, 4595, 5124, 2702, 5663, 5428,
		2874, 2043, 2981, 3524, 5351, 2582, 4944, 5112, 4993, 278,
		2164, 4846, 4147, 4605, 4551, 5177, 5330, 2217, 5629, 2119,
		3461, 4804, 4303, 4519, 2189, 2575, 5594, 4774, 3128, 4398,
		5451, 1806, 5237, 4985, 5605, 5041, 5801, 4181, 3056, 4837,
		5635, 4257, 4973, 1741, 224, 2035, 3037, 2884, 2951, 3047,
		3532, 3173, 5555, 5104, 4690, 2225, 5163, 3926, 2908, 4476,
		4084, 5322, 2804, 3425, 3027, 4776, 5748, 5455, 102, 4179,
		4400, 3708, 5586, 1984, 3757, 1929, 5662, 5423, 4794, 2107,
		4899, 5209, 4954, 5240, 2059, 3509, 2810, 2971, 4365, 5132,
		2207, 4196, 4599, 2775, 4258, 4474, 3121, 3742, 5192, 4798,
		5549, 3533, 2184, 277, 5038, 5560, 5257, 2676, 3927, 4383,
		5756, 5232, 3063, 2685, 4166, 5427, 235, 111, 3600, 2980,
		4363, 4617, 5007, 5634, 2049, 5392, 3172, 4766, 2099, 5212,
		1870, 4375, 3102, 5118, 3961, 4957, 4337, 2155, 4039, 4582,
		4515, 3167, 2581, 5593, 2785, 3743, 4770, 5541, 1989, 4394,
		5450, 4164, 4385, 4738, 4909, 2113, 2809, 3864, 4574, 5204,
		4949, 4833, 2701, 2902, 3959, 5445, 4335, 4188, 4626, 4979,
		5599, 4937, 2026, 5470, 3727, 4118, 4822, 1871, 4584, 5095,
		2216, 5033, 4554, 3976, 3062, 5252, 5313, 4175, 5585, 3380,
		3751, 4740, 5422, 5347, 2695, 1997, 5020, 4407, 2062, 4814,
		5387, 4546, 5173, 4912, 2940, 2700, 2145, 5628, 5052, 4190,
		3946, 2988, 5417, 269, 4470, 4788, 5548, 3488, 4929, 3537,
		3166, 5156, 3728, 3898, 81, 4693, 4119, 3749, 4556, 4379,
		2215, 3819, 4904, 5747, 3680, 1977, 2178, 4359, 4613, 2901,
		3522, 5391, 5554, 1932, 3944, 4892, 2016, 4992, 5226, 5598,
		4145, 4730, 2090, 2555, 3055, 5176, 2206, 4578, 2803, 2987,
		3120, 2123, 4301, 2564, 4760, 3968, 5540, 1675, 1924, 4695,
		4160, 5148, 5017, 4734, 1804, 5532, 5236, 92, 3899, 5342,
		5128, 4836, 5746, 4594, 3644, 110, 3955, 5444, 1969, 5168,
		4143, 1934, 4331, 2873, 5627, 3036, 2042, 3523, 4884, 2183,
		4299, 5198, 4943, 5111, 4818, 4082, 2205, 4550, 3970, 2580,
		3119, 2979, 4518, 3706, 5346, 2694, 4989, 1993, 2106, 5208,
		1805, 2960, 2058, 3507, 5386, 5553, 2970, 4685, 2080, 5131,
		2893, 109, 4510, 5416, 3112, 4256, 4972, 189, 5592, 2802,
		4602, 2034, 2950, 5381, 3531, 5449, 2118, 4801, 5103, 4689,
		2574, 1918, 5037, 2665, 3925, 5012, 5231, 2054, 4083, 4520,
		2579, 276, 3165, 5123, 4178, 3707, 4616, 1983, 1928, 3940,
		2098, 4254, 4793, 4898, 3508, 268, 3529, 4956, 4568, 4037,
		2900, 5410, 101, 2863, 3923, 2774, 5584, 3460, 4473, 3741,
		2986, 5421, 4724, 2978, 4773, 5531, 4397, 5341, 2675, 4984,
		3862, 5203, 4832, 4180, 2171, 4139, 4465, 2699, 5547, 4362,
		1740, 1960, 5271, 5336, 2883, 4295, 5591, 4765, 4821, 3739,
		1869, 4374, 4875, 3054, 4540, 5162, 5626, 5032, 4038, 2794,
		4475, 4753, 2204, 2177, 4514, 3424, 4354, 3026, 3118, 3756,
		4163, 1996, 4406, 4953, 5172, 3863, 4911, 4573, 2892, 2163,
		1867, 4364, 3101, 3958, 4598, 5539, 4334, 3486, 108, 5380,
		2985, 100, 4155, 5191, 4936, 4797, 5583, 4679, 2025, 3726,
		2573, 4117, 3053, 5094, 3817, 2801, 4382, 2764, 5443, 3678,
		2112, 4326, 4174, 4612, 4165, 70, 2578, 3599, 1950, 5006,
		4250, 5546, 5225, 2048, 3046, 2544, 2089, 5117, 4545, 3960,
		3724, 5409, 2939, 4115, 4336, 3919, 4581, 275, 4469, 4787,
		5374, 3487, 3117, 2784, 4928, 2176, 2693, 4769, 4348, 1988,
		5016, 4393, 91, 3897, 5385, 3748, 4737, 4908, 5127, 3818,
		3164, 5415, 4948, 3642, 246, 5167, 3679, 223, 1976, 4358,
		3521, 107, 5051, 5335, 4187, 4978, 3943, 4891, 5538, 5197,
		2015, 4817, 3735, 2852, 4729, 212, 2554, 2793, 3895, 4504,
		5256, 4553, 5590, 4759, 5366, 4717, 177, 1923, 3935, 5442,
		3379, 3750, 4320, 4159, 4988, 1992, 1803, 2959, 3519, 2079,
		4813, 3163, 1863, 257, 3643, 3954, 1968, 4142, 3945, 4601,
		4330, 2154, 5329, 4883, 5530, 4800, 4298, 3536, 5340, 4533,
		5155, 2692, 80, 4692, 2899, 5011, 4378, 2053, 4081, 3052,
		1801, 2170, 99, 4134, 4903, 5582, 5122, 3705, 4709, 5414,
		3111, 4290, 1931, 3506, 3035, 4684, 3720, 4144, 4111, 4577,
		4459, 4509, 3458, 5373, 5545, 4079, 4300, 5321, 3967, 4672,
		5251, 1674, 4772, 4396, 3703, 1917, 2753, 5147, 2664, 4733,
		2800, 4983, 2891, 2105, 2162, 2057, 3504, 267, 1911, 4593,
		5379, 1738, 2144, 2117, 2872, 3939, 2882, 2041, 2572, 4253,
		4942, 5110, 5529, 5161, 3528, 4567, 4036, 3891, 3051, 5036,
		4549, 2862, 3922, 3422, 3025, 5365, 5537, 3459, 2169, 4517,
		4664, 4128, 4245, 4723, 2684, 3045, 3515, 4284, 4952, 200,
		3861, 5408, 2097, 3914, 2977, 1903, 4138, 4464, 4597, 3162,
		5328, 4034, 4255, 4971, 1739, 1959, 5190, 2033, 4796, 4294,
		2949, 3530, 3738, 5102, 4874, 4688, 4539, 3924, 4381, 1797,
		4497, 5235, 2898, 4752, 3423, 3859, 4353, 2890, 2161, 4831,
		5334, 3597, 4177, 2691, 1982, 5005, 1927, 2047, 2654, 5378,
		256, 4792, 4897, 2571, 5116, 2792, 2976, 3110, 1866, 4580,
		4075, 5320, 3485, 2773, 5031, 2783, 4472, 3740, 4154, 4768,
		1987, 4678, 5312, 4392, 3699, 4736, 4239, 4907, 3816, 4489,
		2674, 98, 5207, 1858, 234, 245, 3500, 5581, 4947, 2969,
		2763, 3677, 4325, 5407, 2153, 3161, 69, 3908, 4186, 3598,
		4977, 1949, 4361, 4249, 3483, 4764, 2543, 1868, 4373, 3723,
		4452, 2111, 4114, 4552, 3918, 2897, 5230, 3814, 4513, 3377,
		2683, 5528, 3675, 4347, 4655, 4611, 5333, 4162, 4812, 3715,
		97, 4106, 2168, 2799, 2841, 4572, 3641, 5372, 2088, 2791,
		4030, 3957, 5250, 1894, 4333, 2563, 4935, 3734, 5154, 2024,
		3725, 2851, 79, 4691, 4116, 4377, 5015, 4444, 5093, 90,
		3894, 5536, 4902, 4503, 3855, 5202, 1852, 2143, 3100, 4173,
		4716, 3934, 3378, 3639, 4319, 2152, 1930, 3518, 3886, 2889,
		2160, 4816, 4313, 1862, 4544, 4576, 2938, 5364, 2975, 2110,
		3966, 4468, 4786, 1672, 5311, 2570, 4927, 5146, 2533, 4732,
		4532, 3896, 3747, 4987, 1991, 1800, 2958, 2798, 4133, 4592,
		2643, 5171, 5327, 4100, 2078, 2690, 4708, 1975, 2871, 4357,
		2040, 1884, 4289, 5371, 3520, 3942, 3044, 4890, 3479, 4941,
		5109, 2014, 1792, 5406, 3109, 3719, 4728, 2742, 4110, 2553,
		4548, 4458, 3457, 5010, 3810, 2052, 4078, 4516, 4758, 4671,
		3671, 1673, 1922, 2142, 3034, 4158, 3702, 2752, 1802, 5224,
		3503, 96, 4070, 1910, 5319, 3880, 2689, 3953, 2974, 1967,
		4970, 1737, 4141, 4329, 2032, 5363, 2948, 3694, 2562, 3455,
		4882, 4297, 5101, 4687, 2790, 2104, 3108, 89, 3495, 3890,
		2968, 4080, 3421, 4982, 4435, 5126, 5527, 4176, 4663, 3704,
		4127, 3635, 1981, 5166, 4244, 5326, 1926, 1735, 3514, 4791,
		4896, 4283, 3505, 266, 5196, 1845, 3099, 4683, 3913, 1902,
		1786, 2151, 5229, 4277, 4508, 2772, 4033, 4471, 2682, 3419,
		3024, 1916, 2663, 2096, 233, 2673, 1796, 4496, 255, 4951,
		95, 4025, 3858, 5526, 3596, 4360, 4064, 5318, 3938, 2653,
		4596, 4763, 4252, 211, 4372, 3688, 2159, 4795, 4093, 3527,
		4566, 4035, 3850, 5370, 2103, 5201, 2051, 4269, 4074, 2522,
		2861, 4512, 3921, 2967, 2569, 5121, 3698, 4722, 4161, 3594,
		4238, 5004, 4488, 2046, 1857, 3860, 3499, 4571, 2141, 5030,
		4137, 3956, 4232, 4463, 3907, 4332, 5310, 188, 3043, 3451,
		1958, 4934, 4293, 2023, 2681, 3482, 2888, 265, 3737, 4767,
		4873, 3873, 1986, 5092, 4391, 4538, 4451, 5362, 3107, 2095,
		4906, 4751, 3813, 4172, 2568, 4352, 3376, 4946, 3674, 4019,
		3474, 4654, 1731, 2881, 4976, 3714, 4105, 4543, 2840, 2937,
		5160, 3805, 5325, 1865, 4224, 4029, 4467, 4785, 3666, 1893,
		3844, 3484, 3042, 3415, 3023, 4926, 4153, 4677, 2789, 3374,
		3746, 1779, 5223, 4443, 3815, 2087, 3854, 2762, 4811, 3676,
		1851, 1974, 4324, 4356, 68, 2561, 3638, 3033, 2688, 3941,
		1948, 4889, 4248, 2013, 5309, 5189, 58, 3098, 2542, 3885,
		4727, 2552, 4312, 2150, 3722, 4057, 5317, 78, 3106, 4113,
		3917, 4376, 4757, 3630, 5165, 1671, 1921, 4901, 2632, 4157,
		4346, 2532, 3590, 199, 2102, 5195, 2045, 3468, 222, 2642,
		5115, 3640, 4099, 3952, 1966, 4140, 4328, 1883, 4575, 3799,
		4881, 4296, 3478, 3660, 2782, 1837, 3733, 3097, 1985, 1669,
		2850, 1791, 2957, 2887, 2741, 2149, 4731, 2077, 3893, 5222,
		4502, 3809, 2680, 2086, 3670, 4715, 3933, 4591, 2567, 4318,
		2870, 2560, 2094, 2039, 3517, 4682, 4940, 2140, 5009, 1861,
		4012, 88, 4069, 3879, 4507, 4547, 5120, 4215, 3693, 3454,
		3624, 3041, 2731, 3370, 1915, 2662, 4531, 3494, 5361, 3837,
		1799, 5194, 4810, 4434, 4132, 3634, 4707, 3446, 3937, 4288,
		4251, 4969, 1734, 2031, 2947, 3526, 1844, 4565, 5153, 2886,
		3718, 2139, 4981, 77, 4686, 4109, 1785, 2956, 2860, 3920,
		4457, 4276, 3456, 5308, 4077, 2076, 4670, 3418, 4721, 1726,
		176, 1771, 2880, 3701, 2751, 1980, 1925, 2788, 5159, 4790,
		4895, 3502, 4024, 4136, 4462, 1909, 3032, 3410, 1736, 244,
		4063, 1957, 2511, 4292, 2771, 3040, 1665, 3736, 4872, 3687,
		4092, 4537, 5145, 1828, 5316, 3096, 3889, 3792, 3849, 4750,
		4268, 2521, 264, 3420, 4351, 3653, 4590, 4662, 4126, 4243,
		46, 254, 5188, 2038, 3593, 3440, 2966, 3513, 4282, 2085,
		5108, 4762, 1864, 3912, 4371, 1901, 4231, 3031, 2559, 4032,
		3450, 4152, 4676, 3585, 4511, 5003, 87, 3872, 1720, 4049,
		2787, 2879, 1795, 4495, 5114, 2761, 2679, 4323, 3617, 3857,
		5158, 4570, 67, 3595, 4018, 1947, 3473, 4247, 2093, 1730,
		2781, 2652, 2030, 3404, 232, 2965, 2946, 2541, 4933, 5100,
		2022, 1818, 3095, 3721, 4112, 3804, 3916, 4223, 2138, 4945,
		4073, 3665, 3843, 3414, 4345, 4171, 3697, 4975, 1979, 3373,
		1778, 221, 4237, 3829, 5187, 4789, 4487, 2075, 1856, 3498,
		2678, 4542, 3906, 2936, 253, 3365, 4466, 3732, 4784, 57,
		2849, 3481, 4925, 3579, 4004, 5002, 3892, 4450, 2044, 4056,
		4501, 2672, 5307, 3629, 3812, 5113, 4714, 2631, 3932, 3375,
		4317, 3673, 1973, 3589, 4653, 4355, 3516, 3467, 1762, 5152,
		2780, 4888, 3713, 4761, 76, 2012, 4104, 1860, 4370, 2839,
		4726, 263, 4900, 4028, 3433, 3798, 1892, 3030, 3659, 4756,
		1836, 4530, 1668, 1920, 4156, 3784, 4974, 1798, 4442, 4131,
		2621, 5306, 3853, 4569, 1850, 4706, 4287, 1713, 3637, 3951,
		1965, 2878, 1660, 4327, 2084, 5144, 4880, 2021, 3359, 3717,
		2964, 3884, 4108, 4311, 4011, 4456, 5091, 2558, 4076, 3397,
		3022, 4669, 4214, 1670, 2869, 3623, 86, 3700, 2730, 3369,
		2750, 2531, 1752, 4939, 5107, 3836, 3501, 3609, 5151, 1908,
		2641, 4541, 4681, 4098, 187, 2935, 3445, 1882, 4506, 3029,
		5186, 4783, 3477, 2083, 1790, 3888, 2740, 1914, 2661, 3995,
		2557, 3808, 4661, 4125, 3669, 4242, 3572, 4968, 1725, 1972,
		85, 1770, 2955, 243, 3512, 4281, 3936, 2074, 5099, 2011,
		1654, 2963, 3911, 2610, 5143, 1900, 4725, 2551, 4068, 3878,
		4564, 4031, 3409, 2510, 2859, 2779, 3692, 4755, 3453, 1978,
		1664, 1919, 2868, 4720, 2037, 1827, 4894, 1794, 4494, 3493,
		3791, 4938, 5106, 3856, 4433, 3652, 2677, 3633, 2770, 1964,
		4135, 4461, 2651, 45, 2954, 3439, 1733, 1956, 2073, 4291,
		1843, 2671, 4871, 2500, 1784, 4536, 4072, 4275, 4749, 3352,
		3584, 3696, 3417, 4350, 4236, 4967, 1719, 2029, 4048, 4486,
		1855, 2945, 3497, 3775, 5098, 4680, 3616, 4023, 1705, 3905,
		210, 4505, 4062, 3403, 3480, 5150, 4151, 3686, 75, 4675,
		4091, 1817, 4449, 1913, 252, 3848, 3389, 3021, 4893, 4267,
		3811, 2520, 2556, 2760, 3672, 4322, 4652, 66, 4932, 2769,
		3592, 84, 1946, 3828, 3712, 4246, 4103, 2838, 5090, 2540,
		4563, 4027, 1696, 4230, 2670, 1891, 2877, 2858, 3915, 3449,
		1647, 3364, 5142, 4719, 3578, 3871, 4344, 4003, 4441, 2489,
		3020, 3852, 1849, 2934, 3564, 3636, 2867, 4460, 4017, 2036,
		3472, 1729, 4924, 1955, 1761, 2953, 5105, 3883, 3731, 4310,
		2072, 2848, 4535, 3803, 4222, 3432, 2778, 3664, 175, 4748,
		3842, 4500, 1971, 3413, 4349, 2530, 4713, 3931, 4887, 3372,
		83, 1777, 4316, 3783, 4931, 2020, 2620, 2550, 2640, 4097,
		3555, 5089, 1859, 1881, 4966, 1712, 2028, 1659, 220, 3476,
		4150, 56, 5097, 4674, 1789, 3358, 2739, 4529, 4055, 3807,
		3396, 198, 3628, 3344, 2759, 3668, 1963, 4130, 2630, 4321,
		231, 65, 4705, 3588, 4879, 1945, 4286, 4782, 1751, 2952,
		3466, 4923, 3608, 251, 4067, 3877, 3716, 4107, 2768, 3797,
		4455, 3691, 34, 3452, 2876, 3658, 74, 4668, 1835, 4343,
		1667, 3492, 2669, 2749, 4886, 2010, 3994, 4432, 3335, 3019,
		3632, 2549, 3571, 1907, 1732, 4754, 1842, 1653, 1912, 2660,
		2847, 2609, 1783, 4010, 4274, 3887, 4499, 1639, 4213, 3416,
		5141, 4712, 3622, 3930, 73, 4660, 2729, 4124, 3368, 4315,
		4241, 4878, 3511, 3835, 4280, 4562, 4022, 209, 242, 3910,
		4061, 3444, 1899, 1686, 4930, 2875, 2019, 3685, 4090, 4528,
		5088, 3847, 2499, 4266, 2519, 1793, 4493, 1630, 4129, 3018,
		3351, 2777, 1724, 4704, 1954, 1769, 3591, 4285, 2650, 4870,
		3774, 4534, 219, 2659, 4229, 2866, 1704, 2027, 4454, 3408,
		2944, 3448, 2509, 4071, 4922, 5096, 4667, 1663, 3870, 3695,
		2748, 1826, 3790, 4235, 3388, 4485, 1854, 3651, 3496, 1970,
		4016, 1906, 3471, 2478, 1728, 44, 2857, 3904, 4885, 3438,
		2009, 4718, 2548, 3802, 4221, 2767, 1695, 241, 4448, 3663,
		3841, 2943, 3412, 1646, 64, 2776, 3583, 4659, 4123, 1944,
		3371, 4240, 1776, 2668, 1718, 72, 4651, 4047, 2539, 4279,
		2488, 3711, 4869, 4102, 3615, 3563, 3909, 1962, 2837, 1898,
		4026, 4747, 4877, 3402, 55, 1890, 4342, 1816, 4054, 197,
		4492, 4440, 3627, 2629, 3851, 1848, 1620, 3587, 2667, 3465,
		2649, 3827, 2846, 4673, 3882, 3554, 4498, 4309, 3796, 2865,
		2018, 2758, 3657, 3363, 1834, 4314, 1666, 63, 2658, 5087,
		3577, 71, 2529, 4002, 4234, 4484, 1853, 2538, 3343, 2639,
		4096, 3903, 1880, 1760, 4527, 3475, 2933, 4009, 1788, 4447,
		2856, 2738, 3431, 4212, 4921, 33, 3806, 2017, 3621, 22,
		2942, 2728, 3367, 3667, 5086, 4650, 3782, 3834, 3710, 2619,
		4101, 230, 2836, 3334, 4453, 3443, 4066, 3876, 1711, 2864,
		1953, 2008, 1889, 1658, 3690, 4711, 4868, 2747, 2547, 3357,
		2932, 4439, 3491, 4746, 3395, 1638, 1905, 2766, 4431, 1847,
		1723, 1768, 3631, 1750, 186, 3607, 3881, 1961, 1841, 4308,
		3407, 2508, 1782, 4876, 1685, 4273, 2007, 4122, 2941, 1662,
		4703, 2546, 2528, 1825, 4278, 3789, 3993, 2757, 3650, 1629,
		1897, 2638, 4095, 4021, 3570, 43, 1943, 3437, 1879, 4060,
		4666, 2537, 1652, 2608, 3684, 1787, 4491, 229, 4089, 2737,
		3846, 2765, 4265, 2518, 3582, 1904, 2657, 240, 1717, 4046,
		2666, 3614, 4065, 3875, 2477, 4228, 3401, 3689, 3447, 4658,
		2845, 1815, 4233, 4483, 208, 3869, 3490, 2931, 2498, 4430,
		4710, 3902, 3350, 1896, 2656, 4015, 3826, 3470, 1727, 3773,
		1840, 4446, 1703, 1781, 1952, 3801, 4272, 4220, 3362, 3662,
		3840, 4867, 3411, 2006, 4526, 3576, 4001, 2648, 2545, 2855,
		1775, 3387, 2835, 4020, 4702, 1619, 1888, 4059, 1759, 3683,
		54, 4088, 4438, 2930, 3430, 1694, 3845, 1951, 4053, 1846,
		4264, 2517, 4665, 1645, 3626, 4866, 2628, 2746, 3781, 3586,
		2756, 2618, 2487, 3464, 4307, 62, 3562, 1710, 1942, 4227,
		1657, 3795, 2536, 239, 3356, 3656, 1833, 4649, 3868, 174,
		3394, 2637, 4094, 4657, 2834, 21, 1878, 4014, 3469, 1749,
		1887, 185, 196, 3606, 2736, 61, 3553, 3800, 1941, 4008,
		4219, 3661, 3839, 207, 2535, 4211, 3620, 2727, 3366, 1774,
		4490, 3992, 2854, 3833, 3874, 3342, 4306, 3569, 2647, 3442,
		1651, 53, 2607, 2527, 4052, 4429, 32, 3625, 228, 2844,
		2627, 1722, 1877, 2655, 1767, 4482, 1839, 3463, 4701, 1780,
		3333, 4271, 2735, 3794, 3406, 2507, 3655, 1832, 1661, 4445,
		2497, 1824, 2853, 3788, 1637, 3349, 3649, 4058, 2745, 4648,
		42, 3682, 3436, 4087, 3772, 218, 2755, 1702, 4007, 4263,
		2516, 60, 1684, 1940, 4210, 3619, 3581, 2726, 2534, 4437,
		3386, 1716, 4045, 3832, 4656, 1838, 1628, 4226, 3613, 195,
		3441, 4270, 3400, 3867, 1895, 1693, 1814, 1644, 4013, 2526,
		1721, 1766, 2843, 2486, 3825, 2636, 2754, 4086, 3561, 4218,
		59, 2646, 3838, 2476, 3405, 4262, 227, 2506, 3361, 173,
		1773, 217, 3575, 1823, 4000, 3787, 3648, 4225, 41, 4481,
		52, 3435, 1758, 4051, 3866, 3552, 2645, 2626, 3429, 3580,
		2842, 3462, 1715, 4044, 3780, 4428, 3341, 2617, 3612, 4647,
		3793, 1618, 4217, 1709, 3654, 2744, 1831, 3399, 1656, 206,
		3355, 1813, 1772, 1886, 31, 3393, 4436, 3824, 1748, 51,
		4006, 3332, 3605, 4646, 4050, 4209, 3618, 2725, 3360, 2625,
		2833, 3574, 3999, 3831, 1885, 2515, 1636, 3991, 2525, 20,
		3568, 2743, 1757, 2635, 1830, 1650, 1876, 2606, 1683, 3428,
		184, 1765, 2734, 3779, 1627, 2616, 2524, 4005, 2505, 1708,
		1655, 4208, 2634, 1822, 2724, 3354, 3786, 1875, 3647, 3830,
		2496, 3392, 40, 3348, 3434, 194, 1747, 4427, 3604, 3771,
		2475, 1701, 2644, 50, 1714, 4043, 1764, 2832, 3990, 3611,
		3385, 216, 3567, 3398, 2504, 4426, 1812, 1649, 2605, 1821,
		3785, 1692, 3646, 1829, 1643, 3823, 39, 4261, 2514, 2485,
		1617, 3560, 2523, 3573, 3998, 2831, 183, 4042, 2495, 1874,
		3610, 2723, 3347, 1756, 2733, 2513, 3770, 1811, 3427, 1700,
		3551, 3778, 4216, 2615, 3822, 3384, 19, 1707, 3340, 1763,
		172, 3353, 2633, 3997, 3391, 1691, 215, 1642, 30, 1820,
		1746, 2732, 3603, 1755, 2484, 2624, 3559, 3331, 38, 3426,
		3989, 3777, 2614, 49, 3566, 1635, 1706, 4041, 1648, 2604,
		2623, 2512, 3550, 3390, 1682, 1810, 1745, 4207, 3602, 205,
		3339, 1626, 3821, 2494, 3988, 3346, 29, 3565, 3996, 3769,
		4206, 171, 1699, 2603, 193, 3330, 2474, 1754, 3383, 2503,
		1634, 48, 3776, 2613, 1690, 37, 182, 2493, 1641, 1681,
		3345, 2483, 2502, 3558, 3768, 1625, 1698, 1819, 1616, 1744,
		3601, 3382, 47, 3987, 3549, 2622, 1689, 2722, 2473, 1640,
		2602, 3338, 2482, 3557, 1809, 18, 28, 1753, 2492, 3329,
		2501, 3548, 2721, 1615, 204, 3767, 1697, 1633, 36, 3337,
		3381, 1680, 1743, 27, 2612, 1688, 1624, 170, 3328, 17,
		1808, 2481, 3556, 35, 1632, 2601, 2472, 1679, 3986, 3547,
		1623, 192, 203, 3336, 3766, 181, 26, 1614, 2471, 2491,
		3327, 1742, 1687, 1631, 2480, 2611, 1678, 16, 1613, 180,
		1622, 191, 3546, 2490, 2470, 15, 2600, 25, 3326, 169,
		24, 1612, 2479, 1677, 1621, 1676, 14, 168, 2469, 2468,
		1611, 23, 1610, 13, 179, 12, 167, 11
	};

	public static readonly int[] primes = new int[13]
	{
		2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
		31, 37, 41
	};

	public static readonly int[,] perm7 = new int[21, 5]
	{
		{ 0, 1, 2, 3, 4 },
		{ 0, 1, 2, 3, 5 },
		{ 0, 1, 2, 3, 6 },
		{ 0, 1, 2, 4, 5 },
		{ 0, 1, 2, 4, 6 },
		{ 0, 1, 2, 5, 6 },
		{ 0, 1, 3, 4, 5 },
		{ 0, 1, 3, 4, 6 },
		{ 0, 1, 3, 5, 6 },
		{ 0, 1, 4, 5, 6 },
		{ 0, 2, 3, 4, 5 },
		{ 0, 2, 3, 4, 6 },
		{ 0, 2, 3, 5, 6 },
		{ 0, 2, 4, 5, 6 },
		{ 0, 3, 4, 5, 6 },
		{ 1, 2, 3, 4, 5 },
		{ 1, 2, 3, 4, 6 },
		{ 1, 2, 3, 5, 6 },
		{ 1, 2, 4, 5, 6 },
		{ 1, 3, 4, 5, 6 },
		{ 2, 3, 4, 5, 6 }
	};
}


using System;
using PokerEvaluator;

public static class PokerLib
{
	public enum PokerResult
	{
		RoyalFlush,
		StraightFlush,
		FourOfAKind,
		FullHouse,
		Flush,
		Straight,
		ThreeOfAKind,
		TwoPair,
		Pair,
		HighCard
	}

	public const int CLUB = 32768;

	public const int DIAMOND = 16384;

	public const int HEART = 8192;

	public const int SPADE = 4096;

	public static int FindIt(int key)
	{
		int num = 0;
		int num2 = 4887;
		while (num <= num2)
		{
			int num3 = num2 + num >> 1;
			if (key < Arrays.products[num3])
			{
				num2 = num3 - 1;
				continue;
			}
			if (key > Arrays.products[num3])
			{
				num = num3 + 1;
				continue;
			}
			return num3;
		}
		throw new ApplicationException("ERROR:  no match found; key = " + key);
	}

	public static void InitDeck(int[] deck)
	{
		int num = 0;
		int num2 = 32768;
		int num3 = 0;
		while (num3 < 4)
		{
			int num4 = 0;
			while (num4 < 13)
			{
				deck[num] = Arrays.primes[num4] | (num4 << 8) | num2 | (1 << 16 + num4);
				num4++;
				num++;
			}
			num3++;
			num2 >>= 1;
		}
	}

	public static int FindCard(int rank, int suit, int[] deck)
	{
		for (int i = 0; i < 52; i++)
		{
			int num = deck[i];
			if ((num & suit) != 0 && Rank(num) == rank)
			{
				return i;
			}
		}
		return -1;
		static int Rank(int card)
		{
			return (card >> 8) & 0xF;
		}
	}

	public static ushort Eval5Cards(int c1, int c2, int c3, int c4, int c5)
	{
		int num = (c1 | c2 | c3 | c4 | c5) >> 16;
		if ((c1 & c2 & c3 & c4 & c5 & 0xF000) != 0)
		{
			return Arrays.flushes[num];
		}
		ushort num2 = Arrays.unique5[num];
		if (num2 != 0)
		{
			return num2;
		}
		num = (c1 & 0xFF) * (c2 & 0xFF) * (c3 & 0xFF) * (c4 & 0xFF) * (c5 & 0xFF);
		num = FindIt(num);
		return Arrays.values[num];
	}

	public static ushort Eval5Hand(int[] hand)
	{
		return Eval5Cards(hand[0], hand[1], hand[2], hand[3], hand[4]);
	}

	public static ushort Eval7Hand(int[] hand)
	{
		ushort num = ushort.MaxValue;
		int[] array = new int[5];
		for (int i = 0; i < 21; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				array[j] = hand[Arrays.perm7[i, j]];
			}
			ushort num2 = Eval5Hand(array);
			if (num2 < num)
			{
				num = num2;
			}
		}
		return num;
	}

	public static PokerResult EvalToResultName(ushort eval)
	{
		if (eval > 6185)
		{
			return PokerResult.HighCard;
		}
		if (eval > 3325)
		{
			return PokerResult.Pair;
		}
		if (eval > 2467)
		{
			return PokerResult.TwoPair;
		}
		if (eval > 1609)
		{
			return PokerResult.ThreeOfAKind;
		}
		if (eval > 1599)
		{
			return PokerResult.Straight;
		}
		if (eval > 322)
		{
			return PokerResult.Flush;
		}
		if (eval > 166)
		{
			return PokerResult.FullHouse;
		}
		if (eval > 10)
		{
			return PokerResult.FourOfAKind;
		}
		if (eval > 1)
		{
			return PokerResult.StraightFlush;
		}
		return PokerResult.RoyalFlush;
	}

	public static string HandToString(int[] hand)
	{
		string text = string.Empty;
		for (int i = 0; i < hand.Length; i++)
		{
			int index = (hand[i] >> 8) & 0xF;
			text = string.Concat(str2: ((hand[i] & 0x8000) != 32768) ? (((hand[i] & 0x4000) != 16384) ? (((hand[i] & 0x2000) != 8192) ? "♠" : "♥") : "♦") : "♣", str0: text, str1: "23456789TJQKA"[index].ToString(), str3: " ");
		}
		return text;
	}
}


using Network;

public class Net
{
	public static Server sv;
}


using System;
using Facepunch;
using Facepunch.Models;
using UnityEngine;

public class Integration : BaseIntegration
{
	public override string PublicKey => "j0VF6sNnzn9rwt9qTZtI02zTYK8PRdN1";

	public override string Bucket => "Server";

	public event Action OnManifestUpdated;

	public override void OnManifestFile(Manifest manifest)
	{
		manifest.ExceptionReportingUrl = "https://83df169465e84da091c1a3cd2fbffeee:3671b903f9a840ecb68411cf946ab9b6@sentry.io/51080";
		this.OnManifestUpdated?.Invoke();
	}

	public override bool ShouldReportException(string message, string stackTrace, LogType type)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		if (!((BaseIntegration)this).ShouldReportException(message, stackTrace, type))
		{
			return false;
		}
		if (message.StartsWith("[EAC] "))
		{
			return false;
		}
		if (message.StartsWith("FMOD "))
		{
			return false;
		}
		if (message.StartsWith("<RI.Hid>"))
		{
			return false;
		}
		if (message.StartsWith("Platform does not support compute"))
		{
			return false;
		}
		if (message.StartsWith("Initializing Microsoft Media Foundation failed"))
		{
			return false;
		}
		if (message.StartsWith("Failed getting load state of FSB."))
		{
			return false;
		}
		if (message.StartsWith("Sound could not be played. FMOD Error"))
		{
			return false;
		}
		if (message.StartsWith("C:\\buildslave\\"))
		{
			return false;
		}
		if (message.StartsWith("Error: Cannot create FMOD::Sound instance"))
		{
			return false;
		}
		if (message.StartsWith("OutOfMemoryException"))
		{
			return false;
		}
		if (message.StartsWith("NotImplementedException"))
		{
			return false;
		}
		if (message.StartsWith("HttpException"))
		{
			return false;
		}
		if (message.StartsWith("Could not allocate memory"))
		{
			return false;
		}
		if (message.EndsWith("an active agent that has been placed on a NavMesh."))
		{
			return false;
		}
		if (message.StartsWith("Unsupported texture format - Texture2D::EncodeTo"))
		{
			return false;
		}
		if (message.StartsWith("Dimensions of color surface does not match dimensions of depth surface"))
		{
			return false;
		}
		return true;
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using UnityEngine;

public static class KeyCombos
{
	public static bool TryParse(ref string name, out List<KeyCode> keys)
	{
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		if (string.IsNullOrWhiteSpace(name) || name.Length < 5 || !name.StartsWith("[") || !name.EndsWith("]") || !name.Contains("+"))
		{
			keys = null;
			return false;
		}
		string[] array = name.Substring(1, name.Length - 2).ToLowerInvariant().Split('+');
		List<KeyCode> list = new List<KeyCode>(array.Length);
		List<string> list2 = new List<string>(array.Length);
		string[] array2 = array;
		foreach (string text in array2)
		{
			string text2 = text;
			if (text.Length == 1 && char.IsDigit(text[0]))
			{
				text2 = "alpha" + text;
			}
			if (text2 == "mousewheelup" || text2 == "mousewheeldown")
			{
				list2.Add(text2);
				continue;
			}
			if (!Enum.TryParse<KeyCode>(text2, ignoreCase: true, out KeyCode result))
			{
				keys = null;
				return false;
			}
			list.Add(result);
			string text3 = ((object)(KeyCode)(ref result)/*cast due to .constrained prefix*/).ToString().ToLowerInvariant();
			list2.Add(text3.StartsWith("alpha") ? text3.Replace("alpha", "") : text3);
		}
		name = "[" + string.Join("+", list2) + "]";
		keys = list;
		return true;
	}

	public static void RegisterButton(string name, List<KeyCode> keys)
	{
		if (string.IsNullOrWhiteSpace(name) || keys == null)
		{
			return;
		}
		bool usesMouseWheelUp = name.Contains("mousewheelup");
		bool usesMouseWheelDown = name.Contains("mousewheeldown");
		if ((keys.Count <= 1 && !usesMouseWheelUp && !usesMouseWheelDown) || Input.HasButton(name))
		{
			return;
		}
		Input.AddButton(name, (KeyCode)0, (Func<bool>)delegate
		{
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_004b: Unknown result type (might be due to invalid IL or missing references)
			foreach (KeyCode key in keys)
			{
				if (!Input.GetKey(key))
				{
					return false;
				}
				if (!IsFunctionKey(key) && !KeyBinding.IsOpen && (NeedsKeyboard.AnyActive((KeyCode)0) || HudMenuInput.AnyActive()))
				{
					return false;
				}
				if (IsMouseButton(key) && NeedsMouseButtons.AnyActive())
				{
					return false;
				}
				if (usesMouseWheelUp && Input.GetAxis("Mouse ScrollWheel") <= 0f)
				{
					return false;
				}
				if (usesMouseWheelDown && Input.GetAxis("Mouse ScrollWheel") >= 0f)
				{
					return false;
				}
			}
			return true;
		}, (Action)null, false);
	}

	private static bool IsFunctionKey(KeyCode keyCode)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Invalid comparison between Unknown and I4
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Invalid comparison between Unknown and I4
		if ((int)keyCode >= 282)
		{
			return (int)keyCode <= 296;
		}
		return false;
	}

	private static bool IsMouseButton(KeyCode keyCode)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Invalid comparison between Unknown and I4
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Invalid comparison between Unknown and I4
		if ((int)keyCode >= 323)
		{
			return (int)keyCode <= 329;
		}
		return false;
	}

	public static string FormatHeldKeys(IReadOnlyList<string> heldKeys)
	{
		if (heldKeys == null || heldKeys.Count == 0)
		{
			return null;
		}
		if (heldKeys.Count > 1)
		{
			IEnumerable<string> values = from k in heldKeys
				select k.ToLowerInvariant() into k
				select (!k.StartsWith("alpha")) ? k : k.Replace("alpha", "");
			return "[" + string.Join("+", values) + "]";
		}
		return heldKeys[0];
	}
}


using System;
using Facepunch;
using UnityEngine;

public static class UnityButtons
{
	private static bool isRegistered;

	public static void Register()
	{
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Invalid comparison between Unknown and I4
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		if (isRegistered)
		{
			Debug.LogError((object)"UnityButtons.Register called twice!");
			return;
		}
		isRegistered = true;
		foreach (KeyCode value in Enum.GetValues(typeof(KeyCode)))
		{
			KeyCode val = value;
			if ((int)val == 0 || (int)val >= 330)
			{
				continue;
			}
			string text = ((object)(KeyCode)(ref val)/*cast due to .constrained prefix*/).ToString();
			KeyCode localKey = val;
			bool isFKey = text.Length == 2 && text.StartsWith("F");
			bool isMouseButton = text.StartsWith("mouse", StringComparison.CurrentCultureIgnoreCase);
			if (text.StartsWith("Alpha"))
			{
				text = text.Replace("Alpha", "");
			}
			Input.AddButton(text, val, (Func<bool>)delegate
			{
				//IL_0001: Unknown result type (might be due to invalid IL or missing references)
				//IL_0027: Unknown result type (might be due to invalid IL or missing references)
				if (!Input.GetKey(localKey))
				{
					return false;
				}
				if (!isMouseButton && !isFKey && !KeyBinding.IsOpen && (NeedsKeyboard.AnyActive(localKey) || HudMenuInput.AnyActive()))
				{
					return false;
				}
				return (!isMouseButton || !NeedsMouseButtons.AnyActive()) ? true : false;
			}, (Action)null, false);
		}
		float wheelValue = 0f;
		float lastWheelValue = 0f;
		Input.AddButton("MouseWheelUp", (KeyCode)0, (Func<bool>)delegate
		{
			if (lastWheelValue > 0f)
			{
				wheelValue = 0f;
			}
			lastWheelValue = wheelValue;
			wheelValue = 0f;
			return lastWheelValue > 0f;
		}, (Action)delegate
		{
			if (Cursor.visible)
			{
				wheelValue = 0f;
			}
			else
			{
				wheelValue = Mathf.Max(wheelValue, Input.GetAxis("Mouse ScrollWheel"));
			}
		}, false);
		float wheelValue2 = 0f;
		float lastWheelValue2 = 0f;
		Input.AddButton("MouseWheelDown", (KeyCode)0, (Func<bool>)delegate
		{
			if (lastWheelValue2 > 0f)
			{
				wheelValue2 = 0f;
			}
			lastWheelValue2 = wheelValue2;
			wheelValue2 = 0f;
			return lastWheelValue2 > 0f;
		}, (Action)delegate
		{
			if (Cursor.visible)
			{
				wheelValue2 = 0f;
			}
			else
			{
				wheelValue2 = Mathf.Max(wheelValue2, Input.GetAxis("Mouse ScrollWheel") * -1f);
			}
		}, false);
	}
}


using System;
using System.IO;
using Facepunch;
using UnityEngine;

public class RandomUsernames
{
	[Serializable]
	private class DataFile
	{
		public string[] RandomUsernames;
	}

	private static string[] All;

	public static string Get(int v)
	{
		if (All == null)
		{
			All = JsonUtility.FromJson<DataFile>(File.ReadAllText(Path.Combine(Application.streamingAssetsPath, "RandomUsernames.json"))).RandomUsernames;
		}
		if (v < 0)
		{
			v *= -1;
		}
		v %= All.Length;
		return All[v];
	}

	public static string Get(ulong v)
	{
		return Get((int)(v % int.MaxValue));
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Epic.OnlineServices;

public sealed class Helper
{
	private struct Allocation
	{
		public int Size { get; private set; }

		public object Cache { get; private set; }

		public bool? IsArrayItemAllocated { get; private set; }

		public Allocation(int size, object cache, bool? isArrayItemAllocated = null)
		{
			Size = size;
			Cache = cache;
			IsArrayItemAllocated = isArrayItemAllocated;
		}
	}

	private struct PinnedBuffer
	{
		public GCHandle Handle { get; private set; }

		public int RefCount { get; set; }

		public PinnedBuffer(GCHandle handle)
		{
			Handle = handle;
			RefCount = 1;
		}
	}

	private class DelegateHolder
	{
		public Delegate Public { get; private set; }

		public Delegate Private { get; private set; }

		public Delegate[] StructDelegates { get; private set; }

		public ulong? NotificationId { get; set; }

		public DelegateHolder(Delegate publicDelegate, Delegate privateDelegate, params Delegate[] structDelegates)
		{
			Public = publicDelegate;
			Private = privateDelegate;
			StructDelegates = structDelegates;
		}
	}

	private static Dictionary<ulong, Allocation> s_Allocations = new Dictionary<ulong, Allocation>();

	private static Dictionary<ulong, PinnedBuffer> s_PinnedBuffers = new Dictionary<ulong, PinnedBuffer>();

	private static Dictionary<IntPtr, DelegateHolder> s_Callbacks = new Dictionary<IntPtr, DelegateHolder>();

	private static Dictionary<string, DelegateHolder> s_StaticCallbacks = new Dictionary<string, DelegateHolder>();

	private static long s_LastClientDataId = 0L;

	private static Dictionary<IntPtr, object> s_ClientDatas = new Dictionary<IntPtr, object>();

	internal static void AddCallback(out IntPtr clientDataAddress, object clientData, Delegate publicDelegate, Delegate privateDelegate, params Delegate[] structDelegates)
	{
		lock (s_Callbacks)
		{
			clientDataAddress = AddClientData(clientData);
			s_Callbacks.Add(clientDataAddress, new DelegateHolder(publicDelegate, privateDelegate, structDelegates));
		}
	}

	private static void RemoveCallback(IntPtr clientDataAddress)
	{
		lock (s_Callbacks)
		{
			s_Callbacks.Remove(clientDataAddress);
			RemoveClientData(clientDataAddress);
		}
	}

	internal static bool TryGetCallback<TCallbackInfoInternal, TCallback, TCallbackInfo>(ref TCallbackInfoInternal callbackInfoInternal, out TCallback callback, out TCallbackInfo callbackInfo) where TCallbackInfoInternal : struct, ICallbackInfoInternal, IGettable<TCallbackInfo> where TCallback : class where TCallbackInfo : struct, ICallbackInfo
	{
		Get<TCallbackInfoInternal, TCallbackInfo>(ref callbackInfoInternal, out callbackInfo, out var clientDataAddress);
		callback = null;
		lock (s_Callbacks)
		{
			if (s_Callbacks.TryGetValue(clientDataAddress, out var value))
			{
				callback = value.Public as TCallback;
				return callback != null;
			}
		}
		return false;
	}

	internal static bool TryGetAndRemoveCallback<TCallbackInfoInternal, TCallback, TCallbackInfo>(ref TCallbackInfoInternal callbackInfoInternal, out TCallback callback, out TCallbackInfo callbackInfo) where TCallbackInfoInternal : struct, ICallbackInfoInternal, IGettable<TCallbackInfo> where TCallback : class where TCallbackInfo : struct, ICallbackInfo
	{
		Get<TCallbackInfoInternal, TCallbackInfo>(ref callbackInfoInternal, out callbackInfo, out var clientDataAddress);
		callback = null;
		lock (s_Callbacks)
		{
			if (s_Callbacks.TryGetValue(clientDataAddress, out var value))
			{
				callback = value.Public as TCallback;
				if (callback != null)
				{
					if (!value.NotificationId.HasValue && callbackInfo.GetResultCode().HasValue && Common.IsOperationComplete(callbackInfo.GetResultCode().Value))
					{
						RemoveCallback(clientDataAddress);
					}
					return true;
				}
			}
		}
		return false;
	}

	internal static bool TryGetStructCallback<TCallbackInfoInternal, TCallback, TCallbackInfo>(ref TCallbackInfoInternal callbackInfoInternal, out TCallback callback, out TCallbackInfo callbackInfo) where TCallbackInfoInternal : struct, ICallbackInfoInternal, IGettable<TCallbackInfo> where TCallback : class where TCallbackInfo : struct
	{
		Get<TCallbackInfoInternal, TCallbackInfo>(ref callbackInfoInternal, out callbackInfo, out var clientDataAddress);
		callback = null;
		lock (s_Callbacks)
		{
			if (s_Callbacks.TryGetValue(clientDataAddress, out var value))
			{
				callback = value.StructDelegates.FirstOrDefault((Delegate structDelegate) => structDelegate.GetType() == typeof(TCallback)) as TCallback;
				if (callback != null)
				{
					return true;
				}
			}
		}
		return false;
	}

	internal static void RemoveCallbackByNotificationId(ulong notificationId)
	{
		lock (s_Callbacks)
		{
			RemoveCallback(s_Callbacks.SingleOrDefault((KeyValuePair<IntPtr, DelegateHolder> pair) => pair.Value.NotificationId.HasValue && pair.Value.NotificationId == notificationId).Key);
		}
	}

	internal static void AddStaticCallback(string key, Delegate publicDelegate, Delegate privateDelegate)
	{
		lock (s_StaticCallbacks)
		{
			s_StaticCallbacks.Remove(key);
			s_StaticCallbacks.Add(key, new DelegateHolder(publicDelegate, privateDelegate));
		}
	}

	internal static bool TryGetStaticCallback<TCallback>(string key, out TCallback callback) where TCallback : class
	{
		callback = null;
		lock (s_StaticCallbacks)
		{
			if (s_StaticCallbacks.TryGetValue(key, out var value))
			{
				callback = value.Public as TCallback;
				if (callback != null)
				{
					return true;
				}
			}
		}
		return false;
	}

	internal static void AssignNotificationIdToCallback(IntPtr clientDataAddress, ulong notificationId)
	{
		if (notificationId == 0L)
		{
			RemoveCallback(clientDataAddress);
			return;
		}
		lock (s_Callbacks)
		{
			if (s_Callbacks.TryGetValue(clientDataAddress, out var value))
			{
				value.NotificationId = notificationId;
			}
		}
	}

	private static IntPtr AddClientData(object clientData)
	{
		lock (s_ClientDatas)
		{
			IntPtr intPtr = new IntPtr(++s_LastClientDataId);
			s_ClientDatas.Add(intPtr, clientData);
			return intPtr;
		}
	}

	private static void RemoveClientData(IntPtr clientDataAddress)
	{
		lock (s_ClientDatas)
		{
			s_ClientDatas.Remove(clientDataAddress);
		}
	}

	private static object GetClientData(IntPtr clientDataAddress)
	{
		lock (s_ClientDatas)
		{
			s_ClientDatas.TryGetValue(clientDataAddress, out var value);
			return value;
		}
	}

	private static void Convert<THandle>(IntPtr from, out THandle to) where THandle : Handle, new()
	{
		to = null;
		if (from != IntPtr.Zero)
		{
			to = new THandle();
			to.InnerHandle = from;
		}
	}

	private static void Convert(Handle from, out IntPtr to)
	{
		to = IntPtr.Zero;
		if (from != null)
		{
			to = from.InnerHandle;
		}
	}

	private static void Convert(byte[] from, out string to)
	{
		to = null;
		if (from != null)
		{
			to = Encoding.ASCII.GetString(from, 0, GetAnsiStringLength(from));
		}
	}

	private static void Convert(string from, out byte[] to, int fromLength)
	{
		if (from == null)
		{
			from = "";
		}
		to = new byte[fromLength];
		Encoding.ASCII.GetBytes(from, 0, from.Length, to, 0);
		to[from.Length] = 0;
	}

	private static void Convert<TArray>(TArray[] from, out int to)
	{
		to = 0;
		if (from != null)
		{
			to = from.Length;
		}
	}

	private static void Convert<TArray>(TArray[] from, out uint to)
	{
		to = 0u;
		if (from != null)
		{
			to = (uint)from.Length;
		}
	}

	private static void Convert<TArray>(ArraySegment<TArray> from, out int to)
	{
		to = from.Count;
	}

	private static void Convert<T>(ArraySegment<T> from, out uint to)
	{
		to = (uint)from.Count;
	}

	private static void Convert(int from, out bool to)
	{
		to = from != 0;
	}

	private static void Convert(bool from, out int to)
	{
		to = (from ? 1 : 0);
	}

	private static void Convert(DateTimeOffset? from, out long to)
	{
		to = -1L;
		if (from.HasValue)
		{
			DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
			long num = (from.Value.UtcDateTime - dateTime).Ticks / 10000000;
			to = num;
		}
	}

	private static void Convert(long from, out DateTimeOffset? to)
	{
		to = null;
		if (from >= 0)
		{
			DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
			long num = from * 10000000;
			to = new DateTimeOffset(dateTime.Ticks + num, TimeSpan.Zero);
		}
	}

	internal static void Get<TArray>(TArray[] from, out int to)
	{
		Convert(from, out to);
	}

	internal static void Get<TArray>(TArray[] from, out uint to)
	{
		Convert(from, out to);
	}

	internal static void Get<TArray>(ArraySegment<TArray> from, out uint to)
	{
		Convert(from, out to);
	}

	internal static void Get<TTo>(IntPtr from, out TTo to) where TTo : Handle, new()
	{
		Convert<TTo>(from, out to);
	}

	internal static void Get<TFrom, TTo>(ref TFrom from, out TTo to) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		from.Get(out to);
	}

	internal static void Get(int from, out bool to)
	{
		Convert(from, out to);
	}

	internal static void Get(bool from, out int to)
	{
		Convert(from, out to);
	}

	internal static void Get(long from, out DateTimeOffset? to)
	{
		Convert(from, out to);
	}

	internal static void Get<TTo>(IntPtr from, out TTo[] to, int arrayLength, bool isArrayItemAllocated)
	{
		GetAllocation<TTo>(from, out to, arrayLength, isArrayItemAllocated);
	}

	internal static void Get<TTo>(IntPtr from, out TTo[] to, uint arrayLength, bool isArrayItemAllocated)
	{
		GetAllocation<TTo>(from, out to, (int)arrayLength, isArrayItemAllocated);
	}

	internal static void Get<TTo>(IntPtr from, out TTo[] to, int arrayLength)
	{
		GetAllocation<TTo>(from, out to, arrayLength, !typeof(TTo).IsValueType);
	}

	internal static void Get<TTo>(IntPtr from, out TTo[] to, uint arrayLength)
	{
		GetAllocation<TTo>(from, out to, (int)arrayLength, !typeof(TTo).IsValueType);
	}

	internal static void Get(IntPtr from, out ArraySegment<byte> to, uint arrayLength)
	{
		to = default(ArraySegment<byte>);
		if (arrayLength != 0)
		{
			byte[] array = new byte[arrayLength];
			Marshal.Copy(from, array, 0, (int)arrayLength);
			to = new ArraySegment<byte>(array);
		}
	}

	internal static void GetHandle<THandle>(IntPtr from, out THandle[] to, uint arrayLength) where THandle : Handle, new()
	{
		GetAllocation<THandle>(from, out to, (int)arrayLength);
	}

	internal static void Get<TFrom, TTo>(TFrom[] from, out TTo[] to) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		to = GetDefault<TTo[]>();
		if (from != null)
		{
			to = new TTo[from.Length];
			for (int i = 0; i < from.Length; i++)
			{
				from[i].Get(out to[i]);
			}
		}
	}

	internal static void Get<TFrom, TTo>(IntPtr from, out TTo[] to, int arrayLength) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		Get(from, out TFrom[] to2, arrayLength);
		Get(to2, out to);
	}

	internal static void Get<TFrom, TTo>(IntPtr from, out TTo[] to, uint arrayLength) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		Get<TFrom, TTo>(from, out to, (int)arrayLength);
	}

	internal static void Get<TTo>(IntPtr from, out TTo? to) where TTo : struct
	{
		GetAllocation(from, out to);
	}

	internal static void Get(byte[] from, out string to)
	{
		Convert(from, out to);
	}

	internal static void Get(IntPtr from, out object to)
	{
		to = GetClientData(from);
	}

	internal static void Get(IntPtr from, out Utf8String to)
	{
		GetAllocation(from, out to);
	}

	internal static void Get<T, TEnum>(T from, out T to, TEnum currentEnum, TEnum expectedEnum)
	{
		to = GetDefault<T>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			to = from;
		}
	}

	internal static void Get<TFrom, TTo, TEnum>(ref TFrom from, out TTo to, TEnum currentEnum, TEnum expectedEnum) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		to = GetDefault<TTo>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			Get<TFrom, TTo>(ref from, out to);
		}
	}

	internal static void Get<TEnum>(int from, out bool? to, TEnum currentEnum, TEnum expectedEnum)
	{
		to = GetDefault<bool?>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			Convert(from, out var to2);
			to = to2;
		}
	}

	internal static void Get<TFrom, TEnum>(TFrom from, out TFrom? to, TEnum currentEnum, TEnum expectedEnum) where TFrom : struct
	{
		to = GetDefault<TFrom?>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			to = from;
		}
	}

	internal static void Get<TFrom, TEnum>(IntPtr from, out TFrom to, TEnum currentEnum, TEnum expectedEnum) where TFrom : Handle, new()
	{
		to = GetDefault<TFrom>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			Get(from, out to);
		}
	}

	internal static void Get<TEnum>(IntPtr from, out IntPtr? to, TEnum currentEnum, TEnum expectedEnum)
	{
		to = GetDefault<IntPtr?>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			Get(from, out to);
		}
	}

	internal static void Get<TEnum>(IntPtr from, out Utf8String to, TEnum currentEnum, TEnum expectedEnum)
	{
		to = GetDefault<Utf8String>();
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			Get(from, out to);
		}
	}

	internal static void Get<TFrom, TTo>(IntPtr from, out TTo to) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		to = GetDefault<TTo>();
		Get(from, out TFrom? to2);
		if (to2.HasValue)
		{
			to2.Value.Get(out to);
		}
	}

	internal static void Get<TFrom, TTo>(IntPtr from, out TTo? to) where TFrom : struct, IGettable<TTo> where TTo : struct
	{
		to = GetDefault<TTo?>();
		Get(from, out TFrom? to2);
		if (to2.HasValue)
		{
			to2.Value.Get(out var other);
			to = other;
		}
	}

	internal static void Get<TFrom, TTo>(ref TFrom from, out TTo to, out IntPtr clientDataAddress) where TFrom : struct, ICallbackInfoInternal, IGettable<TTo> where TTo : struct
	{
		from.Get(out to);
		clientDataAddress = from.ClientDataAddress;
	}

	public static int GetAllocationCount()
	{
		return s_Allocations.Count + s_PinnedBuffers.Aggregate(0, (int acc, KeyValuePair<ulong, PinnedBuffer> x) => acc + x.Value.RefCount) + s_Callbacks.Count + s_ClientDatas.Count;
	}

	internal static void Copy(byte[] from, IntPtr to)
	{
		if (from != null && to != IntPtr.Zero)
		{
			Marshal.Copy(from, 0, to, from.Length);
		}
	}

	internal static void Copy(ArraySegment<byte> from, IntPtr to)
	{
		if (from.Count != 0 && to != IntPtr.Zero)
		{
			Marshal.Copy(from.Array, from.Offset, to, from.Count);
		}
	}

	internal static void Dispose(ref IntPtr value)
	{
		RemoveAllocation(ref value);
		RemovePinnedBuffer(ref value);
	}

	internal static void Dispose<TDisposable>(ref TDisposable disposable) where TDisposable : IDisposable
	{
		if (typeof(TDisposable).IsValueType || disposable != null)
		{
			disposable.Dispose();
		}
	}

	internal static void Dispose<TEnum>(ref IntPtr value, TEnum currentEnum, TEnum expectedEnum)
	{
		if ((int)(object)currentEnum == (int)(object)expectedEnum)
		{
			Dispose(ref value);
		}
	}

	private static int GetAnsiStringLength(byte[] bytes)
	{
		int num = 0;
		for (int i = 0; i < bytes.Length && bytes[i] != 0; i++)
		{
			num++;
		}
		return num;
	}

	private static int GetAnsiStringLength(IntPtr address)
	{
		int i;
		for (i = 0; Marshal.ReadByte(address, i) != 0; i++)
		{
		}
		return i;
	}

	internal static T GetDefault<T>()
	{
		return default(T);
	}

	private static void GetAllocation<T>(IntPtr source, out T target)
	{
		target = GetDefault<T>();
		if (source == IntPtr.Zero)
		{
			return;
		}
		if (TryGetAllocationCache(source, out var cache) && cache != null)
		{
			if (!(cache.GetType() == typeof(T)))
			{
				throw new CachedTypeAllocationException(source, cache.GetType(), typeof(T));
			}
			target = (T)cache;
		}
		else
		{
			target = (T)Marshal.PtrToStructure(source, typeof(T));
		}
	}

	private static void GetAllocation<T>(IntPtr source, out T? target) where T : struct
	{
		target = GetDefault<T?>();
		if (source == IntPtr.Zero)
		{
			return;
		}
		if (TryGetAllocationCache(source, out var cache) && cache != null)
		{
			if (!(cache.GetType() == typeof(T)))
			{
				throw new CachedTypeAllocationException(source, cache.GetType(), typeof(T));
			}
			target = (T?)cache;
		}
		else
		{
			target = (T?)Marshal.PtrToStructure(source, typeof(T));
		}
	}

	private static void GetAllocation<THandle>(IntPtr source, out THandle[] target, int arrayLength) where THandle : Handle, new()
	{
		target = null;
		if (source == IntPtr.Zero)
		{
			return;
		}
		if (TryGetAllocationCache(source, out var cache) && cache != null)
		{
			if (!(cache.GetType() == typeof(THandle[])))
			{
				throw new CachedTypeAllocationException(source, cache.GetType(), typeof(THandle[]));
			}
			Array array = (Array)cache;
			if (array.Length != arrayLength)
			{
				throw new CachedArrayAllocationException(source, array.Length, arrayLength);
			}
			target = array as THandle[];
		}
		else
		{
			int num = Marshal.SizeOf(typeof(IntPtr));
			List<THandle> list = new List<THandle>();
			for (int i = 0; i < arrayLength; i++)
			{
				Convert<THandle>(Marshal.ReadIntPtr(new IntPtr(source.ToInt64() + i * num)), out var to);
				list.Add(to);
			}
			target = list.ToArray();
		}
	}

	private static void GetAllocation<T>(IntPtr from, out T[] to, int arrayLength, bool isArrayItemAllocated)
	{
		to = null;
		if (from == IntPtr.Zero)
		{
			return;
		}
		if (TryGetAllocationCache(from, out var cache) && cache != null)
		{
			if (cache.GetType() == typeof(T[]))
			{
				Array array = (Array)cache;
				if (array.Length == arrayLength)
				{
					to = array as T[];
					return;
				}
				throw new CachedArrayAllocationException(from, array.Length, arrayLength);
			}
			throw new CachedTypeAllocationException(from, cache.GetType(), typeof(T[]));
		}
		int num = ((!isArrayItemAllocated) ? Marshal.SizeOf(typeof(T)) : Marshal.SizeOf(typeof(IntPtr)));
		List<T> list = new List<T>();
		for (int i = 0; i < arrayLength; i++)
		{
			IntPtr intPtr = new IntPtr(from.ToInt64() + i * num);
			if (isArrayItemAllocated)
			{
				intPtr = Marshal.ReadIntPtr(intPtr);
			}
			T target2;
			if (typeof(T) == typeof(Utf8String))
			{
				GetAllocation(intPtr, out var target);
				target2 = (T)(object)target;
			}
			else
			{
				GetAllocation(intPtr, out target2);
			}
			list.Add(target2);
		}
		to = list.ToArray();
	}

	private static void GetAllocation(IntPtr source, out Utf8String target)
	{
		target = null;
		if (!(source == IntPtr.Zero))
		{
			int ansiStringLength = GetAnsiStringLength(source);
			byte[] array = new byte[ansiStringLength + 1];
			Marshal.Copy(source, array, 0, ansiStringLength + 1);
			target = new Utf8String(array);
		}
	}

	internal static IntPtr AddAllocation(int size)
	{
		if (size == 0)
		{
			return IntPtr.Zero;
		}
		IntPtr intPtr = Marshal.AllocHGlobal(size);
		Marshal.WriteByte(intPtr, 0, 0);
		lock (s_Allocations)
		{
			s_Allocations.Add((ulong)(long)intPtr, new Allocation(size, null, null));
			return intPtr;
		}
	}

	internal static IntPtr AddAllocation(uint size)
	{
		return AddAllocation((int)size);
	}

	private static IntPtr AddAllocation<T>(int size, T cache)
	{
		if (size == 0 || cache == null)
		{
			return IntPtr.Zero;
		}
		IntPtr intPtr = Marshal.AllocHGlobal(size);
		Marshal.StructureToPtr(cache, intPtr, fDeleteOld: false);
		lock (s_Allocations)
		{
			s_Allocations.Add((ulong)(long)intPtr, new Allocation(size, cache, null));
			return intPtr;
		}
	}

	private static IntPtr AddAllocation<T>(int size, T[] cache, bool? isArrayItemAllocated)
	{
		if (size == 0 || cache == null)
		{
			return IntPtr.Zero;
		}
		IntPtr intPtr = Marshal.AllocHGlobal(size);
		Marshal.WriteByte(intPtr, 0, 0);
		lock (s_Allocations)
		{
			s_Allocations.Add((ulong)(long)intPtr, new Allocation(size, cache, isArrayItemAllocated));
			return intPtr;
		}
	}

	private static IntPtr AddAllocation<T>(T[] array, bool isArrayItemAllocated)
	{
		if (array == null)
		{
			return IntPtr.Zero;
		}
		int num = ((!isArrayItemAllocated) ? Marshal.SizeOf(typeof(T)) : Marshal.SizeOf(typeof(IntPtr)));
		IntPtr result = AddAllocation(array.Length * num, array, isArrayItemAllocated);
		for (int i = 0; i < array.Length; i++)
		{
			T val = (T)array.GetValue(i);
			if (isArrayItemAllocated)
			{
				IntPtr to;
				if (typeof(T) == typeof(Utf8String))
				{
					to = AddPinnedBuffer((Utf8String)(object)val);
				}
				else if (typeof(T).BaseType == typeof(Handle))
				{
					Convert((Handle)(object)val, out to);
				}
				else
				{
					to = AddAllocation(Marshal.SizeOf(typeof(T)), val);
				}
				Marshal.StructureToPtr(ptr: new IntPtr(result.ToInt64() + i * num), structure: to, fDeleteOld: false);
			}
			else
			{
				IntPtr ptr2 = new IntPtr(result.ToInt64() + i * num);
				Marshal.StructureToPtr(val, ptr2, fDeleteOld: false);
			}
		}
		return result;
	}

	private static void RemoveAllocation(ref IntPtr address)
	{
		if (address == IntPtr.Zero)
		{
			return;
		}
		Allocation value;
		lock (s_Allocations)
		{
			if (!s_Allocations.TryGetValue((ulong)(long)address, out value))
			{
				return;
			}
			s_Allocations.Remove((ulong)(long)address);
		}
		if (value.IsArrayItemAllocated.HasValue)
		{
			int num = ((!value.IsArrayItemAllocated.Value) ? Marshal.SizeOf(value.Cache.GetType().GetElementType()) : Marshal.SizeOf(typeof(IntPtr)));
			Array array = value.Cache as Array;
			for (int i = 0; i < array.Length; i++)
			{
				if (value.IsArrayItemAllocated.Value)
				{
					IntPtr ptr = new IntPtr(address.ToInt64() + i * num);
					ptr = Marshal.ReadIntPtr(ptr);
					Dispose(ref ptr);
					continue;
				}
				object value2 = array.GetValue(i);
				if (value2 is IDisposable && value2 is IDisposable disposable)
				{
					disposable.Dispose();
				}
			}
		}
		if (value.Cache is IDisposable && value.Cache is IDisposable disposable2)
		{
			disposable2.Dispose();
		}
		Marshal.FreeHGlobal(address);
		address = IntPtr.Zero;
	}

	private static bool TryGetAllocationCache(IntPtr address, out object cache)
	{
		cache = null;
		lock (s_Allocations)
		{
			if (s_Allocations.TryGetValue((ulong)(long)address, out var value))
			{
				cache = value.Cache;
				return true;
			}
		}
		return false;
	}

	private static IntPtr AddPinnedBuffer(byte[] buffer, int offset)
	{
		if (buffer == null)
		{
			return IntPtr.Zero;
		}
		GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
		ulong num = (ulong)(long)Marshal.UnsafeAddrOfPinnedArrayElement(buffer, offset);
		lock (s_PinnedBuffers)
		{
			if (s_PinnedBuffers.ContainsKey(num))
			{
				PinnedBuffer value = s_PinnedBuffers[num];
				value.RefCount++;
				s_PinnedBuffers[num] = value;
			}
			else
			{
				s_PinnedBuffers.Add(num, new PinnedBuffer(handle));
			}
			return (IntPtr)(long)num;
		}
	}

	private static IntPtr AddPinnedBuffer(Utf8String str)
	{
		if (str == null || str.Bytes == null)
		{
			return IntPtr.Zero;
		}
		return AddPinnedBuffer(str.Bytes, 0);
	}

	internal static IntPtr AddPinnedBuffer(ArraySegment<byte> array)
	{
		if (array == null)
		{
			return IntPtr.Zero;
		}
		return AddPinnedBuffer(array.Array, array.Offset);
	}

	private static void RemovePinnedBuffer(ref IntPtr address)
	{
		if (address == IntPtr.Zero)
		{
			return;
		}
		lock (s_PinnedBuffers)
		{
			ulong key = (ulong)(long)address;
			if (s_PinnedBuffers.TryGetValue(key, out var value))
			{
				value.RefCount--;
				if (value.RefCount == 0)
				{
					s_PinnedBuffers.Remove(key);
					value.Handle.Free();
				}
				else
				{
					s_PinnedBuffers[key] = value;
				}
			}
		}
		address = IntPtr.Zero;
	}

	internal static void Set<T>(ref T from, ref T to) where T : struct
	{
		to = from;
	}

	internal static void Set(object from, ref IntPtr to)
	{
		RemoveClientData(to);
		to = AddClientData(from);
	}

	internal static void Set(Utf8String from, ref IntPtr to)
	{
		Dispose(ref to);
		to = AddPinnedBuffer(from);
	}

	internal static void Set(Handle from, ref IntPtr to)
	{
		Convert(from, out to);
	}

	internal static void Set<T>(T? from, ref IntPtr to) where T : struct
	{
		Dispose(ref to);
		to = AddAllocation(Marshal.SizeOf(typeof(T)), from);
	}

	internal static void Set<T>(T[] from, ref IntPtr to, bool isArrayItemAllocated)
	{
		Dispose(ref to);
		to = AddAllocation(from, isArrayItemAllocated);
	}

	internal static void Set(ArraySegment<byte> from, ref IntPtr to, out uint arrayLength)
	{
		to = AddPinnedBuffer(from);
		Get(from, out arrayLength);
	}

	internal static void Set<T>(T[] from, ref IntPtr to)
	{
		Set(from, ref to, !typeof(T).IsValueType);
	}

	internal static void Set<T>(T[] from, ref IntPtr to, bool isArrayItemAllocated, out int arrayLength)
	{
		Set(from, ref to, isArrayItemAllocated);
		Get(from, out arrayLength);
	}

	internal static void Set<T>(T[] from, ref IntPtr to, bool isArrayItemAllocated, out uint arrayLength)
	{
		Set(from, ref to, isArrayItemAllocated);
		Get(from, out arrayLength);
	}

	internal static void Set<T>(T[] from, ref IntPtr to, out int arrayLength)
	{
		Set(from, ref to, !typeof(T).IsValueType, out arrayLength);
	}

	internal static void Set<T>(T[] from, ref IntPtr to, out uint arrayLength)
	{
		Set(from, ref to, !typeof(T).IsValueType, out arrayLength);
	}

	internal static void Set(DateTimeOffset? from, ref long to)
	{
		Convert(from, out to);
	}

	internal static void Set(bool from, ref int to)
	{
		Convert(from, out to);
	}

	internal static void Set(string from, ref byte[] to, int stringLength)
	{
		Convert(from, out to, stringLength);
	}

	internal static void Set<T, TEnum>(T from, ref T to, TEnum fromEnum, ref TEnum toEnum, IDisposable disposable = null)
	{
		if (from != null)
		{
			Dispose(ref disposable);
			to = from;
			toEnum = fromEnum;
		}
	}

	internal static void Set<TFrom, TEnum, TTo>(ref TFrom from, ref TTo to, TEnum fromEnum, ref TEnum toEnum, IDisposable disposable = null) where TFrom : struct where TTo : struct, ISettable<TFrom>
	{
		Dispose(ref disposable);
		Set(ref from, ref to);
		toEnum = fromEnum;
	}

	internal static void Set<T, TEnum>(T? from, ref T to, TEnum fromEnum, ref TEnum toEnum, IDisposable disposable = null) where T : struct
	{
		if (from.HasValue)
		{
			Dispose(ref disposable);
			T from2 = from.Value;
			Helper.Set<T>(ref from2, ref to);
			toEnum = fromEnum;
		}
	}

	internal static void Set<TEnum>(Handle from, ref IntPtr to, TEnum fromEnum, ref TEnum toEnum, IDisposable disposable = null)
	{
		if (from != null)
		{
			Dispose(ref to);
			Dispose(ref disposable);
			Set(from, ref to);
			toEnum = fromEnum;
		}
	}

	internal static void Set<TEnum>(Utf8String from, ref IntPtr to, TEnum fromEnum, ref TEnum toEnum, IDisposable disposable = null)
	{
		if (from != null)
		{
			Dispose(ref to);
			Dispose(ref disposable);
			Set(from, ref to);
			toEnum = fromEnum;
		}
	}

	internal static void Set<TEnum>(bool? from, ref int to, TEnum fromEnum, ref TEnum toEnum, IDisposable disposable = null)
	{
		if (from.HasValue)
		{
			Dispose(ref disposable);
			Set(from.Value, ref to);
			toEnum = fromEnum;
		}
	}

	internal static void Set<TFrom, TIntermediate>(ref TFrom from, ref IntPtr to) where TFrom : struct where TIntermediate : struct, ISettable<TFrom>
	{
		TIntermediate cache = new TIntermediate();
		cache.Set(ref from);
		Dispose(ref to);
		to = AddAllocation(Marshal.SizeOf(typeof(TIntermediate)), cache);
	}

	internal static void Set<TFrom, TIntermediate>(ref TFrom? from, ref IntPtr to) where TFrom : struct where TIntermediate : struct, ISettable<TFrom>
	{
		Dispose(ref to);
		if (from.HasValue)
		{
			TIntermediate cache = default(TIntermediate);
			TFrom other = from.Value;
			cache.Set(ref other);
			to = AddAllocation(Marshal.SizeOf(typeof(TIntermediate)), cache);
		}
	}

	internal static void Set<TFrom, TTo>(ref TFrom from, ref TTo to) where TFrom : struct where TTo : struct, ISettable<TFrom>
	{
		to.Set(ref from);
	}

	internal static void Set<TFrom, TIntermediate>(ref TFrom[] from, ref IntPtr to, out int arrayLength) where TFrom : struct where TIntermediate : struct, ISettable<TFrom>
	{
		arrayLength = 0;
		if (from != null)
		{
			TIntermediate[] array = new TIntermediate[from.Length];
			for (int i = 0; i < from.Length; i++)
			{
				array[i].Set(ref from[i]);
			}
			Set(array, ref to);
			Get(from, out arrayLength);
		}
	}

	internal static void Set<TFrom, TIntermediate>(ref TFrom[] from, ref IntPtr to, out uint arrayLength) where TFrom : struct where TIntermediate : struct, ISettable<TFrom>
	{
		Set<TFrom, TIntermediate>(ref from, ref to, out int arrayLength2);
		arrayLength = (uint)arrayLength2;
	}
}


using System.Runtime.InteropServices;

public static class Config
{
	public const string LibraryName = "libEOSSDK-Linux-Shipping";

	public const CallingConvention LibraryCallingConvention = CallingConvention.Cdecl;
}


using System;
using Epic.OnlineServices;

public static class Extensions
{
	public static bool IsOperationComplete(this Result result)
	{
		return Common.IsOperationComplete(result);
	}

	public static string ToHexString(this byte[] byteArray)
	{
		return Common.ToString(new ArraySegment<byte>(byteArray));
	}
}


using System;
using Epic.OnlineServices;

public abstract class Handle : IEquatable<Handle>, IFormattable
{
	public IntPtr InnerHandle { get; internal set; }

	public Handle()
	{
	}

	public Handle(IntPtr innerHandle)
	{
		InnerHandle = innerHandle;
	}

	public static bool operator ==(Handle left, Handle right)
	{
		if ((object)left == null)
		{
			if ((object)right == null)
			{
				return true;
			}
			return false;
		}
		return left.Equals(right);
	}

	public static bool operator !=(Handle left, Handle right)
	{
		return !(left == right);
	}

	public override bool Equals(object obj)
	{
		return Equals(obj as Handle);
	}

	public override int GetHashCode()
	{
		return (int)(65536 + InnerHandle.ToInt64());
	}

	public bool Equals(Handle other)
	{
		if ((object)other == null)
		{
			return false;
		}
		if ((object)this == other)
		{
			return true;
		}
		if (GetType() != other.GetType())
		{
			return false;
		}
		return InnerHandle == other.InnerHandle;
	}

	public override string ToString()
	{
		return InnerHandle.ToString();
	}

	public virtual string ToString(string format, IFormatProvider formatProvider)
	{
		if (format != null)
		{
			return InnerHandle.ToString(format);
		}
		return InnerHandle.ToString();
	}
}


using System;

internal class AllocationException : Exception
{
	public AllocationException(string message)
		: base(message)
	{
	}
}


using System;
using Epic.OnlineServices;

internal class ExternalAllocationException : AllocationException
{
	public ExternalAllocationException(IntPtr address, Type type)
		: base(string.Format("Attempting to allocate '{0}' over externally allocated memory at {1}", type, address.ToString("X")))
	{
	}
}


using System;
using Epic.OnlineServices;

internal class CachedTypeAllocationException : AllocationException
{
	public CachedTypeAllocationException(IntPtr address, Type foundType, Type expectedType)
		: base(string.Format("Cached allocation is '{0}' but expected '{1}' at {2}", foundType, expectedType, address.ToString("X")))
	{
	}
}


using System;
using Epic.OnlineServices;

internal class CachedArrayAllocationException : AllocationException
{
	public CachedArrayAllocationException(IntPtr address, int foundLength, int expectedLength)
		: base(string.Format("Cached array allocation has length {0} but expected {1} at {2}", foundLength, expectedLength, address.ToString("X")))
	{
	}
}


using System;

internal class DynamicBindingException : Exception
{
	public DynamicBindingException(string bindingName)
		: base($"Failed to hook dynamic binding for '{bindingName}'")
	{
	}
}


using Epic.OnlineServices;

internal interface ICallbackInfo
{
	object ClientData { get; }

	Result? GetResultCode();
}


using System;

internal interface ICallbackInfoInternal
{
	IntPtr ClientDataAddress { get; }
}


internal interface IGettable<T> where T : struct
{
	void Get(out T other);
}


internal interface ISettable<T> where T : struct
{
	void Set(ref T other);

	void Set(ref T? other);
}


using System;

[AttributeUsage(AttributeTargets.Method)]
internal sealed class MonoPInvokeCallbackAttribute : Attribute
{
	public MonoPInvokeCallbackAttribute(Type type)
	{
	}
}


using System;
using System.Diagnostics;
using System.Text;
using Epic.OnlineServices;

[DebuggerDisplay("{ToString()}")]
public sealed class Utf8String
{
	public static Utf8String EmptyString = new Utf8String();

	public int Length { get; private set; }

	public byte[] Bytes { get; private set; }

	private string Utf16
	{
		get
		{
			if (Length > 0)
			{
				return Encoding.UTF8.GetString(Bytes, 0, Length);
			}
			if (Bytes == null)
			{
				throw new Exception("Bytes array is null.");
			}
			if (Bytes.Length == 0 || Bytes[Bytes.Length - 1] != 0)
			{
				throw new Exception("Bytes array is not null terminated.");
			}
			return "";
		}
		set
		{
			if (value != null)
			{
				Bytes = new byte[Encoding.UTF8.GetMaxByteCount(value.Length) + 1];
				Length = Encoding.UTF8.GetBytes(value, 0, value.Length, Bytes, 0);
			}
			else
			{
				Length = 0;
			}
		}
	}

	public byte this[int index]
	{
		get
		{
			return Bytes[index];
		}
		set
		{
			Bytes[index] = value;
		}
	}

	public Utf8String()
	{
		Length = 0;
	}

	public Utf8String(byte[] bytes)
	{
		if (bytes == null)
		{
			throw new ArgumentNullException("bytes");
		}
		if (bytes.Length == 0 || bytes[^1] != 0)
		{
			throw new ArgumentException("Argument is not null terminated.", "bytes");
		}
		Bytes = bytes;
		Length = Bytes.Length - 1;
	}

	public Utf8String(string value)
	{
		Utf16 = value;
	}

	public static explicit operator Utf8String(byte[] bytes)
	{
		return new Utf8String(bytes);
	}

	public static explicit operator byte[](Utf8String u8str)
	{
		return u8str.Bytes;
	}

	public static implicit operator Utf8String(string str)
	{
		return new Utf8String(str);
	}

	public static implicit operator string(Utf8String u8str)
	{
		if (u8str != null)
		{
			return u8str.ToString();
		}
		return null;
	}

	public static Utf8String operator +(Utf8String left, Utf8String right)
	{
		byte[] array = new byte[left.Length + right.Length + 1];
		Buffer.BlockCopy(left.Bytes, 0, array, 0, left.Length);
		Buffer.BlockCopy(right.Bytes, 0, array, left.Length, right.Length + 1);
		return new Utf8String(array);
	}

	public static bool operator ==(Utf8String left, Utf8String right)
	{
		if ((object)left == null)
		{
			if ((object)right == null)
			{
				return true;
			}
			return false;
		}
		return left.Equals(right);
	}

	public static bool operator !=(Utf8String left, Utf8String right)
	{
		return !(left == right);
	}

	public override bool Equals(object obj)
	{
		if (!(obj is Utf8String utf8String))
		{
			return false;
		}
		if ((object)this == utf8String)
		{
			return true;
		}
		if (Length != utf8String.Length)
		{
			return false;
		}
		for (int i = 0; i < Length; i++)
		{
			if (this[i] != utf8String[i])
			{
				return false;
			}
		}
		return true;
	}

	public override string ToString()
	{
		return Utf16;
	}

	public override int GetHashCode()
	{
		return ToString().GetHashCode();
	}
}


using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

public static class AndroidBindings
{
	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Initialize(ref AndroidInitializeOptionsInternal options);
}


public enum AttributeType
{
	Boolean,
	Int64,
	Double,
	String
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Achievements;
using Epic.OnlineServices.AntiCheatClient;
using Epic.OnlineServices.AntiCheatCommon;
using Epic.OnlineServices.AntiCheatServer;
using Epic.OnlineServices.Auth;
using Epic.OnlineServices.Connect;
using Epic.OnlineServices.CustomInvites;
using Epic.OnlineServices.Ecom;
using Epic.OnlineServices.Friends;
using Epic.OnlineServices.IntegratedPlatform;
using Epic.OnlineServices.KWS;
using Epic.OnlineServices.Leaderboards;
using Epic.OnlineServices.Lobby;
using Epic.OnlineServices.Logging;
using Epic.OnlineServices.Metrics;
using Epic.OnlineServices.Mods;
using Epic.OnlineServices.P2P;
using Epic.OnlineServices.Platform;
using Epic.OnlineServices.PlayerDataStorage;
using Epic.OnlineServices.Presence;
using Epic.OnlineServices.ProgressionSnapshot;
using Epic.OnlineServices.Reports;
using Epic.OnlineServices.RTC;
using Epic.OnlineServices.RTCAdmin;
using Epic.OnlineServices.RTCAudio;
using Epic.OnlineServices.RTCData;
using Epic.OnlineServices.Sanctions;
using Epic.OnlineServices.Sessions;
using Epic.OnlineServices.Stats;
using Epic.OnlineServices.TitleStorage;
using Epic.OnlineServices.UI;
using Epic.OnlineServices.UserInfo;

public static class Bindings
{
	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Achievements_AddNotifyAchievementsUnlocked(IntPtr handle, ref AddNotifyAchievementsUnlockedOptionsInternal options, IntPtr clientData, OnAchievementsUnlockedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Achievements_AddNotifyAchievementsUnlockedV2(IntPtr handle, ref AddNotifyAchievementsUnlockedV2OptionsInternal options, IntPtr clientData, OnAchievementsUnlockedCallbackV2Internal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyAchievementDefinitionByAchievementId(IntPtr handle, ref CopyAchievementDefinitionByAchievementIdOptionsInternal options, ref IntPtr outDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyAchievementDefinitionByIndex(IntPtr handle, ref CopyAchievementDefinitionByIndexOptionsInternal options, ref IntPtr outDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(IntPtr handle, ref CopyAchievementDefinitionV2ByAchievementIdOptionsInternal options, ref IntPtr outDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyAchievementDefinitionV2ByIndex(IntPtr handle, ref CopyAchievementDefinitionV2ByIndexOptionsInternal options, ref IntPtr outDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyPlayerAchievementByAchievementId(IntPtr handle, ref CopyPlayerAchievementByAchievementIdOptionsInternal options, ref IntPtr outAchievement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyPlayerAchievementByIndex(IntPtr handle, ref CopyPlayerAchievementByIndexOptionsInternal options, ref IntPtr outAchievement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyUnlockedAchievementByAchievementId(IntPtr handle, ref CopyUnlockedAchievementByAchievementIdOptionsInternal options, ref IntPtr outAchievement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Achievements_CopyUnlockedAchievementByIndex(IntPtr handle, ref CopyUnlockedAchievementByIndexOptionsInternal options, ref IntPtr outAchievement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_DefinitionV2_Release(IntPtr achievementDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_Definition_Release(IntPtr achievementDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Achievements_GetAchievementDefinitionCount(IntPtr handle, ref GetAchievementDefinitionCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Achievements_GetPlayerAchievementCount(IntPtr handle, ref GetPlayerAchievementCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Achievements_GetUnlockedAchievementCount(IntPtr handle, ref GetUnlockedAchievementCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_PlayerAchievement_Release(IntPtr achievement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_QueryDefinitions(IntPtr handle, ref QueryDefinitionsOptionsInternal options, IntPtr clientData, OnQueryDefinitionsCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_QueryPlayerAchievements(IntPtr handle, ref QueryPlayerAchievementsOptionsInternal options, IntPtr clientData, OnQueryPlayerAchievementsCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_RemoveNotifyAchievementsUnlocked(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_UnlockAchievements(IntPtr handle, ref UnlockAchievementsOptionsInternal options, IntPtr clientData, OnUnlockAchievementsCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Achievements_UnlockedAchievement_Release(IntPtr achievement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ActiveSession_CopyInfo(IntPtr handle, ref ActiveSessionCopyInfoOptionsInternal options, ref IntPtr outActiveSessionInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_ActiveSession_GetRegisteredPlayerByIndex(IntPtr handle, ref ActiveSessionGetRegisteredPlayerByIndexOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_ActiveSession_GetRegisteredPlayerCount(IntPtr handle, ref ActiveSessionGetRegisteredPlayerCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_ActiveSession_Info_Release(IntPtr activeSessionInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_ActiveSession_Release(IntPtr activeSessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_AddExternalIntegrityCatalog(IntPtr handle, ref AddExternalIntegrityCatalogOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatClient_AddNotifyClientIntegrityViolated(IntPtr handle, ref AddNotifyClientIntegrityViolatedOptionsInternal options, IntPtr clientData, OnClientIntegrityViolatedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatClient_AddNotifyMessageToPeer(IntPtr handle, ref AddNotifyMessageToPeerOptionsInternal options, IntPtr clientData, OnMessageToPeerCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatClient_AddNotifyMessageToServer(IntPtr handle, ref AddNotifyMessageToServerOptionsInternal options, IntPtr clientData, OnMessageToServerCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatClient_AddNotifyPeerActionRequired(IntPtr handle, ref AddNotifyPeerActionRequiredOptionsInternal options, IntPtr clientData, OnPeerActionRequiredCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(IntPtr handle, ref AddNotifyPeerAuthStatusChangedOptionsInternal options, IntPtr clientData, OnPeerAuthStatusChangedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_BeginSession(IntPtr handle, ref Epic.OnlineServices.AntiCheatClient.BeginSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_EndSession(IntPtr handle, ref Epic.OnlineServices.AntiCheatClient.EndSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_GetProtectMessageOutputLength(IntPtr handle, ref Epic.OnlineServices.AntiCheatClient.GetProtectMessageOutputLengthOptionsInternal options, ref uint outBufferSizeBytes);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_PollStatus(IntPtr handle, ref PollStatusOptionsInternal options, ref AntiCheatClientViolationType outViolationType, IntPtr outMessage);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_ProtectMessage(IntPtr handle, ref Epic.OnlineServices.AntiCheatClient.ProtectMessageOptionsInternal options, IntPtr outBuffer, ref uint outBytesWritten);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_ReceiveMessageFromPeer(IntPtr handle, ref ReceiveMessageFromPeerOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_ReceiveMessageFromServer(IntPtr handle, ref ReceiveMessageFromServerOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_RegisterPeer(IntPtr handle, ref RegisterPeerOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatClient_RemoveNotifyClientIntegrityViolated(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatClient_RemoveNotifyMessageToPeer(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatClient_RemoveNotifyMessageToServer(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_UnprotectMessage(IntPtr handle, ref Epic.OnlineServices.AntiCheatClient.UnprotectMessageOptionsInternal options, IntPtr outBuffer, ref uint outBytesWritten);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatClient_UnregisterPeer(IntPtr handle, ref UnregisterPeerOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatServer_AddNotifyClientActionRequired(IntPtr handle, ref AddNotifyClientActionRequiredOptionsInternal options, IntPtr clientData, OnClientActionRequiredCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(IntPtr handle, ref AddNotifyClientAuthStatusChangedOptionsInternal options, IntPtr clientData, OnClientAuthStatusChangedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_AntiCheatServer_AddNotifyMessageToClient(IntPtr handle, ref AddNotifyMessageToClientOptionsInternal options, IntPtr clientData, OnMessageToClientCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_BeginSession(IntPtr handle, ref Epic.OnlineServices.AntiCheatServer.BeginSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_EndSession(IntPtr handle, ref Epic.OnlineServices.AntiCheatServer.EndSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_GetProtectMessageOutputLength(IntPtr handle, ref Epic.OnlineServices.AntiCheatServer.GetProtectMessageOutputLengthOptionsInternal options, ref uint outBufferSizeBytes);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogEvent(IntPtr handle, ref LogEventOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogGameRoundEnd(IntPtr handle, ref LogGameRoundEndOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogGameRoundStart(IntPtr handle, ref LogGameRoundStartOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerDespawn(IntPtr handle, ref LogPlayerDespawnOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerRevive(IntPtr handle, ref LogPlayerReviveOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerSpawn(IntPtr handle, ref LogPlayerSpawnOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerTakeDamage(IntPtr handle, ref LogPlayerTakeDamageOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerTick(IntPtr handle, ref LogPlayerTickOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerUseAbility(IntPtr handle, ref LogPlayerUseAbilityOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_LogPlayerUseWeapon(IntPtr handle, ref LogPlayerUseWeaponOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_ProtectMessage(IntPtr handle, ref Epic.OnlineServices.AntiCheatServer.ProtectMessageOptionsInternal options, IntPtr outBuffer, ref uint outBytesWritten);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_ReceiveMessageFromClient(IntPtr handle, ref ReceiveMessageFromClientOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_RegisterClient(IntPtr handle, ref RegisterClientOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_RegisterEvent(IntPtr handle, ref RegisterEventOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatServer_RemoveNotifyClientActionRequired(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_AntiCheatServer_RemoveNotifyMessageToClient(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_SetClientDetails(IntPtr handle, ref SetClientDetailsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_SetClientNetworkState(IntPtr handle, ref SetClientNetworkStateOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_SetGameSessionId(IntPtr handle, ref SetGameSessionIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_UnprotectMessage(IntPtr handle, ref Epic.OnlineServices.AntiCheatServer.UnprotectMessageOptionsInternal options, IntPtr outBuffer, ref uint outBytesWritten);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_AntiCheatServer_UnregisterClient(IntPtr handle, ref UnregisterClientOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Auth_AddNotifyLoginStatusChanged(IntPtr handle, ref Epic.OnlineServices.Auth.AddNotifyLoginStatusChangedOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Auth.OnLoginStatusChangedCallbackInternal notification);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Auth_CopyIdToken(IntPtr handle, ref Epic.OnlineServices.Auth.CopyIdTokenOptionsInternal options, ref IntPtr outIdToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Auth_CopyUserAuthToken(IntPtr handle, ref CopyUserAuthTokenOptionsInternal options, IntPtr localUserId, ref IntPtr outUserAuthToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_DeletePersistentAuth(IntPtr handle, ref DeletePersistentAuthOptionsInternal options, IntPtr clientData, OnDeletePersistentAuthCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Auth_GetLoggedInAccountByIndex(IntPtr handle, int index);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_Auth_GetLoggedInAccountsCount(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern LoginStatus EOS_Auth_GetLoginStatus(IntPtr handle, IntPtr localUserId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Auth_GetMergedAccountByIndex(IntPtr handle, IntPtr localUserId, uint index);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Auth_GetMergedAccountsCount(IntPtr handle, IntPtr localUserId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Auth_GetSelectedAccountId(IntPtr handle, IntPtr localUserId, ref IntPtr outSelectedAccountId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_IdToken_Release(IntPtr idToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_LinkAccount(IntPtr handle, ref Epic.OnlineServices.Auth.LinkAccountOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Auth.OnLinkAccountCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_Login(IntPtr handle, ref Epic.OnlineServices.Auth.LoginOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Auth.OnLoginCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_Logout(IntPtr handle, ref Epic.OnlineServices.Auth.LogoutOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Auth.OnLogoutCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_QueryIdToken(IntPtr handle, ref QueryIdTokenOptionsInternal options, IntPtr clientData, OnQueryIdTokenCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_RemoveNotifyLoginStatusChanged(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_Token_Release(IntPtr authToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_VerifyIdToken(IntPtr handle, ref Epic.OnlineServices.Auth.VerifyIdTokenOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Auth.OnVerifyIdTokenCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_VerifyUserAuth(IntPtr handle, ref VerifyUserAuthOptionsInternal options, IntPtr clientData, OnVerifyUserAuthCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ByteArray_ToString(IntPtr byteArray, uint length, IntPtr outBuffer, ref uint inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Connect_AddNotifyAuthExpiration(IntPtr handle, ref AddNotifyAuthExpirationOptionsInternal options, IntPtr clientData, OnAuthExpirationCallbackInternal notification);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Connect_AddNotifyLoginStatusChanged(IntPtr handle, ref Epic.OnlineServices.Connect.AddNotifyLoginStatusChangedOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Connect.OnLoginStatusChangedCallbackInternal notification);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Connect_CopyIdToken(IntPtr handle, ref Epic.OnlineServices.Connect.CopyIdTokenOptionsInternal options, ref IntPtr outIdToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Connect_CopyProductUserExternalAccountByAccountId(IntPtr handle, ref CopyProductUserExternalAccountByAccountIdOptionsInternal options, ref IntPtr outExternalAccountInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Connect_CopyProductUserExternalAccountByAccountType(IntPtr handle, ref CopyProductUserExternalAccountByAccountTypeOptionsInternal options, ref IntPtr outExternalAccountInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Connect_CopyProductUserExternalAccountByIndex(IntPtr handle, ref CopyProductUserExternalAccountByIndexOptionsInternal options, ref IntPtr outExternalAccountInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Connect_CopyProductUserInfo(IntPtr handle, ref CopyProductUserInfoOptionsInternal options, ref IntPtr outExternalAccountInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_CreateDeviceId(IntPtr handle, ref CreateDeviceIdOptionsInternal options, IntPtr clientData, OnCreateDeviceIdCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_CreateUser(IntPtr handle, ref Epic.OnlineServices.Connect.CreateUserOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Connect.OnCreateUserCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_DeleteDeviceId(IntPtr handle, ref DeleteDeviceIdOptionsInternal options, IntPtr clientData, OnDeleteDeviceIdCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_ExternalAccountInfo_Release(IntPtr externalAccountInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Connect_GetExternalAccountMapping(IntPtr handle, ref GetExternalAccountMappingsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Connect_GetLoggedInUserByIndex(IntPtr handle, int index);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_Connect_GetLoggedInUsersCount(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern LoginStatus EOS_Connect_GetLoginStatus(IntPtr handle, IntPtr localUserId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Connect_GetProductUserExternalAccountCount(IntPtr handle, ref GetProductUserExternalAccountCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Connect_GetProductUserIdMapping(IntPtr handle, ref GetProductUserIdMappingOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_IdToken_Release(IntPtr idToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_LinkAccount(IntPtr handle, ref Epic.OnlineServices.Connect.LinkAccountOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Connect.OnLinkAccountCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_Login(IntPtr handle, ref Epic.OnlineServices.Connect.LoginOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Connect.OnLoginCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_Logout(IntPtr handle, ref Epic.OnlineServices.Connect.LogoutOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Connect.OnLogoutCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_QueryExternalAccountMappings(IntPtr handle, ref QueryExternalAccountMappingsOptionsInternal options, IntPtr clientData, OnQueryExternalAccountMappingsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_QueryProductUserIdMappings(IntPtr handle, ref QueryProductUserIdMappingsOptionsInternal options, IntPtr clientData, OnQueryProductUserIdMappingsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_RemoveNotifyAuthExpiration(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_RemoveNotifyLoginStatusChanged(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_TransferDeviceIdAccount(IntPtr handle, ref TransferDeviceIdAccountOptionsInternal options, IntPtr clientData, OnTransferDeviceIdAccountCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_UnlinkAccount(IntPtr handle, ref UnlinkAccountOptionsInternal options, IntPtr clientData, OnUnlinkAccountCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Connect_VerifyIdToken(IntPtr handle, ref Epic.OnlineServices.Connect.VerifyIdTokenOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Connect.OnVerifyIdTokenCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ContinuanceToken_ToString(IntPtr continuanceToken, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_AcceptRequestToJoin(IntPtr handle, ref AcceptRequestToJoinOptionsInternal options, IntPtr clientData, OnAcceptRequestToJoinCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyCustomInviteAccepted(IntPtr handle, ref AddNotifyCustomInviteAcceptedOptionsInternal options, IntPtr clientData, OnCustomInviteAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyCustomInviteReceived(IntPtr handle, ref AddNotifyCustomInviteReceivedOptionsInternal options, IntPtr clientData, OnCustomInviteReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyCustomInviteRejected(IntPtr handle, ref AddNotifyCustomInviteRejectedOptionsInternal options, IntPtr clientData, OnCustomInviteRejectedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinAccepted(IntPtr handle, ref AddNotifyRequestToJoinAcceptedOptionsInternal options, IntPtr clientData, OnRequestToJoinAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinReceived(IntPtr handle, ref AddNotifyRequestToJoinReceivedOptionsInternal options, IntPtr clientData, OnRequestToJoinReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinRejected(IntPtr handle, ref AddNotifyRequestToJoinRejectedOptionsInternal options, IntPtr clientData, OnRequestToJoinRejectedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifyRequestToJoinResponseReceived(IntPtr handle, ref AddNotifyRequestToJoinResponseReceivedOptionsInternal options, IntPtr clientData, OnRequestToJoinResponseReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_CustomInvites_AddNotifySendCustomNativeInviteRequested(IntPtr handle, ref AddNotifySendCustomNativeInviteRequestedOptionsInternal options, IntPtr clientData, OnSendCustomNativeInviteRequestedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_CustomInvites_FinalizeInvite(IntPtr handle, ref FinalizeInviteOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RejectRequestToJoin(IntPtr handle, ref RejectRequestToJoinOptionsInternal options, IntPtr clientData, OnRejectRequestToJoinCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyCustomInviteAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyCustomInviteReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyCustomInviteRejected(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinRejected(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifyRequestToJoinResponseReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_RemoveNotifySendCustomNativeInviteRequested(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_SendCustomInvite(IntPtr handle, ref SendCustomInviteOptionsInternal options, IntPtr clientData, OnSendCustomInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_CustomInvites_SendRequestToJoin(IntPtr handle, ref SendRequestToJoinOptionsInternal options, IntPtr clientData, OnSendRequestToJoinCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_CustomInvites_SetCustomInvite(IntPtr handle, ref SetCustomInviteOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_EApplicationStatus_ToString(ApplicationStatus applicationStatus);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_ENetworkStatus_ToString(NetworkStatus networkStatus);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_EResult_IsOperationComplete(Result result);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_EResult_ToString(Result result);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_CatalogItem_Release(IntPtr catalogItem);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_CatalogOffer_Release(IntPtr catalogOffer);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_CatalogRelease_Release(IntPtr catalogRelease);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_Checkout(IntPtr handle, ref CheckoutOptionsInternal options, IntPtr clientData, OnCheckoutCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyEntitlementById(IntPtr handle, ref CopyEntitlementByIdOptionsInternal options, ref IntPtr outEntitlement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyEntitlementByIndex(IntPtr handle, ref CopyEntitlementByIndexOptionsInternal options, ref IntPtr outEntitlement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyEntitlementByNameAndIndex(IntPtr handle, ref CopyEntitlementByNameAndIndexOptionsInternal options, ref IntPtr outEntitlement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyItemById(IntPtr handle, ref CopyItemByIdOptionsInternal options, ref IntPtr outItem);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyItemImageInfoByIndex(IntPtr handle, ref CopyItemImageInfoByIndexOptionsInternal options, ref IntPtr outImageInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyItemReleaseByIndex(IntPtr handle, ref CopyItemReleaseByIndexOptionsInternal options, ref IntPtr outRelease);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyLastRedeemedEntitlementByIndex(IntPtr handle, ref CopyLastRedeemedEntitlementByIndexOptionsInternal options, IntPtr outRedeemedEntitlementId, ref int inOutRedeemedEntitlementIdLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyOfferById(IntPtr handle, ref CopyOfferByIdOptionsInternal options, ref IntPtr outOffer);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyOfferByIndex(IntPtr handle, ref CopyOfferByIndexOptionsInternal options, ref IntPtr outOffer);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyOfferImageInfoByIndex(IntPtr handle, ref CopyOfferImageInfoByIndexOptionsInternal options, ref IntPtr outImageInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyOfferItemByIndex(IntPtr handle, ref CopyOfferItemByIndexOptionsInternal options, ref IntPtr outItem);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyTransactionById(IntPtr handle, ref CopyTransactionByIdOptionsInternal options, ref IntPtr outTransaction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_CopyTransactionByIndex(IntPtr handle, ref CopyTransactionByIndexOptionsInternal options, ref IntPtr outTransaction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_Entitlement_Release(IntPtr entitlement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetEntitlementsByNameCount(IntPtr handle, ref GetEntitlementsByNameCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetEntitlementsCount(IntPtr handle, ref GetEntitlementsCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetItemImageInfoCount(IntPtr handle, ref GetItemImageInfoCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetItemReleaseCount(IntPtr handle, ref GetItemReleaseCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetLastRedeemedEntitlementsCount(IntPtr handle, ref GetLastRedeemedEntitlementsCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetOfferCount(IntPtr handle, ref GetOfferCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetOfferImageInfoCount(IntPtr handle, ref GetOfferImageInfoCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetOfferItemCount(IntPtr handle, ref GetOfferItemCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_GetTransactionCount(IntPtr handle, ref GetTransactionCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_KeyImageInfo_Release(IntPtr keyImageInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_QueryEntitlementToken(IntPtr handle, ref QueryEntitlementTokenOptionsInternal options, IntPtr clientData, OnQueryEntitlementTokenCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_QueryEntitlements(IntPtr handle, ref QueryEntitlementsOptionsInternal options, IntPtr clientData, OnQueryEntitlementsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_QueryOffers(IntPtr handle, ref QueryOffersOptionsInternal options, IntPtr clientData, OnQueryOffersCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_QueryOwnership(IntPtr handle, ref QueryOwnershipOptionsInternal options, IntPtr clientData, OnQueryOwnershipCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_QueryOwnershipBySandboxIds(IntPtr handle, ref QueryOwnershipBySandboxIdsOptionsInternal options, IntPtr clientData, OnQueryOwnershipBySandboxIdsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_QueryOwnershipToken(IntPtr handle, ref QueryOwnershipTokenOptionsInternal options, IntPtr clientData, OnQueryOwnershipTokenCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_RedeemEntitlements(IntPtr handle, ref RedeemEntitlementsOptionsInternal options, IntPtr clientData, OnRedeemEntitlementsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_Transaction_CopyEntitlementByIndex(IntPtr handle, ref TransactionCopyEntitlementByIndexOptionsInternal options, ref IntPtr outEntitlement);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Ecom_Transaction_GetEntitlementsCount(IntPtr handle, ref TransactionGetEntitlementsCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Ecom_Transaction_GetTransactionId(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Ecom_Transaction_Release(IntPtr transaction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_EpicAccountId_FromString(IntPtr accountIdString);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_EpicAccountId_IsValid(IntPtr accountId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_EpicAccountId_ToString(IntPtr accountId, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Friends_AcceptInvite(IntPtr handle, ref AcceptInviteOptionsInternal options, IntPtr clientData, OnAcceptInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Friends_AddNotifyBlockedUsersUpdate(IntPtr handle, ref AddNotifyBlockedUsersUpdateOptionsInternal options, IntPtr clientData, OnBlockedUsersUpdateCallbackInternal blockedUsersUpdateHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Friends_AddNotifyFriendsUpdate(IntPtr handle, ref AddNotifyFriendsUpdateOptionsInternal options, IntPtr clientData, OnFriendsUpdateCallbackInternal friendsUpdateHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Friends_GetBlockedUserAtIndex(IntPtr handle, ref GetBlockedUserAtIndexOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_Friends_GetBlockedUsersCount(IntPtr handle, ref GetBlockedUsersCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Friends_GetFriendAtIndex(IntPtr handle, ref GetFriendAtIndexOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_Friends_GetFriendsCount(IntPtr handle, ref GetFriendsCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern FriendsStatus EOS_Friends_GetStatus(IntPtr handle, ref GetStatusOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Friends_QueryFriends(IntPtr handle, ref QueryFriendsOptionsInternal options, IntPtr clientData, OnQueryFriendsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Friends_RejectInvite(IntPtr handle, ref Epic.OnlineServices.Friends.RejectInviteOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Friends.OnRejectInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Friends_RemoveNotifyBlockedUsersUpdate(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Friends_RemoveNotifyFriendsUpdate(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Friends_SendInvite(IntPtr handle, ref Epic.OnlineServices.Friends.SendInviteOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Friends.OnSendInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_GetVersion();

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Initialize(ref InitializeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_IntegratedPlatformOptionsContainer_Add(IntPtr handle, ref IntegratedPlatformOptionsContainerAddOptionsInternal inOptions);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_IntegratedPlatformOptionsContainer_Release(IntPtr integratedPlatformOptionsContainerHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_IntegratedPlatform_AddNotifyUserLoginStatusChanged(IntPtr handle, ref AddNotifyUserLoginStatusChangedOptionsInternal options, IntPtr clientData, OnUserLoginStatusChangedCallbackInternal callbackFunction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_IntegratedPlatform_ClearUserPreLogoutCallback(IntPtr handle, ref ClearUserPreLogoutCallbackOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_IntegratedPlatform_CreateIntegratedPlatformOptionsContainer(ref CreateIntegratedPlatformOptionsContainerOptionsInternal options, ref IntPtr outIntegratedPlatformOptionsContainerHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_IntegratedPlatform_FinalizeDeferredUserLogout(IntPtr handle, ref FinalizeDeferredUserLogoutOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_IntegratedPlatform_RemoveNotifyUserLoginStatusChanged(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_IntegratedPlatform_SetUserLoginStatus(IntPtr handle, ref SetUserLoginStatusOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_IntegratedPlatform_SetUserPreLogoutCallback(IntPtr handle, ref SetUserPreLogoutCallbackOptionsInternal options, IntPtr clientData, OnUserPreLogoutCallbackInternal callbackFunction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_KWS_AddNotifyPermissionsUpdateReceived(IntPtr handle, ref AddNotifyPermissionsUpdateReceivedOptionsInternal options, IntPtr clientData, OnPermissionsUpdateReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_KWS_CopyPermissionByIndex(IntPtr handle, ref CopyPermissionByIndexOptionsInternal options, ref IntPtr outPermission);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_CreateUser(IntPtr handle, ref Epic.OnlineServices.KWS.CreateUserOptionsInternal options, IntPtr clientData, Epic.OnlineServices.KWS.OnCreateUserCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_KWS_GetPermissionByKey(IntPtr handle, ref GetPermissionByKeyOptionsInternal options, ref KWSPermissionStatus outPermission);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_KWS_GetPermissionsCount(IntPtr handle, ref GetPermissionsCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_PermissionStatus_Release(IntPtr permissionStatus);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_QueryAgeGate(IntPtr handle, ref QueryAgeGateOptionsInternal options, IntPtr clientData, OnQueryAgeGateCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_QueryPermissions(IntPtr handle, ref QueryPermissionsOptionsInternal options, IntPtr clientData, OnQueryPermissionsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_RemoveNotifyPermissionsUpdateReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_RequestPermissions(IntPtr handle, ref RequestPermissionsOptionsInternal options, IntPtr clientData, OnRequestPermissionsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_KWS_UpdateParentEmail(IntPtr handle, ref UpdateParentEmailOptionsInternal options, IntPtr clientData, OnUpdateParentEmailCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(IntPtr handle, ref CopyLeaderboardDefinitionByIndexOptionsInternal options, ref IntPtr outLeaderboardDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(IntPtr handle, ref CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal options, ref IntPtr outLeaderboardDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Leaderboards_CopyLeaderboardRecordByIndex(IntPtr handle, ref CopyLeaderboardRecordByIndexOptionsInternal options, ref IntPtr outLeaderboardRecord);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Leaderboards_CopyLeaderboardRecordByUserId(IntPtr handle, ref CopyLeaderboardRecordByUserIdOptionsInternal options, ref IntPtr outLeaderboardRecord);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(IntPtr handle, ref CopyLeaderboardUserScoreByIndexOptionsInternal options, ref IntPtr outLeaderboardUserScore);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(IntPtr handle, ref CopyLeaderboardUserScoreByUserIdOptionsInternal options, ref IntPtr outLeaderboardUserScore);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_Definition_Release(IntPtr leaderboardDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Leaderboards_GetLeaderboardDefinitionCount(IntPtr handle, ref GetLeaderboardDefinitionCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Leaderboards_GetLeaderboardRecordCount(IntPtr handle, ref GetLeaderboardRecordCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Leaderboards_GetLeaderboardUserScoreCount(IntPtr handle, ref GetLeaderboardUserScoreCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_LeaderboardDefinition_Release(IntPtr leaderboardDefinition);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_LeaderboardRecord_Release(IntPtr leaderboardRecord);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_LeaderboardUserScore_Release(IntPtr leaderboardUserScore);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_QueryLeaderboardDefinitions(IntPtr handle, ref QueryLeaderboardDefinitionsOptionsInternal options, IntPtr clientData, OnQueryLeaderboardDefinitionsCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_QueryLeaderboardRanks(IntPtr handle, ref QueryLeaderboardRanksOptionsInternal options, IntPtr clientData, OnQueryLeaderboardRanksCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Leaderboards_QueryLeaderboardUserScores(IntPtr handle, ref QueryLeaderboardUserScoresOptionsInternal options, IntPtr clientData, OnQueryLeaderboardUserScoresCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyDetails_CopyAttributeByIndex(IntPtr handle, ref LobbyDetailsCopyAttributeByIndexOptionsInternal options, ref IntPtr outAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyDetails_CopyAttributeByKey(IntPtr handle, ref LobbyDetailsCopyAttributeByKeyOptionsInternal options, ref IntPtr outAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyDetails_CopyInfo(IntPtr handle, ref LobbyDetailsCopyInfoOptionsInternal options, ref IntPtr outLobbyDetailsInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyDetails_CopyMemberAttributeByIndex(IntPtr handle, ref LobbyDetailsCopyMemberAttributeByIndexOptionsInternal options, ref IntPtr outAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyDetails_CopyMemberAttributeByKey(IntPtr handle, ref LobbyDetailsCopyMemberAttributeByKeyOptionsInternal options, ref IntPtr outAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyDetails_CopyMemberInfo(IntPtr handle, ref LobbyDetailsCopyMemberInfoOptionsInternal options, ref IntPtr outLobbyDetailsMemberInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_LobbyDetails_GetAttributeCount(IntPtr handle, ref LobbyDetailsGetAttributeCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_LobbyDetails_GetLobbyOwner(IntPtr handle, ref LobbyDetailsGetLobbyOwnerOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_LobbyDetails_GetMemberAttributeCount(IntPtr handle, ref LobbyDetailsGetMemberAttributeCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_LobbyDetails_GetMemberByIndex(IntPtr handle, ref LobbyDetailsGetMemberByIndexOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_LobbyDetails_GetMemberCount(IntPtr handle, ref LobbyDetailsGetMemberCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_LobbyDetails_Info_Release(IntPtr lobbyDetailsInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_LobbyDetails_MemberInfo_Release(IntPtr lobbyDetailsMemberInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_LobbyDetails_Release(IntPtr lobbyHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_AddAttribute(IntPtr handle, ref LobbyModificationAddAttributeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_AddMemberAttribute(IntPtr handle, ref LobbyModificationAddMemberAttributeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_LobbyModification_Release(IntPtr lobbyModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_RemoveAttribute(IntPtr handle, ref LobbyModificationRemoveAttributeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_RemoveMemberAttribute(IntPtr handle, ref LobbyModificationRemoveMemberAttributeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_SetAllowedPlatformIds(IntPtr handle, ref LobbyModificationSetAllowedPlatformIdsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_SetBucketId(IntPtr handle, ref LobbyModificationSetBucketIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_SetInvitesAllowed(IntPtr handle, ref LobbyModificationSetInvitesAllowedOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_SetMaxMembers(IntPtr handle, ref LobbyModificationSetMaxMembersOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbyModification_SetPermissionLevel(IntPtr handle, ref LobbyModificationSetPermissionLevelOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbySearch_CopySearchResultByIndex(IntPtr handle, ref LobbySearchCopySearchResultByIndexOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_LobbySearch_Find(IntPtr handle, ref LobbySearchFindOptionsInternal options, IntPtr clientData, LobbySearchOnFindCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_LobbySearch_GetSearchResultCount(IntPtr handle, ref LobbySearchGetSearchResultCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_LobbySearch_Release(IntPtr lobbySearchHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbySearch_RemoveParameter(IntPtr handle, ref LobbySearchRemoveParameterOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbySearch_SetLobbyId(IntPtr handle, ref LobbySearchSetLobbyIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbySearch_SetMaxResults(IntPtr handle, ref LobbySearchSetMaxResultsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbySearch_SetParameter(IntPtr handle, ref LobbySearchSetParameterOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_LobbySearch_SetTargetUserId(IntPtr handle, ref LobbySearchSetTargetUserIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyJoinLobbyAccepted(IntPtr handle, ref AddNotifyJoinLobbyAcceptedOptionsInternal options, IntPtr clientData, OnJoinLobbyAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLeaveLobbyRequested(IntPtr handle, ref AddNotifyLeaveLobbyRequestedOptionsInternal options, IntPtr clientData, OnLeaveLobbyRequestedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteAccepted(IntPtr handle, ref AddNotifyLobbyInviteAcceptedOptionsInternal options, IntPtr clientData, OnLobbyInviteAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteReceived(IntPtr handle, ref AddNotifyLobbyInviteReceivedOptionsInternal options, IntPtr clientData, OnLobbyInviteReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteRejected(IntPtr handle, ref AddNotifyLobbyInviteRejectedOptionsInternal options, IntPtr clientData, OnLobbyInviteRejectedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLobbyMemberStatusReceived(IntPtr handle, ref AddNotifyLobbyMemberStatusReceivedOptionsInternal options, IntPtr clientData, OnLobbyMemberStatusReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(IntPtr handle, ref AddNotifyLobbyMemberUpdateReceivedOptionsInternal options, IntPtr clientData, OnLobbyMemberUpdateReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyLobbyUpdateReceived(IntPtr handle, ref AddNotifyLobbyUpdateReceivedOptionsInternal options, IntPtr clientData, OnLobbyUpdateReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifyRTCRoomConnectionChanged(IntPtr handle, ref AddNotifyRTCRoomConnectionChangedOptionsInternal options, IntPtr clientData, OnRTCRoomConnectionChangedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Lobby_AddNotifySendLobbyNativeInviteRequested(IntPtr handle, ref AddNotifySendLobbyNativeInviteRequestedOptionsInternal options, IntPtr clientData, OnSendLobbyNativeInviteRequestedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_Attribute_Release(IntPtr lobbyAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_CopyLobbyDetailsHandle(IntPtr handle, ref CopyLobbyDetailsHandleOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_CopyLobbyDetailsHandleByInviteId(IntPtr handle, ref CopyLobbyDetailsHandleByInviteIdOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(IntPtr handle, ref CopyLobbyDetailsHandleByUiEventIdOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_CreateLobby(IntPtr handle, ref CreateLobbyOptionsInternal options, IntPtr clientData, OnCreateLobbyCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_CreateLobbySearch(IntPtr handle, ref CreateLobbySearchOptionsInternal options, ref IntPtr outLobbySearchHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_DestroyLobby(IntPtr handle, ref DestroyLobbyOptionsInternal options, IntPtr clientData, OnDestroyLobbyCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_GetConnectString(IntPtr handle, ref GetConnectStringOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Lobby_GetInviteCount(IntPtr handle, ref Epic.OnlineServices.Lobby.GetInviteCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_GetInviteIdByIndex(IntPtr handle, ref Epic.OnlineServices.Lobby.GetInviteIdByIndexOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_GetRTCRoomName(IntPtr handle, ref GetRTCRoomNameOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_HardMuteMember(IntPtr handle, ref HardMuteMemberOptionsInternal options, IntPtr clientData, OnHardMuteMemberCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_IsRTCRoomConnected(IntPtr handle, ref IsRTCRoomConnectedOptionsInternal options, ref int bOutIsConnected);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_JoinLobby(IntPtr handle, ref JoinLobbyOptionsInternal options, IntPtr clientData, OnJoinLobbyCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_JoinLobbyById(IntPtr handle, ref JoinLobbyByIdOptionsInternal options, IntPtr clientData, OnJoinLobbyByIdCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_KickMember(IntPtr handle, ref KickMemberOptionsInternal options, IntPtr clientData, OnKickMemberCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_LeaveLobby(IntPtr handle, ref LeaveLobbyOptionsInternal options, IntPtr clientData, OnLeaveLobbyCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_ParseConnectString(IntPtr handle, ref ParseConnectStringOptionsInternal options, IntPtr outBuffer, ref uint inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_PromoteMember(IntPtr handle, ref PromoteMemberOptionsInternal options, IntPtr clientData, OnPromoteMemberCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_QueryInvites(IntPtr handle, ref Epic.OnlineServices.Lobby.QueryInvitesOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Lobby.OnQueryInvitesCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RejectInvite(IntPtr handle, ref Epic.OnlineServices.Lobby.RejectInviteOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Lobby.OnRejectInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyJoinLobbyAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLeaveLobbyRequested(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteRejected(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyLobbyUpdateReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_RemoveNotifySendLobbyNativeInviteRequested(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_SendInvite(IntPtr handle, ref Epic.OnlineServices.Lobby.SendInviteOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Lobby.OnSendInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Lobby_UpdateLobby(IntPtr handle, ref UpdateLobbyOptionsInternal options, IntPtr clientData, OnUpdateLobbyCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Lobby_UpdateLobbyModification(IntPtr handle, ref UpdateLobbyModificationOptionsInternal options, ref IntPtr outLobbyModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Logging_SetCallback(LogMessageFuncInternal callback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Logging_SetLogLevel(LogCategory logCategory, LogLevel logLevel);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Metrics_BeginPlayerSession(IntPtr handle, ref BeginPlayerSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Metrics_EndPlayerSession(IntPtr handle, ref EndPlayerSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Mods_CopyModInfo(IntPtr handle, ref CopyModInfoOptionsInternal options, ref IntPtr outEnumeratedMods);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Mods_EnumerateMods(IntPtr handle, ref EnumerateModsOptionsInternal options, IntPtr clientData, OnEnumerateModsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Mods_InstallMod(IntPtr handle, ref InstallModOptionsInternal options, IntPtr clientData, OnInstallModCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Mods_ModInfo_Release(IntPtr modInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Mods_UninstallMod(IntPtr handle, ref UninstallModOptionsInternal options, IntPtr clientData, OnUninstallModCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Mods_UpdateMod(IntPtr handle, ref UpdateModOptionsInternal options, IntPtr clientData, OnUpdateModCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_AcceptConnection(IntPtr handle, ref AcceptConnectionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_P2P_AddNotifyIncomingPacketQueueFull(IntPtr handle, ref AddNotifyIncomingPacketQueueFullOptionsInternal options, IntPtr clientData, OnIncomingPacketQueueFullCallbackInternal incomingPacketQueueFullHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_P2P_AddNotifyPeerConnectionClosed(IntPtr handle, ref AddNotifyPeerConnectionClosedOptionsInternal options, IntPtr clientData, OnRemoteConnectionClosedCallbackInternal connectionClosedHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_P2P_AddNotifyPeerConnectionEstablished(IntPtr handle, ref AddNotifyPeerConnectionEstablishedOptionsInternal options, IntPtr clientData, OnPeerConnectionEstablishedCallbackInternal connectionEstablishedHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_P2P_AddNotifyPeerConnectionInterrupted(IntPtr handle, ref AddNotifyPeerConnectionInterruptedOptionsInternal options, IntPtr clientData, OnPeerConnectionInterruptedCallbackInternal connectionInterruptedHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_P2P_AddNotifyPeerConnectionRequest(IntPtr handle, ref AddNotifyPeerConnectionRequestOptionsInternal options, IntPtr clientData, OnIncomingConnectionRequestCallbackInternal connectionRequestHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_ClearPacketQueue(IntPtr handle, ref ClearPacketQueueOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_CloseConnection(IntPtr handle, ref CloseConnectionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_CloseConnections(IntPtr handle, ref CloseConnectionsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_GetNATType(IntPtr handle, ref GetNATTypeOptionsInternal options, ref NATType outNATType);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_GetNextReceivedPacketSize(IntPtr handle, ref GetNextReceivedPacketSizeOptionsInternal options, ref uint outPacketSizeBytes);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_GetPacketQueueInfo(IntPtr handle, ref GetPacketQueueInfoOptionsInternal options, ref PacketQueueInfoInternal outPacketQueueInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_GetPortRange(IntPtr handle, ref GetPortRangeOptionsInternal options, ref ushort outPort, ref ushort outNumAdditionalPortsToTry);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_GetRelayControl(IntPtr handle, ref GetRelayControlOptionsInternal options, ref RelayControl outRelayControl);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_P2P_QueryNATType(IntPtr handle, ref QueryNATTypeOptionsInternal options, IntPtr clientData, OnQueryNATTypeCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_P2P_RemoveNotifyIncomingPacketQueueFull(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_P2P_RemoveNotifyPeerConnectionClosed(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_P2P_RemoveNotifyPeerConnectionEstablished(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_P2P_RemoveNotifyPeerConnectionInterrupted(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_P2P_RemoveNotifyPeerConnectionRequest(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_SendPacket(IntPtr handle, ref SendPacketOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_SetPacketQueueSize(IntPtr handle, ref SetPacketQueueSizeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_SetPortRange(IntPtr handle, ref SetPortRangeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_SetRelayControl(IntPtr handle, ref SetRelayControlOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_CheckForLauncherAndRestart(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_Create(ref Epic.OnlineServices.Platform.OptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetAchievementsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_GetActiveCountryCode(IntPtr handle, IntPtr localUserId, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_GetActiveLocaleCode(IntPtr handle, IntPtr localUserId, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetAntiCheatClientInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetAntiCheatServerInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ApplicationStatus EOS_Platform_GetApplicationStatus(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetAuthInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetConnectInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetCustomInvitesInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_GetDesktopCrossplayStatus(IntPtr handle, ref GetDesktopCrossplayStatusOptionsInternal options, ref DesktopCrossplayStatusInfoInternal outDesktopCrossplayStatusInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetEcomInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetFriendsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetIntegratedPlatformInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetKWSInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetLeaderboardsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetLobbyInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetMetricsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetModsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern NetworkStatus EOS_Platform_GetNetworkStatus(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_GetOverrideCountryCode(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_GetOverrideLocaleCode(IntPtr handle, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetP2PInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetPlayerDataStorageInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetPresenceInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetProgressionSnapshotInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetRTCAdminInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetRTCInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetReportsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetSanctionsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetSessionsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetStatsInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetTitleStorageInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetUIInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_GetUserInfoInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Platform_Release(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_SetApplicationStatus(IntPtr handle, ApplicationStatus newStatus);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_SetNetworkStatus(IntPtr handle, NetworkStatus newStatus);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_SetOverrideCountryCode(IntPtr handle, IntPtr newCountryCode);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Platform_SetOverrideLocaleCode(IntPtr handle, IntPtr newLocaleCode);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Platform_Tick(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorageFileTransferRequest_CancelRequest(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorageFileTransferRequest_GetFilename(IntPtr handle, uint filenameStringBufferSizeBytes, IntPtr outStringBuffer, ref int outStringLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PlayerDataStorageFileTransferRequest_Release(IntPtr playerDataStorageFileTransferHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorage_CopyFileMetadataAtIndex(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.CopyFileMetadataAtIndexOptionsInternal copyFileMetadataOptions, ref IntPtr outMetadata);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorage_CopyFileMetadataByFilename(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.CopyFileMetadataByFilenameOptionsInternal copyFileMetadataOptions, ref IntPtr outMetadata);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorage_DeleteCache(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.DeleteCacheOptionsInternal options, IntPtr clientData, Epic.OnlineServices.PlayerDataStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PlayerDataStorage_DeleteFile(IntPtr handle, ref DeleteFileOptionsInternal deleteOptions, IntPtr clientData, OnDeleteFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PlayerDataStorage_DuplicateFile(IntPtr handle, ref DuplicateFileOptionsInternal duplicateOptions, IntPtr clientData, OnDuplicateFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PlayerDataStorage_FileMetadata_Release(IntPtr fileMetadata);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PlayerDataStorage_GetFileMetadataCount(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.GetFileMetadataCountOptionsInternal getFileMetadataCountOptions, ref int outFileMetadataCount);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PlayerDataStorage_QueryFile(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.QueryFileOptionsInternal queryFileOptions, IntPtr clientData, Epic.OnlineServices.PlayerDataStorage.OnQueryFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PlayerDataStorage_QueryFileList(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.QueryFileListOptionsInternal queryFileListOptions, IntPtr clientData, Epic.OnlineServices.PlayerDataStorage.OnQueryFileListCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_PlayerDataStorage_ReadFile(IntPtr handle, ref Epic.OnlineServices.PlayerDataStorage.ReadFileOptionsInternal readOptions, IntPtr clientData, Epic.OnlineServices.PlayerDataStorage.OnReadFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_PlayerDataStorage_WriteFile(IntPtr handle, ref WriteFileOptionsInternal writeOptions, IntPtr clientData, OnWriteFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PresenceModification_DeleteData(IntPtr handle, ref PresenceModificationDeleteDataOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_PresenceModification_Release(IntPtr presenceModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PresenceModification_SetData(IntPtr handle, ref PresenceModificationSetDataOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PresenceModification_SetJoinInfo(IntPtr handle, ref PresenceModificationSetJoinInfoOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PresenceModification_SetRawRichText(IntPtr handle, ref PresenceModificationSetRawRichTextOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_PresenceModification_SetStatus(IntPtr handle, ref PresenceModificationSetStatusOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Presence_AddNotifyJoinGameAccepted(IntPtr handle, ref AddNotifyJoinGameAcceptedOptionsInternal options, IntPtr clientData, OnJoinGameAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Presence_AddNotifyOnPresenceChanged(IntPtr handle, ref AddNotifyOnPresenceChangedOptionsInternal options, IntPtr clientData, OnPresenceChangedCallbackInternal notificationHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Presence_CopyPresence(IntPtr handle, ref CopyPresenceOptionsInternal options, ref IntPtr outPresence);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Presence_CreatePresenceModification(IntPtr handle, ref CreatePresenceModificationOptionsInternal options, ref IntPtr outPresenceModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Presence_GetJoinInfo(IntPtr handle, ref GetJoinInfoOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_Presence_HasPresence(IntPtr handle, ref HasPresenceOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Presence_Info_Release(IntPtr presenceInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Presence_QueryPresence(IntPtr handle, ref QueryPresenceOptionsInternal options, IntPtr clientData, OnQueryPresenceCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Presence_RemoveNotifyJoinGameAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Presence_RemoveNotifyOnPresenceChanged(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Presence_SetPresence(IntPtr handle, ref SetPresenceOptionsInternal options, IntPtr clientData, SetPresenceCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_ProductUserId_FromString(IntPtr productUserIdString);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_ProductUserId_IsValid(IntPtr accountId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ProductUserId_ToString(IntPtr accountId, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ProgressionSnapshot_AddProgression(IntPtr handle, ref AddProgressionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ProgressionSnapshot_BeginSnapshot(IntPtr handle, ref BeginSnapshotOptionsInternal options, ref uint outSnapshotId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_ProgressionSnapshot_DeleteSnapshot(IntPtr handle, ref DeleteSnapshotOptionsInternal options, IntPtr clientData, OnDeleteSnapshotCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_ProgressionSnapshot_EndSnapshot(IntPtr handle, ref EndSnapshotOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_ProgressionSnapshot_SubmitSnapshot(IntPtr handle, ref SubmitSnapshotOptionsInternal options, IntPtr clientData, OnSubmitSnapshotCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAdmin_CopyUserTokenByIndex(IntPtr handle, ref CopyUserTokenByIndexOptionsInternal options, ref IntPtr outUserToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAdmin_CopyUserTokenByUserId(IntPtr handle, ref CopyUserTokenByUserIdOptionsInternal options, ref IntPtr outUserToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAdmin_Kick(IntPtr handle, ref KickOptionsInternal options, IntPtr clientData, OnKickCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAdmin_QueryJoinRoomToken(IntPtr handle, ref QueryJoinRoomTokenOptionsInternal options, IntPtr clientData, OnQueryJoinRoomTokenCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAdmin_SetParticipantHardMute(IntPtr handle, ref SetParticipantHardMuteOptionsInternal options, IntPtr clientData, OnSetParticipantHardMuteCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAdmin_UserToken_Release(IntPtr userToken);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCAudio_AddNotifyAudioBeforeRender(IntPtr handle, ref AddNotifyAudioBeforeRenderOptionsInternal options, IntPtr clientData, OnAudioBeforeRenderCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCAudio_AddNotifyAudioBeforeSend(IntPtr handle, ref AddNotifyAudioBeforeSendOptionsInternal options, IntPtr clientData, OnAudioBeforeSendCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCAudio_AddNotifyAudioDevicesChanged(IntPtr handle, ref AddNotifyAudioDevicesChangedOptionsInternal options, IntPtr clientData, OnAudioDevicesChangedCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCAudio_AddNotifyAudioInputState(IntPtr handle, ref AddNotifyAudioInputStateOptionsInternal options, IntPtr clientData, OnAudioInputStateCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCAudio_AddNotifyAudioOutputState(IntPtr handle, ref AddNotifyAudioOutputStateOptionsInternal options, IntPtr clientData, OnAudioOutputStateCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCAudio_AddNotifyParticipantUpdated(IntPtr handle, ref Epic.OnlineServices.RTCAudio.AddNotifyParticipantUpdatedOptionsInternal options, IntPtr clientData, Epic.OnlineServices.RTCAudio.OnParticipantUpdatedCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_CopyInputDeviceInformationByIndex(IntPtr handle, ref CopyInputDeviceInformationByIndexOptionsInternal options, ref IntPtr outInputDeviceInformation);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_CopyOutputDeviceInformationByIndex(IntPtr handle, ref CopyOutputDeviceInformationByIndexOptionsInternal options, ref IntPtr outOutputDeviceInformation);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_RTCAudio_GetAudioInputDeviceByIndex(IntPtr handle, ref GetAudioInputDeviceByIndexOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_RTCAudio_GetAudioInputDevicesCount(IntPtr handle, ref GetAudioInputDevicesCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_RTCAudio_GetAudioOutputDeviceByIndex(IntPtr handle, ref GetAudioOutputDeviceByIndexOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_RTCAudio_GetAudioOutputDevicesCount(IntPtr handle, ref GetAudioOutputDevicesCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_RTCAudio_GetInputDevicesCount(IntPtr handle, ref GetInputDevicesCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_RTCAudio_GetOutputDevicesCount(IntPtr handle, ref GetOutputDevicesCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_InputDeviceInformation_Release(IntPtr deviceInformation);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_OutputDeviceInformation_Release(IntPtr deviceInformation);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_QueryInputDevicesInformation(IntPtr handle, ref QueryInputDevicesInformationOptionsInternal options, IntPtr clientData, OnQueryInputDevicesInformationCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_QueryOutputDevicesInformation(IntPtr handle, ref QueryOutputDevicesInformationOptionsInternal options, IntPtr clientData, OnQueryOutputDevicesInformationCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_RegisterPlatformAudioUser(IntPtr handle, ref RegisterPlatformAudioUserOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RegisterPlatformUser(IntPtr handle, ref RegisterPlatformUserOptionsInternal options, IntPtr clientData, OnRegisterPlatformUserCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RemoveNotifyAudioBeforeRender(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RemoveNotifyAudioBeforeSend(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RemoveNotifyAudioDevicesChanged(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RemoveNotifyAudioInputState(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RemoveNotifyAudioOutputState(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_RemoveNotifyParticipantUpdated(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_SendAudio(IntPtr handle, ref SendAudioOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_SetAudioInputSettings(IntPtr handle, ref SetAudioInputSettingsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_SetAudioOutputSettings(IntPtr handle, ref SetAudioOutputSettingsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_SetInputDeviceSettings(IntPtr handle, ref SetInputDeviceSettingsOptionsInternal options, IntPtr clientData, OnSetInputDeviceSettingsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_SetOutputDeviceSettings(IntPtr handle, ref SetOutputDeviceSettingsOptionsInternal options, IntPtr clientData, OnSetOutputDeviceSettingsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCAudio_UnregisterPlatformAudioUser(IntPtr handle, ref UnregisterPlatformAudioUserOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_UnregisterPlatformUser(IntPtr handle, ref UnregisterPlatformUserOptionsInternal options, IntPtr clientData, OnUnregisterPlatformUserCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_UpdateParticipantVolume(IntPtr handle, ref UpdateParticipantVolumeOptionsInternal options, IntPtr clientData, OnUpdateParticipantVolumeCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_UpdateReceiving(IntPtr handle, ref Epic.OnlineServices.RTCAudio.UpdateReceivingOptionsInternal options, IntPtr clientData, Epic.OnlineServices.RTCAudio.OnUpdateReceivingCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_UpdateReceivingVolume(IntPtr handle, ref UpdateReceivingVolumeOptionsInternal options, IntPtr clientData, OnUpdateReceivingVolumeCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_UpdateSending(IntPtr handle, ref Epic.OnlineServices.RTCAudio.UpdateSendingOptionsInternal options, IntPtr clientData, Epic.OnlineServices.RTCAudio.OnUpdateSendingCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCAudio_UpdateSendingVolume(IntPtr handle, ref UpdateSendingVolumeOptionsInternal options, IntPtr clientData, OnUpdateSendingVolumeCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCData_AddNotifyDataReceived(IntPtr handle, ref AddNotifyDataReceivedOptionsInternal options, IntPtr clientData, OnDataReceivedCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTCData_AddNotifyParticipantUpdated(IntPtr handle, ref Epic.OnlineServices.RTCData.AddNotifyParticipantUpdatedOptionsInternal options, IntPtr clientData, Epic.OnlineServices.RTCData.OnParticipantUpdatedCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCData_RemoveNotifyDataReceived(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCData_RemoveNotifyParticipantUpdated(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTCData_SendData(IntPtr handle, ref SendDataOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCData_UpdateReceiving(IntPtr handle, ref Epic.OnlineServices.RTCData.UpdateReceivingOptionsInternal options, IntPtr clientData, Epic.OnlineServices.RTCData.OnUpdateReceivingCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTCData_UpdateSending(IntPtr handle, ref Epic.OnlineServices.RTCData.UpdateSendingOptionsInternal options, IntPtr clientData, Epic.OnlineServices.RTCData.OnUpdateSendingCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTC_AddNotifyDisconnected(IntPtr handle, ref AddNotifyDisconnectedOptionsInternal options, IntPtr clientData, OnDisconnectedCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTC_AddNotifyParticipantStatusChanged(IntPtr handle, ref AddNotifyParticipantStatusChangedOptionsInternal options, IntPtr clientData, OnParticipantStatusChangedCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_RTC_AddNotifyRoomStatisticsUpdated(IntPtr handle, ref AddNotifyRoomStatisticsUpdatedOptionsInternal options, IntPtr clientData, OnRoomStatisticsUpdatedCallbackInternal statisticsUpdateHandler);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTC_BlockParticipant(IntPtr handle, ref BlockParticipantOptionsInternal options, IntPtr clientData, OnBlockParticipantCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_RTC_GetAudioInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_RTC_GetDataInterface(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTC_JoinRoom(IntPtr handle, ref JoinRoomOptionsInternal options, IntPtr clientData, OnJoinRoomCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTC_LeaveRoom(IntPtr handle, ref LeaveRoomOptionsInternal options, IntPtr clientData, OnLeaveRoomCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTC_RemoveNotifyDisconnected(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTC_RemoveNotifyParticipantStatusChanged(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_RTC_RemoveNotifyRoomStatisticsUpdated(IntPtr handle, ulong notificationId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTC_SetRoomSetting(IntPtr handle, ref SetRoomSettingOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_RTC_SetSetting(IntPtr handle, ref SetSettingOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Reports_SendPlayerBehaviorReport(IntPtr handle, ref SendPlayerBehaviorReportOptionsInternal options, IntPtr clientData, OnSendPlayerBehaviorReportCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sanctions_CopyPlayerSanctionByIndex(IntPtr handle, ref CopyPlayerSanctionByIndexOptionsInternal options, ref IntPtr outSanction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sanctions_CreatePlayerSanctionAppeal(IntPtr handle, ref CreatePlayerSanctionAppealOptionsInternal options, IntPtr clientData, CreatePlayerSanctionAppealCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Sanctions_GetPlayerSanctionCount(IntPtr handle, ref GetPlayerSanctionCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sanctions_PlayerSanction_Release(IntPtr sanction);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sanctions_QueryActivePlayerSanctions(IntPtr handle, ref QueryActivePlayerSanctionsOptionsInternal options, IntPtr clientData, OnQueryActivePlayerSanctionsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_SessionDetails_Attribute_Release(IntPtr sessionAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionDetails_CopyInfo(IntPtr handle, ref SessionDetailsCopyInfoOptionsInternal options, ref IntPtr outSessionInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionDetails_CopySessionAttributeByIndex(IntPtr handle, ref SessionDetailsCopySessionAttributeByIndexOptionsInternal options, ref IntPtr outSessionAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionDetails_CopySessionAttributeByKey(IntPtr handle, ref SessionDetailsCopySessionAttributeByKeyOptionsInternal options, ref IntPtr outSessionAttribute);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_SessionDetails_GetSessionAttributeCount(IntPtr handle, ref SessionDetailsGetSessionAttributeCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_SessionDetails_Info_Release(IntPtr sessionInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_SessionDetails_Release(IntPtr sessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_AddAttribute(IntPtr handle, ref SessionModificationAddAttributeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_SessionModification_Release(IntPtr sessionModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_RemoveAttribute(IntPtr handle, ref SessionModificationRemoveAttributeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetAllowedPlatformIds(IntPtr handle, ref SessionModificationSetAllowedPlatformIdsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetBucketId(IntPtr handle, ref SessionModificationSetBucketIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetHostAddress(IntPtr handle, ref SessionModificationSetHostAddressOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetInvitesAllowed(IntPtr handle, ref SessionModificationSetInvitesAllowedOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetJoinInProgressAllowed(IntPtr handle, ref SessionModificationSetJoinInProgressAllowedOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetMaxPlayers(IntPtr handle, ref SessionModificationSetMaxPlayersOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionModification_SetPermissionLevel(IntPtr handle, ref SessionModificationSetPermissionLevelOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionSearch_CopySearchResultByIndex(IntPtr handle, ref SessionSearchCopySearchResultByIndexOptionsInternal options, ref IntPtr outSessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_SessionSearch_Find(IntPtr handle, ref SessionSearchFindOptionsInternal options, IntPtr clientData, SessionSearchOnFindCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_SessionSearch_GetSearchResultCount(IntPtr handle, ref SessionSearchGetSearchResultCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_SessionSearch_Release(IntPtr sessionSearchHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionSearch_RemoveParameter(IntPtr handle, ref SessionSearchRemoveParameterOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionSearch_SetMaxResults(IntPtr handle, ref SessionSearchSetMaxResultsOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionSearch_SetParameter(IntPtr handle, ref SessionSearchSetParameterOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionSearch_SetSessionId(IntPtr handle, ref SessionSearchSetSessionIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_SessionSearch_SetTargetUserId(IntPtr handle, ref SessionSearchSetTargetUserIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Sessions_AddNotifyJoinSessionAccepted(IntPtr handle, ref AddNotifyJoinSessionAcceptedOptionsInternal options, IntPtr clientData, OnJoinSessionAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Sessions_AddNotifyLeaveSessionRequested(IntPtr handle, ref AddNotifyLeaveSessionRequestedOptionsInternal options, IntPtr clientData, OnLeaveSessionRequestedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Sessions_AddNotifySendSessionNativeInviteRequested(IntPtr handle, ref AddNotifySendSessionNativeInviteRequestedOptionsInternal options, IntPtr clientData, OnSendSessionNativeInviteRequestedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Sessions_AddNotifySessionInviteAccepted(IntPtr handle, ref AddNotifySessionInviteAcceptedOptionsInternal options, IntPtr clientData, OnSessionInviteAcceptedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Sessions_AddNotifySessionInviteReceived(IntPtr handle, ref AddNotifySessionInviteReceivedOptionsInternal options, IntPtr clientData, OnSessionInviteReceivedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_Sessions_AddNotifySessionInviteRejected(IntPtr handle, ref AddNotifySessionInviteRejectedOptionsInternal options, IntPtr clientData, OnSessionInviteRejectedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_CopyActiveSessionHandle(IntPtr handle, ref CopyActiveSessionHandleOptionsInternal options, ref IntPtr outSessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_CopySessionHandleByInviteId(IntPtr handle, ref CopySessionHandleByInviteIdOptionsInternal options, ref IntPtr outSessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_CopySessionHandleByUiEventId(IntPtr handle, ref CopySessionHandleByUiEventIdOptionsInternal options, ref IntPtr outSessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_CopySessionHandleForPresence(IntPtr handle, ref CopySessionHandleForPresenceOptionsInternal options, ref IntPtr outSessionHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_CreateSessionModification(IntPtr handle, ref CreateSessionModificationOptionsInternal options, ref IntPtr outSessionModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_CreateSessionSearch(IntPtr handle, ref CreateSessionSearchOptionsInternal options, ref IntPtr outSessionSearchHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_DestroySession(IntPtr handle, ref DestroySessionOptionsInternal options, IntPtr clientData, OnDestroySessionCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_DumpSessionState(IntPtr handle, ref DumpSessionStateOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_EndSession(IntPtr handle, ref Epic.OnlineServices.Sessions.EndSessionOptionsInternal options, IntPtr clientData, OnEndSessionCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Sessions_GetInviteCount(IntPtr handle, ref Epic.OnlineServices.Sessions.GetInviteCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_GetInviteIdByIndex(IntPtr handle, ref Epic.OnlineServices.Sessions.GetInviteIdByIndexOptionsInternal options, IntPtr outBuffer, ref int inOutBufferLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_IsUserInSession(IntPtr handle, ref IsUserInSessionOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_JoinSession(IntPtr handle, ref JoinSessionOptionsInternal options, IntPtr clientData, OnJoinSessionCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_QueryInvites(IntPtr handle, ref Epic.OnlineServices.Sessions.QueryInvitesOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Sessions.OnQueryInvitesCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RegisterPlayers(IntPtr handle, ref RegisterPlayersOptionsInternal options, IntPtr clientData, OnRegisterPlayersCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RejectInvite(IntPtr handle, ref Epic.OnlineServices.Sessions.RejectInviteOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Sessions.OnRejectInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RemoveNotifyJoinSessionAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RemoveNotifyLeaveSessionRequested(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RemoveNotifySessionInviteAccepted(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RemoveNotifySessionInviteReceived(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_RemoveNotifySessionInviteRejected(IntPtr handle, ulong inId);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_SendInvite(IntPtr handle, ref Epic.OnlineServices.Sessions.SendInviteOptionsInternal options, IntPtr clientData, Epic.OnlineServices.Sessions.OnSendInviteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_StartSession(IntPtr handle, ref StartSessionOptionsInternal options, IntPtr clientData, OnStartSessionCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_UnregisterPlayers(IntPtr handle, ref UnregisterPlayersOptionsInternal options, IntPtr clientData, OnUnregisterPlayersCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Sessions_UpdateSession(IntPtr handle, ref UpdateSessionOptionsInternal options, IntPtr clientData, OnUpdateSessionCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Sessions_UpdateSessionModification(IntPtr handle, ref UpdateSessionModificationOptionsInternal options, ref IntPtr outSessionModificationHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Shutdown();

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Stats_CopyStatByIndex(IntPtr handle, ref CopyStatByIndexOptionsInternal options, ref IntPtr outStat);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_Stats_CopyStatByName(IntPtr handle, ref CopyStatByNameOptionsInternal options, ref IntPtr outStat);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_Stats_GetStatsCount(IntPtr handle, ref GetStatCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Stats_IngestStat(IntPtr handle, ref IngestStatOptionsInternal options, IntPtr clientData, OnIngestStatCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Stats_QueryStats(IntPtr handle, ref QueryStatsOptionsInternal options, IntPtr clientData, OnQueryStatsCompleteCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Stats_Stat_Release(IntPtr stat);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_TitleStorageFileTransferRequest_CancelRequest(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_TitleStorageFileTransferRequest_GetFileRequestState(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_TitleStorageFileTransferRequest_GetFilename(IntPtr handle, uint filenameStringBufferSizeBytes, IntPtr outStringBuffer, ref int outStringLength);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_TitleStorageFileTransferRequest_Release(IntPtr titleStorageFileTransferHandle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_TitleStorage_CopyFileMetadataAtIndex(IntPtr handle, ref Epic.OnlineServices.TitleStorage.CopyFileMetadataAtIndexOptionsInternal options, ref IntPtr outMetadata);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_TitleStorage_CopyFileMetadataByFilename(IntPtr handle, ref Epic.OnlineServices.TitleStorage.CopyFileMetadataByFilenameOptionsInternal options, ref IntPtr outMetadata);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_TitleStorage_DeleteCache(IntPtr handle, ref Epic.OnlineServices.TitleStorage.DeleteCacheOptionsInternal options, IntPtr clientData, Epic.OnlineServices.TitleStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_TitleStorage_FileMetadata_Release(IntPtr fileMetadata);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_TitleStorage_GetFileMetadataCount(IntPtr handle, ref Epic.OnlineServices.TitleStorage.GetFileMetadataCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_TitleStorage_QueryFile(IntPtr handle, ref Epic.OnlineServices.TitleStorage.QueryFileOptionsInternal options, IntPtr clientData, Epic.OnlineServices.TitleStorage.OnQueryFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_TitleStorage_QueryFileList(IntPtr handle, ref Epic.OnlineServices.TitleStorage.QueryFileListOptionsInternal options, IntPtr clientData, Epic.OnlineServices.TitleStorage.OnQueryFileListCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_TitleStorage_ReadFile(IntPtr handle, ref Epic.OnlineServices.TitleStorage.ReadFileOptionsInternal options, IntPtr clientData, Epic.OnlineServices.TitleStorage.OnReadFileCompleteCallbackInternal completionCallback);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_AcknowledgeEventId(IntPtr handle, ref AcknowledgeEventIdOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_UI_AddNotifyDisplaySettingsUpdated(IntPtr handle, ref AddNotifyDisplaySettingsUpdatedOptionsInternal options, IntPtr clientData, OnDisplaySettingsUpdatedCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern ulong EOS_UI_AddNotifyMemoryMonitor(IntPtr handle, ref AddNotifyMemoryMonitorOptionsInternal options, IntPtr clientData, OnMemoryMonitorCallbackInternal notificationFn);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_UI_GetFriendsExclusiveInput(IntPtr handle, ref GetFriendsExclusiveInputOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_UI_GetFriendsVisible(IntPtr handle, ref GetFriendsVisibleOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern NotificationLocation EOS_UI_GetNotificationLocationPreference(IntPtr handle);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern InputStateButtonFlags EOS_UI_GetToggleFriendsButton(IntPtr handle, ref GetToggleFriendsButtonOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern KeyCombination EOS_UI_GetToggleFriendsKey(IntPtr handle, ref GetToggleFriendsKeyOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_HideFriends(IntPtr handle, ref HideFriendsOptionsInternal options, IntPtr clientData, OnHideFriendsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_UI_IsSocialOverlayPaused(IntPtr handle, ref IsSocialOverlayPausedOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_UI_IsValidButtonCombination(IntPtr handle, InputStateButtonFlags buttonCombination);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern int EOS_UI_IsValidKeyCombination(IntPtr handle, KeyCombination keyCombination);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_PauseSocialOverlay(IntPtr handle, ref PauseSocialOverlayOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_PrePresent(IntPtr handle, ref PrePresentOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_RemoveNotifyDisplaySettingsUpdated(IntPtr handle, ulong id);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_RemoveNotifyMemoryMonitor(IntPtr handle, ulong id);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_ReportInputState(IntPtr handle, ref ReportInputStateOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_SetDisplayPreference(IntPtr handle, ref SetDisplayPreferenceOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_SetToggleFriendsButton(IntPtr handle, ref SetToggleFriendsButtonOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UI_SetToggleFriendsKey(IntPtr handle, ref SetToggleFriendsKeyOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_ShowBlockPlayer(IntPtr handle, ref ShowBlockPlayerOptionsInternal options, IntPtr clientData, OnShowBlockPlayerCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_ShowFriends(IntPtr handle, ref ShowFriendsOptionsInternal options, IntPtr clientData, OnShowFriendsCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_ShowNativeProfile(IntPtr handle, ref ShowNativeProfileOptionsInternal options, IntPtr clientData, OnShowNativeProfileCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UI_ShowReportPlayer(IntPtr handle, ref ShowReportPlayerOptionsInternal options, IntPtr clientData, OnShowReportPlayerCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UserInfo_BestDisplayName_Release(IntPtr bestDisplayName);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UserInfo_CopyBestDisplayName(IntPtr handle, ref CopyBestDisplayNameOptionsInternal options, ref IntPtr outBestDisplayName);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UserInfo_CopyBestDisplayNameWithPlatform(IntPtr handle, ref CopyBestDisplayNameWithPlatformOptionsInternal options, ref IntPtr outBestDisplayName);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountId(IntPtr handle, ref CopyExternalUserInfoByAccountIdOptionsInternal options, ref IntPtr outExternalUserInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountType(IntPtr handle, ref CopyExternalUserInfoByAccountTypeOptionsInternal options, ref IntPtr outExternalUserInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UserInfo_CopyExternalUserInfoByIndex(IntPtr handle, ref CopyExternalUserInfoByIndexOptionsInternal options, ref IntPtr outExternalUserInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_UserInfo_CopyUserInfo(IntPtr handle, ref CopyUserInfoOptionsInternal options, ref IntPtr outUserInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UserInfo_ExternalUserInfo_Release(IntPtr externalUserInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_UserInfo_GetExternalUserInfoCount(IntPtr handle, ref GetExternalUserInfoCountOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern uint EOS_UserInfo_GetLocalPlatformType(IntPtr handle, ref GetLocalPlatformTypeOptionsInternal options);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UserInfo_QueryUserInfo(IntPtr handle, ref QueryUserInfoOptionsInternal options, IntPtr clientData, OnQueryUserInfoCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UserInfo_QueryUserInfoByDisplayName(IntPtr handle, ref QueryUserInfoByDisplayNameOptionsInternal options, IntPtr clientData, OnQueryUserInfoByDisplayNameCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UserInfo_QueryUserInfoByExternalAccount(IntPtr handle, ref QueryUserInfoByExternalAccountOptionsInternal options, IntPtr clientData, OnQueryUserInfoByExternalAccountCallbackInternal completionDelegate);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_UserInfo_Release(IntPtr userInfo);

	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern Result EOS_P2P_ReceivePacket(IntPtr handle, ref ReceivePacketOptionsInternal options, ref IntPtr outPeerId, IntPtr outSocketId, ref byte outChannel, IntPtr outData, ref uint outBytesWritten);
}


using System;
using Epic.OnlineServices;

public sealed class Common
{
	public const ulong InvalidNotificationid = 0uL;

	public const int PagequeryApiLatest = 1;

	public const int PagequeryMaxcountDefault = 10;

	public const int PagequeryMaxcountMaximum = 100;

	public const int PaginationApiLatest = 1;

	public static bool IsOperationComplete(Result result)
	{
		Helper.Get(Bindings.EOS_EResult_IsOperationComplete(result), out var to);
		return to;
	}

	public static Utf8String ToString(Result result)
	{
		Helper.Get(Bindings.EOS_EResult_ToString(result), out Utf8String to);
		return to;
	}

	public static Result ToString(ArraySegment<byte> byteArray, out Utf8String outBuffer)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(byteArray, ref to, out var arrayLength);
		uint inOutBufferLength = 1024u;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_ByteArray_ToString(to, arrayLength, value, ref inOutBufferLength);
		Helper.Dispose(ref to);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public static Utf8String ToString(ArraySegment<byte> byteArray)
	{
		ToString(byteArray, out var outBuffer);
		return outBuffer;
	}
}


public enum ComparisonOp
{
	Equal,
	Notequal,
	Greaterthan,
	Greaterthanorequal,
	Lessthan,
	Lessthanorequal,
	Distance,
	Anyof,
	Notanyof,
	Oneof,
	Notoneof,
	Contains
}


using System;
using Epic.OnlineServices;

public sealed class ContinuanceToken : Handle
{
	public ContinuanceToken()
	{
	}

	public ContinuanceToken(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result ToString(out Utf8String outBuffer)
	{
		int inOutBufferLength = 1024;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_ContinuanceToken_ToString(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public override string ToString()
	{
		ToString(out var outBuffer);
		return outBuffer;
	}

	public override string ToString(string format, IFormatProvider formatProvider)
	{
		if (format != null)
		{
			return string.Format(format, ToString());
		}
		return ToString();
	}

	public static explicit operator Utf8String(ContinuanceToken value)
	{
		Utf8String outBuffer = null;
		if (value != null)
		{
			value.ToString(out outBuffer);
		}
		return outBuffer;
	}
}


using System;
using Epic.OnlineServices;

public sealed class EpicAccountId : Handle
{
	public const int EpicaccountidMaxLength = 32;

	public EpicAccountId()
	{
	}

	public EpicAccountId(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public static EpicAccountId FromString(Utf8String accountIdString)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(accountIdString, ref to);
		IntPtr from = Bindings.EOS_EpicAccountId_FromString(to);
		Helper.Dispose(ref to);
		Helper.Get(from, out EpicAccountId to2);
		return to2;
	}

	public static explicit operator EpicAccountId(Utf8String value)
	{
		return FromString(value);
	}

	public bool IsValid()
	{
		Helper.Get(Bindings.EOS_EpicAccountId_IsValid(base.InnerHandle), out var to);
		return to;
	}

	public Result ToString(out Utf8String outBuffer)
	{
		int inOutBufferLength = 33;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_EpicAccountId_ToString(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public override string ToString()
	{
		ToString(out var outBuffer);
		return outBuffer;
	}

	public override string ToString(string format, IFormatProvider formatProvider)
	{
		if (format != null)
		{
			return string.Format(format, ToString());
		}
		return ToString();
	}

	public static explicit operator Utf8String(EpicAccountId value)
	{
		Utf8String outBuffer = null;
		if (value != null)
		{
			value.ToString(out outBuffer);
		}
		return outBuffer;
	}
}


public enum ExternalAccountType
{
	Epic,
	Steam,
	Psn,
	Xbl,
	Discord,
	Gog,
	Nintendo,
	Uplay,
	Openid,
	Apple,
	Google,
	Oculus,
	Itchio,
	Amazon,
	Viveport
}


public enum ExternalCredentialType
{
	Epic,
	SteamAppTicket,
	PsnIdToken,
	XblXstsToken,
	DiscordAccessToken,
	GogSessionTicket,
	NintendoIdToken,
	NintendoNsaIdToken,
	UplayAccessToken,
	OpenidAccessToken,
	DeviceidAccessToken,
	AppleIdToken,
	GoogleIdToken,
	OculusUseridNonce,
	ItchioJwt,
	ItchioKey,
	EpicIdToken,
	AmazonAccessToken,
	SteamSessionTicket,
	ViveportUserToken
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices.Auth;

public static class IOSBindings
{
	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern void EOS_Auth_Login(IntPtr handle, ref IOSLoginOptionsInternal options, IntPtr clientData, OnLoginCallbackInternal completionDelegate);
}


public enum LoginStatus
{
	NotLoggedIn,
	UsingLocalProfile,
	LoggedIn
}


using Epic.OnlineServices;

public struct PageQuery
{
	public int StartIndex { get; set; }

	public int MaxCount { get; set; }

	internal void Set(ref PageQueryInternal other)
	{
		StartIndex = other.StartIndex;
		MaxCount = other.MaxCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PageQueryInternal : IGettable<PageQuery>, ISettable<PageQuery>, IDisposable
{
	private int m_ApiVersion;

	private int m_StartIndex;

	private int m_MaxCount;

	public int StartIndex
	{
		get
		{
			return m_StartIndex;
		}
		set
		{
			m_StartIndex = value;
		}
	}

	public int MaxCount
	{
		get
		{
			return m_MaxCount;
		}
		set
		{
			m_MaxCount = value;
		}
	}

	public void Set(ref PageQuery other)
	{
		m_ApiVersion = 1;
		StartIndex = other.StartIndex;
		MaxCount = other.MaxCount;
	}

	public void Set(ref PageQuery? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			StartIndex = other.Value.StartIndex;
			MaxCount = other.Value.MaxCount;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out PageQuery output)
	{
		output = default(PageQuery);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct PageResult
{
	public int StartIndex { get; set; }

	public int Count { get; set; }

	public int TotalCount { get; set; }

	internal void Set(ref PageResultInternal other)
	{
		StartIndex = other.StartIndex;
		Count = other.Count;
		TotalCount = other.TotalCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PageResultInternal : IGettable<PageResult>, ISettable<PageResult>, IDisposable
{
	private int m_StartIndex;

	private int m_Count;

	private int m_TotalCount;

	public int StartIndex
	{
		get
		{
			return m_StartIndex;
		}
		set
		{
			m_StartIndex = value;
		}
	}

	public int Count
	{
		get
		{
			return m_Count;
		}
		set
		{
			m_Count = value;
		}
	}

	public int TotalCount
	{
		get
		{
			return m_TotalCount;
		}
		set
		{
			m_TotalCount = value;
		}
	}

	public void Set(ref PageResult other)
	{
		StartIndex = other.StartIndex;
		Count = other.Count;
		TotalCount = other.TotalCount;
	}

	public void Set(ref PageResult? other)
	{
		if (other.HasValue)
		{
			StartIndex = other.Value.StartIndex;
			Count = other.Value.Count;
			TotalCount = other.Value.TotalCount;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out PageResult output)
	{
		output = default(PageResult);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;

public sealed class ProductUserId : Handle
{
	public const int ProductuseridMaxLength = 32;

	public ProductUserId()
	{
	}

	public ProductUserId(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public static ProductUserId FromString(Utf8String productUserIdString)
	{
		IntPtr to = IntPtr.Zero;
		Helper.Set(productUserIdString, ref to);
		IntPtr from = Bindings.EOS_ProductUserId_FromString(to);
		Helper.Dispose(ref to);
		Helper.Get(from, out ProductUserId to2);
		return to2;
	}

	public static explicit operator ProductUserId(Utf8String value)
	{
		return FromString(value);
	}

	public bool IsValid()
	{
		Helper.Get(Bindings.EOS_ProductUserId_IsValid(base.InnerHandle), out var to);
		return to;
	}

	public Result ToString(out Utf8String outBuffer)
	{
		int inOutBufferLength = 33;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_ProductUserId_ToString(base.InnerHandle, value, ref inOutBufferLength);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public override string ToString()
	{
		ToString(out var outBuffer);
		return outBuffer;
	}

	public override string ToString(string format, IFormatProvider formatProvider)
	{
		if (format != null)
		{
			return string.Format(format, ToString());
		}
		return ToString();
	}

	public static explicit operator Utf8String(ProductUserId value)
	{
		Utf8String outBuffer = null;
		if (value != null)
		{
			value.ToString(out outBuffer);
		}
		return outBuffer;
	}
}


public enum Result
{
	Success = 0,
	NoConnection = 1,
	InvalidCredentials = 2,
	InvalidUser = 3,
	InvalidAuth = 4,
	AccessDenied = 5,
	MissingPermissions = 6,
	TokenNotAccount = 7,
	TooManyRequests = 8,
	AlreadyPending = 9,
	InvalidParameters = 10,
	InvalidRequest = 11,
	UnrecognizedResponse = 12,
	IncompatibleVersion = 13,
	NotConfigured = 14,
	AlreadyConfigured = 15,
	NotImplemented = 16,
	Canceled = 17,
	NotFound = 18,
	OperationWillRetry = 19,
	NoChange = 20,
	VersionMismatch = 21,
	LimitExceeded = 22,
	Disabled = 23,
	DuplicateNotAllowed = 24,
	MissingParametersDEPRECATED = 25,
	InvalidSandboxId = 26,
	TimedOut = 27,
	PartialResult = 28,
	MissingRole = 29,
	MissingFeature = 30,
	InvalidSandbox = 31,
	InvalidDeployment = 32,
	InvalidProduct = 33,
	InvalidProductUserID = 34,
	ServiceFailure = 35,
	CacheDirectoryMissing = 36,
	CacheDirectoryInvalid = 37,
	InvalidState = 38,
	RequestInProgress = 39,
	ApplicationSuspended = 40,
	NetworkDisconnected = 41,
	AuthAccountLocked = 1001,
	AuthAccountLockedForUpdate = 1002,
	AuthInvalidRefreshToken = 1003,
	AuthInvalidToken = 1004,
	AuthAuthenticationFailure = 1005,
	AuthInvalidPlatformToken = 1006,
	AuthWrongAccount = 1007,
	AuthWrongClient = 1008,
	AuthFullAccountRequired = 1009,
	AuthHeadlessAccountRequired = 1010,
	AuthPasswordResetRequired = 1011,
	AuthPasswordCannotBeReused = 1012,
	AuthExpired = 1013,
	AuthScopeConsentRequired = 1014,
	AuthApplicationNotFound = 1015,
	AuthScopeNotFound = 1016,
	AuthAccountFeatureRestricted = 1017,
	AuthAccountPortalLoadError = 1018,
	AuthCorrectiveActionRequired = 1019,
	AuthPinGrantCode = 1020,
	AuthPinGrantExpired = 1021,
	AuthPinGrantPending = 1022,
	AuthExternalAuthNotLinked = 1030,
	AuthExternalAuthRevoked = 1032,
	AuthExternalAuthInvalid = 1033,
	AuthExternalAuthRestricted = 1034,
	AuthExternalAuthCannotLogin = 1035,
	AuthExternalAuthExpired = 1036,
	AuthExternalAuthIsLastLoginType = 1037,
	AuthExchangeCodeNotFound = 1040,
	AuthOriginatingExchangeCodeSessionExpired = 1041,
	AuthAccountNotActive = 1050,
	AuthMFARequired = 1060,
	AuthParentalControls = 1070,
	AuthNoRealId = 1080,
	AuthUserInterfaceRequired = 1090,
	FriendsInviteAwaitingAcceptance = 2000,
	FriendsNoInvitation = 2001,
	FriendsAlreadyFriends = 2003,
	FriendsNotFriends = 2004,
	FriendsTargetUserTooManyInvites = 2005,
	FriendsLocalUserTooManyInvites = 2006,
	FriendsTargetUserFriendLimitExceeded = 2007,
	FriendsLocalUserFriendLimitExceeded = 2008,
	PresenceDataInvalid = 3000,
	PresenceDataLengthInvalid = 3001,
	PresenceDataKeyInvalid = 3002,
	PresenceDataKeyLengthInvalid = 3003,
	PresenceDataValueInvalid = 3004,
	PresenceDataValueLengthInvalid = 3005,
	PresenceRichTextInvalid = 3006,
	PresenceRichTextLengthInvalid = 3007,
	PresenceStatusInvalid = 3008,
	EcomEntitlementStale = 4000,
	EcomCatalogOfferStale = 4001,
	EcomCatalogItemStale = 4002,
	EcomCatalogOfferPriceInvalid = 4003,
	EcomCheckoutLoadError = 4004,
	EcomPurchaseProcessing = 4005,
	SessionsSessionInProgress = 5000,
	SessionsTooManyPlayers = 5001,
	SessionsNoPermission = 5002,
	SessionsSessionAlreadyExists = 5003,
	SessionsInvalidLock = 5004,
	SessionsInvalidSession = 5005,
	SessionsSandboxNotAllowed = 5006,
	SessionsInviteFailed = 5007,
	SessionsInviteNotFound = 5008,
	SessionsUpsertNotAllowed = 5009,
	SessionsAggregationFailed = 5010,
	SessionsHostAtCapacity = 5011,
	SessionsSandboxAtCapacity = 5012,
	SessionsSessionNotAnonymous = 5013,
	SessionsOutOfSync = 5014,
	SessionsTooManyInvites = 5015,
	SessionsPresenceSessionExists = 5016,
	SessionsDeploymentAtCapacity = 5017,
	SessionsNotAllowed = 5018,
	SessionsPlayerSanctioned = 5019,
	PlayerDataStorageFilenameInvalid = 6000,
	PlayerDataStorageFilenameLengthInvalid = 6001,
	PlayerDataStorageFilenameInvalidChars = 6002,
	PlayerDataStorageFileSizeTooLarge = 6003,
	PlayerDataStorageFileSizeInvalid = 6004,
	PlayerDataStorageFileHandleInvalid = 6005,
	PlayerDataStorageDataInvalid = 6006,
	PlayerDataStorageDataLengthInvalid = 6007,
	PlayerDataStorageStartIndexInvalid = 6008,
	PlayerDataStorageRequestInProgress = 6009,
	PlayerDataStorageUserThrottled = 6010,
	PlayerDataStorageEncryptionKeyNotSet = 6011,
	PlayerDataStorageUserErrorFromDataCallback = 6012,
	PlayerDataStorageFileHeaderHasNewerVersion = 6013,
	PlayerDataStorageFileCorrupted = 6014,
	ConnectExternalTokenValidationFailed = 7000,
	ConnectUserAlreadyExists = 7001,
	ConnectAuthExpired = 7002,
	ConnectInvalidToken = 7003,
	ConnectUnsupportedTokenType = 7004,
	ConnectLinkAccountFailed = 7005,
	ConnectExternalServiceUnavailable = 7006,
	ConnectExternalServiceConfigurationFailure = 7007,
	ConnectLinkAccountFailedMissingNintendoIdAccountDEPRECATED = 7008,
	SocialOverlayLoadError = 8000,
	InconsistentVirtualMemoryFunctions = 8001,
	LobbyNotOwner = 9000,
	LobbyInvalidLock = 9001,
	LobbyLobbyAlreadyExists = 9002,
	LobbySessionInProgress = 9003,
	LobbyTooManyPlayers = 9004,
	LobbyNoPermission = 9005,
	LobbyInvalidSession = 9006,
	LobbySandboxNotAllowed = 9007,
	LobbyInviteFailed = 9008,
	LobbyInviteNotFound = 9009,
	LobbyUpsertNotAllowed = 9010,
	LobbyAggregationFailed = 9011,
	LobbyHostAtCapacity = 9012,
	LobbySandboxAtCapacity = 9013,
	LobbyTooManyInvites = 9014,
	LobbyDeploymentAtCapacity = 9015,
	LobbyNotAllowed = 9016,
	LobbyMemberUpdateOnly = 9017,
	LobbyPresenceLobbyExists = 9018,
	LobbyVoiceNotEnabled = 9019,
	LobbyPlatformNotAllowed = 9020,
	TitleStorageUserErrorFromDataCallback = 10000,
	TitleStorageEncryptionKeyNotSet = 10001,
	TitleStorageFileCorrupted = 10002,
	TitleStorageFileHeaderHasNewerVersion = 10003,
	ModsModSdkProcessIsAlreadyRunning = 11000,
	ModsModSdkCommandIsEmpty = 11001,
	ModsModSdkProcessCreationFailed = 11002,
	ModsCriticalError = 11003,
	ModsToolInternalError = 11004,
	ModsIPCFailure = 11005,
	ModsInvalidIPCResponse = 11006,
	ModsURILaunchFailure = 11007,
	ModsModIsNotInstalled = 11008,
	ModsUserDoesNotOwnTheGame = 11009,
	ModsOfferRequestByIdInvalidResult = 11010,
	ModsCouldNotFindOffer = 11011,
	ModsOfferRequestByIdFailure = 11012,
	ModsPurchaseFailure = 11013,
	ModsInvalidGameInstallInfo = 11014,
	ModsCannotGetManifestLocation = 11015,
	ModsUnsupportedOS = 11016,
	AntiCheatClientProtectionNotAvailable = 12000,
	AntiCheatInvalidMode = 12001,
	AntiCheatClientProductIdMismatch = 12002,
	AntiCheatClientSandboxIdMismatch = 12003,
	AntiCheatProtectMessageSessionKeyRequired = 12004,
	AntiCheatProtectMessageValidationFailed = 12005,
	AntiCheatProtectMessageInitializationFailed = 12006,
	AntiCheatPeerAlreadyRegistered = 12007,
	AntiCheatPeerNotFound = 12008,
	AntiCheatPeerNotProtected = 12009,
	AntiCheatClientDeploymentIdMismatch = 12010,
	AntiCheatDeviceIdAuthIsNotSupported = 12011,
	TooManyParticipants = 13000,
	RoomAlreadyExists = 13001,
	UserKicked = 13002,
	UserBanned = 13003,
	RoomWasLeft = 13004,
	ReconnectionTimegateExpired = 13005,
	ShutdownInvoked = 13006,
	UserIsInBlocklist = 13007,
	ProgressionSnapshotSnapshotIdUnavailable = 14000,
	ParentEmailMissing = 15000,
	UserGraduated = 15001,
	AndroidJavaVMNotStored = 17000,
	AndroidReservedMustReferenceLocalVM = 17001,
	AndroidReservedMustBeNull = 17002,
	PermissionRequiredPatchAvailable = 18000,
	PermissionRequiredSystemUpdate = 18001,
	PermissionAgeRestrictionFailure = 18002,
	PermissionAccountTypeFailure = 18003,
	PermissionChatRestriction = 18004,
	PermissionUGCRestriction = 18005,
	PermissionOnlinePlayRestricted = 18006,
	DesktopCrossplayApplicationNotBootstrapped = 19000,
	DesktopCrossplayServiceNotInstalled = 19001,
	DesktopCrossplayServiceStartFailed = 19002,
	DesktopCrossplayServiceNotRunning = 19003,
	CustomInvitesInviteFailed = 20000,
	UserInfoBestDisplayNameIndeterminate = 22000,
	ConsoleInitOnNetworkRequestedDeprecatedCallbackNotSet = 23000,
	ConsoleInitCacheStorageSizeKBNotMultipleOf16 = 23001,
	ConsoleInitCacheStorageSizeKBBelowMinimumSize = 23002,
	ConsoleInitCacheStorageSizeKBExceedsMaximumSize = 23003,
	ConsoleInitCacheStorageIndexOutOfRangeRange = 23004,
	UnexpectedError = int.MaxValue
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices.Platform;

public static class WindowsBindings
{
	[DllImport("libEOSSDK-Linux-Shipping")]
	internal static extern IntPtr EOS_Platform_Create(ref WindowsOptionsInternal options);
}


using Epic.OnlineServices;

public sealed class VersionInterface
{
	public static readonly Utf8String CompanyName = "Epic Games, Inc.";

	public static readonly Utf8String CopyrightString = "Copyright Epic Games, Inc. All Rights Reserved.";

	public const int MajorVersion = 1;

	public const int MinorVersion = 16;

	public const int PatchVersion = 4;

	public static readonly Utf8String ProductIdentifier = "Epic Online Services SDK";

	public static readonly Utf8String ProductName = "Epic Online Services SDK";

	public static Utf8String GetVersion()
	{
		Helper.Get(Bindings.EOS_GetVersion(), out Utf8String to);
		return to;
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public struct BestDisplayName
{
	public EpicAccountId UserId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String DisplayNameSanitized { get; set; }

	public Utf8String Nickname { get; set; }

	public uint PlatformType { get; set; }

	internal void Set(ref BestDisplayNameInternal other)
	{
		UserId = other.UserId;
		DisplayName = other.DisplayName;
		DisplayNameSanitized = other.DisplayNameSanitized;
		Nickname = other.Nickname;
		PlatformType = other.PlatformType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct BestDisplayNameInternal : IGettable<BestDisplayName>, ISettable<BestDisplayName>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_DisplayName;

	private IntPtr m_DisplayNameSanitized;

	private IntPtr m_Nickname;

	private uint m_PlatformType;

	public EpicAccountId UserId
	{
		get
		{
			Helper.Get(m_UserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String DisplayNameSanitized
	{
		get
		{
			Helper.Get(m_DisplayNameSanitized, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayNameSanitized);
		}
	}

	public Utf8String Nickname
	{
		get
		{
			Helper.Get(m_Nickname, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Nickname);
		}
	}

	public uint PlatformType
	{
		get
		{
			return m_PlatformType;
		}
		set
		{
			m_PlatformType = value;
		}
	}

	public void Set(ref BestDisplayName other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
		DisplayName = other.DisplayName;
		DisplayNameSanitized = other.DisplayNameSanitized;
		Nickname = other.Nickname;
		PlatformType = other.PlatformType;
	}

	public void Set(ref BestDisplayName? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
			DisplayName = other.Value.DisplayName;
			DisplayNameSanitized = other.Value.DisplayNameSanitized;
			Nickname = other.Value.Nickname;
			PlatformType = other.Value.PlatformType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_DisplayNameSanitized);
		Helper.Dispose(ref m_Nickname);
	}

	public void Get(out BestDisplayName output)
	{
		output = default(BestDisplayName);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct CopyBestDisplayNameOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyBestDisplayNameOptionsInternal : ISettable<CopyBestDisplayNameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref CopyBestDisplayNameOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref CopyBestDisplayNameOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyBestDisplayNameWithPlatformOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public uint TargetPlatformType { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyBestDisplayNameWithPlatformOptionsInternal : ISettable<CopyBestDisplayNameWithPlatformOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private uint m_TargetPlatformType;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint TargetPlatformType
	{
		set
		{
			m_TargetPlatformType = value;
		}
	}

	public void Set(ref CopyBestDisplayNameWithPlatformOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		TargetPlatformType = other.TargetPlatformType;
	}

	public void Set(ref CopyBestDisplayNameWithPlatformOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			TargetPlatformType = other.Value.TargetPlatformType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyExternalUserInfoByAccountIdOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Utf8String AccountId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyExternalUserInfoByAccountIdOptionsInternal : ISettable<CopyExternalUserInfoByAccountIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_AccountId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String AccountId
	{
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public void Set(ref CopyExternalUserInfoByAccountIdOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		AccountId = other.AccountId;
	}

	public void Set(ref CopyExternalUserInfoByAccountIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			AccountId = other.Value.AccountId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_AccountId);
	}
}


using Epic.OnlineServices;

public struct CopyExternalUserInfoByAccountTypeOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public ExternalAccountType AccountType { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyExternalUserInfoByAccountTypeOptionsInternal : ISettable<CopyExternalUserInfoByAccountTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private ExternalAccountType m_AccountType;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ExternalAccountType AccountType
	{
		set
		{
			m_AccountType = value;
		}
	}

	public void Set(ref CopyExternalUserInfoByAccountTypeOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		AccountType = other.AccountType;
	}

	public void Set(ref CopyExternalUserInfoByAccountTypeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			AccountType = other.Value.AccountType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyExternalUserInfoByIndexOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyExternalUserInfoByIndexOptionsInternal : ISettable<CopyExternalUserInfoByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private uint m_Index;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref CopyExternalUserInfoByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		Index = other.Index;
	}

	public void Set(ref CopyExternalUserInfoByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyUserInfoOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyUserInfoOptionsInternal : ISettable<CopyUserInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref CopyUserInfoOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref CopyUserInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public struct ExternalUserInfo
{
	public ExternalAccountType AccountType { get; set; }

	public Utf8String AccountId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String DisplayNameSanitized { get; set; }

	internal void Set(ref ExternalUserInfoInternal other)
	{
		AccountType = other.AccountType;
		AccountId = other.AccountId;
		DisplayName = other.DisplayName;
		DisplayNameSanitized = other.DisplayNameSanitized;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ExternalUserInfoInternal : IGettable<ExternalUserInfo>, ISettable<ExternalUserInfo>, IDisposable
{
	private int m_ApiVersion;

	private ExternalAccountType m_AccountType;

	private IntPtr m_AccountId;

	private IntPtr m_DisplayName;

	private IntPtr m_DisplayNameSanitized;

	public ExternalAccountType AccountType
	{
		get
		{
			return m_AccountType;
		}
		set
		{
			m_AccountType = value;
		}
	}

	public Utf8String AccountId
	{
		get
		{
			Helper.Get(m_AccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AccountId);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String DisplayNameSanitized
	{
		get
		{
			Helper.Get(m_DisplayNameSanitized, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayNameSanitized);
		}
	}

	public void Set(ref ExternalUserInfo other)
	{
		m_ApiVersion = 2;
		AccountType = other.AccountType;
		AccountId = other.AccountId;
		DisplayName = other.DisplayName;
		DisplayNameSanitized = other.DisplayNameSanitized;
	}

	public void Set(ref ExternalUserInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			AccountType = other.Value.AccountType;
			AccountId = other.Value.AccountId;
			DisplayName = other.Value.DisplayName;
			DisplayNameSanitized = other.Value.DisplayNameSanitized;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AccountId);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_DisplayNameSanitized);
	}

	public void Get(out ExternalUserInfo output)
	{
		output = default(ExternalUserInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetExternalUserInfoCountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetExternalUserInfoCountOptionsInternal : ISettable<GetExternalUserInfoCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref GetExternalUserInfoCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref GetExternalUserInfoCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetLocalPlatformTypeOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetLocalPlatformTypeOptionsInternal : ISettable<GetLocalPlatformTypeOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetLocalPlatformTypeOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetLocalPlatformTypeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.UserInfo;

public delegate void OnQueryUserInfoByDisplayNameCallback(ref QueryUserInfoByDisplayNameCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UserInfo;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryUserInfoByDisplayNameCallbackInternal(ref QueryUserInfoByDisplayNameCallbackInfoInternal data);


using Epic.OnlineServices.UserInfo;

public delegate void OnQueryUserInfoByExternalAccountCallback(ref QueryUserInfoByExternalAccountCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UserInfo;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryUserInfoByExternalAccountCallbackInternal(ref QueryUserInfoByExternalAccountCallbackInfoInternal data);


using Epic.OnlineServices.UserInfo;

public delegate void OnQueryUserInfoCallback(ref QueryUserInfoCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UserInfo;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryUserInfoCallbackInternal(ref QueryUserInfoCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public struct QueryUserInfoByDisplayNameCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Utf8String DisplayName { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryUserInfoByDisplayNameCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		DisplayName = other.DisplayName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryUserInfoByDisplayNameCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryUserInfoByDisplayNameCallbackInfo>, ISettable<QueryUserInfoByDisplayNameCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_DisplayName;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public void Set(ref QueryUserInfoByDisplayNameCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		DisplayName = other.DisplayName;
	}

	public void Set(ref QueryUserInfoByDisplayNameCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			DisplayName = other.Value.DisplayName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_DisplayName);
	}

	public void Get(out QueryUserInfoByDisplayNameCallbackInfo output)
	{
		output = default(QueryUserInfoByDisplayNameCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryUserInfoByDisplayNameOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String DisplayName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryUserInfoByDisplayNameOptionsInternal : ISettable<QueryUserInfoByDisplayNameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_DisplayName;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String DisplayName
	{
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public void Set(ref QueryUserInfoByDisplayNameOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		DisplayName = other.DisplayName;
	}

	public void Set(ref QueryUserInfoByDisplayNameOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			DisplayName = other.Value.DisplayName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_DisplayName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public struct QueryUserInfoByExternalAccountCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ExternalAccountId { get; set; }

	public ExternalAccountType AccountType { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryUserInfoByExternalAccountCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		ExternalAccountId = other.ExternalAccountId;
		AccountType = other.AccountType;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryUserInfoByExternalAccountCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryUserInfoByExternalAccountCallbackInfo>, ISettable<QueryUserInfoByExternalAccountCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_ExternalAccountId;

	private ExternalAccountType m_AccountType;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ExternalAccountId
	{
		get
		{
			Helper.Get(m_ExternalAccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ExternalAccountId);
		}
	}

	public ExternalAccountType AccountType
	{
		get
		{
			return m_AccountType;
		}
		set
		{
			m_AccountType = value;
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref QueryUserInfoByExternalAccountCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		ExternalAccountId = other.ExternalAccountId;
		AccountType = other.AccountType;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref QueryUserInfoByExternalAccountCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			ExternalAccountId = other.Value.ExternalAccountId;
			AccountType = other.Value.AccountType;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ExternalAccountId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out QueryUserInfoByExternalAccountCallbackInfo output)
	{
		output = default(QueryUserInfoByExternalAccountCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryUserInfoByExternalAccountOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public Utf8String ExternalAccountId { get; set; }

	public ExternalAccountType AccountType { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryUserInfoByExternalAccountOptionsInternal : ISettable<QueryUserInfoByExternalAccountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ExternalAccountId;

	private ExternalAccountType m_AccountType;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String ExternalAccountId
	{
		set
		{
			Helper.Set(value, ref m_ExternalAccountId);
		}
	}

	public ExternalAccountType AccountType
	{
		set
		{
			m_AccountType = value;
		}
	}

	public void Set(ref QueryUserInfoByExternalAccountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ExternalAccountId = other.ExternalAccountId;
		AccountType = other.AccountType;
	}

	public void Set(ref QueryUserInfoByExternalAccountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ExternalAccountId = other.Value.ExternalAccountId;
			AccountType = other.Value.AccountType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ExternalAccountId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public struct QueryUserInfoCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryUserInfoCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryUserInfoCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryUserInfoCallbackInfo>, ISettable<QueryUserInfoCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref QueryUserInfoCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref QueryUserInfoCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out QueryUserInfoCallbackInfo output)
	{
		output = default(QueryUserInfoCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryUserInfoOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryUserInfoOptionsInternal : ISettable<QueryUserInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref QueryUserInfoOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref QueryUserInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public struct UserInfoData
{
	public EpicAccountId UserId { get; set; }

	public Utf8String Country { get; set; }

	public Utf8String DisplayName { get; set; }

	public Utf8String PreferredLanguage { get; set; }

	public Utf8String Nickname { get; set; }

	public Utf8String DisplayNameSanitized { get; set; }

	internal void Set(ref UserInfoDataInternal other)
	{
		UserId = other.UserId;
		Country = other.Country;
		DisplayName = other.DisplayName;
		PreferredLanguage = other.PreferredLanguage;
		Nickname = other.Nickname;
		DisplayNameSanitized = other.DisplayNameSanitized;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UserInfoDataInternal : IGettable<UserInfoData>, ISettable<UserInfoData>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	private IntPtr m_Country;

	private IntPtr m_DisplayName;

	private IntPtr m_PreferredLanguage;

	private IntPtr m_Nickname;

	private IntPtr m_DisplayNameSanitized;

	public EpicAccountId UserId
	{
		get
		{
			Helper.Get(m_UserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public Utf8String Country
	{
		get
		{
			Helper.Get(m_Country, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Country);
		}
	}

	public Utf8String DisplayName
	{
		get
		{
			Helper.Get(m_DisplayName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayName);
		}
	}

	public Utf8String PreferredLanguage
	{
		get
		{
			Helper.Get(m_PreferredLanguage, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PreferredLanguage);
		}
	}

	public Utf8String Nickname
	{
		get
		{
			Helper.Get(m_Nickname, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Nickname);
		}
	}

	public Utf8String DisplayNameSanitized
	{
		get
		{
			Helper.Get(m_DisplayNameSanitized, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DisplayNameSanitized);
		}
	}

	public void Set(ref UserInfoData other)
	{
		m_ApiVersion = 3;
		UserId = other.UserId;
		Country = other.Country;
		DisplayName = other.DisplayName;
		PreferredLanguage = other.PreferredLanguage;
		Nickname = other.Nickname;
		DisplayNameSanitized = other.DisplayNameSanitized;
	}

	public void Set(ref UserInfoData? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			UserId = other.Value.UserId;
			Country = other.Value.Country;
			DisplayName = other.Value.DisplayName;
			PreferredLanguage = other.Value.PreferredLanguage;
			Nickname = other.Value.Nickname;
			DisplayNameSanitized = other.Value.DisplayNameSanitized;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
		Helper.Dispose(ref m_Country);
		Helper.Dispose(ref m_DisplayName);
		Helper.Dispose(ref m_PreferredLanguage);
		Helper.Dispose(ref m_Nickname);
		Helper.Dispose(ref m_DisplayNameSanitized);
	}

	public void Get(out UserInfoData output)
	{
		output = default(UserInfoData);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.UserInfo;

public sealed class UserInfoInterface : Handle
{
	public const int BestdisplaynameApiLatest = 1;

	public const int CopybestdisplaynameApiLatest = 1;

	public const int CopybestdisplaynamewithplatformApiLatest = 1;

	public const int CopyexternaluserinfobyaccountidApiLatest = 1;

	public const int CopyexternaluserinfobyaccounttypeApiLatest = 1;

	public const int CopyexternaluserinfobyindexApiLatest = 1;

	public const int CopyuserinfoApiLatest = 3;

	public const int ExternaluserinfoApiLatest = 2;

	public const int GetexternaluserinfocountApiLatest = 1;

	public const int GetlocalplatformtypeApiLatest = 1;

	public const int MaxDisplaynameCharacters = 16;

	public const int MaxDisplaynameUtf8Length = 64;

	public const int QueryuserinfoApiLatest = 1;

	public const int QueryuserinfobydisplaynameApiLatest = 1;

	public const int QueryuserinfobyexternalaccountApiLatest = 1;

	public UserInfoInterface()
	{
	}

	public UserInfoInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyBestDisplayName(ref CopyBestDisplayNameOptions options, out BestDisplayName? outBestDisplayName)
	{
		CopyBestDisplayNameOptionsInternal options2 = default(CopyBestDisplayNameOptionsInternal);
		options2.Set(ref options);
		IntPtr outBestDisplayName2 = IntPtr.Zero;
		Result result = Bindings.EOS_UserInfo_CopyBestDisplayName(base.InnerHandle, ref options2, ref outBestDisplayName2);
		Helper.Dispose(ref options2);
		Helper.Get<BestDisplayNameInternal, BestDisplayName>(outBestDisplayName2, out outBestDisplayName);
		if (outBestDisplayName.HasValue)
		{
			Bindings.EOS_UserInfo_BestDisplayName_Release(outBestDisplayName2);
		}
		return result;
	}

	public Result CopyBestDisplayNameWithPlatform(ref CopyBestDisplayNameWithPlatformOptions options, out BestDisplayName? outBestDisplayName)
	{
		CopyBestDisplayNameWithPlatformOptionsInternal options2 = default(CopyBestDisplayNameWithPlatformOptionsInternal);
		options2.Set(ref options);
		IntPtr outBestDisplayName2 = IntPtr.Zero;
		Result result = Bindings.EOS_UserInfo_CopyBestDisplayNameWithPlatform(base.InnerHandle, ref options2, ref outBestDisplayName2);
		Helper.Dispose(ref options2);
		Helper.Get<BestDisplayNameInternal, BestDisplayName>(outBestDisplayName2, out outBestDisplayName);
		if (outBestDisplayName.HasValue)
		{
			Bindings.EOS_UserInfo_BestDisplayName_Release(outBestDisplayName2);
		}
		return result;
	}

	public Result CopyExternalUserInfoByAccountId(ref CopyExternalUserInfoByAccountIdOptions options, out ExternalUserInfo? outExternalUserInfo)
	{
		CopyExternalUserInfoByAccountIdOptionsInternal options2 = default(CopyExternalUserInfoByAccountIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalUserInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_UserInfo_CopyExternalUserInfoByAccountId(base.InnerHandle, ref options2, ref outExternalUserInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalUserInfoInternal, ExternalUserInfo>(outExternalUserInfo2, out outExternalUserInfo);
		if (outExternalUserInfo.HasValue)
		{
			Bindings.EOS_UserInfo_ExternalUserInfo_Release(outExternalUserInfo2);
		}
		return result;
	}

	public Result CopyExternalUserInfoByAccountType(ref CopyExternalUserInfoByAccountTypeOptions options, out ExternalUserInfo? outExternalUserInfo)
	{
		CopyExternalUserInfoByAccountTypeOptionsInternal options2 = default(CopyExternalUserInfoByAccountTypeOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalUserInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_UserInfo_CopyExternalUserInfoByAccountType(base.InnerHandle, ref options2, ref outExternalUserInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalUserInfoInternal, ExternalUserInfo>(outExternalUserInfo2, out outExternalUserInfo);
		if (outExternalUserInfo.HasValue)
		{
			Bindings.EOS_UserInfo_ExternalUserInfo_Release(outExternalUserInfo2);
		}
		return result;
	}

	public Result CopyExternalUserInfoByIndex(ref CopyExternalUserInfoByIndexOptions options, out ExternalUserInfo? outExternalUserInfo)
	{
		CopyExternalUserInfoByIndexOptionsInternal options2 = default(CopyExternalUserInfoByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outExternalUserInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_UserInfo_CopyExternalUserInfoByIndex(base.InnerHandle, ref options2, ref outExternalUserInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ExternalUserInfoInternal, ExternalUserInfo>(outExternalUserInfo2, out outExternalUserInfo);
		if (outExternalUserInfo.HasValue)
		{
			Bindings.EOS_UserInfo_ExternalUserInfo_Release(outExternalUserInfo2);
		}
		return result;
	}

	public Result CopyUserInfo(ref CopyUserInfoOptions options, out UserInfoData? outUserInfo)
	{
		CopyUserInfoOptionsInternal options2 = default(CopyUserInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outUserInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_UserInfo_CopyUserInfo(base.InnerHandle, ref options2, ref outUserInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<UserInfoDataInternal, UserInfoData>(outUserInfo2, out outUserInfo);
		if (outUserInfo.HasValue)
		{
			Bindings.EOS_UserInfo_Release(outUserInfo2);
		}
		return result;
	}

	public uint GetExternalUserInfoCount(ref GetExternalUserInfoCountOptions options)
	{
		GetExternalUserInfoCountOptionsInternal options2 = default(GetExternalUserInfoCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_UserInfo_GetExternalUserInfoCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetLocalPlatformType(ref GetLocalPlatformTypeOptions options)
	{
		GetLocalPlatformTypeOptionsInternal options2 = default(GetLocalPlatformTypeOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_UserInfo_GetLocalPlatformType(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryUserInfo(ref QueryUserInfoOptions options, object clientData, OnQueryUserInfoCallback completionDelegate)
	{
		QueryUserInfoOptionsInternal options2 = default(QueryUserInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryUserInfoCallbackInternal onQueryUserInfoCallbackInternal = OnQueryUserInfoCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryUserInfoCallbackInternal);
		Bindings.EOS_UserInfo_QueryUserInfo(base.InnerHandle, ref options2, clientDataAddress, onQueryUserInfoCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryUserInfoByDisplayName(ref QueryUserInfoByDisplayNameOptions options, object clientData, OnQueryUserInfoByDisplayNameCallback completionDelegate)
	{
		QueryUserInfoByDisplayNameOptionsInternal options2 = default(QueryUserInfoByDisplayNameOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryUserInfoByDisplayNameCallbackInternal onQueryUserInfoByDisplayNameCallbackInternal = OnQueryUserInfoByDisplayNameCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryUserInfoByDisplayNameCallbackInternal);
		Bindings.EOS_UserInfo_QueryUserInfoByDisplayName(base.InnerHandle, ref options2, clientDataAddress, onQueryUserInfoByDisplayNameCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryUserInfoByExternalAccount(ref QueryUserInfoByExternalAccountOptions options, object clientData, OnQueryUserInfoByExternalAccountCallback completionDelegate)
	{
		QueryUserInfoByExternalAccountOptionsInternal options2 = default(QueryUserInfoByExternalAccountOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryUserInfoByExternalAccountCallbackInternal onQueryUserInfoByExternalAccountCallbackInternal = OnQueryUserInfoByExternalAccountCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryUserInfoByExternalAccountCallbackInternal);
		Bindings.EOS_UserInfo_QueryUserInfoByExternalAccount(base.InnerHandle, ref options2, clientDataAddress, onQueryUserInfoByExternalAccountCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnQueryUserInfoByDisplayNameCallbackInternal))]
	internal static void OnQueryUserInfoByDisplayNameCallbackInternalImplementation(ref QueryUserInfoByDisplayNameCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryUserInfoByDisplayNameCallbackInfoInternal, OnQueryUserInfoByDisplayNameCallback, QueryUserInfoByDisplayNameCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryUserInfoByExternalAccountCallbackInternal))]
	internal static void OnQueryUserInfoByExternalAccountCallbackInternalImplementation(ref QueryUserInfoByExternalAccountCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryUserInfoByExternalAccountCallbackInfoInternal, OnQueryUserInfoByExternalAccountCallback, QueryUserInfoByExternalAccountCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryUserInfoCallbackInternal))]
	internal static void OnQueryUserInfoCallbackInternalImplementation(ref QueryUserInfoCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryUserInfoCallbackInfoInternal, OnQueryUserInfoCallback, QueryUserInfoCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct AcknowledgeEventIdOptions
{
	public ulong UiEventId { get; set; }

	public Result Result { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AcknowledgeEventIdOptionsInternal : ISettable<AcknowledgeEventIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_UiEventId;

	private Result m_Result;

	public ulong UiEventId
	{
		set
		{
			m_UiEventId = value;
		}
	}

	public Result Result
	{
		set
		{
			m_Result = value;
		}
	}

	public void Set(ref AcknowledgeEventIdOptions other)
	{
		m_ApiVersion = 1;
		UiEventId = other.UiEventId;
		Result = other.Result;
	}

	public void Set(ref AcknowledgeEventIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UiEventId = other.Value.UiEventId;
			Result = other.Value.Result;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyDisplaySettingsUpdatedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyDisplaySettingsUpdatedOptionsInternal : ISettable<AddNotifyDisplaySettingsUpdatedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyDisplaySettingsUpdatedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyDisplaySettingsUpdatedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyMemoryMonitorOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyMemoryMonitorOptionsInternal : ISettable<AddNotifyMemoryMonitorOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyMemoryMonitorOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyMemoryMonitorOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct GetFriendsExclusiveInputOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetFriendsExclusiveInputOptionsInternal : ISettable<GetFriendsExclusiveInputOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetFriendsExclusiveInputOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetFriendsExclusiveInputOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetFriendsVisibleOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetFriendsVisibleOptionsInternal : ISettable<GetFriendsVisibleOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetFriendsVisibleOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetFriendsVisibleOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetToggleFriendsButtonOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetToggleFriendsButtonOptionsInternal : ISettable<GetToggleFriendsButtonOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetToggleFriendsButtonOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetToggleFriendsButtonOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetToggleFriendsKeyOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetToggleFriendsKeyOptionsInternal : ISettable<GetToggleFriendsKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetToggleFriendsKeyOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetToggleFriendsKeyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct HideFriendsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref HideFriendsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct HideFriendsCallbackInfoInternal : ICallbackInfoInternal, IGettable<HideFriendsCallbackInfo>, ISettable<HideFriendsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref HideFriendsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref HideFriendsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out HideFriendsCallbackInfo output)
	{
		output = default(HideFriendsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct HideFriendsOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct HideFriendsOptionsInternal : ISettable<HideFriendsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref HideFriendsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref HideFriendsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System;

[Flags]
public enum InputStateButtonFlags
{
	None = 0,
	DPadLeft = 1,
	DPadRight = 2,
	DPadDown = 4,
	DPadUp = 8,
	FaceButtonLeft = 0x10,
	FaceButtonRight = 0x20,
	FaceButtonBottom = 0x40,
	FaceButtonTop = 0x80,
	LeftShoulder = 0x100,
	RightShoulder = 0x200,
	LeftTrigger = 0x400,
	RightTrigger = 0x800,
	SpecialLeft = 0x1000,
	SpecialRight = 0x2000,
	LeftThumbstick = 0x4000,
	RightThumbstick = 0x8000
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct IsSocialOverlayPausedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IsSocialOverlayPausedOptionsInternal : ISettable<IsSocialOverlayPausedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref IsSocialOverlayPausedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref IsSocialOverlayPausedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System;

[Flags]
public enum KeyCombination
{
	ModifierShift = 0x10,
	KeyTypeMask = 0xFFFF,
	ModifierMask = -65536,
	Shift = 0x10000,
	Control = 0x20000,
	Alt = 0x40000,
	Meta = 0x80000,
	ValidModifierMask = 0xF0000,
	None = 0,
	Space = 1,
	Backspace = 2,
	Tab = 3,
	Escape = 4,
	PageUp = 5,
	PageDown = 6,
	End = 7,
	Home = 8,
	Insert = 9,
	Delete = 0xA,
	Left = 0xB,
	Up = 0xC,
	Right = 0xD,
	Down = 0xE,
	Key0 = 0xF,
	Key1 = 0x10,
	Key2 = 0x11,
	Key3 = 0x12,
	Key4 = 0x13,
	Key5 = 0x14,
	Key6 = 0x15,
	Key7 = 0x16,
	Key8 = 0x17,
	Key9 = 0x18,
	KeyA = 0x19,
	KeyB = 0x1A,
	KeyC = 0x1B,
	KeyD = 0x1C,
	KeyE = 0x1D,
	KeyF = 0x1E,
	KeyG = 0x1F,
	KeyH = 0x20,
	KeyI = 0x21,
	KeyJ = 0x22,
	KeyK = 0x23,
	KeyL = 0x24,
	KeyM = 0x25,
	KeyN = 0x26,
	KeyO = 0x27,
	KeyP = 0x28,
	KeyQ = 0x29,
	KeyR = 0x2A,
	KeyS = 0x2B,
	KeyT = 0x2C,
	KeyU = 0x2D,
	KeyV = 0x2E,
	KeyW = 0x2F,
	KeyX = 0x30,
	KeyY = 0x31,
	KeyZ = 0x32,
	Numpad0 = 0x33,
	Numpad1 = 0x34,
	Numpad2 = 0x35,
	Numpad3 = 0x36,
	Numpad4 = 0x37,
	Numpad5 = 0x38,
	Numpad6 = 0x39,
	Numpad7 = 0x3A,
	Numpad8 = 0x3B,
	Numpad9 = 0x3C,
	NumpadAsterisk = 0x3D,
	NumpadPlus = 0x3E,
	NumpadMinus = 0x3F,
	NumpadPeriod = 0x40,
	NumpadDivide = 0x41,
	F1 = 0x42,
	F2 = 0x43,
	F3 = 0x44,
	F4 = 0x45,
	F5 = 0x46,
	F6 = 0x47,
	F7 = 0x48,
	F8 = 0x49,
	F9 = 0x4A,
	F10 = 0x4B,
	F11 = 0x4C,
	F12 = 0x4D,
	F13 = 0x4E,
	F14 = 0x4F,
	F15 = 0x50,
	F16 = 0x51,
	F17 = 0x52,
	F18 = 0x53,
	F19 = 0x54,
	F20 = 0x55,
	F21 = 0x56,
	F22 = 0x57,
	F23 = 0x58,
	F24 = 0x59,
	OemPlus = 0x5A,
	OemComma = 0x5B,
	OemMinus = 0x5C,
	OemPeriod = 0x5D,
	Oem1 = 0x5E,
	Oem2 = 0x5F,
	Oem3 = 0x60,
	Oem4 = 0x61,
	Oem5 = 0x62,
	Oem6 = 0x63,
	Oem7 = 0x64,
	Oem8 = 0x65,
	MaxKeyType = 0x66
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct MemoryMonitorCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public IntPtr SystemMemoryMonitorReport { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref MemoryMonitorCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		SystemMemoryMonitorReport = other.SystemMemoryMonitorReport;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct MemoryMonitorCallbackInfoInternal : ICallbackInfoInternal, IGettable<MemoryMonitorCallbackInfo>, ISettable<MemoryMonitorCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_SystemMemoryMonitorReport;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public IntPtr SystemMemoryMonitorReport
	{
		get
		{
			return m_SystemMemoryMonitorReport;
		}
		set
		{
			m_SystemMemoryMonitorReport = value;
		}
	}

	public void Set(ref MemoryMonitorCallbackInfo other)
	{
		ClientData = other.ClientData;
		SystemMemoryMonitorReport = other.SystemMemoryMonitorReport;
	}

	public void Set(ref MemoryMonitorCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			SystemMemoryMonitorReport = other.Value.SystemMemoryMonitorReport;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_SystemMemoryMonitorReport);
	}

	public void Get(out MemoryMonitorCallbackInfo output)
	{
		output = default(MemoryMonitorCallbackInfo);
		output.Set(ref this);
	}
}


public enum NotificationLocation
{
	TopLeft,
	TopRight,
	BottomLeft,
	BottomRight
}


using Epic.OnlineServices.UI;

public delegate void OnDisplaySettingsUpdatedCallback(ref OnDisplaySettingsUpdatedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDisplaySettingsUpdatedCallbackInternal(ref OnDisplaySettingsUpdatedCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct OnDisplaySettingsUpdatedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public bool IsVisible { get; set; }

	public bool IsExclusiveInput { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref OnDisplaySettingsUpdatedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		IsVisible = other.IsVisible;
		IsExclusiveInput = other.IsExclusiveInput;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnDisplaySettingsUpdatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnDisplaySettingsUpdatedCallbackInfo>, ISettable<OnDisplaySettingsUpdatedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private int m_IsVisible;

	private int m_IsExclusiveInput;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public bool IsVisible
	{
		get
		{
			Helper.Get(m_IsVisible, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsVisible);
		}
	}

	public bool IsExclusiveInput
	{
		get
		{
			Helper.Get(m_IsExclusiveInput, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsExclusiveInput);
		}
	}

	public void Set(ref OnDisplaySettingsUpdatedCallbackInfo other)
	{
		ClientData = other.ClientData;
		IsVisible = other.IsVisible;
		IsExclusiveInput = other.IsExclusiveInput;
	}

	public void Set(ref OnDisplaySettingsUpdatedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			IsVisible = other.Value.IsVisible;
			IsExclusiveInput = other.Value.IsExclusiveInput;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnDisplaySettingsUpdatedCallbackInfo output)
	{
		output = default(OnDisplaySettingsUpdatedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.UI;

public delegate void OnHideFriendsCallback(ref HideFriendsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnHideFriendsCallbackInternal(ref HideFriendsCallbackInfoInternal data);


using Epic.OnlineServices.UI;

public delegate void OnMemoryMonitorCallback(ref MemoryMonitorCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnMemoryMonitorCallbackInternal(ref MemoryMonitorCallbackInfoInternal data);


using Epic.OnlineServices.UI;

public delegate void OnShowBlockPlayerCallback(ref OnShowBlockPlayerCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnShowBlockPlayerCallbackInternal(ref OnShowBlockPlayerCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct OnShowBlockPlayerCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnShowBlockPlayerCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnShowBlockPlayerCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnShowBlockPlayerCallbackInfo>, ISettable<OnShowBlockPlayerCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref OnShowBlockPlayerCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref OnShowBlockPlayerCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out OnShowBlockPlayerCallbackInfo output)
	{
		output = default(OnShowBlockPlayerCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.UI;

public delegate void OnShowFriendsCallback(ref ShowFriendsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnShowFriendsCallbackInternal(ref ShowFriendsCallbackInfoInternal data);


using Epic.OnlineServices.UI;

public delegate void OnShowNativeProfileCallback(ref ShowNativeProfileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnShowNativeProfileCallbackInternal(ref ShowNativeProfileCallbackInfoInternal data);


using Epic.OnlineServices.UI;

public delegate void OnShowReportPlayerCallback(ref OnShowReportPlayerCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.UI;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnShowReportPlayerCallbackInternal(ref OnShowReportPlayerCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct OnShowReportPlayerCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnShowReportPlayerCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnShowReportPlayerCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnShowReportPlayerCallbackInfo>, ISettable<OnShowReportPlayerCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref OnShowReportPlayerCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref OnShowReportPlayerCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out OnShowReportPlayerCallbackInfo output)
	{
		output = default(OnShowReportPlayerCallbackInfo);
		output.Set(ref this);
	}
}


public struct PauseSocialOverlayOptions
{
	public bool IsPaused { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PauseSocialOverlayOptionsInternal : ISettable<PauseSocialOverlayOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_IsPaused;

	public bool IsPaused
	{
		set
		{
			Helper.Set(value, ref m_IsPaused);
		}
	}

	public void Set(ref PauseSocialOverlayOptions other)
	{
		m_ApiVersion = 1;
		IsPaused = other.IsPaused;
	}

	public void Set(ref PauseSocialOverlayOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			IsPaused = other.Value.IsPaused;
		}
	}

	public void Dispose()
	{
	}
}


using System;

public struct PrePresentOptions
{
	public IntPtr PlatformSpecificData { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PrePresentOptionsInternal : ISettable<PrePresentOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformSpecificData;

	public IntPtr PlatformSpecificData
	{
		set
		{
			m_PlatformSpecificData = value;
		}
	}

	public void Set(ref PrePresentOptions other)
	{
		m_ApiVersion = 1;
		PlatformSpecificData = other.PlatformSpecificData;
	}

	public void Set(ref PrePresentOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlatformSpecificData = other.Value.PlatformSpecificData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformSpecificData);
	}
}


using Epic.OnlineServices.UI;

public struct Rect
{
	public int X { get; set; }

	public int Y { get; set; }

	public uint Width { get; set; }

	public uint Height { get; set; }

	internal void Set(ref RectInternal other)
	{
		X = other.X;
		Y = other.Y;
		Width = other.Width;
		Height = other.Height;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RectInternal : IGettable<Rect>, ISettable<Rect>, IDisposable
{
	private int m_ApiVersion;

	private int m_X;

	private int m_Y;

	private uint m_Width;

	private uint m_Height;

	public int X
	{
		get
		{
			return m_X;
		}
		set
		{
			m_X = value;
		}
	}

	public int Y
	{
		get
		{
			return m_Y;
		}
		set
		{
			m_Y = value;
		}
	}

	public uint Width
	{
		get
		{
			return m_Width;
		}
		set
		{
			m_Width = value;
		}
	}

	public uint Height
	{
		get
		{
			return m_Height;
		}
		set
		{
			m_Height = value;
		}
	}

	public void Set(ref Rect other)
	{
		m_ApiVersion = 1;
		X = other.X;
		Y = other.Y;
		Width = other.Width;
		Height = other.Height;
	}

	public void Set(ref Rect? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			X = other.Value.X;
			Y = other.Value.Y;
			Width = other.Value.Width;
			Height = other.Value.Height;
		}
	}

	public void Dispose()
	{
	}

	public void Get(out Rect output)
	{
		output = default(Rect);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.UI;

public struct ReportInputStateOptions
{
	public InputStateButtonFlags ButtonDownFlags { get; set; }

	public bool AcceptIsFaceButtonRight { get; set; }

	public bool MouseButtonDown { get; set; }

	public uint MousePosX { get; set; }

	public uint MousePosY { get; set; }

	public uint GamepadIndex { get; set; }

	public float LeftStickX { get; set; }

	public float LeftStickY { get; set; }

	public float RightStickX { get; set; }

	public float RightStickY { get; set; }

	public float LeftTrigger { get; set; }

	public float RightTrigger { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReportInputStateOptionsInternal : ISettable<ReportInputStateOptions>, IDisposable
{
	private int m_ApiVersion;

	private InputStateButtonFlags m_ButtonDownFlags;

	private int m_AcceptIsFaceButtonRight;

	private int m_MouseButtonDown;

	private uint m_MousePosX;

	private uint m_MousePosY;

	private uint m_GamepadIndex;

	private float m_LeftStickX;

	private float m_LeftStickY;

	private float m_RightStickX;

	private float m_RightStickY;

	private float m_LeftTrigger;

	private float m_RightTrigger;

	public InputStateButtonFlags ButtonDownFlags
	{
		set
		{
			m_ButtonDownFlags = value;
		}
	}

	public bool AcceptIsFaceButtonRight
	{
		set
		{
			Helper.Set(value, ref m_AcceptIsFaceButtonRight);
		}
	}

	public bool MouseButtonDown
	{
		set
		{
			Helper.Set(value, ref m_MouseButtonDown);
		}
	}

	public uint MousePosX
	{
		set
		{
			m_MousePosX = value;
		}
	}

	public uint MousePosY
	{
		set
		{
			m_MousePosY = value;
		}
	}

	public uint GamepadIndex
	{
		set
		{
			m_GamepadIndex = value;
		}
	}

	public float LeftStickX
	{
		set
		{
			m_LeftStickX = value;
		}
	}

	public float LeftStickY
	{
		set
		{
			m_LeftStickY = value;
		}
	}

	public float RightStickX
	{
		set
		{
			m_RightStickX = value;
		}
	}

	public float RightStickY
	{
		set
		{
			m_RightStickY = value;
		}
	}

	public float LeftTrigger
	{
		set
		{
			m_LeftTrigger = value;
		}
	}

	public float RightTrigger
	{
		set
		{
			m_RightTrigger = value;
		}
	}

	public void Set(ref ReportInputStateOptions other)
	{
		m_ApiVersion = 2;
		ButtonDownFlags = other.ButtonDownFlags;
		AcceptIsFaceButtonRight = other.AcceptIsFaceButtonRight;
		MouseButtonDown = other.MouseButtonDown;
		MousePosX = other.MousePosX;
		MousePosY = other.MousePosY;
		GamepadIndex = other.GamepadIndex;
		LeftStickX = other.LeftStickX;
		LeftStickY = other.LeftStickY;
		RightStickX = other.RightStickX;
		RightStickY = other.RightStickY;
		LeftTrigger = other.LeftTrigger;
		RightTrigger = other.RightTrigger;
	}

	public void Set(ref ReportInputStateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			ButtonDownFlags = other.Value.ButtonDownFlags;
			AcceptIsFaceButtonRight = other.Value.AcceptIsFaceButtonRight;
			MouseButtonDown = other.Value.MouseButtonDown;
			MousePosX = other.Value.MousePosX;
			MousePosY = other.Value.MousePosY;
			GamepadIndex = other.Value.GamepadIndex;
			LeftStickX = other.Value.LeftStickX;
			LeftStickY = other.Value.LeftStickY;
			RightStickX = other.Value.RightStickX;
			RightStickY = other.Value.RightStickY;
			LeftTrigger = other.Value.LeftTrigger;
			RightTrigger = other.Value.RightTrigger;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.UI;

public struct SetDisplayPreferenceOptions
{
	public NotificationLocation NotificationLocation { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetDisplayPreferenceOptionsInternal : ISettable<SetDisplayPreferenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private NotificationLocation m_NotificationLocation;

	public NotificationLocation NotificationLocation
	{
		set
		{
			m_NotificationLocation = value;
		}
	}

	public void Set(ref SetDisplayPreferenceOptions other)
	{
		m_ApiVersion = 1;
		NotificationLocation = other.NotificationLocation;
	}

	public void Set(ref SetDisplayPreferenceOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			NotificationLocation = other.Value.NotificationLocation;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.UI;

public struct SetToggleFriendsButtonOptions
{
	public InputStateButtonFlags ButtonCombination { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetToggleFriendsButtonOptionsInternal : ISettable<SetToggleFriendsButtonOptions>, IDisposable
{
	private int m_ApiVersion;

	private InputStateButtonFlags m_ButtonCombination;

	public InputStateButtonFlags ButtonCombination
	{
		set
		{
			m_ButtonCombination = value;
		}
	}

	public void Set(ref SetToggleFriendsButtonOptions other)
	{
		m_ApiVersion = 1;
		ButtonCombination = other.ButtonCombination;
	}

	public void Set(ref SetToggleFriendsButtonOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			ButtonCombination = other.Value.ButtonCombination;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.UI;

public struct SetToggleFriendsKeyOptions
{
	public KeyCombination KeyCombination { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetToggleFriendsKeyOptionsInternal : ISettable<SetToggleFriendsKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private KeyCombination m_KeyCombination;

	public KeyCombination KeyCombination
	{
		set
		{
			m_KeyCombination = value;
		}
	}

	public void Set(ref SetToggleFriendsKeyOptions other)
	{
		m_ApiVersion = 1;
		KeyCombination = other.KeyCombination;
	}

	public void Set(ref SetToggleFriendsKeyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			KeyCombination = other.Value.KeyCombination;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct ShowBlockPlayerOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ShowBlockPlayerOptionsInternal : ISettable<ShowBlockPlayerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref ShowBlockPlayerOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref ShowBlockPlayerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct ShowFriendsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref ShowFriendsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ShowFriendsCallbackInfoInternal : ICallbackInfoInternal, IGettable<ShowFriendsCallbackInfo>, ISettable<ShowFriendsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref ShowFriendsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref ShowFriendsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out ShowFriendsCallbackInfo output)
	{
		output = default(ShowFriendsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct ShowFriendsOptions
{
	public EpicAccountId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ShowFriendsOptionsInternal : ISettable<ShowFriendsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref ShowFriendsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref ShowFriendsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public struct ShowNativeProfileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref ShowNativeProfileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ShowNativeProfileCallbackInfoInternal : ICallbackInfoInternal, IGettable<ShowNativeProfileCallbackInfo>, ISettable<ShowNativeProfileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public EpicAccountId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out EpicAccountId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref ShowNativeProfileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref ShowNativeProfileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out ShowNativeProfileCallbackInfo output)
	{
		output = default(ShowNativeProfileCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct ShowNativeProfileOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ShowNativeProfileOptionsInternal : ISettable<ShowNativeProfileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref ShowNativeProfileOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref ShowNativeProfileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct ShowReportPlayerOptions
{
	public EpicAccountId LocalUserId { get; set; }

	public EpicAccountId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ShowReportPlayerOptionsInternal : ISettable<ShowReportPlayerOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public EpicAccountId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public EpicAccountId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref ShowReportPlayerOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref ShowReportPlayerOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.UI;

public sealed class UIInterface : Handle
{
	public const int AcknowledgecorrelationidApiLatest = 1;

	public const int AcknowledgeeventidApiLatest = 1;

	public const int AddnotifydisplaysettingsupdatedApiLatest = 1;

	public const int AddnotifymemorymonitorApiLatest = 1;

	public const int AddnotifymemorymonitoroptionsApiLatest = 1;

	public const int EventidInvalid = 0;

	public const int GetfriendsexclusiveinputApiLatest = 1;

	public const int GetfriendsvisibleApiLatest = 1;

	public const int GettogglefriendsbuttonApiLatest = 1;

	public const int GettogglefriendskeyApiLatest = 1;

	public const int HidefriendsApiLatest = 1;

	public const int IssocialoverlaypausedApiLatest = 1;

	public const int MemorymonitorcallbackinfoApiLatest = 1;

	public const int PausesocialoverlayApiLatest = 1;

	public const int PrepresentApiLatest = 1;

	public const int RectApiLatest = 1;

	public const int ReportinputstateApiLatest = 2;

	public const int SetdisplaypreferenceApiLatest = 1;

	public const int SettogglefriendsbuttonApiLatest = 1;

	public const int SettogglefriendskeyApiLatest = 1;

	public const int ShowblockplayerApiLatest = 1;

	public const int ShowfriendsApiLatest = 1;

	public const int ShownativeprofileApiLatest = 1;

	public const int ShowreportplayerApiLatest = 1;

	public UIInterface()
	{
	}

	public UIInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AcknowledgeEventId(ref AcknowledgeEventIdOptions options)
	{
		AcknowledgeEventIdOptionsInternal options2 = default(AcknowledgeEventIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_AcknowledgeEventId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public ulong AddNotifyDisplaySettingsUpdated(ref AddNotifyDisplaySettingsUpdatedOptions options, object clientData, OnDisplaySettingsUpdatedCallback notificationFn)
	{
		AddNotifyDisplaySettingsUpdatedOptionsInternal options2 = default(AddNotifyDisplaySettingsUpdatedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDisplaySettingsUpdatedCallbackInternal onDisplaySettingsUpdatedCallbackInternal = OnDisplaySettingsUpdatedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onDisplaySettingsUpdatedCallbackInternal);
		ulong num = Bindings.EOS_UI_AddNotifyDisplaySettingsUpdated(base.InnerHandle, ref options2, clientDataAddress, onDisplaySettingsUpdatedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyMemoryMonitor(ref AddNotifyMemoryMonitorOptions options, object clientData, OnMemoryMonitorCallback notificationFn)
	{
		AddNotifyMemoryMonitorOptionsInternal options2 = default(AddNotifyMemoryMonitorOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnMemoryMonitorCallbackInternal onMemoryMonitorCallbackInternal = OnMemoryMonitorCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onMemoryMonitorCallbackInternal);
		ulong num = Bindings.EOS_UI_AddNotifyMemoryMonitor(base.InnerHandle, ref options2, clientDataAddress, onMemoryMonitorCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public bool GetFriendsExclusiveInput(ref GetFriendsExclusiveInputOptions options)
	{
		GetFriendsExclusiveInputOptionsInternal options2 = default(GetFriendsExclusiveInputOptionsInternal);
		options2.Set(ref options);
		int from = Bindings.EOS_UI_GetFriendsExclusiveInput(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out var to);
		return to;
	}

	public bool GetFriendsVisible(ref GetFriendsVisibleOptions options)
	{
		GetFriendsVisibleOptionsInternal options2 = default(GetFriendsVisibleOptionsInternal);
		options2.Set(ref options);
		int from = Bindings.EOS_UI_GetFriendsVisible(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out var to);
		return to;
	}

	public NotificationLocation GetNotificationLocationPreference()
	{
		return Bindings.EOS_UI_GetNotificationLocationPreference(base.InnerHandle);
	}

	public InputStateButtonFlags GetToggleFriendsButton(ref GetToggleFriendsButtonOptions options)
	{
		GetToggleFriendsButtonOptionsInternal options2 = default(GetToggleFriendsButtonOptionsInternal);
		options2.Set(ref options);
		InputStateButtonFlags result = Bindings.EOS_UI_GetToggleFriendsButton(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public KeyCombination GetToggleFriendsKey(ref GetToggleFriendsKeyOptions options)
	{
		GetToggleFriendsKeyOptionsInternal options2 = default(GetToggleFriendsKeyOptionsInternal);
		options2.Set(ref options);
		KeyCombination result = Bindings.EOS_UI_GetToggleFriendsKey(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void HideFriends(ref HideFriendsOptions options, object clientData, OnHideFriendsCallback completionDelegate)
	{
		HideFriendsOptionsInternal options2 = default(HideFriendsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnHideFriendsCallbackInternal onHideFriendsCallbackInternal = OnHideFriendsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onHideFriendsCallbackInternal);
		Bindings.EOS_UI_HideFriends(base.InnerHandle, ref options2, clientDataAddress, onHideFriendsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public bool IsSocialOverlayPaused(ref IsSocialOverlayPausedOptions options)
	{
		IsSocialOverlayPausedOptionsInternal options2 = default(IsSocialOverlayPausedOptionsInternal);
		options2.Set(ref options);
		int from = Bindings.EOS_UI_IsSocialOverlayPaused(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out var to);
		return to;
	}

	public bool IsValidButtonCombination(InputStateButtonFlags buttonCombination)
	{
		Helper.Get(Bindings.EOS_UI_IsValidButtonCombination(base.InnerHandle, buttonCombination), out var to);
		return to;
	}

	public bool IsValidKeyCombination(KeyCombination keyCombination)
	{
		Helper.Get(Bindings.EOS_UI_IsValidKeyCombination(base.InnerHandle, keyCombination), out var to);
		return to;
	}

	public Result PauseSocialOverlay(ref PauseSocialOverlayOptions options)
	{
		PauseSocialOverlayOptionsInternal options2 = default(PauseSocialOverlayOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_PauseSocialOverlay(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result PrePresent(ref PrePresentOptions options)
	{
		PrePresentOptionsInternal options2 = default(PrePresentOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_PrePresent(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RemoveNotifyDisplaySettingsUpdated(ulong id)
	{
		Bindings.EOS_UI_RemoveNotifyDisplaySettingsUpdated(base.InnerHandle, id);
		Helper.RemoveCallbackByNotificationId(id);
	}

	public void RemoveNotifyMemoryMonitor(ulong id)
	{
		Bindings.EOS_UI_RemoveNotifyMemoryMonitor(base.InnerHandle, id);
		Helper.RemoveCallbackByNotificationId(id);
	}

	public Result ReportInputState(ref ReportInputStateOptions options)
	{
		ReportInputStateOptionsInternal options2 = default(ReportInputStateOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_ReportInputState(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetDisplayPreference(ref SetDisplayPreferenceOptions options)
	{
		SetDisplayPreferenceOptionsInternal options2 = default(SetDisplayPreferenceOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_SetDisplayPreference(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetToggleFriendsButton(ref SetToggleFriendsButtonOptions options)
	{
		SetToggleFriendsButtonOptionsInternal options2 = default(SetToggleFriendsButtonOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_SetToggleFriendsButton(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetToggleFriendsKey(ref SetToggleFriendsKeyOptions options)
	{
		SetToggleFriendsKeyOptionsInternal options2 = default(SetToggleFriendsKeyOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_UI_SetToggleFriendsKey(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void ShowBlockPlayer(ref ShowBlockPlayerOptions options, object clientData, OnShowBlockPlayerCallback completionDelegate)
	{
		ShowBlockPlayerOptionsInternal options2 = default(ShowBlockPlayerOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnShowBlockPlayerCallbackInternal onShowBlockPlayerCallbackInternal = OnShowBlockPlayerCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onShowBlockPlayerCallbackInternal);
		Bindings.EOS_UI_ShowBlockPlayer(base.InnerHandle, ref options2, clientDataAddress, onShowBlockPlayerCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void ShowFriends(ref ShowFriendsOptions options, object clientData, OnShowFriendsCallback completionDelegate)
	{
		ShowFriendsOptionsInternal options2 = default(ShowFriendsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnShowFriendsCallbackInternal onShowFriendsCallbackInternal = OnShowFriendsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onShowFriendsCallbackInternal);
		Bindings.EOS_UI_ShowFriends(base.InnerHandle, ref options2, clientDataAddress, onShowFriendsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void ShowNativeProfile(ref ShowNativeProfileOptions options, object clientData, OnShowNativeProfileCallback completionDelegate)
	{
		ShowNativeProfileOptionsInternal options2 = default(ShowNativeProfileOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnShowNativeProfileCallbackInternal onShowNativeProfileCallbackInternal = OnShowNativeProfileCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onShowNativeProfileCallbackInternal);
		Bindings.EOS_UI_ShowNativeProfile(base.InnerHandle, ref options2, clientDataAddress, onShowNativeProfileCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void ShowReportPlayer(ref ShowReportPlayerOptions options, object clientData, OnShowReportPlayerCallback completionDelegate)
	{
		ShowReportPlayerOptionsInternal options2 = default(ShowReportPlayerOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnShowReportPlayerCallbackInternal onShowReportPlayerCallbackInternal = OnShowReportPlayerCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onShowReportPlayerCallbackInternal);
		Bindings.EOS_UI_ShowReportPlayer(base.InnerHandle, ref options2, clientDataAddress, onShowReportPlayerCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnDisplaySettingsUpdatedCallbackInternal))]
	internal static void OnDisplaySettingsUpdatedCallbackInternalImplementation(ref OnDisplaySettingsUpdatedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<OnDisplaySettingsUpdatedCallbackInfoInternal, OnDisplaySettingsUpdatedCallback, OnDisplaySettingsUpdatedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnHideFriendsCallbackInternal))]
	internal static void OnHideFriendsCallbackInternalImplementation(ref HideFriendsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<HideFriendsCallbackInfoInternal, OnHideFriendsCallback, HideFriendsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnMemoryMonitorCallbackInternal))]
	internal static void OnMemoryMonitorCallbackInternalImplementation(ref MemoryMonitorCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<MemoryMonitorCallbackInfoInternal, OnMemoryMonitorCallback, MemoryMonitorCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnShowBlockPlayerCallbackInternal))]
	internal static void OnShowBlockPlayerCallbackInternalImplementation(ref OnShowBlockPlayerCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnShowBlockPlayerCallbackInfoInternal, OnShowBlockPlayerCallback, OnShowBlockPlayerCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnShowFriendsCallbackInternal))]
	internal static void OnShowFriendsCallbackInternalImplementation(ref ShowFriendsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<ShowFriendsCallbackInfoInternal, OnShowFriendsCallback, ShowFriendsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnShowNativeProfileCallbackInternal))]
	internal static void OnShowNativeProfileCallbackInternalImplementation(ref ShowNativeProfileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<ShowNativeProfileCallbackInfoInternal, OnShowNativeProfileCallback, ShowNativeProfileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnShowReportPlayerCallbackInternal))]
	internal static void OnShowReportPlayerCallbackInternalImplementation(ref OnShowReportPlayerCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnShowReportPlayerCallbackInfoInternal, OnShowReportPlayerCallback, OnShowReportPlayerCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public sealed class IntegratedPlatform
{
	public static readonly Utf8String IptSteam = "STEAM";

	public static readonly Utf8String IptUnknown = (string)null;
}


public sealed class OnlinePlatform
{
	public const int OptEpic = 100;

	public const int OptNintendo = 2000;

	public const int OptPsn = 1000;

	public const int OptSteam = 4000;

	public const int OptUnknown = 0;

	public const int OptXbl = 3000;
}


using Epic.OnlineServices;

public struct CopyFileMetadataAtIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyFileMetadataAtIndexOptionsInternal : ISettable<CopyFileMetadataAtIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref CopyFileMetadataAtIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref CopyFileMetadataAtIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CopyFileMetadataByFilenameOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyFileMetadataByFilenameOptionsInternal : ISettable<CopyFileMetadataByFilenameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref CopyFileMetadataByFilenameOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref CopyFileMetadataByFilenameOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct DeleteCacheCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DeleteCacheCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteCacheCallbackInfoInternal : ICallbackInfoInternal, IGettable<DeleteCacheCallbackInfo>, ISettable<DeleteCacheCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DeleteCacheCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DeleteCacheCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out DeleteCacheCallbackInfo output)
	{
		output = default(DeleteCacheCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DeleteCacheOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DeleteCacheOptionsInternal : ISettable<DeleteCacheOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref DeleteCacheOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref DeleteCacheOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct FileMetadata
{
	public uint FileSizeBytes { get; set; }

	public Utf8String MD5Hash { get; set; }

	public Utf8String Filename { get; set; }

	public uint UnencryptedDataSizeBytes { get; set; }

	internal void Set(ref FileMetadataInternal other)
	{
		FileSizeBytes = other.FileSizeBytes;
		MD5Hash = other.MD5Hash;
		Filename = other.Filename;
		UnencryptedDataSizeBytes = other.UnencryptedDataSizeBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct FileMetadataInternal : IGettable<FileMetadata>, ISettable<FileMetadata>, IDisposable
{
	private int m_ApiVersion;

	private uint m_FileSizeBytes;

	private IntPtr m_MD5Hash;

	private IntPtr m_Filename;

	private uint m_UnencryptedDataSizeBytes;

	public uint FileSizeBytes
	{
		get
		{
			return m_FileSizeBytes;
		}
		set
		{
			m_FileSizeBytes = value;
		}
	}

	public Utf8String MD5Hash
	{
		get
		{
			Helper.Get(m_MD5Hash, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_MD5Hash);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint UnencryptedDataSizeBytes
	{
		get
		{
			return m_UnencryptedDataSizeBytes;
		}
		set
		{
			m_UnencryptedDataSizeBytes = value;
		}
	}

	public void Set(ref FileMetadata other)
	{
		m_ApiVersion = 2;
		FileSizeBytes = other.FileSizeBytes;
		MD5Hash = other.MD5Hash;
		Filename = other.Filename;
		UnencryptedDataSizeBytes = other.UnencryptedDataSizeBytes;
	}

	public void Set(ref FileMetadata? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			FileSizeBytes = other.Value.FileSizeBytes;
			MD5Hash = other.Value.MD5Hash;
			Filename = other.Value.Filename;
			UnencryptedDataSizeBytes = other.Value.UnencryptedDataSizeBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_MD5Hash);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out FileMetadata output)
	{
		output = default(FileMetadata);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct FileTransferProgressCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint BytesTransferred { get; set; }

	public uint TotalFileSizeBytes { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref FileTransferProgressCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		BytesTransferred = other.BytesTransferred;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct FileTransferProgressCallbackInfoInternal : ICallbackInfoInternal, IGettable<FileTransferProgressCallbackInfo>, ISettable<FileTransferProgressCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_BytesTransferred;

	private uint m_TotalFileSizeBytes;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint BytesTransferred
	{
		get
		{
			return m_BytesTransferred;
		}
		set
		{
			m_BytesTransferred = value;
		}
	}

	public uint TotalFileSizeBytes
	{
		get
		{
			return m_TotalFileSizeBytes;
		}
		set
		{
			m_TotalFileSizeBytes = value;
		}
	}

	public void Set(ref FileTransferProgressCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		BytesTransferred = other.BytesTransferred;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
	}

	public void Set(ref FileTransferProgressCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			BytesTransferred = other.Value.BytesTransferred;
			TotalFileSizeBytes = other.Value.TotalFileSizeBytes;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out FileTransferProgressCallbackInfo output)
	{
		output = default(FileTransferProgressCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct GetFileMetadataCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetFileMetadataCountOptionsInternal : ISettable<GetFileMetadataCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetFileMetadataCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetFileMetadataCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices.TitleStorage;

public delegate void OnDeleteCacheCompleteCallback(ref DeleteCacheCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.TitleStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDeleteCacheCompleteCallbackInternal(ref DeleteCacheCallbackInfoInternal data);


using Epic.OnlineServices.TitleStorage;

public delegate void OnFileTransferProgressCallback(ref FileTransferProgressCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.TitleStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnFileTransferProgressCallbackInternal(ref FileTransferProgressCallbackInfoInternal data);


using Epic.OnlineServices.TitleStorage;

public delegate void OnQueryFileCompleteCallback(ref QueryFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.TitleStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFileCompleteCallbackInternal(ref QueryFileCallbackInfoInternal data);


using Epic.OnlineServices.TitleStorage;

public delegate void OnQueryFileListCompleteCallback(ref QueryFileListCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.TitleStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryFileListCompleteCallbackInternal(ref QueryFileListCallbackInfoInternal data);


using Epic.OnlineServices.TitleStorage;

public delegate void OnReadFileCompleteCallback(ref ReadFileCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.TitleStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnReadFileCompleteCallbackInternal(ref ReadFileCallbackInfoInternal data);


using Epic.OnlineServices.TitleStorage;

public delegate ReadResult OnReadFileDataCallback(ref ReadFileDataCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.TitleStorage;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate ReadResult OnReadFileDataCallbackInternal(ref ReadFileDataCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct QueryFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFileCallbackInfo>, ISettable<QueryFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryFileCallbackInfo output)
	{
		output = default(QueryFileCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct QueryFileListCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public uint FileCount { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryFileListCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		FileCount = other.FileCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileListCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryFileListCallbackInfo>, ISettable<QueryFileListCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private uint m_FileCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint FileCount
	{
		get
		{
			return m_FileCount;
		}
		set
		{
			m_FileCount = value;
		}
	}

	public void Set(ref QueryFileListCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		FileCount = other.FileCount;
	}

	public void Set(ref QueryFileListCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			FileCount = other.Value.FileCount;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryFileListCallbackInfo output)
	{
		output = default(QueryFileListCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryFileListOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String[] ListOfTags { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileListOptionsInternal : ISettable<QueryFileListOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_ListOfTags;

	private uint m_ListOfTagsCount;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String[] ListOfTags
	{
		set
		{
			Helper.Set(value, ref m_ListOfTags, out m_ListOfTagsCount);
		}
	}

	public void Set(ref QueryFileListOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		ListOfTags = other.ListOfTags;
	}

	public void Set(ref QueryFileListOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			ListOfTags = other.Value.ListOfTags;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ListOfTags);
	}
}


using Epic.OnlineServices;

public struct QueryFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryFileOptionsInternal : ISettable<QueryFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref QueryFileOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref QueryFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct ReadFileCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref ReadFileCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReadFileCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileCallbackInfo>, ISettable<ReadFileCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public void Set(ref ReadFileCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
	}

	public void Set(ref ReadFileCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
	}

	public void Get(out ReadFileCallbackInfo output)
	{
		output = default(ReadFileCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct ReadFileDataCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint TotalFileSizeBytes { get; set; }

	public bool IsLastChunk { get; set; }

	public ArraySegment<byte> DataChunk { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref ReadFileDataCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
		IsLastChunk = other.IsLastChunk;
		DataChunk = other.DataChunk;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReadFileDataCallbackInfoInternal : ICallbackInfoInternal, IGettable<ReadFileDataCallbackInfo>, ISettable<ReadFileDataCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_TotalFileSizeBytes;

	private int m_IsLastChunk;

	private uint m_DataChunkLengthBytes;

	private IntPtr m_DataChunk;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		get
		{
			Helper.Get(m_Filename, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint TotalFileSizeBytes
	{
		get
		{
			return m_TotalFileSizeBytes;
		}
		set
		{
			m_TotalFileSizeBytes = value;
		}
	}

	public bool IsLastChunk
	{
		get
		{
			Helper.Get(m_IsLastChunk, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_IsLastChunk);
		}
	}

	public ArraySegment<byte> DataChunk
	{
		get
		{
			Helper.Get(m_DataChunk, out var to, m_DataChunkLengthBytes);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DataChunk, out m_DataChunkLengthBytes);
		}
	}

	public void Set(ref ReadFileDataCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		TotalFileSizeBytes = other.TotalFileSizeBytes;
		IsLastChunk = other.IsLastChunk;
		DataChunk = other.DataChunk;
	}

	public void Set(ref ReadFileDataCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			TotalFileSizeBytes = other.Value.TotalFileSizeBytes;
			IsLastChunk = other.Value.IsLastChunk;
			DataChunk = other.Value.DataChunk;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
		Helper.Dispose(ref m_DataChunk);
	}

	public void Get(out ReadFileDataCallbackInfo output)
	{
		output = default(ReadFileDataCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public struct ReadFileOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String Filename { get; set; }

	public uint ReadChunkLengthBytes { get; set; }

	public OnReadFileDataCallback ReadFileDataCallback { get; set; }

	public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ReadFileOptionsInternal : ISettable<ReadFileOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Filename;

	private uint m_ReadChunkLengthBytes;

	private IntPtr m_ReadFileDataCallback;

	private IntPtr m_FileTransferProgressCallback;

	private static OnReadFileDataCallbackInternal s_ReadFileDataCallback;

	private static OnFileTransferProgressCallbackInternal s_FileTransferProgressCallback;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String Filename
	{
		set
		{
			Helper.Set(value, ref m_Filename);
		}
	}

	public uint ReadChunkLengthBytes
	{
		set
		{
			m_ReadChunkLengthBytes = value;
		}
	}

	public static OnReadFileDataCallbackInternal ReadFileDataCallback
	{
		get
		{
			if (s_ReadFileDataCallback == null)
			{
				s_ReadFileDataCallback = TitleStorageInterface.OnReadFileDataCallbackInternalImplementation;
			}
			return s_ReadFileDataCallback;
		}
	}

	public static OnFileTransferProgressCallbackInternal FileTransferProgressCallback
	{
		get
		{
			if (s_FileTransferProgressCallback == null)
			{
				s_FileTransferProgressCallback = TitleStorageInterface.OnFileTransferProgressCallbackInternalImplementation;
			}
			return s_FileTransferProgressCallback;
		}
	}

	public void Set(ref ReadFileOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		Filename = other.Filename;
		ReadChunkLengthBytes = other.ReadChunkLengthBytes;
		m_ReadFileDataCallback = ((other.ReadFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(ReadFileDataCallback) : IntPtr.Zero);
		m_FileTransferProgressCallback = ((other.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(FileTransferProgressCallback) : IntPtr.Zero);
	}

	public void Set(ref ReadFileOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			Filename = other.Value.Filename;
			ReadChunkLengthBytes = other.Value.ReadChunkLengthBytes;
			m_ReadFileDataCallback = ((other.Value.ReadFileDataCallback != null) ? Marshal.GetFunctionPointerForDelegate(ReadFileDataCallback) : IntPtr.Zero);
			m_FileTransferProgressCallback = ((other.Value.FileTransferProgressCallback != null) ? Marshal.GetFunctionPointerForDelegate(FileTransferProgressCallback) : IntPtr.Zero);
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Filename);
		Helper.Dispose(ref m_ReadFileDataCallback);
		Helper.Dispose(ref m_FileTransferProgressCallback);
	}
}


public enum ReadResult
{
	RrContinuereading = 1,
	RrFailrequest,
	RrCancelrequest
}


using System;
using Epic.OnlineServices;

public sealed class TitleStorageFileTransferRequest : Handle
{
	public TitleStorageFileTransferRequest()
	{
	}

	public TitleStorageFileTransferRequest(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CancelRequest()
	{
		return Bindings.EOS_TitleStorageFileTransferRequest_CancelRequest(base.InnerHandle);
	}

	public Result GetFileRequestState()
	{
		return Bindings.EOS_TitleStorageFileTransferRequest_GetFileRequestState(base.InnerHandle);
	}

	public Result GetFilename(out Utf8String outStringBuffer)
	{
		int outStringLength = 64;
		IntPtr value = Helper.AddAllocation(outStringLength);
		Result result = Bindings.EOS_TitleStorageFileTransferRequest_GetFilename(base.InnerHandle, (uint)outStringLength, value, ref outStringLength);
		Helper.Get(value, out outStringBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_TitleStorageFileTransferRequest_Release(base.InnerHandle);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.TitleStorage;

public sealed class TitleStorageInterface : Handle
{
	public const int CopyfilemetadataatindexApiLatest = 1;

	public const int CopyfilemetadataatindexoptionsApiLatest = 1;

	public const int CopyfilemetadatabyfilenameApiLatest = 1;

	public const int CopyfilemetadatabyfilenameoptionsApiLatest = 1;

	public const int DeletecacheApiLatest = 1;

	public const int DeletecacheoptionsApiLatest = 1;

	public const int FilemetadataApiLatest = 2;

	public const int FilenameMaxLengthBytes = 64;

	public const int GetfilemetadatacountApiLatest = 1;

	public const int GetfilemetadatacountoptionsApiLatest = 1;

	public const int QueryfileApiLatest = 1;

	public const int QueryfilelistApiLatest = 1;

	public const int QueryfilelistoptionsApiLatest = 1;

	public const int QueryfileoptionsApiLatest = 1;

	public const int ReadfileApiLatest = 2;

	public const int ReadfileoptionsApiLatest = 2;

	public TitleStorageInterface()
	{
	}

	public TitleStorageInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyFileMetadataAtIndex(ref CopyFileMetadataAtIndexOptions options, out FileMetadata? outMetadata)
	{
		CopyFileMetadataAtIndexOptionsInternal options2 = default(CopyFileMetadataAtIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outMetadata2 = IntPtr.Zero;
		Result result = Bindings.EOS_TitleStorage_CopyFileMetadataAtIndex(base.InnerHandle, ref options2, ref outMetadata2);
		Helper.Dispose(ref options2);
		Helper.Get<FileMetadataInternal, FileMetadata>(outMetadata2, out outMetadata);
		if (outMetadata.HasValue)
		{
			Bindings.EOS_TitleStorage_FileMetadata_Release(outMetadata2);
		}
		return result;
	}

	public Result CopyFileMetadataByFilename(ref CopyFileMetadataByFilenameOptions options, out FileMetadata? outMetadata)
	{
		CopyFileMetadataByFilenameOptionsInternal options2 = default(CopyFileMetadataByFilenameOptionsInternal);
		options2.Set(ref options);
		IntPtr outMetadata2 = IntPtr.Zero;
		Result result = Bindings.EOS_TitleStorage_CopyFileMetadataByFilename(base.InnerHandle, ref options2, ref outMetadata2);
		Helper.Dispose(ref options2);
		Helper.Get<FileMetadataInternal, FileMetadata>(outMetadata2, out outMetadata);
		if (outMetadata.HasValue)
		{
			Bindings.EOS_TitleStorage_FileMetadata_Release(outMetadata2);
		}
		return result;
	}

	public Result DeleteCache(ref DeleteCacheOptions options, object clientData, OnDeleteCacheCompleteCallback completionCallback)
	{
		DeleteCacheOptionsInternal options2 = default(DeleteCacheOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDeleteCacheCompleteCallbackInternal onDeleteCacheCompleteCallbackInternal = OnDeleteCacheCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onDeleteCacheCompleteCallbackInternal);
		Result result = Bindings.EOS_TitleStorage_DeleteCache(base.InnerHandle, ref options2, clientDataAddress, onDeleteCacheCompleteCallbackInternal);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetFileMetadataCount(ref GetFileMetadataCountOptions options)
	{
		GetFileMetadataCountOptionsInternal options2 = default(GetFileMetadataCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_TitleStorage_GetFileMetadataCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryFile(ref QueryFileOptions options, object clientData, OnQueryFileCompleteCallback completionCallback)
	{
		QueryFileOptionsInternal options2 = default(QueryFileOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryFileCompleteCallbackInternal onQueryFileCompleteCallbackInternal = OnQueryFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onQueryFileCompleteCallbackInternal);
		Bindings.EOS_TitleStorage_QueryFile(base.InnerHandle, ref options2, clientDataAddress, onQueryFileCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryFileList(ref QueryFileListOptions options, object clientData, OnQueryFileListCompleteCallback completionCallback)
	{
		QueryFileListOptionsInternal options2 = default(QueryFileListOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryFileListCompleteCallbackInternal onQueryFileListCompleteCallbackInternal = OnQueryFileListCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onQueryFileListCompleteCallbackInternal);
		Bindings.EOS_TitleStorage_QueryFileList(base.InnerHandle, ref options2, clientDataAddress, onQueryFileListCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public TitleStorageFileTransferRequest ReadFile(ref ReadFileOptions options, object clientData, OnReadFileCompleteCallback completionCallback)
	{
		ReadFileOptionsInternal options2 = default(ReadFileOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnReadFileCompleteCallbackInternal onReadFileCompleteCallbackInternal = OnReadFileCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionCallback, onReadFileCompleteCallbackInternal, options.ReadFileDataCallback, ReadFileOptionsInternal.ReadFileDataCallback, options.FileTransferProgressCallback, ReadFileOptionsInternal.FileTransferProgressCallback);
		IntPtr from = Bindings.EOS_TitleStorage_ReadFile(base.InnerHandle, ref options2, clientDataAddress, onReadFileCompleteCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.Get(from, out TitleStorageFileTransferRequest to);
		return to;
	}

	[MonoPInvokeCallback(typeof(OnDeleteCacheCompleteCallbackInternal))]
	internal static void OnDeleteCacheCompleteCallbackInternalImplementation(ref DeleteCacheCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DeleteCacheCallbackInfoInternal, OnDeleteCacheCompleteCallback, DeleteCacheCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnFileTransferProgressCallbackInternal))]
	internal static void OnFileTransferProgressCallbackInternalImplementation(ref FileTransferProgressCallbackInfoInternal data)
	{
		if (Helper.TryGetStructCallback<FileTransferProgressCallbackInfoInternal, OnFileTransferProgressCallback, FileTransferProgressCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFileCompleteCallbackInternal))]
	internal static void OnQueryFileCompleteCallbackInternalImplementation(ref QueryFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFileCallbackInfoInternal, OnQueryFileCompleteCallback, QueryFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryFileListCompleteCallbackInternal))]
	internal static void OnQueryFileListCompleteCallbackInternalImplementation(ref QueryFileListCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryFileListCallbackInfoInternal, OnQueryFileListCompleteCallback, QueryFileListCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnReadFileCompleteCallbackInternal))]
	internal static void OnReadFileCompleteCallbackInternalImplementation(ref ReadFileCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<ReadFileCallbackInfoInternal, OnReadFileCompleteCallback, ReadFileCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnReadFileDataCallbackInternal))]
	internal static ReadResult OnReadFileDataCallbackInternalImplementation(ref ReadFileDataCallbackInfoInternal data)
	{
		if (Helper.TryGetStructCallback<ReadFileDataCallbackInfoInternal, OnReadFileDataCallback, ReadFileDataCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			return callback(ref callbackInfo);
		}
		return Helper.GetDefault<ReadResult>();
	}
}


using Epic.OnlineServices;

public struct CopyStatByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint StatIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyStatByIndexOptionsInternal : ISettable<CopyStatByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_StatIndex;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint StatIndex
	{
		set
		{
			m_StatIndex = value;
		}
	}

	public void Set(ref CopyStatByIndexOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		StatIndex = other.StatIndex;
	}

	public void Set(ref CopyStatByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			StatIndex = other.Value.StatIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;

public struct CopyStatByNameOptions
{
	public ProductUserId TargetUserId { get; set; }

	public Utf8String Name { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyStatByNameOptionsInternal : ISettable<CopyStatByNameOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_Name;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String Name
	{
		set
		{
			Helper.Set(value, ref m_Name);
		}
	}

	public void Set(ref CopyStatByNameOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		Name = other.Name;
	}

	public void Set(ref CopyStatByNameOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			Name = other.Value.Name;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_Name);
	}
}


using Epic.OnlineServices;

public struct GetStatCountOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetStatCountOptionsInternal : ISettable<GetStatCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref GetStatCountOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref GetStatCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

public struct IngestData
{
	public Utf8String StatName { get; set; }

	public int IngestAmount { get; set; }

	internal void Set(ref IngestDataInternal other)
	{
		StatName = other.StatName;
		IngestAmount = other.IngestAmount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IngestDataInternal : IGettable<IngestData>, ISettable<IngestData>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_StatName;

	private int m_IngestAmount;

	public Utf8String StatName
	{
		get
		{
			Helper.Get(m_StatName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_StatName);
		}
	}

	public int IngestAmount
	{
		get
		{
			return m_IngestAmount;
		}
		set
		{
			m_IngestAmount = value;
		}
	}

	public void Set(ref IngestData other)
	{
		m_ApiVersion = 1;
		StatName = other.StatName;
		IngestAmount = other.IngestAmount;
	}

	public void Set(ref IngestData? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			StatName = other.Value.StatName;
			IngestAmount = other.Value.IngestAmount;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_StatName);
	}

	public void Get(out IngestData output)
	{
		output = default(IngestData);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

public struct IngestStatCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref IngestStatCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IngestStatCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<IngestStatCompleteCallbackInfo>, ISettable<IngestStatCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref IngestStatCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref IngestStatCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out IngestStatCompleteCallbackInfo output)
	{
		output = default(IngestStatCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

public struct IngestStatOptions
{
	public ProductUserId LocalUserId { get; set; }

	public IngestData[] Stats { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IngestStatOptionsInternal : ISettable<IngestStatOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_Stats;

	private uint m_StatsCount;

	private IntPtr m_TargetUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public IngestData[] Stats
	{
		set
		{
			Helper.Set<IngestData, IngestDataInternal>(ref value, ref m_Stats, out m_StatsCount);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref IngestStatOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		Stats = other.Stats;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref IngestStatOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			Stats = other.Value.Stats;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_Stats);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices.Stats;

public delegate void OnIngestStatCompleteCallback(ref IngestStatCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Stats;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnIngestStatCompleteCallbackInternal(ref IngestStatCompleteCallbackInfoInternal data);


using Epic.OnlineServices.Stats;

public delegate void OnQueryStatsCompleteCallback(ref OnQueryStatsCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Stats;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryStatsCompleteCallbackInternal(ref OnQueryStatsCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

public struct OnQueryStatsCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryStatsCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryStatsCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryStatsCompleteCallbackInfo>, ISettable<OnQueryStatsCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref OnQueryStatsCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref OnQueryStatsCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}

	public void Get(out OnQueryStatsCompleteCallbackInfo output)
	{
		output = default(OnQueryStatsCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;

public struct QueryStatsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	public Utf8String[] StatNames { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryStatsOptionsInternal : ISettable<QueryStatsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private long m_StartTime;

	private long m_EndTime;

	private IntPtr m_StatNames;

	private uint m_StatNamesCount;

	private IntPtr m_TargetUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public DateTimeOffset? StartTime
	{
		set
		{
			Helper.Set(value, ref m_StartTime);
		}
	}

	public DateTimeOffset? EndTime
	{
		set
		{
			Helper.Set(value, ref m_EndTime);
		}
	}

	public Utf8String[] StatNames
	{
		set
		{
			Helper.Set(value, ref m_StatNames, isArrayItemAllocated: true, out m_StatNamesCount);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref QueryStatsOptions other)
	{
		m_ApiVersion = 3;
		LocalUserId = other.LocalUserId;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
		StatNames = other.StatNames;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref QueryStatsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			LocalUserId = other.Value.LocalUserId;
			StartTime = other.Value.StartTime;
			EndTime = other.Value.EndTime;
			StatNames = other.Value.StatNames;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_StatNames);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

public struct Stat
{
	public Utf8String Name { get; set; }

	public DateTimeOffset? StartTime { get; set; }

	public DateTimeOffset? EndTime { get; set; }

	public int Value { get; set; }

	internal void Set(ref StatInternal other)
	{
		Name = other.Name;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
		Value = other.Value;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct StatInternal : IGettable<Stat>, ISettable<Stat>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Name;

	private long m_StartTime;

	private long m_EndTime;

	private int m_Value;

	public Utf8String Name
	{
		get
		{
			Helper.Get(m_Name, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Name);
		}
	}

	public DateTimeOffset? StartTime
	{
		get
		{
			Helper.Get(m_StartTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_StartTime);
		}
	}

	public DateTimeOffset? EndTime
	{
		get
		{
			Helper.Get(m_EndTime, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_EndTime);
		}
	}

	public int Value
	{
		get
		{
			return m_Value;
		}
		set
		{
			m_Value = value;
		}
	}

	public void Set(ref Stat other)
	{
		m_ApiVersion = 1;
		Name = other.Name;
		StartTime = other.StartTime;
		EndTime = other.EndTime;
		Value = other.Value;
	}

	public void Set(ref Stat? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Name = other.Value.Name;
			StartTime = other.Value.StartTime;
			EndTime = other.Value.EndTime;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Name);
	}

	public void Get(out Stat output)
	{
		output = default(Stat);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Stats;

public sealed class StatsInterface : Handle
{
	public const int CopystatbyindexApiLatest = 1;

	public const int CopystatbynameApiLatest = 1;

	public const int GetstatcountApiLatest = 1;

	public const int GetstatscountApiLatest = 1;

	public const int IngestdataApiLatest = 1;

	public const int IngeststatApiLatest = 3;

	public const int MaxIngestStats = 3000;

	public const int MaxQueryStats = 1000;

	public const int QuerystatsApiLatest = 3;

	public const int StatApiLatest = 1;

	public const int TimeUndefined = -1;

	public StatsInterface()
	{
	}

	public StatsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyStatByIndex(ref CopyStatByIndexOptions options, out Stat? outStat)
	{
		CopyStatByIndexOptionsInternal options2 = default(CopyStatByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outStat2 = IntPtr.Zero;
		Result result = Bindings.EOS_Stats_CopyStatByIndex(base.InnerHandle, ref options2, ref outStat2);
		Helper.Dispose(ref options2);
		Helper.Get<StatInternal, Stat>(outStat2, out outStat);
		if (outStat.HasValue)
		{
			Bindings.EOS_Stats_Stat_Release(outStat2);
		}
		return result;
	}

	public Result CopyStatByName(ref CopyStatByNameOptions options, out Stat? outStat)
	{
		CopyStatByNameOptionsInternal options2 = default(CopyStatByNameOptionsInternal);
		options2.Set(ref options);
		IntPtr outStat2 = IntPtr.Zero;
		Result result = Bindings.EOS_Stats_CopyStatByName(base.InnerHandle, ref options2, ref outStat2);
		Helper.Dispose(ref options2);
		Helper.Get<StatInternal, Stat>(outStat2, out outStat);
		if (outStat.HasValue)
		{
			Bindings.EOS_Stats_Stat_Release(outStat2);
		}
		return result;
	}

	public uint GetStatsCount(ref GetStatCountOptions options)
	{
		GetStatCountOptionsInternal options2 = default(GetStatCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Stats_GetStatsCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void IngestStat(ref IngestStatOptions options, object clientData, OnIngestStatCompleteCallback completionDelegate)
	{
		IngestStatOptionsInternal options2 = default(IngestStatOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnIngestStatCompleteCallbackInternal onIngestStatCompleteCallbackInternal = OnIngestStatCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onIngestStatCompleteCallbackInternal);
		Bindings.EOS_Stats_IngestStat(base.InnerHandle, ref options2, clientDataAddress, onIngestStatCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryStats(ref QueryStatsOptions options, object clientData, OnQueryStatsCompleteCallback completionDelegate)
	{
		QueryStatsOptionsInternal options2 = default(QueryStatsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryStatsCompleteCallbackInternal onQueryStatsCompleteCallbackInternal = OnQueryStatsCompleteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryStatsCompleteCallbackInternal);
		Bindings.EOS_Stats_QueryStats(base.InnerHandle, ref options2, clientDataAddress, onQueryStatsCompleteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnIngestStatCompleteCallbackInternal))]
	internal static void OnIngestStatCompleteCallbackInternalImplementation(ref IngestStatCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<IngestStatCompleteCallbackInfoInternal, OnIngestStatCompleteCallback, IngestStatCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryStatsCompleteCallbackInternal))]
	internal static void OnQueryStatsCompleteCallbackInternalImplementation(ref OnQueryStatsCompleteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryStatsCompleteCallbackInfoInternal, OnQueryStatsCompleteCallback, OnQueryStatsCompleteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public sealed class ActiveSession : Handle
{
	public const int ActivesessionCopyinfoApiLatest = 1;

	public const int ActivesessionGetregisteredplayerbyindexApiLatest = 1;

	public const int ActivesessionGetregisteredplayercountApiLatest = 1;

	public const int ActivesessionInfoApiLatest = 1;

	public ActiveSession()
	{
	}

	public ActiveSession(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyInfo(ref ActiveSessionCopyInfoOptions options, out ActiveSessionInfo? outActiveSessionInfo)
	{
		ActiveSessionCopyInfoOptionsInternal options2 = default(ActiveSessionCopyInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outActiveSessionInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_ActiveSession_CopyInfo(base.InnerHandle, ref options2, ref outActiveSessionInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<ActiveSessionInfoInternal, ActiveSessionInfo>(outActiveSessionInfo2, out outActiveSessionInfo);
		if (outActiveSessionInfo.HasValue)
		{
			Bindings.EOS_ActiveSession_Info_Release(outActiveSessionInfo2);
		}
		return result;
	}

	public ProductUserId GetRegisteredPlayerByIndex(ref ActiveSessionGetRegisteredPlayerByIndexOptions options)
	{
		ActiveSessionGetRegisteredPlayerByIndexOptionsInternal options2 = default(ActiveSessionGetRegisteredPlayerByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_ActiveSession_GetRegisteredPlayerByIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get(from, out ProductUserId to);
		return to;
	}

	public uint GetRegisteredPlayerCount(ref ActiveSessionGetRegisteredPlayerCountOptions options)
	{
		ActiveSessionGetRegisteredPlayerCountOptionsInternal options2 = default(ActiveSessionGetRegisteredPlayerCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_ActiveSession_GetRegisteredPlayerCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_ActiveSession_Release(base.InnerHandle);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct ActiveSessionCopyInfoOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ActiveSessionCopyInfoOptionsInternal : ISettable<ActiveSessionCopyInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref ActiveSessionCopyInfoOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref ActiveSessionCopyInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public struct ActiveSessionGetRegisteredPlayerByIndexOptions
{
	public uint PlayerIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ActiveSessionGetRegisteredPlayerByIndexOptionsInternal : ISettable<ActiveSessionGetRegisteredPlayerByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_PlayerIndex;

	public uint PlayerIndex
	{
		set
		{
			m_PlayerIndex = value;
		}
	}

	public void Set(ref ActiveSessionGetRegisteredPlayerByIndexOptions other)
	{
		m_ApiVersion = 1;
		PlayerIndex = other.PlayerIndex;
	}

	public void Set(ref ActiveSessionGetRegisteredPlayerByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlayerIndex = other.Value.PlayerIndex;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct ActiveSessionGetRegisteredPlayerCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ActiveSessionGetRegisteredPlayerCountOptionsInternal : ISettable<ActiveSessionGetRegisteredPlayerCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref ActiveSessionGetRegisteredPlayerCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref ActiveSessionGetRegisteredPlayerCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct ActiveSessionInfo
{
	public Utf8String SessionName { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public OnlineSessionState State { get; set; }

	public SessionDetailsInfo? SessionDetails { get; set; }

	internal void Set(ref ActiveSessionInfoInternal other)
	{
		SessionName = other.SessionName;
		LocalUserId = other.LocalUserId;
		State = other.State;
		SessionDetails = other.SessionDetails;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ActiveSessionInfoInternal : IGettable<ActiveSessionInfo>, ISettable<ActiveSessionInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_LocalUserId;

	private OnlineSessionState m_State;

	private IntPtr m_SessionDetails;

	public Utf8String SessionName
	{
		get
		{
			Helper.Get(m_SessionName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public OnlineSessionState State
	{
		get
		{
			return m_State;
		}
		set
		{
			m_State = value;
		}
	}

	public SessionDetailsInfo? SessionDetails
	{
		get
		{
			Helper.Get<SessionDetailsInfoInternal, SessionDetailsInfo>(m_SessionDetails, out SessionDetailsInfo? to);
			return to;
		}
		set
		{
			Helper.Set<SessionDetailsInfo, SessionDetailsInfoInternal>(ref value, ref m_SessionDetails);
		}
	}

	public void Set(ref ActiveSessionInfo other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
		LocalUserId = other.LocalUserId;
		State = other.State;
		SessionDetails = other.SessionDetails;
	}

	public void Set(ref ActiveSessionInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
			LocalUserId = other.Value.LocalUserId;
			State = other.Value.State;
			SessionDetails = other.Value.SessionDetails;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SessionDetails);
	}

	public void Get(out ActiveSessionInfo output)
	{
		output = default(ActiveSessionInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyJoinSessionAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyJoinSessionAcceptedOptionsInternal : ISettable<AddNotifyJoinSessionAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyJoinSessionAcceptedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyJoinSessionAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyLeaveSessionRequestedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyLeaveSessionRequestedOptionsInternal : ISettable<AddNotifyLeaveSessionRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyLeaveSessionRequestedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyLeaveSessionRequestedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySendSessionNativeInviteRequestedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifySendSessionNativeInviteRequestedOptionsInternal : ISettable<AddNotifySendSessionNativeInviteRequestedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySendSessionNativeInviteRequestedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifySendSessionNativeInviteRequestedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySessionInviteAcceptedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifySessionInviteAcceptedOptionsInternal : ISettable<AddNotifySessionInviteAcceptedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySessionInviteAcceptedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifySessionInviteAcceptedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySessionInviteReceivedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifySessionInviteReceivedOptionsInternal : ISettable<AddNotifySessionInviteReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySessionInviteReceivedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifySessionInviteReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifySessionInviteRejectedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifySessionInviteRejectedOptionsInternal : ISettable<AddNotifySessionInviteRejectedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifySessionInviteRejectedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifySessionInviteRejectedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct AttributeData
{
	public Utf8String Key { get; set; }

	public AttributeDataValue Value { get; set; }

	internal void Set(ref AttributeDataInternal other)
	{
		Key = other.Key;
		Value = other.Value;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AttributeDataInternal : IGettable<AttributeData>, ISettable<AttributeData>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private AttributeDataValueInternal m_Value;

	public Utf8String Key
	{
		get
		{
			Helper.Get(m_Key, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public AttributeDataValue Value
	{
		get
		{
			Helper.Get<AttributeDataValueInternal, AttributeDataValue>(ref m_Value, out var to);
			return to;
		}
		set
		{
			Helper.Set(ref value, ref m_Value);
		}
	}

	public void Set(ref AttributeData other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		Value = other.Value;
	}

	public void Set(ref AttributeData? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			Value = other.Value.Value;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
		Helper.Dispose(ref m_Value);
	}

	public void Get(out AttributeData output)
	{
		output = default(AttributeData);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct AttributeDataValue
{
	private long? m_AsInt64;

	private double? m_AsDouble;

	private bool? m_AsBool;

	private Utf8String m_AsUtf8;

	private AttributeType m_ValueType;

	public long? AsInt64
	{
		get
		{
			Helper.Get(m_AsInt64, out var to, m_ValueType, AttributeType.Int64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsInt64, AttributeType.Int64, ref m_ValueType);
		}
	}

	public double? AsDouble
	{
		get
		{
			Helper.Get(m_AsDouble, out var to, m_ValueType, AttributeType.Double);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsDouble, AttributeType.Double, ref m_ValueType);
		}
	}

	public bool? AsBool
	{
		get
		{
			Helper.Get(m_AsBool, out var to, m_ValueType, AttributeType.Boolean);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsBool, AttributeType.Boolean, ref m_ValueType);
		}
	}

	public Utf8String AsUtf8
	{
		get
		{
			Helper.Get(m_AsUtf8, out var to, m_ValueType, AttributeType.String);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsUtf8, AttributeType.String, ref m_ValueType);
		}
	}

	public AttributeType ValueType
	{
		get
		{
			return m_ValueType;
		}
		private set
		{
			m_ValueType = value;
		}
	}

	public static implicit operator AttributeDataValue(long value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsInt64 = value;
		return result;
	}

	public static implicit operator AttributeDataValue(double value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsDouble = value;
		return result;
	}

	public static implicit operator AttributeDataValue(bool value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsBool = value;
		return result;
	}

	public static implicit operator AttributeDataValue(Utf8String value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsUtf8 = value;
		return result;
	}

	public static implicit operator AttributeDataValue(string value)
	{
		AttributeDataValue result = default(AttributeDataValue);
		result.AsUtf8 = value;
		return result;
	}

	internal void Set(ref AttributeDataValueInternal other)
	{
		AsInt64 = other.AsInt64;
		AsDouble = other.AsDouble;
		AsBool = other.AsBool;
		AsUtf8 = other.AsUtf8;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Explicit, Pack = 8)]
internal struct AttributeDataValueInternal : IGettable<AttributeDataValue>, ISettable<AttributeDataValue>, IDisposable
{
	[FieldOffset(0)]
	private long m_AsInt64;

	[FieldOffset(0)]
	private double m_AsDouble;

	[FieldOffset(0)]
	private int m_AsBool;

	[FieldOffset(0)]
	private IntPtr m_AsUtf8;

	[FieldOffset(8)]
	private AttributeType m_ValueType;

	public long? AsInt64
	{
		get
		{
			Helper.Get(m_AsInt64, out long? to, m_ValueType, AttributeType.Int64);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsInt64, AttributeType.Int64, ref m_ValueType, this);
		}
	}

	public double? AsDouble
	{
		get
		{
			Helper.Get(m_AsDouble, out double? to, m_ValueType, AttributeType.Double);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsDouble, AttributeType.Double, ref m_ValueType, this);
		}
	}

	public bool? AsBool
	{
		get
		{
			Helper.Get(m_AsBool, out bool? to, m_ValueType, AttributeType.Boolean);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsBool, AttributeType.Boolean, ref m_ValueType, this);
		}
	}

	public Utf8String AsUtf8
	{
		get
		{
			Helper.Get(m_AsUtf8, out Utf8String to, m_ValueType, AttributeType.String);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AsUtf8, AttributeType.String, ref m_ValueType, this);
		}
	}

	public void Set(ref AttributeDataValue other)
	{
		AsInt64 = other.AsInt64;
		AsDouble = other.AsDouble;
		AsBool = other.AsBool;
		AsUtf8 = other.AsUtf8;
	}

	public void Set(ref AttributeDataValue? other)
	{
		if (other.HasValue)
		{
			AsInt64 = other.Value.AsInt64;
			AsDouble = other.Value.AsDouble;
			AsBool = other.Value.AsBool;
			AsUtf8 = other.Value.AsUtf8;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AsUtf8, m_ValueType, AttributeType.String);
	}

	public void Get(out AttributeDataValue output)
	{
		output = default(AttributeDataValue);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct CopyActiveSessionHandleOptions
{
	public Utf8String SessionName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyActiveSessionHandleOptionsInternal : ISettable<CopyActiveSessionHandleOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref CopyActiveSessionHandleOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
	}

	public void Set(ref CopyActiveSessionHandleOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
	}
}


using Epic.OnlineServices;

public struct CopySessionHandleByInviteIdOptions
{
	public Utf8String InviteId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopySessionHandleByInviteIdOptionsInternal : ISettable<CopySessionHandleByInviteIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_InviteId;

	public Utf8String InviteId
	{
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref CopySessionHandleByInviteIdOptions other)
	{
		m_ApiVersion = 1;
		InviteId = other.InviteId;
	}

	public void Set(ref CopySessionHandleByInviteIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_InviteId);
	}
}


public struct CopySessionHandleByUiEventIdOptions
{
	public ulong UiEventId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopySessionHandleByUiEventIdOptionsInternal : ISettable<CopySessionHandleByUiEventIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private ulong m_UiEventId;

	public ulong UiEventId
	{
		set
		{
			m_UiEventId = value;
		}
	}

	public void Set(ref CopySessionHandleByUiEventIdOptions other)
	{
		m_ApiVersion = 1;
		UiEventId = other.UiEventId;
	}

	public void Set(ref CopySessionHandleByUiEventIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UiEventId = other.Value.UiEventId;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopySessionHandleForPresenceOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopySessionHandleForPresenceOptionsInternal : ISettable<CopySessionHandleForPresenceOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref CopySessionHandleForPresenceOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref CopySessionHandleForPresenceOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct CreateSessionModificationOptions
{
	public Utf8String SessionName { get; set; }

	public Utf8String BucketId { get; set; }

	public uint MaxPlayers { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool PresenceEnabled { get; set; }

	public Utf8String SessionId { get; set; }

	public bool SanctionsEnabled { get; set; }

	public uint[] AllowedPlatformIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateSessionModificationOptionsInternal : ISettable<CreateSessionModificationOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_BucketId;

	private uint m_MaxPlayers;

	private IntPtr m_LocalUserId;

	private int m_PresenceEnabled;

	private IntPtr m_SessionId;

	private int m_SanctionsEnabled;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public Utf8String BucketId
	{
		set
		{
			Helper.Set(value, ref m_BucketId);
		}
	}

	public uint MaxPlayers
	{
		set
		{
			m_MaxPlayers = value;
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public bool PresenceEnabled
	{
		set
		{
			Helper.Set(value, ref m_PresenceEnabled);
		}
	}

	public Utf8String SessionId
	{
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public bool SanctionsEnabled
	{
		set
		{
			Helper.Set(value, ref m_SanctionsEnabled);
		}
	}

	public uint[] AllowedPlatformIds
	{
		set
		{
			Helper.Set(value, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount);
		}
	}

	public void Set(ref CreateSessionModificationOptions other)
	{
		m_ApiVersion = 5;
		SessionName = other.SessionName;
		BucketId = other.BucketId;
		MaxPlayers = other.MaxPlayers;
		LocalUserId = other.LocalUserId;
		PresenceEnabled = other.PresenceEnabled;
		SessionId = other.SessionId;
		SanctionsEnabled = other.SanctionsEnabled;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}

	public void Set(ref CreateSessionModificationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 5;
			SessionName = other.Value.SessionName;
			BucketId = other.Value.BucketId;
			MaxPlayers = other.Value.MaxPlayers;
			LocalUserId = other.Value.LocalUserId;
			PresenceEnabled = other.Value.PresenceEnabled;
			SessionId = other.Value.SessionId;
			SanctionsEnabled = other.Value.SanctionsEnabled;
			AllowedPlatformIds = other.Value.AllowedPlatformIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_BucketId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SessionId);
		Helper.Dispose(ref m_AllowedPlatformIds);
	}
}


public struct CreateSessionSearchOptions
{
	public uint MaxSearchResults { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreateSessionSearchOptionsInternal : ISettable<CreateSessionSearchOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxSearchResults;

	public uint MaxSearchResults
	{
		set
		{
			m_MaxSearchResults = value;
		}
	}

	public void Set(ref CreateSessionSearchOptions other)
	{
		m_ApiVersion = 1;
		MaxSearchResults = other.MaxSearchResults;
	}

	public void Set(ref CreateSessionSearchOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MaxSearchResults = other.Value.MaxSearchResults;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct DestroySessionCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref DestroySessionCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DestroySessionCallbackInfoInternal : ICallbackInfoInternal, IGettable<DestroySessionCallbackInfo>, ISettable<DestroySessionCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref DestroySessionCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref DestroySessionCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out DestroySessionCallbackInfo output)
	{
		output = default(DestroySessionCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct DestroySessionOptions
{
	public Utf8String SessionName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DestroySessionOptionsInternal : ISettable<DestroySessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref DestroySessionOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
	}

	public void Set(ref DestroySessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
	}
}


using Epic.OnlineServices;

public struct DumpSessionStateOptions
{
	public Utf8String SessionName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DumpSessionStateOptionsInternal : ISettable<DumpSessionStateOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref DumpSessionStateOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
	}

	public void Set(ref DumpSessionStateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct EndSessionCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref EndSessionCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EndSessionCallbackInfoInternal : ICallbackInfoInternal, IGettable<EndSessionCallbackInfo>, ISettable<EndSessionCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref EndSessionCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref EndSessionCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out EndSessionCallbackInfo output)
	{
		output = default(EndSessionCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct EndSessionOptions
{
	public Utf8String SessionName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct EndSessionOptionsInternal : ISettable<EndSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref EndSessionOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
	}

	public void Set(ref EndSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
	}
}


using Epic.OnlineServices;

public struct GetInviteCountOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetInviteCountOptionsInternal : ISettable<GetInviteCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref GetInviteCountOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref GetInviteCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct GetInviteIdByIndexOptions
{
	public ProductUserId LocalUserId { get; set; }

	public uint Index { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetInviteIdByIndexOptionsInternal : ISettable<GetInviteIdByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private uint m_Index;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public uint Index
	{
		set
		{
			m_Index = value;
		}
	}

	public void Set(ref GetInviteIdByIndexOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Index = other.Index;
	}

	public void Set(ref GetInviteIdByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Index = other.Value.Index;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;

public struct IsUserInSessionOptions
{
	public Utf8String SessionName { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct IsUserInSessionOptionsInternal : ISettable<IsUserInSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_TargetUserId;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref IsUserInSessionOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref IsUserInSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct JoinSessionAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ulong UiEventId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref JoinSessionAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		UiEventId = other.UiEventId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinSessionAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinSessionAcceptedCallbackInfo>, ISettable<JoinSessionAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private ulong m_UiEventId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ulong UiEventId
	{
		get
		{
			return m_UiEventId;
		}
		set
		{
			m_UiEventId = value;
		}
	}

	public void Set(ref JoinSessionAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		UiEventId = other.UiEventId;
	}

	public void Set(ref JoinSessionAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			UiEventId = other.Value.UiEventId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out JoinSessionAcceptedCallbackInfo output)
	{
		output = default(JoinSessionAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct JoinSessionCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref JoinSessionCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinSessionCallbackInfoInternal : ICallbackInfoInternal, IGettable<JoinSessionCallbackInfo>, ISettable<JoinSessionCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref JoinSessionCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref JoinSessionCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out JoinSessionCallbackInfo output)
	{
		output = default(JoinSessionCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct JoinSessionOptions
{
	public Utf8String SessionName { get; set; }

	public SessionDetails SessionHandle { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public bool PresenceEnabled { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct JoinSessionOptionsInternal : ISettable<JoinSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_SessionHandle;

	private IntPtr m_LocalUserId;

	private int m_PresenceEnabled;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public SessionDetails SessionHandle
	{
		set
		{
			Helper.Set(value, ref m_SessionHandle);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public bool PresenceEnabled
	{
		set
		{
			Helper.Set(value, ref m_PresenceEnabled);
		}
	}

	public void Set(ref JoinSessionOptions other)
	{
		m_ApiVersion = 2;
		SessionName = other.SessionName;
		SessionHandle = other.SessionHandle;
		LocalUserId = other.LocalUserId;
		PresenceEnabled = other.PresenceEnabled;
	}

	public void Set(ref JoinSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			SessionName = other.Value.SessionName;
			SessionHandle = other.Value.SessionHandle;
			LocalUserId = other.Value.LocalUserId;
			PresenceEnabled = other.Value.PresenceEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_SessionHandle);
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct LeaveSessionRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String SessionName { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref LeaveSessionRequestedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		SessionName = other.SessionName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct LeaveSessionRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<LeaveSessionRequestedCallbackInfo>, ISettable<LeaveSessionRequestedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_SessionName;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String SessionName
	{
		get
		{
			Helper.Get(m_SessionName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref LeaveSessionRequestedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		SessionName = other.SessionName;
	}

	public void Set(ref LeaveSessionRequestedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_SessionName);
	}

	public void Get(out LeaveSessionRequestedCallbackInfo output)
	{
		output = default(LeaveSessionRequestedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.Sessions;

public delegate void OnDestroySessionCallback(ref DestroySessionCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDestroySessionCallbackInternal(ref DestroySessionCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnEndSessionCallback(ref EndSessionCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnEndSessionCallbackInternal(ref EndSessionCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnJoinSessionAcceptedCallback(ref JoinSessionAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinSessionAcceptedCallbackInternal(ref JoinSessionAcceptedCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnJoinSessionCallback(ref JoinSessionCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnJoinSessionCallbackInternal(ref JoinSessionCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnLeaveSessionRequestedCallback(ref LeaveSessionRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnLeaveSessionRequestedCallbackInternal(ref LeaveSessionRequestedCallbackInfoInternal data);


public enum OnlineSessionPermissionLevel
{
	PublicAdvertised,
	JoinViaPresence,
	InviteOnly
}


public enum OnlineSessionState
{
	NoSession,
	Creating,
	Pending,
	Starting,
	InProgress,
	Ending,
	Ended,
	Destroying
}


using Epic.OnlineServices.Sessions;

public delegate void OnQueryInvitesCallback(ref QueryInvitesCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryInvitesCallbackInternal(ref QueryInvitesCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnRegisterPlayersCallback(ref RegisterPlayersCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRegisterPlayersCallbackInternal(ref RegisterPlayersCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnRejectInviteCallback(ref RejectInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRejectInviteCallbackInternal(ref RejectInviteCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnSendInviteCallback(ref SendInviteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendInviteCallbackInternal(ref SendInviteCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnSendSessionNativeInviteRequestedCallback(ref SendSessionNativeInviteRequestedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSendSessionNativeInviteRequestedCallbackInternal(ref SendSessionNativeInviteRequestedCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnSessionInviteAcceptedCallback(ref SessionInviteAcceptedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSessionInviteAcceptedCallbackInternal(ref SessionInviteAcceptedCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnSessionInviteReceivedCallback(ref SessionInviteReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSessionInviteReceivedCallbackInternal(ref SessionInviteReceivedCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnSessionInviteRejectedCallback(ref SessionInviteRejectedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSessionInviteRejectedCallbackInternal(ref SessionInviteRejectedCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnStartSessionCallback(ref StartSessionCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnStartSessionCallbackInternal(ref StartSessionCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnUnregisterPlayersCallback(ref UnregisterPlayersCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUnregisterPlayersCallbackInternal(ref UnregisterPlayersCallbackInfoInternal data);


using Epic.OnlineServices.Sessions;

public delegate void OnUpdateSessionCallback(ref UpdateSessionCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateSessionCallbackInternal(ref UpdateSessionCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct QueryInvitesCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryInvitesCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryInvitesCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryInvitesCallbackInfo>, ISettable<QueryInvitesCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryInvitesCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryInvitesCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryInvitesCallbackInfo output)
	{
		output = default(QueryInvitesCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryInvitesOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryInvitesOptionsInternal : ISettable<QueryInvitesOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryInvitesOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryInvitesOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct RegisterPlayersCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId[] RegisteredPlayers { get; set; }

	public ProductUserId[] SanctionedPlayers { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RegisterPlayersCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RegisteredPlayers = other.RegisteredPlayers;
		SanctionedPlayers = other.SanctionedPlayers;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterPlayersCallbackInfoInternal : ICallbackInfoInternal, IGettable<RegisterPlayersCallbackInfo>, ISettable<RegisterPlayersCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_RegisteredPlayers;

	private uint m_RegisteredPlayersCount;

	private IntPtr m_SanctionedPlayers;

	private uint m_SanctionedPlayersCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId[] RegisteredPlayers
	{
		get
		{
			Helper.GetHandle<ProductUserId>(m_RegisteredPlayers, out var to, m_RegisteredPlayersCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RegisteredPlayers, out m_RegisteredPlayersCount);
		}
	}

	public ProductUserId[] SanctionedPlayers
	{
		get
		{
			Helper.GetHandle<ProductUserId>(m_SanctionedPlayers, out var to, m_SanctionedPlayersCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SanctionedPlayers, out m_SanctionedPlayersCount);
		}
	}

	public void Set(ref RegisterPlayersCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RegisteredPlayers = other.RegisteredPlayers;
		SanctionedPlayers = other.SanctionedPlayers;
	}

	public void Set(ref RegisterPlayersCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			RegisteredPlayers = other.Value.RegisteredPlayers;
			SanctionedPlayers = other.Value.SanctionedPlayers;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_RegisteredPlayers);
		Helper.Dispose(ref m_SanctionedPlayers);
	}

	public void Get(out RegisterPlayersCallbackInfo output)
	{
		output = default(RegisterPlayersCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RegisterPlayersOptions
{
	public Utf8String SessionName { get; set; }

	public ProductUserId[] PlayersToRegister { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterPlayersOptionsInternal : ISettable<RegisterPlayersOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_PlayersToRegister;

	private uint m_PlayersToRegisterCount;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public ProductUserId[] PlayersToRegister
	{
		set
		{
			Helper.Set(value, ref m_PlayersToRegister, out m_PlayersToRegisterCount);
		}
	}

	public void Set(ref RegisterPlayersOptions other)
	{
		m_ApiVersion = 3;
		SessionName = other.SessionName;
		PlayersToRegister = other.PlayersToRegister;
	}

	public void Set(ref RegisterPlayersOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 3;
			SessionName = other.Value.SessionName;
			PlayersToRegister = other.Value.PlayersToRegister;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_PlayersToRegister);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct RejectInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref RejectInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<RejectInviteCallbackInfo>, ISettable<RejectInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref RejectInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref RejectInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out RejectInviteCallbackInfo output)
	{
		output = default(RejectInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct RejectInviteOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String InviteId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RejectInviteOptionsInternal : ISettable<RejectInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_InviteId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String InviteId
	{
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref RejectInviteOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		InviteId = other.InviteId;
	}

	public void Set(ref RejectInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_InviteId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SendInviteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SendInviteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendInviteCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendInviteCallbackInfo>, ISettable<SendInviteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref SendInviteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref SendInviteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out SendInviteCallbackInfo output)
	{
		output = default(SendInviteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SendInviteOptions
{
	public Utf8String SessionName { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendInviteOptionsInternal : ISettable<SendInviteOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SendInviteOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SendInviteOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SendSessionNativeInviteRequestedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ulong UiEventId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String TargetNativeAccountType { get; set; }

	public Utf8String TargetUserNativeAccountId { get; set; }

	public Utf8String SessionId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref SendSessionNativeInviteRequestedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		UiEventId = other.UiEventId;
		LocalUserId = other.LocalUserId;
		TargetNativeAccountType = other.TargetNativeAccountType;
		TargetUserNativeAccountId = other.TargetUserNativeAccountId;
		SessionId = other.SessionId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendSessionNativeInviteRequestedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SendSessionNativeInviteRequestedCallbackInfo>, ISettable<SendSessionNativeInviteRequestedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private ulong m_UiEventId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetNativeAccountType;

	private IntPtr m_TargetUserNativeAccountId;

	private IntPtr m_SessionId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ulong UiEventId
	{
		get
		{
			return m_UiEventId;
		}
		set
		{
			m_UiEventId = value;
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String TargetNativeAccountType
	{
		get
		{
			Helper.Get(m_TargetNativeAccountType, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetNativeAccountType);
		}
	}

	public Utf8String TargetUserNativeAccountId
	{
		get
		{
			Helper.Get(m_TargetUserNativeAccountId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserNativeAccountId);
		}
	}

	public Utf8String SessionId
	{
		get
		{
			Helper.Get(m_SessionId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public void Set(ref SendSessionNativeInviteRequestedCallbackInfo other)
	{
		ClientData = other.ClientData;
		UiEventId = other.UiEventId;
		LocalUserId = other.LocalUserId;
		TargetNativeAccountType = other.TargetNativeAccountType;
		TargetUserNativeAccountId = other.TargetUserNativeAccountId;
		SessionId = other.SessionId;
	}

	public void Set(ref SendSessionNativeInviteRequestedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			UiEventId = other.Value.UiEventId;
			LocalUserId = other.Value.LocalUserId;
			TargetNativeAccountType = other.Value.TargetNativeAccountType;
			TargetUserNativeAccountId = other.Value.TargetUserNativeAccountId;
			SessionId = other.Value.SessionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetNativeAccountType);
		Helper.Dispose(ref m_TargetUserNativeAccountId);
		Helper.Dispose(ref m_SessionId);
	}

	public void Get(out SendSessionNativeInviteRequestedCallbackInfo output)
	{
		output = default(SendSessionNativeInviteRequestedCallbackInfo);
		output.Set(ref this);
	}
}


public enum SessionAttributeAdvertisementType
{
	DontAdvertise,
	Advertise
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public sealed class SessionDetails : Handle
{
	public const int SessiondetailsAttributeApiLatest = 1;

	public const int SessiondetailsCopyinfoApiLatest = 1;

	public const int SessiondetailsCopysessionattributebyindexApiLatest = 1;

	public const int SessiondetailsCopysessionattributebykeyApiLatest = 1;

	public const int SessiondetailsGetsessionattributecountApiLatest = 1;

	public const int SessiondetailsInfoApiLatest = 2;

	public const int SessiondetailsSettingsApiLatest = 4;

	public SessionDetails()
	{
	}

	public SessionDetails(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyInfo(ref SessionDetailsCopyInfoOptions options, out SessionDetailsInfo? outSessionInfo)
	{
		SessionDetailsCopyInfoOptionsInternal options2 = default(SessionDetailsCopyInfoOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionInfo2 = IntPtr.Zero;
		Result result = Bindings.EOS_SessionDetails_CopyInfo(base.InnerHandle, ref options2, ref outSessionInfo2);
		Helper.Dispose(ref options2);
		Helper.Get<SessionDetailsInfoInternal, SessionDetailsInfo>(outSessionInfo2, out outSessionInfo);
		if (outSessionInfo.HasValue)
		{
			Bindings.EOS_SessionDetails_Info_Release(outSessionInfo2);
		}
		return result;
	}

	public Result CopySessionAttributeByIndex(ref SessionDetailsCopySessionAttributeByIndexOptions options, out SessionDetailsAttribute? outSessionAttribute)
	{
		SessionDetailsCopySessionAttributeByIndexOptionsInternal options2 = default(SessionDetailsCopySessionAttributeByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_SessionDetails_CopySessionAttributeByIndex(base.InnerHandle, ref options2, ref outSessionAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<SessionDetailsAttributeInternal, SessionDetailsAttribute>(outSessionAttribute2, out outSessionAttribute);
		if (outSessionAttribute.HasValue)
		{
			Bindings.EOS_SessionDetails_Attribute_Release(outSessionAttribute2);
		}
		return result;
	}

	public Result CopySessionAttributeByKey(ref SessionDetailsCopySessionAttributeByKeyOptions options, out SessionDetailsAttribute? outSessionAttribute)
	{
		SessionDetailsCopySessionAttributeByKeyOptionsInternal options2 = default(SessionDetailsCopySessionAttributeByKeyOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionAttribute2 = IntPtr.Zero;
		Result result = Bindings.EOS_SessionDetails_CopySessionAttributeByKey(base.InnerHandle, ref options2, ref outSessionAttribute2);
		Helper.Dispose(ref options2);
		Helper.Get<SessionDetailsAttributeInternal, SessionDetailsAttribute>(outSessionAttribute2, out outSessionAttribute);
		if (outSessionAttribute.HasValue)
		{
			Bindings.EOS_SessionDetails_Attribute_Release(outSessionAttribute2);
		}
		return result;
	}

	public uint GetSessionAttributeCount(ref SessionDetailsGetSessionAttributeCountOptions options)
	{
		SessionDetailsGetSessionAttributeCountOptionsInternal options2 = default(SessionDetailsGetSessionAttributeCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_SessionDetails_GetSessionAttributeCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_SessionDetails_Release(base.InnerHandle);
	}
}


using Epic.OnlineServices.Sessions;

public struct SessionDetailsAttribute
{
	public AttributeData? Data { get; set; }

	public SessionAttributeAdvertisementType AdvertisementType { get; set; }

	internal void Set(ref SessionDetailsAttributeInternal other)
	{
		Data = other.Data;
		AdvertisementType = other.AdvertisementType;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsAttributeInternal : IGettable<SessionDetailsAttribute>, ISettable<SessionDetailsAttribute>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Data;

	private SessionAttributeAdvertisementType m_AdvertisementType;

	public AttributeData? Data
	{
		get
		{
			Helper.Get<AttributeDataInternal, AttributeData>(m_Data, out AttributeData? to);
			return to;
		}
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_Data);
		}
	}

	public SessionAttributeAdvertisementType AdvertisementType
	{
		get
		{
			return m_AdvertisementType;
		}
		set
		{
			m_AdvertisementType = value;
		}
	}

	public void Set(ref SessionDetailsAttribute other)
	{
		m_ApiVersion = 1;
		Data = other.Data;
		AdvertisementType = other.AdvertisementType;
	}

	public void Set(ref SessionDetailsAttribute? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Data = other.Value.Data;
			AdvertisementType = other.Value.AdvertisementType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Data);
	}

	public void Get(out SessionDetailsAttribute output)
	{
		output = default(SessionDetailsAttribute);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct SessionDetailsCopyInfoOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsCopyInfoOptionsInternal : ISettable<SessionDetailsCopyInfoOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref SessionDetailsCopyInfoOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref SessionDetailsCopyInfoOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public struct SessionDetailsCopySessionAttributeByIndexOptions
{
	public uint AttrIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsCopySessionAttributeByIndexOptionsInternal : ISettable<SessionDetailsCopySessionAttributeByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_AttrIndex;

	public uint AttrIndex
	{
		set
		{
			m_AttrIndex = value;
		}
	}

	public void Set(ref SessionDetailsCopySessionAttributeByIndexOptions other)
	{
		m_ApiVersion = 1;
		AttrIndex = other.AttrIndex;
	}

	public void Set(ref SessionDetailsCopySessionAttributeByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AttrIndex = other.Value.AttrIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct SessionDetailsCopySessionAttributeByKeyOptions
{
	public Utf8String AttrKey { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsCopySessionAttributeByKeyOptionsInternal : ISettable<SessionDetailsCopySessionAttributeByKeyOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AttrKey;

	public Utf8String AttrKey
	{
		set
		{
			Helper.Set(value, ref m_AttrKey);
		}
	}

	public void Set(ref SessionDetailsCopySessionAttributeByKeyOptions other)
	{
		m_ApiVersion = 1;
		AttrKey = other.AttrKey;
	}

	public void Set(ref SessionDetailsCopySessionAttributeByKeyOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AttrKey = other.Value.AttrKey;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AttrKey);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct SessionDetailsGetSessionAttributeCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsGetSessionAttributeCountOptionsInternal : ISettable<SessionDetailsGetSessionAttributeCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref SessionDetailsGetSessionAttributeCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref SessionDetailsGetSessionAttributeCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionDetailsInfo
{
	public Utf8String SessionId { get; set; }

	public Utf8String HostAddress { get; set; }

	public uint NumOpenPublicConnections { get; set; }

	public SessionDetailsSettings? Settings { get; set; }

	public ProductUserId OwnerUserId { get; set; }

	public Utf8String OwnerServerClientId { get; set; }

	internal void Set(ref SessionDetailsInfoInternal other)
	{
		SessionId = other.SessionId;
		HostAddress = other.HostAddress;
		NumOpenPublicConnections = other.NumOpenPublicConnections;
		Settings = other.Settings;
		OwnerUserId = other.OwnerUserId;
		OwnerServerClientId = other.OwnerServerClientId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsInfoInternal : IGettable<SessionDetailsInfo>, ISettable<SessionDetailsInfo>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionId;

	private IntPtr m_HostAddress;

	private uint m_NumOpenPublicConnections;

	private IntPtr m_Settings;

	private IntPtr m_OwnerUserId;

	private IntPtr m_OwnerServerClientId;

	public Utf8String SessionId
	{
		get
		{
			Helper.Get(m_SessionId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public Utf8String HostAddress
	{
		get
		{
			Helper.Get(m_HostAddress, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_HostAddress);
		}
	}

	public uint NumOpenPublicConnections
	{
		get
		{
			return m_NumOpenPublicConnections;
		}
		set
		{
			m_NumOpenPublicConnections = value;
		}
	}

	public SessionDetailsSettings? Settings
	{
		get
		{
			Helper.Get<SessionDetailsSettingsInternal, SessionDetailsSettings>(m_Settings, out SessionDetailsSettings? to);
			return to;
		}
		set
		{
			Helper.Set<SessionDetailsSettings, SessionDetailsSettingsInternal>(ref value, ref m_Settings);
		}
	}

	public ProductUserId OwnerUserId
	{
		get
		{
			Helper.Get(m_OwnerUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OwnerUserId);
		}
	}

	public Utf8String OwnerServerClientId
	{
		get
		{
			Helper.Get(m_OwnerServerClientId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_OwnerServerClientId);
		}
	}

	public void Set(ref SessionDetailsInfo other)
	{
		m_ApiVersion = 2;
		SessionId = other.SessionId;
		HostAddress = other.HostAddress;
		NumOpenPublicConnections = other.NumOpenPublicConnections;
		Settings = other.Settings;
		OwnerUserId = other.OwnerUserId;
		OwnerServerClientId = other.OwnerServerClientId;
	}

	public void Set(ref SessionDetailsInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			SessionId = other.Value.SessionId;
			HostAddress = other.Value.HostAddress;
			NumOpenPublicConnections = other.Value.NumOpenPublicConnections;
			Settings = other.Value.Settings;
			OwnerUserId = other.Value.OwnerUserId;
			OwnerServerClientId = other.Value.OwnerServerClientId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionId);
		Helper.Dispose(ref m_HostAddress);
		Helper.Dispose(ref m_Settings);
		Helper.Dispose(ref m_OwnerUserId);
		Helper.Dispose(ref m_OwnerServerClientId);
	}

	public void Get(out SessionDetailsInfo output)
	{
		output = default(SessionDetailsInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionDetailsSettings
{
	public Utf8String BucketId { get; set; }

	public uint NumPublicConnections { get; set; }

	public bool AllowJoinInProgress { get; set; }

	public OnlineSessionPermissionLevel PermissionLevel { get; set; }

	public bool InvitesAllowed { get; set; }

	public bool SanctionsEnabled { get; set; }

	public uint[] AllowedPlatformIds { get; set; }

	internal void Set(ref SessionDetailsSettingsInternal other)
	{
		BucketId = other.BucketId;
		NumPublicConnections = other.NumPublicConnections;
		AllowJoinInProgress = other.AllowJoinInProgress;
		PermissionLevel = other.PermissionLevel;
		InvitesAllowed = other.InvitesAllowed;
		SanctionsEnabled = other.SanctionsEnabled;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionDetailsSettingsInternal : IGettable<SessionDetailsSettings>, ISettable<SessionDetailsSettings>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_BucketId;

	private uint m_NumPublicConnections;

	private int m_AllowJoinInProgress;

	private OnlineSessionPermissionLevel m_PermissionLevel;

	private int m_InvitesAllowed;

	private int m_SanctionsEnabled;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public Utf8String BucketId
	{
		get
		{
			Helper.Get(m_BucketId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_BucketId);
		}
	}

	public uint NumPublicConnections
	{
		get
		{
			return m_NumPublicConnections;
		}
		set
		{
			m_NumPublicConnections = value;
		}
	}

	public bool AllowJoinInProgress
	{
		get
		{
			Helper.Get(m_AllowJoinInProgress, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowJoinInProgress);
		}
	}

	public OnlineSessionPermissionLevel PermissionLevel
	{
		get
		{
			return m_PermissionLevel;
		}
		set
		{
			m_PermissionLevel = value;
		}
	}

	public bool InvitesAllowed
	{
		get
		{
			Helper.Get(m_InvitesAllowed, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InvitesAllowed);
		}
	}

	public bool SanctionsEnabled
	{
		get
		{
			Helper.Get(m_SanctionsEnabled, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SanctionsEnabled);
		}
	}

	public uint[] AllowedPlatformIds
	{
		get
		{
			Helper.Get(m_AllowedPlatformIds, out uint[] to, m_AllowedPlatformIdsCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount);
		}
	}

	public void Set(ref SessionDetailsSettings other)
	{
		m_ApiVersion = 4;
		BucketId = other.BucketId;
		NumPublicConnections = other.NumPublicConnections;
		AllowJoinInProgress = other.AllowJoinInProgress;
		PermissionLevel = other.PermissionLevel;
		InvitesAllowed = other.InvitesAllowed;
		SanctionsEnabled = other.SanctionsEnabled;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}

	public void Set(ref SessionDetailsSettings? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 4;
			BucketId = other.Value.BucketId;
			NumPublicConnections = other.Value.NumPublicConnections;
			AllowJoinInProgress = other.Value.AllowJoinInProgress;
			PermissionLevel = other.Value.PermissionLevel;
			InvitesAllowed = other.Value.InvitesAllowed;
			SanctionsEnabled = other.Value.SanctionsEnabled;
			AllowedPlatformIds = other.Value.AllowedPlatformIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_BucketId);
		Helper.Dispose(ref m_AllowedPlatformIds);
	}

	public void Get(out SessionDetailsSettings output)
	{
		output = default(SessionDetailsSettings);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionInviteAcceptedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String SessionId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String InviteId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref SessionInviteAcceptedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		SessionId = other.SessionId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		InviteId = other.InviteId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionInviteAcceptedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SessionInviteAcceptedCallbackInfo>, ISettable<SessionInviteAcceptedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_SessionId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_InviteId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String SessionId
	{
		get
		{
			Helper.Get(m_SessionId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref SessionInviteAcceptedCallbackInfo other)
	{
		ClientData = other.ClientData;
		SessionId = other.SessionId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		InviteId = other.InviteId;
	}

	public void Set(ref SessionInviteAcceptedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			SessionId = other.Value.SessionId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_SessionId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_InviteId);
	}

	public void Get(out SessionInviteAcceptedCallbackInfo output)
	{
		output = default(SessionInviteAcceptedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionInviteReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String InviteId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref SessionInviteReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		InviteId = other.InviteId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionInviteReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SessionInviteReceivedCallbackInfo>, ISettable<SessionInviteReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_InviteId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public void Set(ref SessionInviteReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		InviteId = other.InviteId;
	}

	public void Set(ref SessionInviteReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			InviteId = other.Value.InviteId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_InviteId);
	}

	public void Get(out SessionInviteReceivedCallbackInfo output)
	{
		output = default(SessionInviteReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionInviteRejectedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Utf8String InviteId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public Utf8String SessionId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref SessionInviteRejectedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		SessionId = other.SessionId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionInviteRejectedCallbackInfoInternal : ICallbackInfoInternal, IGettable<SessionInviteRejectedCallbackInfo>, ISettable<SessionInviteRejectedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_InviteId;

	private IntPtr m_LocalUserId;

	private IntPtr m_TargetUserId;

	private IntPtr m_SessionId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String InviteId
	{
		get
		{
			Helper.Get(m_InviteId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_InviteId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public Utf8String SessionId
	{
		get
		{
			Helper.Get(m_SessionId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public void Set(ref SessionInviteRejectedCallbackInfo other)
	{
		ClientData = other.ClientData;
		InviteId = other.InviteId;
		LocalUserId = other.LocalUserId;
		TargetUserId = other.TargetUserId;
		SessionId = other.SessionId;
	}

	public void Set(ref SessionInviteRejectedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			InviteId = other.Value.InviteId;
			LocalUserId = other.Value.LocalUserId;
			TargetUserId = other.Value.TargetUserId;
			SessionId = other.Value.SessionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_InviteId);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_SessionId);
	}

	public void Get(out SessionInviteRejectedCallbackInfo output)
	{
		output = default(SessionInviteRejectedCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public sealed class SessionModification : Handle
{
	public const int SessionmodificationAddattributeApiLatest = 2;

	public const int SessionmodificationMaxSessionAttributeLength = 64;

	public const int SessionmodificationMaxSessionAttributes = 64;

	public const int SessionmodificationMaxSessionidoverrideLength = 64;

	public const int SessionmodificationMinSessionidoverrideLength = 16;

	public const int SessionmodificationRemoveattributeApiLatest = 1;

	public const int SessionmodificationSetallowedplatformidsApiLatest = 1;

	public const int SessionmodificationSetbucketidApiLatest = 1;

	public const int SessionmodificationSethostaddressApiLatest = 1;

	public const int SessionmodificationSetinvitesallowedApiLatest = 1;

	public const int SessionmodificationSetjoininprogressallowedApiLatest = 1;

	public const int SessionmodificationSetmaxplayersApiLatest = 1;

	public const int SessionmodificationSetpermissionlevelApiLatest = 1;

	public SessionModification()
	{
	}

	public SessionModification(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result AddAttribute(ref SessionModificationAddAttributeOptions options)
	{
		SessionModificationAddAttributeOptionsInternal options2 = default(SessionModificationAddAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_AddAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_SessionModification_Release(base.InnerHandle);
	}

	public Result RemoveAttribute(ref SessionModificationRemoveAttributeOptions options)
	{
		SessionModificationRemoveAttributeOptionsInternal options2 = default(SessionModificationRemoveAttributeOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_RemoveAttribute(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetAllowedPlatformIds(ref SessionModificationSetAllowedPlatformIdsOptions options)
	{
		SessionModificationSetAllowedPlatformIdsOptionsInternal options2 = default(SessionModificationSetAllowedPlatformIdsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetAllowedPlatformIds(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetBucketId(ref SessionModificationSetBucketIdOptions options)
	{
		SessionModificationSetBucketIdOptionsInternal options2 = default(SessionModificationSetBucketIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetBucketId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetHostAddress(ref SessionModificationSetHostAddressOptions options)
	{
		SessionModificationSetHostAddressOptionsInternal options2 = default(SessionModificationSetHostAddressOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetHostAddress(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetInvitesAllowed(ref SessionModificationSetInvitesAllowedOptions options)
	{
		SessionModificationSetInvitesAllowedOptionsInternal options2 = default(SessionModificationSetInvitesAllowedOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetInvitesAllowed(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetJoinInProgressAllowed(ref SessionModificationSetJoinInProgressAllowedOptions options)
	{
		SessionModificationSetJoinInProgressAllowedOptionsInternal options2 = default(SessionModificationSetJoinInProgressAllowedOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetJoinInProgressAllowed(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetMaxPlayers(ref SessionModificationSetMaxPlayersOptions options)
	{
		SessionModificationSetMaxPlayersOptionsInternal options2 = default(SessionModificationSetMaxPlayersOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetMaxPlayers(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetPermissionLevel(ref SessionModificationSetPermissionLevelOptions options)
	{
		SessionModificationSetPermissionLevelOptionsInternal options2 = default(SessionModificationSetPermissionLevelOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionModification_SetPermissionLevel(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}
}


using Epic.OnlineServices.Sessions;

public struct SessionModificationAddAttributeOptions
{
	public AttributeData? SessionAttribute { get; set; }

	public SessionAttributeAdvertisementType AdvertisementType { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationAddAttributeOptionsInternal : ISettable<SessionModificationAddAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionAttribute;

	private SessionAttributeAdvertisementType m_AdvertisementType;

	public AttributeData? SessionAttribute
	{
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_SessionAttribute);
		}
	}

	public SessionAttributeAdvertisementType AdvertisementType
	{
		set
		{
			m_AdvertisementType = value;
		}
	}

	public void Set(ref SessionModificationAddAttributeOptions other)
	{
		m_ApiVersion = 2;
		SessionAttribute = other.SessionAttribute;
		AdvertisementType = other.AdvertisementType;
	}

	public void Set(ref SessionModificationAddAttributeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			SessionAttribute = other.Value.SessionAttribute;
			AdvertisementType = other.Value.AdvertisementType;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionAttribute);
	}
}


using Epic.OnlineServices;

public struct SessionModificationRemoveAttributeOptions
{
	public Utf8String Key { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationRemoveAttributeOptionsInternal : ISettable<SessionModificationRemoveAttributeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public void Set(ref SessionModificationRemoveAttributeOptions other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
	}

	public void Set(ref SessionModificationRemoveAttributeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


public struct SessionModificationSetAllowedPlatformIdsOptions
{
	public uint[] AllowedPlatformIds { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetAllowedPlatformIdsOptionsInternal : ISettable<SessionModificationSetAllowedPlatformIdsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_AllowedPlatformIds;

	private uint m_AllowedPlatformIdsCount;

	public uint[] AllowedPlatformIds
	{
		set
		{
			Helper.Set(value, ref m_AllowedPlatformIds, out m_AllowedPlatformIdsCount);
		}
	}

	public void Set(ref SessionModificationSetAllowedPlatformIdsOptions other)
	{
		m_ApiVersion = 1;
		AllowedPlatformIds = other.AllowedPlatformIds;
	}

	public void Set(ref SessionModificationSetAllowedPlatformIdsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AllowedPlatformIds = other.Value.AllowedPlatformIds;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_AllowedPlatformIds);
	}
}


using Epic.OnlineServices;

public struct SessionModificationSetBucketIdOptions
{
	public Utf8String BucketId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetBucketIdOptionsInternal : ISettable<SessionModificationSetBucketIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_BucketId;

	public Utf8String BucketId
	{
		set
		{
			Helper.Set(value, ref m_BucketId);
		}
	}

	public void Set(ref SessionModificationSetBucketIdOptions other)
	{
		m_ApiVersion = 1;
		BucketId = other.BucketId;
	}

	public void Set(ref SessionModificationSetBucketIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			BucketId = other.Value.BucketId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_BucketId);
	}
}


using Epic.OnlineServices;

public struct SessionModificationSetHostAddressOptions
{
	public Utf8String HostAddress { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetHostAddressOptionsInternal : ISettable<SessionModificationSetHostAddressOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_HostAddress;

	public Utf8String HostAddress
	{
		set
		{
			Helper.Set(value, ref m_HostAddress);
		}
	}

	public void Set(ref SessionModificationSetHostAddressOptions other)
	{
		m_ApiVersion = 1;
		HostAddress = other.HostAddress;
	}

	public void Set(ref SessionModificationSetHostAddressOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			HostAddress = other.Value.HostAddress;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_HostAddress);
	}
}


public struct SessionModificationSetInvitesAllowedOptions
{
	public bool InvitesAllowed { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetInvitesAllowedOptionsInternal : ISettable<SessionModificationSetInvitesAllowedOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_InvitesAllowed;

	public bool InvitesAllowed
	{
		set
		{
			Helper.Set(value, ref m_InvitesAllowed);
		}
	}

	public void Set(ref SessionModificationSetInvitesAllowedOptions other)
	{
		m_ApiVersion = 1;
		InvitesAllowed = other.InvitesAllowed;
	}

	public void Set(ref SessionModificationSetInvitesAllowedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			InvitesAllowed = other.Value.InvitesAllowed;
		}
	}

	public void Dispose()
	{
	}
}


public struct SessionModificationSetJoinInProgressAllowedOptions
{
	public bool AllowJoinInProgress { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetJoinInProgressAllowedOptionsInternal : ISettable<SessionModificationSetJoinInProgressAllowedOptions>, IDisposable
{
	private int m_ApiVersion;

	private int m_AllowJoinInProgress;

	public bool AllowJoinInProgress
	{
		set
		{
			Helper.Set(value, ref m_AllowJoinInProgress);
		}
	}

	public void Set(ref SessionModificationSetJoinInProgressAllowedOptions other)
	{
		m_ApiVersion = 1;
		AllowJoinInProgress = other.AllowJoinInProgress;
	}

	public void Set(ref SessionModificationSetJoinInProgressAllowedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			AllowJoinInProgress = other.Value.AllowJoinInProgress;
		}
	}

	public void Dispose()
	{
	}
}


public struct SessionModificationSetMaxPlayersOptions
{
	public uint MaxPlayers { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetMaxPlayersOptionsInternal : ISettable<SessionModificationSetMaxPlayersOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxPlayers;

	public uint MaxPlayers
	{
		set
		{
			m_MaxPlayers = value;
		}
	}

	public void Set(ref SessionModificationSetMaxPlayersOptions other)
	{
		m_ApiVersion = 1;
		MaxPlayers = other.MaxPlayers;
	}

	public void Set(ref SessionModificationSetMaxPlayersOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MaxPlayers = other.Value.MaxPlayers;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Sessions;

public struct SessionModificationSetPermissionLevelOptions
{
	public OnlineSessionPermissionLevel PermissionLevel { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionModificationSetPermissionLevelOptionsInternal : ISettable<SessionModificationSetPermissionLevelOptions>, IDisposable
{
	private int m_ApiVersion;

	private OnlineSessionPermissionLevel m_PermissionLevel;

	public OnlineSessionPermissionLevel PermissionLevel
	{
		set
		{
			m_PermissionLevel = value;
		}
	}

	public void Set(ref SessionModificationSetPermissionLevelOptions other)
	{
		m_ApiVersion = 1;
		PermissionLevel = other.PermissionLevel;
	}

	public void Set(ref SessionModificationSetPermissionLevelOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PermissionLevel = other.Value.PermissionLevel;
		}
	}

	public void Dispose()
	{
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public sealed class SessionSearch : Handle
{
	public const int SessionsearchCopysearchresultbyindexApiLatest = 1;

	public const int SessionsearchFindApiLatest = 2;

	public const int SessionsearchGetsearchresultcountApiLatest = 1;

	public const int SessionsearchRemoveparameterApiLatest = 1;

	public const int SessionsearchSetmaxsearchresultsApiLatest = 1;

	public const int SessionsearchSetparameterApiLatest = 1;

	public const int SessionsearchSetsessionidApiLatest = 1;

	public const int SessionsearchSettargetuseridApiLatest = 1;

	public SessionSearch()
	{
	}

	public SessionSearch(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopySearchResultByIndex(ref SessionSearchCopySearchResultByIndexOptions options, out SessionDetails outSessionHandle)
	{
		SessionSearchCopySearchResultByIndexOptionsInternal options2 = default(SessionSearchCopySearchResultByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_SessionSearch_CopySearchResultByIndex(base.InnerHandle, ref options2, ref outSessionHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionHandle2, out outSessionHandle);
		return result;
	}

	public void Find(ref SessionSearchFindOptions options, object clientData, SessionSearchOnFindCallback completionDelegate)
	{
		SessionSearchFindOptionsInternal options2 = default(SessionSearchFindOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		SessionSearchOnFindCallbackInternal sessionSearchOnFindCallbackInternal = OnFindCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, sessionSearchOnFindCallbackInternal);
		Bindings.EOS_SessionSearch_Find(base.InnerHandle, ref options2, clientDataAddress, sessionSearchOnFindCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public uint GetSearchResultCount(ref SessionSearchGetSearchResultCountOptions options)
	{
		SessionSearchGetSearchResultCountOptionsInternal options2 = default(SessionSearchGetSearchResultCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_SessionSearch_GetSearchResultCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void Release()
	{
		Bindings.EOS_SessionSearch_Release(base.InnerHandle);
	}

	public Result RemoveParameter(ref SessionSearchRemoveParameterOptions options)
	{
		SessionSearchRemoveParameterOptionsInternal options2 = default(SessionSearchRemoveParameterOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionSearch_RemoveParameter(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetMaxResults(ref SessionSearchSetMaxResultsOptions options)
	{
		SessionSearchSetMaxResultsOptionsInternal options2 = default(SessionSearchSetMaxResultsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionSearch_SetMaxResults(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetParameter(ref SessionSearchSetParameterOptions options)
	{
		SessionSearchSetParameterOptionsInternal options2 = default(SessionSearchSetParameterOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionSearch_SetParameter(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetSessionId(ref SessionSearchSetSessionIdOptions options)
	{
		SessionSearchSetSessionIdOptionsInternal options2 = default(SessionSearchSetSessionIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionSearch_SetSessionId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetTargetUserId(ref SessionSearchSetTargetUserIdOptions options)
	{
		SessionSearchSetTargetUserIdOptionsInternal options2 = default(SessionSearchSetTargetUserIdOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_SessionSearch_SetTargetUserId(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	[MonoPInvokeCallback(typeof(SessionSearchOnFindCallbackInternal))]
	internal static void OnFindCallbackInternalImplementation(ref SessionSearchFindCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SessionSearchFindCallbackInfoInternal, SessionSearchOnFindCallback, SessionSearchFindCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public struct SessionSearchCopySearchResultByIndexOptions
{
	public uint SessionIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchCopySearchResultByIndexOptionsInternal : ISettable<SessionSearchCopySearchResultByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_SessionIndex;

	public uint SessionIndex
	{
		set
		{
			m_SessionIndex = value;
		}
	}

	public void Set(ref SessionSearchCopySearchResultByIndexOptions other)
	{
		m_ApiVersion = 1;
		SessionIndex = other.SessionIndex;
	}

	public void Set(ref SessionSearchCopySearchResultByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionIndex = other.Value.SessionIndex;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionSearchFindCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref SessionSearchFindCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchFindCallbackInfoInternal : ICallbackInfoInternal, IGettable<SessionSearchFindCallbackInfo>, ISettable<SessionSearchFindCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref SessionSearchFindCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref SessionSearchFindCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out SessionSearchFindCallbackInfo output)
	{
		output = default(SessionSearchFindCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct SessionSearchFindOptions
{
	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchFindOptionsInternal : ISettable<SessionSearchFindOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref SessionSearchFindOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref SessionSearchFindOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct SessionSearchGetSearchResultCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchGetSearchResultCountOptionsInternal : ISettable<SessionSearchGetSearchResultCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref SessionSearchGetSearchResultCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref SessionSearchGetSearchResultCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices.Sessions;

public delegate void SessionSearchOnFindCallback(ref SessionSearchFindCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sessions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void SessionSearchOnFindCallbackInternal(ref SessionSearchFindCallbackInfoInternal data);


using Epic.OnlineServices;

public struct SessionSearchRemoveParameterOptions
{
	public Utf8String Key { get; set; }

	public ComparisonOp ComparisonOp { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchRemoveParameterOptionsInternal : ISettable<SessionSearchRemoveParameterOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Key;

	private ComparisonOp m_ComparisonOp;

	public Utf8String Key
	{
		set
		{
			Helper.Set(value, ref m_Key);
		}
	}

	public ComparisonOp ComparisonOp
	{
		set
		{
			m_ComparisonOp = value;
		}
	}

	public void Set(ref SessionSearchRemoveParameterOptions other)
	{
		m_ApiVersion = 1;
		Key = other.Key;
		ComparisonOp = other.ComparisonOp;
	}

	public void Set(ref SessionSearchRemoveParameterOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Key = other.Value.Key;
			ComparisonOp = other.Value.ComparisonOp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Key);
	}
}


public struct SessionSearchSetMaxResultsOptions
{
	public uint MaxSearchResults { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchSetMaxResultsOptionsInternal : ISettable<SessionSearchSetMaxResultsOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_MaxSearchResults;

	public uint MaxSearchResults
	{
		set
		{
			m_MaxSearchResults = value;
		}
	}

	public void Set(ref SessionSearchSetMaxResultsOptions other)
	{
		m_ApiVersion = 1;
		MaxSearchResults = other.MaxSearchResults;
	}

	public void Set(ref SessionSearchSetMaxResultsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			MaxSearchResults = other.Value.MaxSearchResults;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct SessionSearchSetParameterOptions
{
	public AttributeData? Parameter { get; set; }

	public ComparisonOp ComparisonOp { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchSetParameterOptionsInternal : ISettable<SessionSearchSetParameterOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Parameter;

	private ComparisonOp m_ComparisonOp;

	public AttributeData? Parameter
	{
		set
		{
			Helper.Set<AttributeData, AttributeDataInternal>(ref value, ref m_Parameter);
		}
	}

	public ComparisonOp ComparisonOp
	{
		set
		{
			m_ComparisonOp = value;
		}
	}

	public void Set(ref SessionSearchSetParameterOptions other)
	{
		m_ApiVersion = 1;
		Parameter = other.Parameter;
		ComparisonOp = other.ComparisonOp;
	}

	public void Set(ref SessionSearchSetParameterOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Parameter = other.Value.Parameter;
			ComparisonOp = other.Value.ComparisonOp;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Parameter);
	}
}


using Epic.OnlineServices;

public struct SessionSearchSetSessionIdOptions
{
	public Utf8String SessionId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchSetSessionIdOptionsInternal : ISettable<SessionSearchSetSessionIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionId;

	public Utf8String SessionId
	{
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public void Set(ref SessionSearchSetSessionIdOptions other)
	{
		m_ApiVersion = 1;
		SessionId = other.SessionId;
	}

	public void Set(ref SessionSearchSetSessionIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionId = other.Value.SessionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionId);
	}
}


using Epic.OnlineServices;

public struct SessionSearchSetTargetUserIdOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SessionSearchSetTargetUserIdOptionsInternal : ISettable<SessionSearchSetTargetUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref SessionSearchSetTargetUserIdOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref SessionSearchSetTargetUserIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public sealed class SessionsInterface : Handle
{
	public const int AddnotifyjoinsessionacceptedApiLatest = 1;

	public const int AddnotifyleavesessionrequestedApiLatest = 1;

	public const int AddnotifysendsessionnativeinviterequestedApiLatest = 1;

	public const int AddnotifysessioninviteacceptedApiLatest = 1;

	public const int AddnotifysessioninvitereceivedApiLatest = 1;

	public const int AddnotifysessioninviterejectedApiLatest = 1;

	public const int AttributedataApiLatest = 1;

	public const int CopyactivesessionhandleApiLatest = 1;

	public const int CopysessionhandlebyinviteidApiLatest = 1;

	public const int CopysessionhandlebyuieventidApiLatest = 1;

	public const int CopysessionhandleforpresenceApiLatest = 1;

	public const int CreatesessionmodificationApiLatest = 5;

	public const int CreatesessionsearchApiLatest = 1;

	public const int DestroysessionApiLatest = 1;

	public const int DumpsessionstateApiLatest = 1;

	public const int EndsessionApiLatest = 1;

	public const int GetinvitecountApiLatest = 1;

	public const int GetinviteidbyindexApiLatest = 1;

	public const int InviteidMaxLength = 64;

	public const int IsuserinsessionApiLatest = 1;

	public const int JoinsessionApiLatest = 2;

	public const int MaxSearchResults = 200;

	public const int Maxregisteredplayers = 1000;

	public const int QueryinvitesApiLatest = 1;

	public const int RegisterplayersApiLatest = 3;

	public const int RejectinviteApiLatest = 1;

	public static readonly Utf8String SearchBucketId = "bucket";

	public static readonly Utf8String SearchEmptyServersOnly = "emptyonly";

	public static readonly Utf8String SearchMinslotsavailable = "minslotsavailable";

	public static readonly Utf8String SearchNonemptyServersOnly = "nonemptyonly";

	public const int SendinviteApiLatest = 1;

	public const int SessionattributeApiLatest = 1;

	public const int SessionattributedataApiLatest = 1;

	public const int StartsessionApiLatest = 1;

	public const int UnregisterplayersApiLatest = 2;

	public const int UpdatesessionApiLatest = 1;

	public const int UpdatesessionmodificationApiLatest = 1;

	public SessionsInterface()
	{
	}

	public SessionsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyJoinSessionAccepted(ref AddNotifyJoinSessionAcceptedOptions options, object clientData, OnJoinSessionAcceptedCallback notificationFn)
	{
		AddNotifyJoinSessionAcceptedOptionsInternal options2 = default(AddNotifyJoinSessionAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinSessionAcceptedCallbackInternal onJoinSessionAcceptedCallbackInternal = OnJoinSessionAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onJoinSessionAcceptedCallbackInternal);
		ulong num = Bindings.EOS_Sessions_AddNotifyJoinSessionAccepted(base.InnerHandle, ref options2, clientDataAddress, onJoinSessionAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyLeaveSessionRequested(ref AddNotifyLeaveSessionRequestedOptions options, object clientData, OnLeaveSessionRequestedCallback notificationFn)
	{
		AddNotifyLeaveSessionRequestedOptionsInternal options2 = default(AddNotifyLeaveSessionRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnLeaveSessionRequestedCallbackInternal onLeaveSessionRequestedCallbackInternal = OnLeaveSessionRequestedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onLeaveSessionRequestedCallbackInternal);
		ulong num = Bindings.EOS_Sessions_AddNotifyLeaveSessionRequested(base.InnerHandle, ref options2, clientDataAddress, onLeaveSessionRequestedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifySendSessionNativeInviteRequested(ref AddNotifySendSessionNativeInviteRequestedOptions options, object clientData, OnSendSessionNativeInviteRequestedCallback notificationFn)
	{
		AddNotifySendSessionNativeInviteRequestedOptionsInternal options2 = default(AddNotifySendSessionNativeInviteRequestedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendSessionNativeInviteRequestedCallbackInternal onSendSessionNativeInviteRequestedCallbackInternal = OnSendSessionNativeInviteRequestedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onSendSessionNativeInviteRequestedCallbackInternal);
		ulong num = Bindings.EOS_Sessions_AddNotifySendSessionNativeInviteRequested(base.InnerHandle, ref options2, clientDataAddress, onSendSessionNativeInviteRequestedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifySessionInviteAccepted(ref AddNotifySessionInviteAcceptedOptions options, object clientData, OnSessionInviteAcceptedCallback notificationFn)
	{
		AddNotifySessionInviteAcceptedOptionsInternal options2 = default(AddNotifySessionInviteAcceptedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSessionInviteAcceptedCallbackInternal onSessionInviteAcceptedCallbackInternal = OnSessionInviteAcceptedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onSessionInviteAcceptedCallbackInternal);
		ulong num = Bindings.EOS_Sessions_AddNotifySessionInviteAccepted(base.InnerHandle, ref options2, clientDataAddress, onSessionInviteAcceptedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifySessionInviteReceived(ref AddNotifySessionInviteReceivedOptions options, object clientData, OnSessionInviteReceivedCallback notificationFn)
	{
		AddNotifySessionInviteReceivedOptionsInternal options2 = default(AddNotifySessionInviteReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSessionInviteReceivedCallbackInternal onSessionInviteReceivedCallbackInternal = OnSessionInviteReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onSessionInviteReceivedCallbackInternal);
		ulong num = Bindings.EOS_Sessions_AddNotifySessionInviteReceived(base.InnerHandle, ref options2, clientDataAddress, onSessionInviteReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifySessionInviteRejected(ref AddNotifySessionInviteRejectedOptions options, object clientData, OnSessionInviteRejectedCallback notificationFn)
	{
		AddNotifySessionInviteRejectedOptionsInternal options2 = default(AddNotifySessionInviteRejectedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSessionInviteRejectedCallbackInternal onSessionInviteRejectedCallbackInternal = OnSessionInviteRejectedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, notificationFn, onSessionInviteRejectedCallbackInternal);
		ulong num = Bindings.EOS_Sessions_AddNotifySessionInviteRejected(base.InnerHandle, ref options2, clientDataAddress, onSessionInviteRejectedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyActiveSessionHandle(ref CopyActiveSessionHandleOptions options, out ActiveSession outSessionHandle)
	{
		CopyActiveSessionHandleOptionsInternal options2 = default(CopyActiveSessionHandleOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_CopyActiveSessionHandle(base.InnerHandle, ref options2, ref outSessionHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionHandle2, out outSessionHandle);
		return result;
	}

	public Result CopySessionHandleByInviteId(ref CopySessionHandleByInviteIdOptions options, out SessionDetails outSessionHandle)
	{
		CopySessionHandleByInviteIdOptionsInternal options2 = default(CopySessionHandleByInviteIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_CopySessionHandleByInviteId(base.InnerHandle, ref options2, ref outSessionHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionHandle2, out outSessionHandle);
		return result;
	}

	public Result CopySessionHandleByUiEventId(ref CopySessionHandleByUiEventIdOptions options, out SessionDetails outSessionHandle)
	{
		CopySessionHandleByUiEventIdOptionsInternal options2 = default(CopySessionHandleByUiEventIdOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_CopySessionHandleByUiEventId(base.InnerHandle, ref options2, ref outSessionHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionHandle2, out outSessionHandle);
		return result;
	}

	public Result CopySessionHandleForPresence(ref CopySessionHandleForPresenceOptions options, out SessionDetails outSessionHandle)
	{
		CopySessionHandleForPresenceOptionsInternal options2 = default(CopySessionHandleForPresenceOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_CopySessionHandleForPresence(base.InnerHandle, ref options2, ref outSessionHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionHandle2, out outSessionHandle);
		return result;
	}

	public Result CreateSessionModification(ref CreateSessionModificationOptions options, out SessionModification outSessionModificationHandle)
	{
		CreateSessionModificationOptionsInternal options2 = default(CreateSessionModificationOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionModificationHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_CreateSessionModification(base.InnerHandle, ref options2, ref outSessionModificationHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionModificationHandle2, out outSessionModificationHandle);
		return result;
	}

	public Result CreateSessionSearch(ref CreateSessionSearchOptions options, out SessionSearch outSessionSearchHandle)
	{
		CreateSessionSearchOptionsInternal options2 = default(CreateSessionSearchOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionSearchHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_CreateSessionSearch(base.InnerHandle, ref options2, ref outSessionSearchHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionSearchHandle2, out outSessionSearchHandle);
		return result;
	}

	public void DestroySession(ref DestroySessionOptions options, object clientData, OnDestroySessionCallback completionDelegate)
	{
		DestroySessionOptionsInternal options2 = default(DestroySessionOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDestroySessionCallbackInternal onDestroySessionCallbackInternal = OnDestroySessionCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDestroySessionCallbackInternal);
		Bindings.EOS_Sessions_DestroySession(base.InnerHandle, ref options2, clientDataAddress, onDestroySessionCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result DumpSessionState(ref DumpSessionStateOptions options)
	{
		DumpSessionStateOptionsInternal options2 = default(DumpSessionStateOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Sessions_DumpSessionState(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void EndSession(ref EndSessionOptions options, object clientData, OnEndSessionCallback completionDelegate)
	{
		EndSessionOptionsInternal options2 = default(EndSessionOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnEndSessionCallbackInternal onEndSessionCallbackInternal = OnEndSessionCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onEndSessionCallbackInternal);
		Bindings.EOS_Sessions_EndSession(base.InnerHandle, ref options2, clientDataAddress, onEndSessionCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public uint GetInviteCount(ref GetInviteCountOptions options)
	{
		GetInviteCountOptionsInternal options2 = default(GetInviteCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Sessions_GetInviteCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result GetInviteIdByIndex(ref GetInviteIdByIndexOptions options, out Utf8String outBuffer)
	{
		GetInviteIdByIndexOptionsInternal options2 = default(GetInviteIdByIndexOptionsInternal);
		options2.Set(ref options);
		int inOutBufferLength = 65;
		IntPtr value = Helper.AddAllocation(inOutBufferLength);
		Result result = Bindings.EOS_Sessions_GetInviteIdByIndex(base.InnerHandle, ref options2, value, ref inOutBufferLength);
		Helper.Dispose(ref options2);
		Helper.Get(value, out outBuffer);
		Helper.Dispose(ref value);
		return result;
	}

	public Result IsUserInSession(ref IsUserInSessionOptions options)
	{
		IsUserInSessionOptionsInternal options2 = default(IsUserInSessionOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_Sessions_IsUserInSession(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void JoinSession(ref JoinSessionOptions options, object clientData, OnJoinSessionCallback completionDelegate)
	{
		JoinSessionOptionsInternal options2 = default(JoinSessionOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnJoinSessionCallbackInternal onJoinSessionCallbackInternal = OnJoinSessionCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onJoinSessionCallbackInternal);
		Bindings.EOS_Sessions_JoinSession(base.InnerHandle, ref options2, clientDataAddress, onJoinSessionCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryInvites(ref QueryInvitesOptions options, object clientData, OnQueryInvitesCallback completionDelegate)
	{
		QueryInvitesOptionsInternal options2 = default(QueryInvitesOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryInvitesCallbackInternal onQueryInvitesCallbackInternal = OnQueryInvitesCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryInvitesCallbackInternal);
		Bindings.EOS_Sessions_QueryInvites(base.InnerHandle, ref options2, clientDataAddress, onQueryInvitesCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RegisterPlayers(ref RegisterPlayersOptions options, object clientData, OnRegisterPlayersCallback completionDelegate)
	{
		RegisterPlayersOptionsInternal options2 = default(RegisterPlayersOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRegisterPlayersCallbackInternal onRegisterPlayersCallbackInternal = OnRegisterPlayersCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRegisterPlayersCallbackInternal);
		Bindings.EOS_Sessions_RegisterPlayers(base.InnerHandle, ref options2, clientDataAddress, onRegisterPlayersCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RejectInvite(ref RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
	{
		RejectInviteOptionsInternal options2 = default(RejectInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRejectInviteCallbackInternal onRejectInviteCallbackInternal = OnRejectInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRejectInviteCallbackInternal);
		Bindings.EOS_Sessions_RejectInvite(base.InnerHandle, ref options2, clientDataAddress, onRejectInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyJoinSessionAccepted(ulong inId)
	{
		Bindings.EOS_Sessions_RemoveNotifyJoinSessionAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifyLeaveSessionRequested(ulong inId)
	{
		Bindings.EOS_Sessions_RemoveNotifyLeaveSessionRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySendSessionNativeInviteRequested(ulong inId)
	{
		Bindings.EOS_Sessions_RemoveNotifySendSessionNativeInviteRequested(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySessionInviteAccepted(ulong inId)
	{
		Bindings.EOS_Sessions_RemoveNotifySessionInviteAccepted(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySessionInviteReceived(ulong inId)
	{
		Bindings.EOS_Sessions_RemoveNotifySessionInviteReceived(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void RemoveNotifySessionInviteRejected(ulong inId)
	{
		Bindings.EOS_Sessions_RemoveNotifySessionInviteRejected(base.InnerHandle, inId);
		Helper.RemoveCallbackByNotificationId(inId);
	}

	public void SendInvite(ref SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
	{
		SendInviteOptionsInternal options2 = default(SendInviteOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSendInviteCallbackInternal onSendInviteCallbackInternal = OnSendInviteCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSendInviteCallbackInternal);
		Bindings.EOS_Sessions_SendInvite(base.InnerHandle, ref options2, clientDataAddress, onSendInviteCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void StartSession(ref StartSessionOptions options, object clientData, OnStartSessionCallback completionDelegate)
	{
		StartSessionOptionsInternal options2 = default(StartSessionOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnStartSessionCallbackInternal onStartSessionCallbackInternal = OnStartSessionCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onStartSessionCallbackInternal);
		Bindings.EOS_Sessions_StartSession(base.InnerHandle, ref options2, clientDataAddress, onStartSessionCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UnregisterPlayers(ref UnregisterPlayersOptions options, object clientData, OnUnregisterPlayersCallback completionDelegate)
	{
		UnregisterPlayersOptionsInternal options2 = default(UnregisterPlayersOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUnregisterPlayersCallbackInternal onUnregisterPlayersCallbackInternal = OnUnregisterPlayersCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUnregisterPlayersCallbackInternal);
		Bindings.EOS_Sessions_UnregisterPlayers(base.InnerHandle, ref options2, clientDataAddress, onUnregisterPlayersCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateSession(ref UpdateSessionOptions options, object clientData, OnUpdateSessionCallback completionDelegate)
	{
		UpdateSessionOptionsInternal options2 = default(UpdateSessionOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateSessionCallbackInternal onUpdateSessionCallbackInternal = OnUpdateSessionCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateSessionCallbackInternal);
		Bindings.EOS_Sessions_UpdateSession(base.InnerHandle, ref options2, clientDataAddress, onUpdateSessionCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result UpdateSessionModification(ref UpdateSessionModificationOptions options, out SessionModification outSessionModificationHandle)
	{
		UpdateSessionModificationOptionsInternal options2 = default(UpdateSessionModificationOptionsInternal);
		options2.Set(ref options);
		IntPtr outSessionModificationHandle2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sessions_UpdateSessionModification(base.InnerHandle, ref options2, ref outSessionModificationHandle2);
		Helper.Dispose(ref options2);
		Helper.Get(outSessionModificationHandle2, out outSessionModificationHandle);
		return result;
	}

	[MonoPInvokeCallback(typeof(OnDestroySessionCallbackInternal))]
	internal static void OnDestroySessionCallbackInternalImplementation(ref DestroySessionCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<DestroySessionCallbackInfoInternal, OnDestroySessionCallback, DestroySessionCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnEndSessionCallbackInternal))]
	internal static void OnEndSessionCallbackInternalImplementation(ref EndSessionCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<EndSessionCallbackInfoInternal, OnEndSessionCallback, EndSessionCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinSessionAcceptedCallbackInternal))]
	internal static void OnJoinSessionAcceptedCallbackInternalImplementation(ref JoinSessionAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<JoinSessionAcceptedCallbackInfoInternal, OnJoinSessionAcceptedCallback, JoinSessionAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnJoinSessionCallbackInternal))]
	internal static void OnJoinSessionCallbackInternalImplementation(ref JoinSessionCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<JoinSessionCallbackInfoInternal, OnJoinSessionCallback, JoinSessionCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnLeaveSessionRequestedCallbackInternal))]
	internal static void OnLeaveSessionRequestedCallbackInternalImplementation(ref LeaveSessionRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<LeaveSessionRequestedCallbackInfoInternal, OnLeaveSessionRequestedCallback, LeaveSessionRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryInvitesCallbackInternal))]
	internal static void OnQueryInvitesCallbackInternalImplementation(ref QueryInvitesCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryInvitesCallbackInfoInternal, OnQueryInvitesCallback, QueryInvitesCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRegisterPlayersCallbackInternal))]
	internal static void OnRegisterPlayersCallbackInternalImplementation(ref RegisterPlayersCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RegisterPlayersCallbackInfoInternal, OnRegisterPlayersCallback, RegisterPlayersCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRejectInviteCallbackInternal))]
	internal static void OnRejectInviteCallbackInternalImplementation(ref RejectInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<RejectInviteCallbackInfoInternal, OnRejectInviteCallback, RejectInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendInviteCallbackInternal))]
	internal static void OnSendInviteCallbackInternalImplementation(ref SendInviteCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<SendInviteCallbackInfoInternal, OnSendInviteCallback, SendInviteCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSendSessionNativeInviteRequestedCallbackInternal))]
	internal static void OnSendSessionNativeInviteRequestedCallbackInternalImplementation(ref SendSessionNativeInviteRequestedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SendSessionNativeInviteRequestedCallbackInfoInternal, OnSendSessionNativeInviteRequestedCallback, SendSessionNativeInviteRequestedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSessionInviteAcceptedCallbackInternal))]
	internal static void OnSessionInviteAcceptedCallbackInternalImplementation(ref SessionInviteAcceptedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SessionInviteAcceptedCallbackInfoInternal, OnSessionInviteAcceptedCallback, SessionInviteAcceptedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSessionInviteReceivedCallbackInternal))]
	internal static void OnSessionInviteReceivedCallbackInternalImplementation(ref SessionInviteReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SessionInviteReceivedCallbackInfoInternal, OnSessionInviteReceivedCallback, SessionInviteReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSessionInviteRejectedCallbackInternal))]
	internal static void OnSessionInviteRejectedCallbackInternalImplementation(ref SessionInviteRejectedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<SessionInviteRejectedCallbackInfoInternal, OnSessionInviteRejectedCallback, SessionInviteRejectedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnStartSessionCallbackInternal))]
	internal static void OnStartSessionCallbackInternalImplementation(ref StartSessionCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<StartSessionCallbackInfoInternal, OnStartSessionCallback, StartSessionCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUnregisterPlayersCallbackInternal))]
	internal static void OnUnregisterPlayersCallbackInternalImplementation(ref UnregisterPlayersCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UnregisterPlayersCallbackInfoInternal, OnUnregisterPlayersCallback, UnregisterPlayersCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateSessionCallbackInternal))]
	internal static void OnUpdateSessionCallbackInternalImplementation(ref UpdateSessionCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateSessionCallbackInfoInternal, OnUpdateSessionCallback, UpdateSessionCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct StartSessionCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref StartSessionCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct StartSessionCallbackInfoInternal : ICallbackInfoInternal, IGettable<StartSessionCallbackInfo>, ISettable<StartSessionCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref StartSessionCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref StartSessionCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out StartSessionCallbackInfo output)
	{
		output = default(StartSessionCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct StartSessionOptions
{
	public Utf8String SessionName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct StartSessionOptionsInternal : ISettable<StartSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref StartSessionOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
	}

	public void Set(ref StartSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct UnregisterPlayersCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId[] UnregisteredPlayers { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UnregisterPlayersCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		UnregisteredPlayers = other.UnregisteredPlayers;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnregisterPlayersCallbackInfoInternal : ICallbackInfoInternal, IGettable<UnregisterPlayersCallbackInfo>, ISettable<UnregisterPlayersCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_UnregisteredPlayers;

	private uint m_UnregisteredPlayersCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId[] UnregisteredPlayers
	{
		get
		{
			Helper.GetHandle<ProductUserId>(m_UnregisteredPlayers, out var to, m_UnregisteredPlayersCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_UnregisteredPlayers, out m_UnregisteredPlayersCount);
		}
	}

	public void Set(ref UnregisterPlayersCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		UnregisteredPlayers = other.UnregisteredPlayers;
	}

	public void Set(ref UnregisterPlayersCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			UnregisteredPlayers = other.Value.UnregisteredPlayers;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_UnregisteredPlayers);
	}

	public void Get(out UnregisterPlayersCallbackInfo output)
	{
		output = default(UnregisterPlayersCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UnregisterPlayersOptions
{
	public Utf8String SessionName { get; set; }

	public ProductUserId[] PlayersToUnregister { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnregisterPlayersOptionsInternal : ISettable<UnregisterPlayersOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	private IntPtr m_PlayersToUnregister;

	private uint m_PlayersToUnregisterCount;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public ProductUserId[] PlayersToUnregister
	{
		set
		{
			Helper.Set(value, ref m_PlayersToUnregister, out m_PlayersToUnregisterCount);
		}
	}

	public void Set(ref UnregisterPlayersOptions other)
	{
		m_ApiVersion = 2;
		SessionName = other.SessionName;
		PlayersToUnregister = other.PlayersToUnregister;
	}

	public void Set(ref UnregisterPlayersOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			SessionName = other.Value.SessionName;
			PlayersToUnregister = other.Value.PlayersToUnregister;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_PlayersToUnregister);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

public struct UpdateSessionCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String SessionName { get; set; }

	public Utf8String SessionId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateSessionCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		SessionName = other.SessionName;
		SessionId = other.SessionId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSessionCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateSessionCallbackInfo>, ISettable<UpdateSessionCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_SessionName;

	private IntPtr m_SessionId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String SessionName
	{
		get
		{
			Helper.Get(m_SessionName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public Utf8String SessionId
	{
		get
		{
			Helper.Get(m_SessionId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_SessionId);
		}
	}

	public void Set(ref UpdateSessionCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		SessionName = other.SessionName;
		SessionId = other.SessionId;
	}

	public void Set(ref UpdateSessionCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			SessionName = other.Value.SessionName;
			SessionId = other.Value.SessionId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_SessionName);
		Helper.Dispose(ref m_SessionId);
	}

	public void Get(out UpdateSessionCallbackInfo output)
	{
		output = default(UpdateSessionCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateSessionModificationOptions
{
	public Utf8String SessionName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSessionModificationOptionsInternal : ISettable<UpdateSessionModificationOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionName;

	public Utf8String SessionName
	{
		set
		{
			Helper.Set(value, ref m_SessionName);
		}
	}

	public void Set(ref UpdateSessionModificationOptions other)
	{
		m_ApiVersion = 1;
		SessionName = other.SessionName;
	}

	public void Set(ref UpdateSessionModificationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionName = other.Value.SessionName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionName);
	}
}


using Epic.OnlineServices.Sessions;

public struct UpdateSessionOptions
{
	public SessionModification SessionModificationHandle { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sessions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSessionOptionsInternal : ISettable<UpdateSessionOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_SessionModificationHandle;

	public SessionModification SessionModificationHandle
	{
		set
		{
			Helper.Set(value, ref m_SessionModificationHandle);
		}
	}

	public void Set(ref UpdateSessionOptions other)
	{
		m_ApiVersion = 1;
		SessionModificationHandle = other.SessionModificationHandle;
	}

	public void Set(ref UpdateSessionOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			SessionModificationHandle = other.Value.SessionModificationHandle;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_SessionModificationHandle);
	}
}


using Epic.OnlineServices;

public struct CopyPlayerSanctionByIndexOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint SanctionIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyPlayerSanctionByIndexOptionsInternal : ISettable<CopyPlayerSanctionByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_SanctionIndex;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint SanctionIndex
	{
		set
		{
			m_SanctionIndex = value;
		}
	}

	public void Set(ref CopyPlayerSanctionByIndexOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
		SanctionIndex = other.SanctionIndex;
	}

	public void Set(ref CopyPlayerSanctionByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
			SanctionIndex = other.Value.SanctionIndex;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices.Sanctions;

public delegate void CreatePlayerSanctionAppealCallback(ref CreatePlayerSanctionAppealCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sanctions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void CreatePlayerSanctionAppealCallbackInternal(ref CreatePlayerSanctionAppealCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

public struct CreatePlayerSanctionAppealCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String ReferenceId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref CreatePlayerSanctionAppealCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		ReferenceId = other.ReferenceId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreatePlayerSanctionAppealCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreatePlayerSanctionAppealCallbackInfo>, ISettable<CreatePlayerSanctionAppealCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_ReferenceId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String ReferenceId
	{
		get
		{
			Helper.Get(m_ReferenceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ReferenceId);
		}
	}

	public void Set(ref CreatePlayerSanctionAppealCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		ReferenceId = other.ReferenceId;
	}

	public void Set(ref CreatePlayerSanctionAppealCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			ReferenceId = other.Value.ReferenceId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_ReferenceId);
	}

	public void Get(out CreatePlayerSanctionAppealCallbackInfo output)
	{
		output = default(CreatePlayerSanctionAppealCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

public struct CreatePlayerSanctionAppealOptions
{
	public ProductUserId LocalUserId { get; set; }

	public SanctionAppealReason Reason { get; set; }

	public Utf8String ReferenceId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CreatePlayerSanctionAppealOptionsInternal : ISettable<CreatePlayerSanctionAppealOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private SanctionAppealReason m_Reason;

	private IntPtr m_ReferenceId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public SanctionAppealReason Reason
	{
		set
		{
			m_Reason = value;
		}
	}

	public Utf8String ReferenceId
	{
		set
		{
			Helper.Set(value, ref m_ReferenceId);
		}
	}

	public void Set(ref CreatePlayerSanctionAppealOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		Reason = other.Reason;
		ReferenceId = other.ReferenceId;
	}

	public void Set(ref CreatePlayerSanctionAppealOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			Reason = other.Value.Reason;
			ReferenceId = other.Value.ReferenceId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_ReferenceId);
	}
}


using Epic.OnlineServices;

public struct GetPlayerSanctionCountOptions
{
	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetPlayerSanctionCountOptionsInternal : ISettable<GetPlayerSanctionCountOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref GetPlayerSanctionCountOptions other)
	{
		m_ApiVersion = 1;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref GetPlayerSanctionCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices.Sanctions;

public delegate void OnQueryActivePlayerSanctionsCallback(ref QueryActivePlayerSanctionsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.Sanctions;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryActivePlayerSanctionsCallbackInternal(ref QueryActivePlayerSanctionsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

public struct PlayerSanction
{
	public long TimePlaced { get; set; }

	public Utf8String Action { get; set; }

	public long TimeExpires { get; set; }

	public Utf8String ReferenceId { get; set; }

	internal void Set(ref PlayerSanctionInternal other)
	{
		TimePlaced = other.TimePlaced;
		Action = other.Action;
		TimeExpires = other.TimeExpires;
		ReferenceId = other.ReferenceId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct PlayerSanctionInternal : IGettable<PlayerSanction>, ISettable<PlayerSanction>, IDisposable
{
	private int m_ApiVersion;

	private long m_TimePlaced;

	private IntPtr m_Action;

	private long m_TimeExpires;

	private IntPtr m_ReferenceId;

	public long TimePlaced
	{
		get
		{
			return m_TimePlaced;
		}
		set
		{
			m_TimePlaced = value;
		}
	}

	public Utf8String Action
	{
		get
		{
			Helper.Get(m_Action, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Action);
		}
	}

	public long TimeExpires
	{
		get
		{
			return m_TimeExpires;
		}
		set
		{
			m_TimeExpires = value;
		}
	}

	public Utf8String ReferenceId
	{
		get
		{
			Helper.Get(m_ReferenceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ReferenceId);
		}
	}

	public void Set(ref PlayerSanction other)
	{
		m_ApiVersion = 2;
		TimePlaced = other.TimePlaced;
		Action = other.Action;
		TimeExpires = other.TimeExpires;
		ReferenceId = other.ReferenceId;
	}

	public void Set(ref PlayerSanction? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			TimePlaced = other.Value.TimePlaced;
			Action = other.Value.Action;
			TimeExpires = other.Value.TimeExpires;
			ReferenceId = other.Value.ReferenceId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Action);
		Helper.Dispose(ref m_ReferenceId);
	}

	public void Get(out PlayerSanction output)
	{
		output = default(PlayerSanction);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

public struct QueryActivePlayerSanctionsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryActivePlayerSanctionsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryActivePlayerSanctionsCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryActivePlayerSanctionsCallbackInfo>, ISettable<QueryActivePlayerSanctionsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId TargetUserId
	{
		get
		{
			Helper.Get(m_TargetUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryActivePlayerSanctionsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryActivePlayerSanctionsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}

	public void Get(out QueryActivePlayerSanctionsCallbackInfo output)
	{
		output = default(QueryActivePlayerSanctionsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryActivePlayerSanctionsOptions
{
	public ProductUserId TargetUserId { get; set; }

	public ProductUserId LocalUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryActivePlayerSanctionsOptionsInternal : ISettable<QueryActivePlayerSanctionsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private IntPtr m_LocalUserId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public void Set(ref QueryActivePlayerSanctionsOptions other)
	{
		m_ApiVersion = 2;
		TargetUserId = other.TargetUserId;
		LocalUserId = other.LocalUserId;
	}

	public void Set(ref QueryActivePlayerSanctionsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			TargetUserId = other.Value.TargetUserId;
			LocalUserId = other.Value.LocalUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
		Helper.Dispose(ref m_LocalUserId);
	}
}


public enum SanctionAppealReason
{
	Invalid,
	IncorrectSanction,
	CompromisedAccount,
	UnfairPunishment,
	AppealForForgiveness
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.Sanctions;

public sealed class SanctionsInterface : Handle
{
	public const int CopyplayersanctionbyindexApiLatest = 1;

	public const int CreateplayersanctionappealApiLatest = 1;

	public const int GetplayersanctioncountApiLatest = 1;

	public const int PlayersanctionApiLatest = 2;

	public const int QueryactiveplayersanctionsApiLatest = 2;

	public SanctionsInterface()
	{
	}

	public SanctionsInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public Result CopyPlayerSanctionByIndex(ref CopyPlayerSanctionByIndexOptions options, out PlayerSanction? outSanction)
	{
		CopyPlayerSanctionByIndexOptionsInternal options2 = default(CopyPlayerSanctionByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outSanction2 = IntPtr.Zero;
		Result result = Bindings.EOS_Sanctions_CopyPlayerSanctionByIndex(base.InnerHandle, ref options2, ref outSanction2);
		Helper.Dispose(ref options2);
		Helper.Get<PlayerSanctionInternal, PlayerSanction>(outSanction2, out outSanction);
		if (outSanction.HasValue)
		{
			Bindings.EOS_Sanctions_PlayerSanction_Release(outSanction2);
		}
		return result;
	}

	public void CreatePlayerSanctionAppeal(ref CreatePlayerSanctionAppealOptions options, object clientData, CreatePlayerSanctionAppealCallback completionDelegate)
	{
		CreatePlayerSanctionAppealOptionsInternal options2 = default(CreatePlayerSanctionAppealOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		CreatePlayerSanctionAppealCallbackInternal createPlayerSanctionAppealCallbackInternal = CreatePlayerSanctionAppealCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, createPlayerSanctionAppealCallbackInternal);
		Bindings.EOS_Sanctions_CreatePlayerSanctionAppeal(base.InnerHandle, ref options2, clientDataAddress, createPlayerSanctionAppealCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public uint GetPlayerSanctionCount(ref GetPlayerSanctionCountOptions options)
	{
		GetPlayerSanctionCountOptionsInternal options2 = default(GetPlayerSanctionCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_Sanctions_GetPlayerSanctionCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryActivePlayerSanctions(ref QueryActivePlayerSanctionsOptions options, object clientData, OnQueryActivePlayerSanctionsCallback completionDelegate)
	{
		QueryActivePlayerSanctionsOptionsInternal options2 = default(QueryActivePlayerSanctionsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryActivePlayerSanctionsCallbackInternal onQueryActivePlayerSanctionsCallbackInternal = OnQueryActivePlayerSanctionsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryActivePlayerSanctionsCallbackInternal);
		Bindings.EOS_Sanctions_QueryActivePlayerSanctions(base.InnerHandle, ref options2, clientDataAddress, onQueryActivePlayerSanctionsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(CreatePlayerSanctionAppealCallbackInternal))]
	internal static void CreatePlayerSanctionAppealCallbackInternalImplementation(ref CreatePlayerSanctionAppealCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<CreatePlayerSanctionAppealCallbackInfoInternal, CreatePlayerSanctionAppealCallback, CreatePlayerSanctionAppealCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryActivePlayerSanctionsCallbackInternal))]
	internal static void OnQueryActivePlayerSanctionsCallbackInternalImplementation(ref QueryActivePlayerSanctionsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<QueryActivePlayerSanctionsCallbackInfoInternal, OnQueryActivePlayerSanctionsCallback, QueryActivePlayerSanctionsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


using Epic.OnlineServices;

public struct AddNotifyDataReceivedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyDataReceivedOptionsInternal : ISettable<AddNotifyDataReceivedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyDataReceivedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyDataReceivedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyParticipantUpdatedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyParticipantUpdatedOptionsInternal : ISettable<AddNotifyParticipantUpdatedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyParticipantUpdatedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyParticipantUpdatedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

public struct DataReceivedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ArraySegment<byte> Data { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref DataReceivedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Data = other.Data;
		ParticipantId = other.ParticipantId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct DataReceivedCallbackInfoInternal : ICallbackInfoInternal, IGettable<DataReceivedCallbackInfo>, ISettable<DataReceivedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	private IntPtr m_ParticipantId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ArraySegment<byte> Data
	{
		get
		{
			Helper.Get(m_Data, out var to, m_DataLengthBytes);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public void Set(ref DataReceivedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Data = other.Data;
		ParticipantId = other.ParticipantId;
	}

	public void Set(ref DataReceivedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Data = other.Value.Data;
			ParticipantId = other.Value.ParticipantId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_Data);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out DataReceivedCallbackInfo output)
	{
		output = default(DataReceivedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCData;

public delegate void OnDataReceivedCallback(ref DataReceivedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCData;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnDataReceivedCallbackInternal(ref DataReceivedCallbackInfoInternal data);


using Epic.OnlineServices.RTCData;

public delegate void OnParticipantUpdatedCallback(ref ParticipantUpdatedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCData;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnParticipantUpdatedCallbackInternal(ref ParticipantUpdatedCallbackInfoInternal data);


using Epic.OnlineServices.RTCData;

public delegate void OnUpdateReceivingCallback(ref UpdateReceivingCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCData;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateReceivingCallbackInternal(ref UpdateReceivingCallbackInfoInternal data);


using Epic.OnlineServices.RTCData;

public delegate void OnUpdateSendingCallback(ref UpdateSendingCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCData;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateSendingCallbackInternal(ref UpdateSendingCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

public struct ParticipantUpdatedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public RTCDataStatus DataStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref ParticipantUpdatedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		DataStatus = other.DataStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ParticipantUpdatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<ParticipantUpdatedCallbackInfo>, ISettable<ParticipantUpdatedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private RTCDataStatus m_DataStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public RTCDataStatus DataStatus
	{
		get
		{
			return m_DataStatus;
		}
		set
		{
			m_DataStatus = value;
		}
	}

	public void Set(ref ParticipantUpdatedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		DataStatus = other.DataStatus;
	}

	public void Set(ref ParticipantUpdatedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			DataStatus = other.Value.DataStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out ParticipantUpdatedCallbackInfo output)
	{
		output = default(ParticipantUpdatedCallbackInfo);
		output.Set(ref this);
	}
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

public sealed class RTCDataInterface : Handle
{
	public const int AddnotifydatareceivedApiLatest = 1;

	public const int AddnotifyparticipantupdatedApiLatest = 1;

	public const int MaxPacketSize = 1170;

	public const int SenddataApiLatest = 1;

	public const int UpdatereceivingApiLatest = 1;

	public const int UpdatesendingApiLatest = 1;

	public RTCDataInterface()
	{
	}

	public RTCDataInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyDataReceived(ref AddNotifyDataReceivedOptions options, object clientData, OnDataReceivedCallback completionDelegate)
	{
		AddNotifyDataReceivedOptionsInternal options2 = default(AddNotifyDataReceivedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnDataReceivedCallbackInternal onDataReceivedCallbackInternal = OnDataReceivedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onDataReceivedCallbackInternal);
		ulong num = Bindings.EOS_RTCData_AddNotifyDataReceived(base.InnerHandle, ref options2, clientDataAddress, onDataReceivedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyParticipantUpdated(ref AddNotifyParticipantUpdatedOptions options, object clientData, OnParticipantUpdatedCallback completionDelegate)
	{
		AddNotifyParticipantUpdatedOptionsInternal options2 = default(AddNotifyParticipantUpdatedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnParticipantUpdatedCallbackInternal onParticipantUpdatedCallbackInternal = OnParticipantUpdatedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onParticipantUpdatedCallbackInternal);
		ulong num = Bindings.EOS_RTCData_AddNotifyParticipantUpdated(base.InnerHandle, ref options2, clientDataAddress, onParticipantUpdatedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public void RemoveNotifyDataReceived(ulong notificationId)
	{
		Bindings.EOS_RTCData_RemoveNotifyDataReceived(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyParticipantUpdated(ulong notificationId)
	{
		Bindings.EOS_RTCData_RemoveNotifyParticipantUpdated(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SendData(ref SendDataOptions options)
	{
		SendDataOptionsInternal options2 = default(SendDataOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTCData_SendData(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void UpdateReceiving(ref UpdateReceivingOptions options, object clientData, OnUpdateReceivingCallback completionDelegate)
	{
		UpdateReceivingOptionsInternal options2 = default(UpdateReceivingOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateReceivingCallbackInternal onUpdateReceivingCallbackInternal = OnUpdateReceivingCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateReceivingCallbackInternal);
		Bindings.EOS_RTCData_UpdateReceiving(base.InnerHandle, ref options2, clientDataAddress, onUpdateReceivingCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateSending(ref UpdateSendingOptions options, object clientData, OnUpdateSendingCallback completionDelegate)
	{
		UpdateSendingOptionsInternal options2 = default(UpdateSendingOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateSendingCallbackInternal onUpdateSendingCallbackInternal = OnUpdateSendingCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateSendingCallbackInternal);
		Bindings.EOS_RTCData_UpdateSending(base.InnerHandle, ref options2, clientDataAddress, onUpdateSendingCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnDataReceivedCallbackInternal))]
	internal static void OnDataReceivedCallbackInternalImplementation(ref DataReceivedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<DataReceivedCallbackInfoInternal, OnDataReceivedCallback, DataReceivedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnParticipantUpdatedCallbackInternal))]
	internal static void OnParticipantUpdatedCallbackInternalImplementation(ref ParticipantUpdatedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<ParticipantUpdatedCallbackInfoInternal, OnParticipantUpdatedCallback, ParticipantUpdatedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateReceivingCallbackInternal))]
	internal static void OnUpdateReceivingCallbackInternalImplementation(ref UpdateReceivingCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateReceivingCallbackInfoInternal, OnUpdateReceivingCallback, UpdateReceivingCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateSendingCallbackInternal))]
	internal static void OnUpdateSendingCallbackInternalImplementation(ref UpdateSendingCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateSendingCallbackInfoInternal, OnUpdateSendingCallback, UpdateSendingCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum RTCDataStatus
{
	Unsupported,
	Enabled,
	Disabled
}


using System;
using Epic.OnlineServices;

public struct SendDataOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ArraySegment<byte> Data { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendDataOptionsInternal : ISettable<SendDataOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private uint m_DataLengthBytes;

	private IntPtr m_Data;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ArraySegment<byte> Data
	{
		set
		{
			Helper.Set(value, ref m_Data, out m_DataLengthBytes);
		}
	}

	public void Set(ref SendDataOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Data = other.Data;
	}

	public void Set(ref SendDataOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Data = other.Value.Data;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_Data);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

public struct UpdateReceivingCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool DataEnabled { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateReceivingCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		DataEnabled = other.DataEnabled;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateReceivingCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateReceivingCallbackInfo>, ISettable<UpdateReceivingCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_DataEnabled;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool DataEnabled
	{
		get
		{
			Helper.Get(m_DataEnabled, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DataEnabled);
		}
	}

	public void Set(ref UpdateReceivingCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		DataEnabled = other.DataEnabled;
	}

	public void Set(ref UpdateReceivingCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			DataEnabled = other.Value.DataEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out UpdateReceivingCallbackInfo output)
	{
		output = default(UpdateReceivingCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateReceivingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool DataEnabled { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateReceivingOptionsInternal : ISettable<UpdateReceivingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_DataEnabled;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool DataEnabled
	{
		set
		{
			Helper.Set(value, ref m_DataEnabled);
		}
	}

	public void Set(ref UpdateReceivingOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		DataEnabled = other.DataEnabled;
	}

	public void Set(ref UpdateReceivingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			DataEnabled = other.Value.DataEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

public struct UpdateSendingCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public bool DataEnabled { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateSendingCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		DataEnabled = other.DataEnabled;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSendingCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateSendingCallbackInfo>, ISettable<UpdateSendingCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private int m_DataEnabled;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public bool DataEnabled
	{
		get
		{
			Helper.Get(m_DataEnabled, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DataEnabled);
		}
	}

	public void Set(ref UpdateSendingCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		DataEnabled = other.DataEnabled;
	}

	public void Set(ref UpdateSendingCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			DataEnabled = other.Value.DataEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out UpdateSendingCallbackInfo output)
	{
		output = default(UpdateSendingCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateSendingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public bool DataEnabled { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCData;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSendingOptionsInternal : ISettable<UpdateSendingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private int m_DataEnabled;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public bool DataEnabled
	{
		set
		{
			Helper.Set(value, ref m_DataEnabled);
		}
	}

	public void Set(ref UpdateSendingOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		DataEnabled = other.DataEnabled;
	}

	public void Set(ref UpdateSendingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			DataEnabled = other.Value.DataEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyAudioBeforeRenderOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public bool UnmixedAudio { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAudioBeforeRenderOptionsInternal : ISettable<AddNotifyAudioBeforeRenderOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private int m_UnmixedAudio;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public bool UnmixedAudio
	{
		set
		{
			Helper.Set(value, ref m_UnmixedAudio);
		}
	}

	public void Set(ref AddNotifyAudioBeforeRenderOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		UnmixedAudio = other.UnmixedAudio;
	}

	public void Set(ref AddNotifyAudioBeforeRenderOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			UnmixedAudio = other.Value.UnmixedAudio;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyAudioBeforeSendOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAudioBeforeSendOptionsInternal : ISettable<AddNotifyAudioBeforeSendOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyAudioBeforeSendOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyAudioBeforeSendOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct AddNotifyAudioDevicesChangedOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAudioDevicesChangedOptionsInternal : ISettable<AddNotifyAudioDevicesChangedOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref AddNotifyAudioDevicesChangedOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref AddNotifyAudioDevicesChangedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct AddNotifyAudioInputStateOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAudioInputStateOptionsInternal : ISettable<AddNotifyAudioInputStateOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyAudioInputStateOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyAudioInputStateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyAudioOutputStateOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyAudioOutputStateOptionsInternal : ISettable<AddNotifyAudioOutputStateOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyAudioOutputStateOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyAudioOutputStateOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;

public struct AddNotifyParticipantUpdatedOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AddNotifyParticipantUpdatedOptionsInternal : ISettable<AddNotifyParticipantUpdatedOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public void Set(ref AddNotifyParticipantUpdatedOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
	}

	public void Set(ref AddNotifyParticipantUpdatedOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioBeforeRenderCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public AudioBuffer? Buffer { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref AudioBeforeRenderCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Buffer = other.Buffer;
		ParticipantId = other.ParticipantId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioBeforeRenderCallbackInfoInternal : ICallbackInfoInternal, IGettable<AudioBeforeRenderCallbackInfo>, ISettable<AudioBeforeRenderCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_Buffer;

	private IntPtr m_ParticipantId;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public AudioBuffer? Buffer
	{
		get
		{
			Helper.Get<AudioBufferInternal, AudioBuffer>(m_Buffer, out AudioBuffer? to);
			return to;
		}
		set
		{
			Helper.Set<AudioBuffer, AudioBufferInternal>(ref value, ref m_Buffer);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public void Set(ref AudioBeforeRenderCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Buffer = other.Buffer;
		ParticipantId = other.ParticipantId;
	}

	public void Set(ref AudioBeforeRenderCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Buffer = other.Value.Buffer;
			ParticipantId = other.Value.ParticipantId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_Buffer);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out AudioBeforeRenderCallbackInfo output)
	{
		output = default(AudioBeforeRenderCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioBeforeSendCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public AudioBuffer? Buffer { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref AudioBeforeSendCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Buffer = other.Buffer;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioBeforeSendCallbackInfoInternal : ICallbackInfoInternal, IGettable<AudioBeforeSendCallbackInfo>, ISettable<AudioBeforeSendCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_Buffer;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public AudioBuffer? Buffer
	{
		get
		{
			Helper.Get<AudioBufferInternal, AudioBuffer>(m_Buffer, out AudioBuffer? to);
			return to;
		}
		set
		{
			Helper.Set<AudioBuffer, AudioBufferInternal>(ref value, ref m_Buffer);
		}
	}

	public void Set(ref AudioBeforeSendCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Buffer = other.Buffer;
	}

	public void Set(ref AudioBeforeSendCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Buffer = other.Value.Buffer;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_Buffer);
	}

	public void Get(out AudioBeforeSendCallbackInfo output)
	{
		output = default(AudioBeforeSendCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public struct AudioBuffer
{
	public short[] Frames { get; set; }

	public uint SampleRate { get; set; }

	public uint Channels { get; set; }

	internal void Set(ref AudioBufferInternal other)
	{
		Frames = other.Frames;
		SampleRate = other.SampleRate;
		Channels = other.Channels;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioBufferInternal : IGettable<AudioBuffer>, ISettable<AudioBuffer>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_Frames;

	private uint m_FramesCount;

	private uint m_SampleRate;

	private uint m_Channels;

	public short[] Frames
	{
		get
		{
			Helper.Get(m_Frames, out short[] to, m_FramesCount);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Frames, out m_FramesCount);
		}
	}

	public uint SampleRate
	{
		get
		{
			return m_SampleRate;
		}
		set
		{
			m_SampleRate = value;
		}
	}

	public uint Channels
	{
		get
		{
			return m_Channels;
		}
		set
		{
			m_Channels = value;
		}
	}

	public void Set(ref AudioBuffer other)
	{
		m_ApiVersion = 1;
		Frames = other.Frames;
		SampleRate = other.SampleRate;
		Channels = other.Channels;
	}

	public void Set(ref AudioBuffer? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			Frames = other.Value.Frames;
			SampleRate = other.Value.SampleRate;
			Channels = other.Value.Channels;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_Frames);
	}

	public void Get(out AudioBuffer output)
	{
		output = default(AudioBuffer);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioDevicesChangedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref AudioDevicesChangedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioDevicesChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<AudioDevicesChangedCallbackInfo>, ISettable<AudioDevicesChangedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref AudioDevicesChangedCallbackInfo other)
	{
		ClientData = other.ClientData;
	}

	public void Set(ref AudioDevicesChangedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out AudioDevicesChangedCallbackInfo output)
	{
		output = default(AudioDevicesChangedCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioInputDeviceInfo
{
	public bool DefaultDevice { get; set; }

	public Utf8String DeviceId { get; set; }

	public Utf8String DeviceName { get; set; }

	internal void Set(ref AudioInputDeviceInfoInternal other)
	{
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioInputDeviceInfoInternal : IGettable<AudioInputDeviceInfo>, ISettable<AudioInputDeviceInfo>, IDisposable
{
	private int m_ApiVersion;

	private int m_DefaultDevice;

	private IntPtr m_DeviceId;

	private IntPtr m_DeviceName;

	public bool DefaultDevice
	{
		get
		{
			Helper.Get(m_DefaultDevice, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DefaultDevice);
		}
	}

	public Utf8String DeviceId
	{
		get
		{
			Helper.Get(m_DeviceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceId);
		}
	}

	public Utf8String DeviceName
	{
		get
		{
			Helper.Get(m_DeviceName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceName);
		}
	}

	public void Set(ref AudioInputDeviceInfo other)
	{
		m_ApiVersion = 1;
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}

	public void Set(ref AudioInputDeviceInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DefaultDevice = other.Value.DefaultDevice;
			DeviceId = other.Value.DeviceId;
			DeviceName = other.Value.DeviceName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DeviceId);
		Helper.Dispose(ref m_DeviceName);
	}

	public void Get(out AudioInputDeviceInfo output)
	{
		output = default(AudioInputDeviceInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioInputStateCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public RTCAudioInputStatus Status { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref AudioInputStateCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Status = other.Status;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioInputStateCallbackInfoInternal : ICallbackInfoInternal, IGettable<AudioInputStateCallbackInfo>, ISettable<AudioInputStateCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private RTCAudioInputStatus m_Status;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public RTCAudioInputStatus Status
	{
		get
		{
			return m_Status;
		}
		set
		{
			m_Status = value;
		}
	}

	public void Set(ref AudioInputStateCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Status = other.Status;
	}

	public void Set(ref AudioInputStateCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Status = other.Value.Status;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out AudioInputStateCallbackInfo output)
	{
		output = default(AudioInputStateCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioOutputDeviceInfo
{
	public bool DefaultDevice { get; set; }

	public Utf8String DeviceId { get; set; }

	public Utf8String DeviceName { get; set; }

	internal void Set(ref AudioOutputDeviceInfoInternal other)
	{
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioOutputDeviceInfoInternal : IGettable<AudioOutputDeviceInfo>, ISettable<AudioOutputDeviceInfo>, IDisposable
{
	private int m_ApiVersion;

	private int m_DefaultDevice;

	private IntPtr m_DeviceId;

	private IntPtr m_DeviceName;

	public bool DefaultDevice
	{
		get
		{
			Helper.Get(m_DefaultDevice, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DefaultDevice);
		}
	}

	public Utf8String DeviceId
	{
		get
		{
			Helper.Get(m_DeviceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceId);
		}
	}

	public Utf8String DeviceName
	{
		get
		{
			Helper.Get(m_DeviceName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceName);
		}
	}

	public void Set(ref AudioOutputDeviceInfo other)
	{
		m_ApiVersion = 1;
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}

	public void Set(ref AudioOutputDeviceInfo? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DefaultDevice = other.Value.DefaultDevice;
			DeviceId = other.Value.DeviceId;
			DeviceName = other.Value.DeviceName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DeviceId);
		Helper.Dispose(ref m_DeviceName);
	}

	public void Get(out AudioOutputDeviceInfo output)
	{
		output = default(AudioOutputDeviceInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct AudioOutputStateCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public RTCAudioOutputStatus Status { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref AudioOutputStateCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Status = other.Status;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct AudioOutputStateCallbackInfoInternal : ICallbackInfoInternal, IGettable<AudioOutputStateCallbackInfo>, ISettable<AudioOutputStateCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private RTCAudioOutputStatus m_Status;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public RTCAudioOutputStatus Status
	{
		get
		{
			return m_Status;
		}
		set
		{
			m_Status = value;
		}
	}

	public void Set(ref AudioOutputStateCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Status = other.Status;
	}

	public void Set(ref AudioOutputStateCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Status = other.Value.Status;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out AudioOutputStateCallbackInfo output)
	{
		output = default(AudioOutputStateCallbackInfo);
		output.Set(ref this);
	}
}


public struct CopyInputDeviceInformationByIndexOptions
{
	public uint DeviceIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyInputDeviceInformationByIndexOptionsInternal : ISettable<CopyInputDeviceInformationByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DeviceIndex;

	public uint DeviceIndex
	{
		set
		{
			m_DeviceIndex = value;
		}
	}

	public void Set(ref CopyInputDeviceInformationByIndexOptions other)
	{
		m_ApiVersion = 1;
		DeviceIndex = other.DeviceIndex;
	}

	public void Set(ref CopyInputDeviceInformationByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DeviceIndex = other.Value.DeviceIndex;
		}
	}

	public void Dispose()
	{
	}
}


public struct CopyOutputDeviceInformationByIndexOptions
{
	public uint DeviceIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyOutputDeviceInformationByIndexOptionsInternal : ISettable<CopyOutputDeviceInformationByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DeviceIndex;

	public uint DeviceIndex
	{
		set
		{
			m_DeviceIndex = value;
		}
	}

	public void Set(ref CopyOutputDeviceInformationByIndexOptions other)
	{
		m_ApiVersion = 1;
		DeviceIndex = other.DeviceIndex;
	}

	public void Set(ref CopyOutputDeviceInformationByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DeviceIndex = other.Value.DeviceIndex;
		}
	}

	public void Dispose()
	{
	}
}


public struct GetAudioInputDeviceByIndexOptions
{
	public uint DeviceInfoIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetAudioInputDeviceByIndexOptionsInternal : ISettable<GetAudioInputDeviceByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DeviceInfoIndex;

	public uint DeviceInfoIndex
	{
		set
		{
			m_DeviceInfoIndex = value;
		}
	}

	public void Set(ref GetAudioInputDeviceByIndexOptions other)
	{
		m_ApiVersion = 1;
		DeviceInfoIndex = other.DeviceInfoIndex;
	}

	public void Set(ref GetAudioInputDeviceByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DeviceInfoIndex = other.Value.DeviceInfoIndex;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetAudioInputDevicesCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetAudioInputDevicesCountOptionsInternal : ISettable<GetAudioInputDevicesCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetAudioInputDevicesCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetAudioInputDevicesCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


public struct GetAudioOutputDeviceByIndexOptions
{
	public uint DeviceInfoIndex { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetAudioOutputDeviceByIndexOptionsInternal : ISettable<GetAudioOutputDeviceByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_DeviceInfoIndex;

	public uint DeviceInfoIndex
	{
		set
		{
			m_DeviceInfoIndex = value;
		}
	}

	public void Set(ref GetAudioOutputDeviceByIndexOptions other)
	{
		m_ApiVersion = 1;
		DeviceInfoIndex = other.DeviceInfoIndex;
	}

	public void Set(ref GetAudioOutputDeviceByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DeviceInfoIndex = other.Value.DeviceInfoIndex;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetAudioOutputDevicesCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetAudioOutputDevicesCountOptionsInternal : ISettable<GetAudioOutputDevicesCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetAudioOutputDevicesCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetAudioOutputDevicesCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetInputDevicesCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetInputDevicesCountOptionsInternal : ISettable<GetInputDevicesCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetInputDevicesCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetInputDevicesCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct GetOutputDevicesCountOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GetOutputDevicesCountOptionsInternal : ISettable<GetOutputDevicesCountOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref GetOutputDevicesCountOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref GetOutputDevicesCountOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct InputDeviceInformation
{
	public bool DefaultDevice { get; set; }

	public Utf8String DeviceId { get; set; }

	public Utf8String DeviceName { get; set; }

	internal void Set(ref InputDeviceInformationInternal other)
	{
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct InputDeviceInformationInternal : IGettable<InputDeviceInformation>, ISettable<InputDeviceInformation>, IDisposable
{
	private int m_ApiVersion;

	private int m_DefaultDevice;

	private IntPtr m_DeviceId;

	private IntPtr m_DeviceName;

	public bool DefaultDevice
	{
		get
		{
			Helper.Get(m_DefaultDevice, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DefaultDevice);
		}
	}

	public Utf8String DeviceId
	{
		get
		{
			Helper.Get(m_DeviceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceId);
		}
	}

	public Utf8String DeviceName
	{
		get
		{
			Helper.Get(m_DeviceName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceName);
		}
	}

	public void Set(ref InputDeviceInformation other)
	{
		m_ApiVersion = 1;
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}

	public void Set(ref InputDeviceInformation? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DefaultDevice = other.Value.DefaultDevice;
			DeviceId = other.Value.DeviceId;
			DeviceName = other.Value.DeviceName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DeviceId);
		Helper.Dispose(ref m_DeviceName);
	}

	public void Get(out InputDeviceInformation output)
	{
		output = default(InputDeviceInformation);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnAudioBeforeRenderCallback(ref AudioBeforeRenderCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAudioBeforeRenderCallbackInternal(ref AudioBeforeRenderCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnAudioBeforeSendCallback(ref AudioBeforeSendCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAudioBeforeSendCallbackInternal(ref AudioBeforeSendCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnAudioDevicesChangedCallback(ref AudioDevicesChangedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAudioDevicesChangedCallbackInternal(ref AudioDevicesChangedCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnAudioInputStateCallback(ref AudioInputStateCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAudioInputStateCallbackInternal(ref AudioInputStateCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnAudioOutputStateCallback(ref AudioOutputStateCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnAudioOutputStateCallbackInternal(ref AudioOutputStateCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnParticipantUpdatedCallback(ref ParticipantUpdatedCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnParticipantUpdatedCallbackInternal(ref ParticipantUpdatedCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnQueryInputDevicesInformationCallback(ref OnQueryInputDevicesInformationCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryInputDevicesInformationCallbackInternal(ref OnQueryInputDevicesInformationCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OnQueryInputDevicesInformationCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryInputDevicesInformationCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryInputDevicesInformationCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryInputDevicesInformationCallbackInfo>, ISettable<OnQueryInputDevicesInformationCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref OnQueryInputDevicesInformationCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref OnQueryInputDevicesInformationCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnQueryInputDevicesInformationCallbackInfo output)
	{
		output = default(OnQueryInputDevicesInformationCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnQueryOutputDevicesInformationCallback(ref OnQueryOutputDevicesInformationCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryOutputDevicesInformationCallbackInternal(ref OnQueryOutputDevicesInformationCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OnQueryOutputDevicesInformationCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnQueryOutputDevicesInformationCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnQueryOutputDevicesInformationCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnQueryOutputDevicesInformationCallbackInfo>, ISettable<OnQueryOutputDevicesInformationCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref OnQueryOutputDevicesInformationCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref OnQueryOutputDevicesInformationCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out OnQueryOutputDevicesInformationCallbackInfo output)
	{
		output = default(OnQueryOutputDevicesInformationCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnRegisterPlatformUserCallback(ref OnRegisterPlatformUserCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnRegisterPlatformUserCallbackInternal(ref OnRegisterPlatformUserCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OnRegisterPlatformUserCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String PlatformUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnRegisterPlatformUserCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		PlatformUserId = other.PlatformUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnRegisterPlatformUserCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnRegisterPlatformUserCallbackInfo>, ISettable<OnRegisterPlatformUserCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_PlatformUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String PlatformUserId
	{
		get
		{
			Helper.Get(m_PlatformUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PlatformUserId);
		}
	}

	public void Set(ref OnRegisterPlatformUserCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		PlatformUserId = other.PlatformUserId;
	}

	public void Set(ref OnRegisterPlatformUserCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			PlatformUserId = other.Value.PlatformUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_PlatformUserId);
	}

	public void Get(out OnRegisterPlatformUserCallbackInfo output)
	{
		output = default(OnRegisterPlatformUserCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnSetInputDeviceSettingsCallback(ref OnSetInputDeviceSettingsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSetInputDeviceSettingsCallbackInternal(ref OnSetInputDeviceSettingsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OnSetInputDeviceSettingsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String RealDeviceId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnSetInputDeviceSettingsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RealDeviceId = other.RealDeviceId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnSetInputDeviceSettingsCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnSetInputDeviceSettingsCallbackInfo>, ISettable<OnSetInputDeviceSettingsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_RealDeviceId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String RealDeviceId
	{
		get
		{
			Helper.Get(m_RealDeviceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RealDeviceId);
		}
	}

	public void Set(ref OnSetInputDeviceSettingsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RealDeviceId = other.RealDeviceId;
	}

	public void Set(ref OnSetInputDeviceSettingsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			RealDeviceId = other.Value.RealDeviceId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_RealDeviceId);
	}

	public void Get(out OnSetInputDeviceSettingsCallbackInfo output)
	{
		output = default(OnSetInputDeviceSettingsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnSetOutputDeviceSettingsCallback(ref OnSetOutputDeviceSettingsCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSetOutputDeviceSettingsCallbackInternal(ref OnSetOutputDeviceSettingsCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OnSetOutputDeviceSettingsCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String RealDeviceId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnSetOutputDeviceSettingsCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RealDeviceId = other.RealDeviceId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnSetOutputDeviceSettingsCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnSetOutputDeviceSettingsCallbackInfo>, ISettable<OnSetOutputDeviceSettingsCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_RealDeviceId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String RealDeviceId
	{
		get
		{
			Helper.Get(m_RealDeviceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RealDeviceId);
		}
	}

	public void Set(ref OnSetOutputDeviceSettingsCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RealDeviceId = other.RealDeviceId;
	}

	public void Set(ref OnSetOutputDeviceSettingsCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			RealDeviceId = other.Value.RealDeviceId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_RealDeviceId);
	}

	public void Get(out OnSetOutputDeviceSettingsCallbackInfo output)
	{
		output = default(OnSetOutputDeviceSettingsCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnUnregisterPlatformUserCallback(ref OnUnregisterPlatformUserCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUnregisterPlatformUserCallbackInternal(ref OnUnregisterPlatformUserCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OnUnregisterPlatformUserCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String PlatformUserId { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref OnUnregisterPlatformUserCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		PlatformUserId = other.PlatformUserId;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OnUnregisterPlatformUserCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnUnregisterPlatformUserCallbackInfo>, ISettable<OnUnregisterPlatformUserCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_PlatformUserId;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String PlatformUserId
	{
		get
		{
			Helper.Get(m_PlatformUserId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_PlatformUserId);
		}
	}

	public void Set(ref OnUnregisterPlatformUserCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		PlatformUserId = other.PlatformUserId;
	}

	public void Set(ref OnUnregisterPlatformUserCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			PlatformUserId = other.Value.PlatformUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_PlatformUserId);
	}

	public void Get(out OnUnregisterPlatformUserCallbackInfo output)
	{
		output = default(OnUnregisterPlatformUserCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices.RTCAudio;

public delegate void OnUpdateParticipantVolumeCallback(ref UpdateParticipantVolumeCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateParticipantVolumeCallbackInternal(ref UpdateParticipantVolumeCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnUpdateReceivingCallback(ref UpdateReceivingCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateReceivingCallbackInternal(ref UpdateReceivingCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnUpdateReceivingVolumeCallback(ref UpdateReceivingVolumeCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateReceivingVolumeCallbackInternal(ref UpdateReceivingVolumeCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnUpdateSendingCallback(ref UpdateSendingCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateSendingCallbackInternal(ref UpdateSendingCallbackInfoInternal data);


using Epic.OnlineServices.RTCAudio;

public delegate void OnUpdateSendingVolumeCallback(ref UpdateSendingVolumeCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAudio;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnUpdateSendingVolumeCallbackInternal(ref UpdateSendingVolumeCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct OutputDeviceInformation
{
	public bool DefaultDevice { get; set; }

	public Utf8String DeviceId { get; set; }

	public Utf8String DeviceName { get; set; }

	internal void Set(ref OutputDeviceInformationInternal other)
	{
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct OutputDeviceInformationInternal : IGettable<OutputDeviceInformation>, ISettable<OutputDeviceInformation>, IDisposable
{
	private int m_ApiVersion;

	private int m_DefaultDevice;

	private IntPtr m_DeviceId;

	private IntPtr m_DeviceName;

	public bool DefaultDevice
	{
		get
		{
			Helper.Get(m_DefaultDevice, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DefaultDevice);
		}
	}

	public Utf8String DeviceId
	{
		get
		{
			Helper.Get(m_DeviceId, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceId);
		}
	}

	public Utf8String DeviceName
	{
		get
		{
			Helper.Get(m_DeviceName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_DeviceName);
		}
	}

	public void Set(ref OutputDeviceInformation other)
	{
		m_ApiVersion = 1;
		DefaultDevice = other.DefaultDevice;
		DeviceId = other.DeviceId;
		DeviceName = other.DeviceName;
	}

	public void Set(ref OutputDeviceInformation? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			DefaultDevice = other.Value.DefaultDevice;
			DeviceId = other.Value.DeviceId;
			DeviceName = other.Value.DeviceName;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_DeviceId);
		Helper.Dispose(ref m_DeviceName);
	}

	public void Get(out OutputDeviceInformation output)
	{
		output = default(OutputDeviceInformation);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct ParticipantUpdatedCallbackInfo : ICallbackInfo
{
	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool Speaking { get; set; }

	public RTCAudioStatus AudioStatus { get; set; }

	public Result? GetResultCode()
	{
		return null;
	}

	internal void Set(ref ParticipantUpdatedCallbackInfoInternal other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Speaking = other.Speaking;
		AudioStatus = other.AudioStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ParticipantUpdatedCallbackInfoInternal : ICallbackInfoInternal, IGettable<ParticipantUpdatedCallbackInfo>, ISettable<ParticipantUpdatedCallbackInfo>, IDisposable
{
	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_Speaking;

	private RTCAudioStatus m_AudioStatus;

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool Speaking
	{
		get
		{
			Helper.Get(m_Speaking, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_Speaking);
		}
	}

	public RTCAudioStatus AudioStatus
	{
		get
		{
			return m_AudioStatus;
		}
		set
		{
			m_AudioStatus = value;
		}
	}

	public void Set(ref ParticipantUpdatedCallbackInfo other)
	{
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Speaking = other.Speaking;
		AudioStatus = other.AudioStatus;
	}

	public void Set(ref ParticipantUpdatedCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			Speaking = other.Value.Speaking;
			AudioStatus = other.Value.AudioStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out ParticipantUpdatedCallbackInfo output)
	{
		output = default(ParticipantUpdatedCallbackInfo);
		output.Set(ref this);
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct QueryInputDevicesInformationOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryInputDevicesInformationOptionsInternal : ISettable<QueryInputDevicesInformationOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref QueryInputDevicesInformationOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref QueryInputDevicesInformationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Size = 1)]
public struct QueryOutputDevicesInformationOptions
{
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryOutputDevicesInformationOptionsInternal : ISettable<QueryOutputDevicesInformationOptions>, IDisposable
{
	private int m_ApiVersion;

	public void Set(ref QueryOutputDevicesInformationOptions other)
	{
		m_ApiVersion = 1;
	}

	public void Set(ref QueryOutputDevicesInformationOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct RegisterPlatformAudioUserOptions
{
	public Utf8String UserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterPlatformAudioUserOptionsInternal : ISettable<RegisterPlatformAudioUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public Utf8String UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public void Set(ref RegisterPlatformAudioUserOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
	}

	public void Set(ref RegisterPlatformAudioUserOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;

public struct RegisterPlatformUserOptions
{
	public Utf8String PlatformUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RegisterPlatformUserOptionsInternal : ISettable<RegisterPlatformUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformUserId;

	public Utf8String PlatformUserId
	{
		set
		{
			Helper.Set(value, ref m_PlatformUserId);
		}
	}

	public void Set(ref RegisterPlatformUserOptions other)
	{
		m_ApiVersion = 1;
		PlatformUserId = other.PlatformUserId;
	}

	public void Set(ref RegisterPlatformUserOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlatformUserId = other.Value.PlatformUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformUserId);
	}
}


public enum RTCAudioInputStatus
{
	Idle,
	Recording,
	RecordingSilent,
	RecordingDisconnected,
	Failed
}


using System;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public sealed class RTCAudioInterface : Handle
{
	public const int AddnotifyaudiobeforerenderApiLatest = 1;

	public const int AddnotifyaudiobeforesendApiLatest = 1;

	public const int AddnotifyaudiodeviceschangedApiLatest = 1;

	public const int AddnotifyaudioinputstateApiLatest = 1;

	public const int AddnotifyaudiooutputstateApiLatest = 1;

	public const int AddnotifyparticipantupdatedApiLatest = 1;

	public const int AudiobufferApiLatest = 1;

	public const int AudioinputdeviceinfoApiLatest = 1;

	public const int AudiooutputdeviceinfoApiLatest = 1;

	public const int CopyinputdeviceinformationbyindexApiLatest = 1;

	public const int CopyoutputdeviceinformationbyindexApiLatest = 1;

	public const int GetaudioinputdevicebyindexApiLatest = 1;

	public const int GetaudioinputdevicescountApiLatest = 1;

	public const int GetaudiooutputdevicebyindexApiLatest = 1;

	public const int GetaudiooutputdevicescountApiLatest = 1;

	public const int GetinputdevicescountApiLatest = 1;

	public const int GetoutputdevicescountApiLatest = 1;

	public const int InputdeviceinformationApiLatest = 1;

	public const int OutputdeviceinformationApiLatest = 1;

	public const int QueryinputdevicesinformationApiLatest = 1;

	public const int QueryoutputdevicesinformationApiLatest = 1;

	public const int RegisterplatformaudiouserApiLatest = 1;

	public const int RegisterplatformuserApiLatest = 1;

	public const int SendaudioApiLatest = 1;

	public const int SetaudioinputsettingsApiLatest = 1;

	public const int SetaudiooutputsettingsApiLatest = 1;

	public const int SetinputdevicesettingsApiLatest = 1;

	public const int SetoutputdevicesettingsApiLatest = 1;

	public const int UnregisterplatformaudiouserApiLatest = 1;

	public const int UnregisterplatformuserApiLatest = 1;

	public const int UpdateparticipantvolumeApiLatest = 1;

	public const int UpdatereceivingApiLatest = 1;

	public const int UpdatereceivingvolumeApiLatest = 1;

	public const int UpdatesendingApiLatest = 1;

	public const int UpdatesendingvolumeApiLatest = 1;

	public RTCAudioInterface()
	{
	}

	public RTCAudioInterface(IntPtr innerHandle)
		: base(innerHandle)
	{
	}

	public ulong AddNotifyAudioBeforeRender(ref AddNotifyAudioBeforeRenderOptions options, object clientData, OnAudioBeforeRenderCallback completionDelegate)
	{
		AddNotifyAudioBeforeRenderOptionsInternal options2 = default(AddNotifyAudioBeforeRenderOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAudioBeforeRenderCallbackInternal onAudioBeforeRenderCallbackInternal = OnAudioBeforeRenderCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAudioBeforeRenderCallbackInternal);
		ulong num = Bindings.EOS_RTCAudio_AddNotifyAudioBeforeRender(base.InnerHandle, ref options2, clientDataAddress, onAudioBeforeRenderCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyAudioBeforeSend(ref AddNotifyAudioBeforeSendOptions options, object clientData, OnAudioBeforeSendCallback completionDelegate)
	{
		AddNotifyAudioBeforeSendOptionsInternal options2 = default(AddNotifyAudioBeforeSendOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAudioBeforeSendCallbackInternal onAudioBeforeSendCallbackInternal = OnAudioBeforeSendCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAudioBeforeSendCallbackInternal);
		ulong num = Bindings.EOS_RTCAudio_AddNotifyAudioBeforeSend(base.InnerHandle, ref options2, clientDataAddress, onAudioBeforeSendCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyAudioDevicesChanged(ref AddNotifyAudioDevicesChangedOptions options, object clientData, OnAudioDevicesChangedCallback completionDelegate)
	{
		AddNotifyAudioDevicesChangedOptionsInternal options2 = default(AddNotifyAudioDevicesChangedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAudioDevicesChangedCallbackInternal onAudioDevicesChangedCallbackInternal = OnAudioDevicesChangedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAudioDevicesChangedCallbackInternal);
		ulong num = Bindings.EOS_RTCAudio_AddNotifyAudioDevicesChanged(base.InnerHandle, ref options2, clientDataAddress, onAudioDevicesChangedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyAudioInputState(ref AddNotifyAudioInputStateOptions options, object clientData, OnAudioInputStateCallback completionDelegate)
	{
		AddNotifyAudioInputStateOptionsInternal options2 = default(AddNotifyAudioInputStateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAudioInputStateCallbackInternal onAudioInputStateCallbackInternal = OnAudioInputStateCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAudioInputStateCallbackInternal);
		ulong num = Bindings.EOS_RTCAudio_AddNotifyAudioInputState(base.InnerHandle, ref options2, clientDataAddress, onAudioInputStateCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyAudioOutputState(ref AddNotifyAudioOutputStateOptions options, object clientData, OnAudioOutputStateCallback completionDelegate)
	{
		AddNotifyAudioOutputStateOptionsInternal options2 = default(AddNotifyAudioOutputStateOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnAudioOutputStateCallbackInternal onAudioOutputStateCallbackInternal = OnAudioOutputStateCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onAudioOutputStateCallbackInternal);
		ulong num = Bindings.EOS_RTCAudio_AddNotifyAudioOutputState(base.InnerHandle, ref options2, clientDataAddress, onAudioOutputStateCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public ulong AddNotifyParticipantUpdated(ref AddNotifyParticipantUpdatedOptions options, object clientData, OnParticipantUpdatedCallback completionDelegate)
	{
		AddNotifyParticipantUpdatedOptionsInternal options2 = default(AddNotifyParticipantUpdatedOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnParticipantUpdatedCallbackInternal onParticipantUpdatedCallbackInternal = OnParticipantUpdatedCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onParticipantUpdatedCallbackInternal);
		ulong num = Bindings.EOS_RTCAudio_AddNotifyParticipantUpdated(base.InnerHandle, ref options2, clientDataAddress, onParticipantUpdatedCallbackInternal);
		Helper.Dispose(ref options2);
		Helper.AssignNotificationIdToCallback(clientDataAddress, num);
		return num;
	}

	public Result CopyInputDeviceInformationByIndex(ref CopyInputDeviceInformationByIndexOptions options, out InputDeviceInformation? outInputDeviceInformation)
	{
		CopyInputDeviceInformationByIndexOptionsInternal options2 = default(CopyInputDeviceInformationByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outInputDeviceInformation2 = IntPtr.Zero;
		Result result = Bindings.EOS_RTCAudio_CopyInputDeviceInformationByIndex(base.InnerHandle, ref options2, ref outInputDeviceInformation2);
		Helper.Dispose(ref options2);
		Helper.Get<InputDeviceInformationInternal, InputDeviceInformation>(outInputDeviceInformation2, out outInputDeviceInformation);
		if (outInputDeviceInformation.HasValue)
		{
			Bindings.EOS_RTCAudio_InputDeviceInformation_Release(outInputDeviceInformation2);
		}
		return result;
	}

	public Result CopyOutputDeviceInformationByIndex(ref CopyOutputDeviceInformationByIndexOptions options, out OutputDeviceInformation? outOutputDeviceInformation)
	{
		CopyOutputDeviceInformationByIndexOptionsInternal options2 = default(CopyOutputDeviceInformationByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr outOutputDeviceInformation2 = IntPtr.Zero;
		Result result = Bindings.EOS_RTCAudio_CopyOutputDeviceInformationByIndex(base.InnerHandle, ref options2, ref outOutputDeviceInformation2);
		Helper.Dispose(ref options2);
		Helper.Get<OutputDeviceInformationInternal, OutputDeviceInformation>(outOutputDeviceInformation2, out outOutputDeviceInformation);
		if (outOutputDeviceInformation.HasValue)
		{
			Bindings.EOS_RTCAudio_OutputDeviceInformation_Release(outOutputDeviceInformation2);
		}
		return result;
	}

	public AudioInputDeviceInfo? GetAudioInputDeviceByIndex(ref GetAudioInputDeviceByIndexOptions options)
	{
		GetAudioInputDeviceByIndexOptionsInternal options2 = default(GetAudioInputDeviceByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_RTCAudio_GetAudioInputDeviceByIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get<AudioInputDeviceInfoInternal, AudioInputDeviceInfo>(from, out AudioInputDeviceInfo? to);
		return to;
	}

	public uint GetAudioInputDevicesCount(ref GetAudioInputDevicesCountOptions options)
	{
		GetAudioInputDevicesCountOptionsInternal options2 = default(GetAudioInputDevicesCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_RTCAudio_GetAudioInputDevicesCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public AudioOutputDeviceInfo? GetAudioOutputDeviceByIndex(ref GetAudioOutputDeviceByIndexOptions options)
	{
		GetAudioOutputDeviceByIndexOptionsInternal options2 = default(GetAudioOutputDeviceByIndexOptionsInternal);
		options2.Set(ref options);
		IntPtr from = Bindings.EOS_RTCAudio_GetAudioOutputDeviceByIndex(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		Helper.Get<AudioOutputDeviceInfoInternal, AudioOutputDeviceInfo>(from, out AudioOutputDeviceInfo? to);
		return to;
	}

	public uint GetAudioOutputDevicesCount(ref GetAudioOutputDevicesCountOptions options)
	{
		GetAudioOutputDevicesCountOptionsInternal options2 = default(GetAudioOutputDevicesCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_RTCAudio_GetAudioOutputDevicesCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetInputDevicesCount(ref GetInputDevicesCountOptions options)
	{
		GetInputDevicesCountOptionsInternal options2 = default(GetInputDevicesCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_RTCAudio_GetInputDevicesCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public uint GetOutputDevicesCount(ref GetOutputDevicesCountOptions options)
	{
		GetOutputDevicesCountOptionsInternal options2 = default(GetOutputDevicesCountOptionsInternal);
		options2.Set(ref options);
		uint result = Bindings.EOS_RTCAudio_GetOutputDevicesCount(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void QueryInputDevicesInformation(ref QueryInputDevicesInformationOptions options, object clientData, OnQueryInputDevicesInformationCallback completionDelegate)
	{
		QueryInputDevicesInformationOptionsInternal options2 = default(QueryInputDevicesInformationOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryInputDevicesInformationCallbackInternal onQueryInputDevicesInformationCallbackInternal = OnQueryInputDevicesInformationCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryInputDevicesInformationCallbackInternal);
		Bindings.EOS_RTCAudio_QueryInputDevicesInformation(base.InnerHandle, ref options2, clientDataAddress, onQueryInputDevicesInformationCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void QueryOutputDevicesInformation(ref QueryOutputDevicesInformationOptions options, object clientData, OnQueryOutputDevicesInformationCallback completionDelegate)
	{
		QueryOutputDevicesInformationOptionsInternal options2 = default(QueryOutputDevicesInformationOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnQueryOutputDevicesInformationCallbackInternal onQueryOutputDevicesInformationCallbackInternal = OnQueryOutputDevicesInformationCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onQueryOutputDevicesInformationCallbackInternal);
		Bindings.EOS_RTCAudio_QueryOutputDevicesInformation(base.InnerHandle, ref options2, clientDataAddress, onQueryOutputDevicesInformationCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result RegisterPlatformAudioUser(ref RegisterPlatformAudioUserOptions options)
	{
		RegisterPlatformAudioUserOptionsInternal options2 = default(RegisterPlatformAudioUserOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTCAudio_RegisterPlatformAudioUser(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void RegisterPlatformUser(ref RegisterPlatformUserOptions options, object clientData, OnRegisterPlatformUserCallback completionDelegate)
	{
		RegisterPlatformUserOptionsInternal options2 = default(RegisterPlatformUserOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnRegisterPlatformUserCallbackInternal onRegisterPlatformUserCallbackInternal = OnRegisterPlatformUserCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onRegisterPlatformUserCallbackInternal);
		Bindings.EOS_RTCAudio_RegisterPlatformUser(base.InnerHandle, ref options2, clientDataAddress, onRegisterPlatformUserCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void RemoveNotifyAudioBeforeRender(ulong notificationId)
	{
		Bindings.EOS_RTCAudio_RemoveNotifyAudioBeforeRender(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyAudioBeforeSend(ulong notificationId)
	{
		Bindings.EOS_RTCAudio_RemoveNotifyAudioBeforeSend(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyAudioDevicesChanged(ulong notificationId)
	{
		Bindings.EOS_RTCAudio_RemoveNotifyAudioDevicesChanged(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyAudioInputState(ulong notificationId)
	{
		Bindings.EOS_RTCAudio_RemoveNotifyAudioInputState(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyAudioOutputState(ulong notificationId)
	{
		Bindings.EOS_RTCAudio_RemoveNotifyAudioOutputState(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public void RemoveNotifyParticipantUpdated(ulong notificationId)
	{
		Bindings.EOS_RTCAudio_RemoveNotifyParticipantUpdated(base.InnerHandle, notificationId);
		Helper.RemoveCallbackByNotificationId(notificationId);
	}

	public Result SendAudio(ref SendAudioOptions options)
	{
		SendAudioOptionsInternal options2 = default(SendAudioOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTCAudio_SendAudio(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetAudioInputSettings(ref SetAudioInputSettingsOptions options)
	{
		SetAudioInputSettingsOptionsInternal options2 = default(SetAudioInputSettingsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTCAudio_SetAudioInputSettings(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public Result SetAudioOutputSettings(ref SetAudioOutputSettingsOptions options)
	{
		SetAudioOutputSettingsOptionsInternal options2 = default(SetAudioOutputSettingsOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTCAudio_SetAudioOutputSettings(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void SetInputDeviceSettings(ref SetInputDeviceSettingsOptions options, object clientData, OnSetInputDeviceSettingsCallback completionDelegate)
	{
		SetInputDeviceSettingsOptionsInternal options2 = default(SetInputDeviceSettingsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSetInputDeviceSettingsCallbackInternal onSetInputDeviceSettingsCallbackInternal = OnSetInputDeviceSettingsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSetInputDeviceSettingsCallbackInternal);
		Bindings.EOS_RTCAudio_SetInputDeviceSettings(base.InnerHandle, ref options2, clientDataAddress, onSetInputDeviceSettingsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void SetOutputDeviceSettings(ref SetOutputDeviceSettingsOptions options, object clientData, OnSetOutputDeviceSettingsCallback completionDelegate)
	{
		SetOutputDeviceSettingsOptionsInternal options2 = default(SetOutputDeviceSettingsOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnSetOutputDeviceSettingsCallbackInternal onSetOutputDeviceSettingsCallbackInternal = OnSetOutputDeviceSettingsCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onSetOutputDeviceSettingsCallbackInternal);
		Bindings.EOS_RTCAudio_SetOutputDeviceSettings(base.InnerHandle, ref options2, clientDataAddress, onSetOutputDeviceSettingsCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public Result UnregisterPlatformAudioUser(ref UnregisterPlatformAudioUserOptions options)
	{
		UnregisterPlatformAudioUserOptionsInternal options2 = default(UnregisterPlatformAudioUserOptionsInternal);
		options2.Set(ref options);
		Result result = Bindings.EOS_RTCAudio_UnregisterPlatformAudioUser(base.InnerHandle, ref options2);
		Helper.Dispose(ref options2);
		return result;
	}

	public void UnregisterPlatformUser(ref UnregisterPlatformUserOptions options, object clientData, OnUnregisterPlatformUserCallback completionDelegate)
	{
		UnregisterPlatformUserOptionsInternal options2 = default(UnregisterPlatformUserOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUnregisterPlatformUserCallbackInternal onUnregisterPlatformUserCallbackInternal = OnUnregisterPlatformUserCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUnregisterPlatformUserCallbackInternal);
		Bindings.EOS_RTCAudio_UnregisterPlatformUser(base.InnerHandle, ref options2, clientDataAddress, onUnregisterPlatformUserCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateParticipantVolume(ref UpdateParticipantVolumeOptions options, object clientData, OnUpdateParticipantVolumeCallback completionDelegate)
	{
		UpdateParticipantVolumeOptionsInternal options2 = default(UpdateParticipantVolumeOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateParticipantVolumeCallbackInternal onUpdateParticipantVolumeCallbackInternal = OnUpdateParticipantVolumeCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateParticipantVolumeCallbackInternal);
		Bindings.EOS_RTCAudio_UpdateParticipantVolume(base.InnerHandle, ref options2, clientDataAddress, onUpdateParticipantVolumeCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateReceiving(ref UpdateReceivingOptions options, object clientData, OnUpdateReceivingCallback completionDelegate)
	{
		UpdateReceivingOptionsInternal options2 = default(UpdateReceivingOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateReceivingCallbackInternal onUpdateReceivingCallbackInternal = OnUpdateReceivingCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateReceivingCallbackInternal);
		Bindings.EOS_RTCAudio_UpdateReceiving(base.InnerHandle, ref options2, clientDataAddress, onUpdateReceivingCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateReceivingVolume(ref UpdateReceivingVolumeOptions options, object clientData, OnUpdateReceivingVolumeCallback completionDelegate)
	{
		UpdateReceivingVolumeOptionsInternal options2 = default(UpdateReceivingVolumeOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateReceivingVolumeCallbackInternal onUpdateReceivingVolumeCallbackInternal = OnUpdateReceivingVolumeCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateReceivingVolumeCallbackInternal);
		Bindings.EOS_RTCAudio_UpdateReceivingVolume(base.InnerHandle, ref options2, clientDataAddress, onUpdateReceivingVolumeCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateSending(ref UpdateSendingOptions options, object clientData, OnUpdateSendingCallback completionDelegate)
	{
		UpdateSendingOptionsInternal options2 = default(UpdateSendingOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateSendingCallbackInternal onUpdateSendingCallbackInternal = OnUpdateSendingCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateSendingCallbackInternal);
		Bindings.EOS_RTCAudio_UpdateSending(base.InnerHandle, ref options2, clientDataAddress, onUpdateSendingCallbackInternal);
		Helper.Dispose(ref options2);
	}

	public void UpdateSendingVolume(ref UpdateSendingVolumeOptions options, object clientData, OnUpdateSendingVolumeCallback completionDelegate)
	{
		UpdateSendingVolumeOptionsInternal options2 = default(UpdateSendingVolumeOptionsInternal);
		options2.Set(ref options);
		IntPtr clientDataAddress = IntPtr.Zero;
		OnUpdateSendingVolumeCallbackInternal onUpdateSendingVolumeCallbackInternal = OnUpdateSendingVolumeCallbackInternalImplementation;
		Helper.AddCallback(out clientDataAddress, clientData, completionDelegate, onUpdateSendingVolumeCallbackInternal);
		Bindings.EOS_RTCAudio_UpdateSendingVolume(base.InnerHandle, ref options2, clientDataAddress, onUpdateSendingVolumeCallbackInternal);
		Helper.Dispose(ref options2);
	}

	[MonoPInvokeCallback(typeof(OnAudioBeforeRenderCallbackInternal))]
	internal static void OnAudioBeforeRenderCallbackInternalImplementation(ref AudioBeforeRenderCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AudioBeforeRenderCallbackInfoInternal, OnAudioBeforeRenderCallback, AudioBeforeRenderCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnAudioBeforeSendCallbackInternal))]
	internal static void OnAudioBeforeSendCallbackInternalImplementation(ref AudioBeforeSendCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AudioBeforeSendCallbackInfoInternal, OnAudioBeforeSendCallback, AudioBeforeSendCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnAudioDevicesChangedCallbackInternal))]
	internal static void OnAudioDevicesChangedCallbackInternalImplementation(ref AudioDevicesChangedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AudioDevicesChangedCallbackInfoInternal, OnAudioDevicesChangedCallback, AudioDevicesChangedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnAudioInputStateCallbackInternal))]
	internal static void OnAudioInputStateCallbackInternalImplementation(ref AudioInputStateCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AudioInputStateCallbackInfoInternal, OnAudioInputStateCallback, AudioInputStateCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnAudioOutputStateCallbackInternal))]
	internal static void OnAudioOutputStateCallbackInternalImplementation(ref AudioOutputStateCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<AudioOutputStateCallbackInfoInternal, OnAudioOutputStateCallback, AudioOutputStateCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnParticipantUpdatedCallbackInternal))]
	internal static void OnParticipantUpdatedCallbackInternalImplementation(ref ParticipantUpdatedCallbackInfoInternal data)
	{
		if (Helper.TryGetCallback<ParticipantUpdatedCallbackInfoInternal, OnParticipantUpdatedCallback, ParticipantUpdatedCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryInputDevicesInformationCallbackInternal))]
	internal static void OnQueryInputDevicesInformationCallbackInternalImplementation(ref OnQueryInputDevicesInformationCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryInputDevicesInformationCallbackInfoInternal, OnQueryInputDevicesInformationCallback, OnQueryInputDevicesInformationCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnQueryOutputDevicesInformationCallbackInternal))]
	internal static void OnQueryOutputDevicesInformationCallbackInternalImplementation(ref OnQueryOutputDevicesInformationCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnQueryOutputDevicesInformationCallbackInfoInternal, OnQueryOutputDevicesInformationCallback, OnQueryOutputDevicesInformationCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnRegisterPlatformUserCallbackInternal))]
	internal static void OnRegisterPlatformUserCallbackInternalImplementation(ref OnRegisterPlatformUserCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnRegisterPlatformUserCallbackInfoInternal, OnRegisterPlatformUserCallback, OnRegisterPlatformUserCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSetInputDeviceSettingsCallbackInternal))]
	internal static void OnSetInputDeviceSettingsCallbackInternalImplementation(ref OnSetInputDeviceSettingsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnSetInputDeviceSettingsCallbackInfoInternal, OnSetInputDeviceSettingsCallback, OnSetInputDeviceSettingsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnSetOutputDeviceSettingsCallbackInternal))]
	internal static void OnSetOutputDeviceSettingsCallbackInternalImplementation(ref OnSetOutputDeviceSettingsCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnSetOutputDeviceSettingsCallbackInfoInternal, OnSetOutputDeviceSettingsCallback, OnSetOutputDeviceSettingsCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUnregisterPlatformUserCallbackInternal))]
	internal static void OnUnregisterPlatformUserCallbackInternalImplementation(ref OnUnregisterPlatformUserCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<OnUnregisterPlatformUserCallbackInfoInternal, OnUnregisterPlatformUserCallback, OnUnregisterPlatformUserCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateParticipantVolumeCallbackInternal))]
	internal static void OnUpdateParticipantVolumeCallbackInternalImplementation(ref UpdateParticipantVolumeCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateParticipantVolumeCallbackInfoInternal, OnUpdateParticipantVolumeCallback, UpdateParticipantVolumeCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateReceivingCallbackInternal))]
	internal static void OnUpdateReceivingCallbackInternalImplementation(ref UpdateReceivingCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateReceivingCallbackInfoInternal, OnUpdateReceivingCallback, UpdateReceivingCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateReceivingVolumeCallbackInternal))]
	internal static void OnUpdateReceivingVolumeCallbackInternalImplementation(ref UpdateReceivingVolumeCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateReceivingVolumeCallbackInfoInternal, OnUpdateReceivingVolumeCallback, UpdateReceivingVolumeCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateSendingCallbackInternal))]
	internal static void OnUpdateSendingCallbackInternalImplementation(ref UpdateSendingCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateSendingCallbackInfoInternal, OnUpdateSendingCallback, UpdateSendingCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}

	[MonoPInvokeCallback(typeof(OnUpdateSendingVolumeCallbackInternal))]
	internal static void OnUpdateSendingVolumeCallbackInternalImplementation(ref UpdateSendingVolumeCallbackInfoInternal data)
	{
		if (Helper.TryGetAndRemoveCallback<UpdateSendingVolumeCallbackInfoInternal, OnUpdateSendingVolumeCallback, UpdateSendingVolumeCallbackInfo>(ref data, out var callback, out var callbackInfo))
		{
			callback(ref callbackInfo);
		}
	}
}


public enum RTCAudioOutputStatus
{
	Idle,
	Playing,
	Failed
}


public enum RTCAudioStatus
{
	Unsupported,
	Enabled,
	Disabled,
	AdminDisabled,
	NotListeningDisabled
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct SendAudioOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public AudioBuffer? Buffer { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SendAudioOptionsInternal : ISettable<SendAudioOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_Buffer;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public AudioBuffer? Buffer
	{
		set
		{
			Helper.Set<AudioBuffer, AudioBufferInternal>(ref value, ref m_Buffer);
		}
	}

	public void Set(ref SendAudioOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Buffer = other.Buffer;
	}

	public void Set(ref SendAudioOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Buffer = other.Value.Buffer;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_Buffer);
	}
}


using Epic.OnlineServices;

public struct SetAudioInputSettingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String DeviceId { get; set; }

	public float Volume { get; set; }

	public bool PlatformAEC { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetAudioInputSettingsOptionsInternal : ISettable<SetAudioInputSettingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_DeviceId;

	private float m_Volume;

	private int m_PlatformAEC;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String DeviceId
	{
		set
		{
			Helper.Set(value, ref m_DeviceId);
		}
	}

	public float Volume
	{
		set
		{
			m_Volume = value;
		}
	}

	public bool PlatformAEC
	{
		set
		{
			Helper.Set(value, ref m_PlatformAEC);
		}
	}

	public void Set(ref SetAudioInputSettingsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		DeviceId = other.DeviceId;
		Volume = other.Volume;
		PlatformAEC = other.PlatformAEC;
	}

	public void Set(ref SetAudioInputSettingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			DeviceId = other.Value.DeviceId;
			Volume = other.Value.Volume;
			PlatformAEC = other.Value.PlatformAEC;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_DeviceId);
	}
}


using Epic.OnlineServices;

public struct SetAudioOutputSettingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String DeviceId { get; set; }

	public float Volume { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetAudioOutputSettingsOptionsInternal : ISettable<SetAudioOutputSettingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_DeviceId;

	private float m_Volume;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String DeviceId
	{
		set
		{
			Helper.Set(value, ref m_DeviceId);
		}
	}

	public float Volume
	{
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref SetAudioOutputSettingsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		DeviceId = other.DeviceId;
		Volume = other.Volume;
	}

	public void Set(ref SetAudioOutputSettingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			DeviceId = other.Value.DeviceId;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_DeviceId);
	}
}


using Epic.OnlineServices;

public struct SetInputDeviceSettingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RealDeviceId { get; set; }

	public bool PlatformAEC { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetInputDeviceSettingsOptionsInternal : ISettable<SetInputDeviceSettingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RealDeviceId;

	private int m_PlatformAEC;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RealDeviceId
	{
		set
		{
			Helper.Set(value, ref m_RealDeviceId);
		}
	}

	public bool PlatformAEC
	{
		set
		{
			Helper.Set(value, ref m_PlatformAEC);
		}
	}

	public void Set(ref SetInputDeviceSettingsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RealDeviceId = other.RealDeviceId;
		PlatformAEC = other.PlatformAEC;
	}

	public void Set(ref SetInputDeviceSettingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RealDeviceId = other.Value.RealDeviceId;
			PlatformAEC = other.Value.PlatformAEC;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RealDeviceId);
	}
}


using Epic.OnlineServices;

public struct SetOutputDeviceSettingsOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RealDeviceId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SetOutputDeviceSettingsOptionsInternal : ISettable<SetOutputDeviceSettingsOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RealDeviceId;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RealDeviceId
	{
		set
		{
			Helper.Set(value, ref m_RealDeviceId);
		}
	}

	public void Set(ref SetOutputDeviceSettingsOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RealDeviceId = other.RealDeviceId;
	}

	public void Set(ref SetOutputDeviceSettingsOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RealDeviceId = other.Value.RealDeviceId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RealDeviceId);
	}
}


using Epic.OnlineServices;

public struct UnregisterPlatformAudioUserOptions
{
	public Utf8String UserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnregisterPlatformAudioUserOptionsInternal : ISettable<UnregisterPlatformAudioUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_UserId;

	public Utf8String UserId
	{
		set
		{
			Helper.Set(value, ref m_UserId);
		}
	}

	public void Set(ref UnregisterPlatformAudioUserOptions other)
	{
		m_ApiVersion = 1;
		UserId = other.UserId;
	}

	public void Set(ref UnregisterPlatformAudioUserOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			UserId = other.Value.UserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_UserId);
	}
}


using Epic.OnlineServices;

public struct UnregisterPlatformUserOptions
{
	public Utf8String PlatformUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UnregisterPlatformUserOptionsInternal : ISettable<UnregisterPlatformUserOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_PlatformUserId;

	public Utf8String PlatformUserId
	{
		set
		{
			Helper.Set(value, ref m_PlatformUserId);
		}
	}

	public void Set(ref UnregisterPlatformUserOptions other)
	{
		m_ApiVersion = 1;
		PlatformUserId = other.PlatformUserId;
	}

	public void Set(ref UnregisterPlatformUserOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			PlatformUserId = other.Value.PlatformUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_PlatformUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct UpdateParticipantVolumeCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public float Volume { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateParticipantVolumeCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Volume = other.Volume;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateParticipantVolumeCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateParticipantVolumeCallbackInfo>, ISettable<UpdateParticipantVolumeCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private float m_Volume;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public float Volume
	{
		get
		{
			return m_Volume;
		}
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref UpdateParticipantVolumeCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Volume = other.Volume;
	}

	public void Set(ref UpdateParticipantVolumeCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out UpdateParticipantVolumeCallbackInfo output)
	{
		output = default(UpdateParticipantVolumeCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateParticipantVolumeOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public float Volume { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateParticipantVolumeOptionsInternal : ISettable<UpdateParticipantVolumeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private float m_Volume;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public float Volume
	{
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref UpdateParticipantVolumeOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		Volume = other.Volume;
	}

	public void Set(ref UpdateParticipantVolumeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct UpdateReceivingCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool AudioEnabled { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateReceivingCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		AudioEnabled = other.AudioEnabled;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateReceivingCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateReceivingCallbackInfo>, ISettable<UpdateReceivingCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_AudioEnabled;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		get
		{
			Helper.Get(m_ParticipantId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool AudioEnabled
	{
		get
		{
			Helper.Get(m_AudioEnabled, out var to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_AudioEnabled);
		}
	}

	public void Set(ref UpdateReceivingCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		AudioEnabled = other.AudioEnabled;
	}

	public void Set(ref UpdateReceivingCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			AudioEnabled = other.Value.AudioEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}

	public void Get(out UpdateReceivingCallbackInfo output)
	{
		output = default(UpdateReceivingCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateReceivingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId ParticipantId { get; set; }

	public bool AudioEnabled { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateReceivingOptionsInternal : ISettable<UpdateReceivingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_ParticipantId;

	private int m_AudioEnabled;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId ParticipantId
	{
		set
		{
			Helper.Set(value, ref m_ParticipantId);
		}
	}

	public bool AudioEnabled
	{
		set
		{
			Helper.Set(value, ref m_AudioEnabled);
		}
	}

	public void Set(ref UpdateReceivingOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		ParticipantId = other.ParticipantId;
		AudioEnabled = other.AudioEnabled;
	}

	public void Set(ref UpdateReceivingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			ParticipantId = other.Value.ParticipantId;
			AudioEnabled = other.Value.AudioEnabled;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ParticipantId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct UpdateReceivingVolumeCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public float Volume { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateReceivingVolumeCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Volume = other.Volume;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateReceivingVolumeCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateReceivingVolumeCallbackInfo>, ISettable<UpdateReceivingVolumeCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private float m_Volume;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public float Volume
	{
		get
		{
			return m_Volume;
		}
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref UpdateReceivingVolumeCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Volume = other.Volume;
	}

	public void Set(ref UpdateReceivingVolumeCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out UpdateReceivingVolumeCallbackInfo output)
	{
		output = default(UpdateReceivingVolumeCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateReceivingVolumeOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public float Volume { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateReceivingVolumeOptionsInternal : ISettable<UpdateReceivingVolumeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private float m_Volume;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public float Volume
	{
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref UpdateReceivingVolumeOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Volume = other.Volume;
	}

	public void Set(ref UpdateReceivingVolumeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct UpdateSendingCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public RTCAudioStatus AudioStatus { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateSendingCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		AudioStatus = other.AudioStatus;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSendingCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateSendingCallbackInfo>, ISettable<UpdateSendingCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private RTCAudioStatus m_AudioStatus;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public RTCAudioStatus AudioStatus
	{
		get
		{
			return m_AudioStatus;
		}
		set
		{
			m_AudioStatus = value;
		}
	}

	public void Set(ref UpdateSendingCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		AudioStatus = other.AudioStatus;
	}

	public void Set(ref UpdateSendingCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			AudioStatus = other.Value.AudioStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out UpdateSendingCallbackInfo output)
	{
		output = default(UpdateSendingCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct UpdateSendingOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public RTCAudioStatus AudioStatus { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSendingOptionsInternal : ISettable<UpdateSendingOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private RTCAudioStatus m_AudioStatus;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public RTCAudioStatus AudioStatus
	{
		set
		{
			m_AudioStatus = value;
		}
	}

	public void Set(ref UpdateSendingOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		AudioStatus = other.AudioStatus;
	}

	public void Set(ref UpdateSendingOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			AudioStatus = other.Value.AudioStatus;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

public struct UpdateSendingVolumeCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public float Volume { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref UpdateSendingVolumeCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Volume = other.Volume;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSendingVolumeCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateSendingVolumeCallbackInfo>, ISettable<UpdateSendingVolumeCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private float m_Volume;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public ProductUserId LocalUserId
	{
		get
		{
			Helper.Get(m_LocalUserId, out ProductUserId to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public float Volume
	{
		get
		{
			return m_Volume;
		}
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref UpdateSendingVolumeCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Volume = other.Volume;
	}

	public void Set(ref UpdateSendingVolumeCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}

	public void Get(out UpdateSendingVolumeCallbackInfo output)
	{
		output = default(UpdateSendingVolumeCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct UpdateSendingVolumeOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public float Volume { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAudio;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct UpdateSendingVolumeOptionsInternal : ISettable<UpdateSendingVolumeOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private float m_Volume;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public float Volume
	{
		set
		{
			m_Volume = value;
		}
	}

	public void Set(ref UpdateSendingVolumeOptions other)
	{
		m_ApiVersion = 1;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		Volume = other.Volume;
	}

	public void Set(ref UpdateSendingVolumeOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			Volume = other.Value.Volume;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
	}
}


public struct CopyUserTokenByIndexOptions
{
	public uint UserTokenIndex { get; set; }

	public uint QueryId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyUserTokenByIndexOptionsInternal : ISettable<CopyUserTokenByIndexOptions>, IDisposable
{
	private int m_ApiVersion;

	private uint m_UserTokenIndex;

	private uint m_QueryId;

	public uint UserTokenIndex
	{
		set
		{
			m_UserTokenIndex = value;
		}
	}

	public uint QueryId
	{
		set
		{
			m_QueryId = value;
		}
	}

	public void Set(ref CopyUserTokenByIndexOptions other)
	{
		m_ApiVersion = 2;
		UserTokenIndex = other.UserTokenIndex;
		QueryId = other.QueryId;
	}

	public void Set(ref CopyUserTokenByIndexOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			UserTokenIndex = other.Value.UserTokenIndex;
			QueryId = other.Value.QueryId;
		}
	}

	public void Dispose()
	{
	}
}


using Epic.OnlineServices;

public struct CopyUserTokenByUserIdOptions
{
	public ProductUserId TargetUserId { get; set; }

	public uint QueryId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct CopyUserTokenByUserIdOptionsInternal : ISettable<CopyUserTokenByUserIdOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_TargetUserId;

	private uint m_QueryId;

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public uint QueryId
	{
		set
		{
			m_QueryId = value;
		}
	}

	public void Set(ref CopyUserTokenByUserIdOptions other)
	{
		m_ApiVersion = 2;
		TargetUserId = other.TargetUserId;
		QueryId = other.QueryId;
	}

	public void Set(ref CopyUserTokenByUserIdOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			TargetUserId = other.Value.TargetUserId;
			QueryId = other.Value.QueryId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

public struct KickCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref KickCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct KickCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<KickCompleteCallbackInfo>, ISettable<KickCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public void Set(ref KickCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
	}

	public void Set(ref KickCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
	}

	public void Get(out KickCompleteCallbackInfo output)
	{
		output = default(KickCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct KickOptions
{
	public Utf8String RoomName { get; set; }

	public ProductUserId TargetUserId { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct KickOptionsInternal : ISettable<KickOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_RoomName;

	private IntPtr m_TargetUserId;

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId TargetUserId
	{
		set
		{
			Helper.Set(value, ref m_TargetUserId);
		}
	}

	public void Set(ref KickOptions other)
	{
		m_ApiVersion = 1;
		RoomName = other.RoomName;
		TargetUserId = other.TargetUserId;
	}

	public void Set(ref KickOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 1;
			RoomName = other.Value.RoomName;
			TargetUserId = other.Value.TargetUserId;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_TargetUserId);
	}
}


using Epic.OnlineServices.RTCAdmin;

public delegate void OnKickCompleteCallback(ref KickCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAdmin;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnKickCompleteCallbackInternal(ref KickCompleteCallbackInfoInternal data);


using Epic.OnlineServices.RTCAdmin;

public delegate void OnQueryJoinRoomTokenCompleteCallback(ref QueryJoinRoomTokenCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAdmin;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnQueryJoinRoomTokenCompleteCallbackInternal(ref QueryJoinRoomTokenCompleteCallbackInfoInternal data);


using Epic.OnlineServices.RTCAdmin;

public delegate void OnSetParticipantHardMuteCompleteCallback(ref SetParticipantHardMuteCompleteCallbackInfo data);


using System.Runtime.InteropServices;
using Epic.OnlineServices.RTCAdmin;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate void OnSetParticipantHardMuteCompleteCallbackInternal(ref SetParticipantHardMuteCompleteCallbackInfoInternal data);


using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

public struct QueryJoinRoomTokenCompleteCallbackInfo : ICallbackInfo
{
	public Result ResultCode { get; set; }

	public object ClientData { get; set; }

	public Utf8String RoomName { get; set; }

	public Utf8String ClientBaseUrl { get; set; }

	public uint QueryId { get; set; }

	public uint TokenCount { get; set; }

	public Result? GetResultCode()
	{
		return ResultCode;
	}

	internal void Set(ref QueryJoinRoomTokenCompleteCallbackInfoInternal other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RoomName = other.RoomName;
		ClientBaseUrl = other.ClientBaseUrl;
		QueryId = other.QueryId;
		TokenCount = other.TokenCount;
	}
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryJoinRoomTokenCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryJoinRoomTokenCompleteCallbackInfo>, ISettable<QueryJoinRoomTokenCompleteCallbackInfo>, IDisposable
{
	private Result m_ResultCode;

	private IntPtr m_ClientData;

	private IntPtr m_RoomName;

	private IntPtr m_ClientBaseUrl;

	private uint m_QueryId;

	private uint m_TokenCount;

	public Result ResultCode
	{
		get
		{
			return m_ResultCode;
		}
		set
		{
			m_ResultCode = value;
		}
	}

	public object ClientData
	{
		get
		{
			Helper.Get(m_ClientData, out object to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientData);
		}
	}

	public IntPtr ClientDataAddress => m_ClientData;

	public Utf8String RoomName
	{
		get
		{
			Helper.Get(m_RoomName, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public Utf8String ClientBaseUrl
	{
		get
		{
			Helper.Get(m_ClientBaseUrl, out Utf8String to);
			return to;
		}
		set
		{
			Helper.Set(value, ref m_ClientBaseUrl);
		}
	}

	public uint QueryId
	{
		get
		{
			return m_QueryId;
		}
		set
		{
			m_QueryId = value;
		}
	}

	public uint TokenCount
	{
		get
		{
			return m_TokenCount;
		}
		set
		{
			m_TokenCount = value;
		}
	}

	public void Set(ref QueryJoinRoomTokenCompleteCallbackInfo other)
	{
		ResultCode = other.ResultCode;
		ClientData = other.ClientData;
		RoomName = other.RoomName;
		ClientBaseUrl = other.ClientBaseUrl;
		QueryId = other.QueryId;
		TokenCount = other.TokenCount;
	}

	public void Set(ref QueryJoinRoomTokenCompleteCallbackInfo? other)
	{
		if (other.HasValue)
		{
			ResultCode = other.Value.ResultCode;
			ClientData = other.Value.ClientData;
			RoomName = other.Value.RoomName;
			ClientBaseUrl = other.Value.ClientBaseUrl;
			QueryId = other.Value.QueryId;
			TokenCount = other.Value.TokenCount;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_ClientData);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_ClientBaseUrl);
	}

	public void Get(out QueryJoinRoomTokenCompleteCallbackInfo output)
	{
		output = default(QueryJoinRoomTokenCompleteCallbackInfo);
		output.Set(ref this);
	}
}


using Epic.OnlineServices;

public struct QueryJoinRoomTokenOptions
{
	public ProductUserId LocalUserId { get; set; }

	public Utf8String RoomName { get; set; }

	public ProductUserId[] TargetUserIds { get; set; }

	public Utf8String TargetUserIpAddresses { get; set; }
}


using System;
using System.Runtime.InteropServices;
using Epic.OnlineServices;
using Epic.OnlineServices.RTCAdmin;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct QueryJoinRoomTokenOptionsInternal : ISettable<QueryJoinRoomTokenOptions>, IDisposable
{
	private int m_ApiVersion;

	private IntPtr m_LocalUserId;

	private IntPtr m_RoomName;

	private IntPtr m_TargetUserIds;

	private uint m_TargetUserIdsCount;

	private IntPtr m_TargetUserIpAddresses;

	public ProductUserId LocalUserId
	{
		set
		{
			Helper.Set(value, ref m_LocalUserId);
		}
	}

	public Utf8String RoomName
	{
		set
		{
			Helper.Set(value, ref m_RoomName);
		}
	}

	public ProductUserId[] TargetUserIds
	{
		set
		{
			Helper.Set(value, ref m_TargetUserIds, out m_TargetUserIdsCount);
		}
	}

	public Utf8String TargetUserIpAddresses
	{
		set
		{
			Helper.Set(value, ref m_TargetUserIpAddresses);
		}
	}

	public void Set(ref QueryJoinRoomTokenOptions other)
	{
		m_ApiVersion = 2;
		LocalUserId = other.LocalUserId;
		RoomName = other.RoomName;
		TargetUserIds = other.TargetUserIds;
		TargetUserIpAddresses = other.TargetUserIpAddresses;
	}

	public void Set(ref QueryJoinRoomTokenOptions? other)
	{
		if (other.HasValue)
		{
			m_ApiVersion = 2;
			LocalUserId = other.Value.LocalUserId;
			RoomName = other.Value.RoomName;
			TargetUserIds = other.Value.TargetUserIds;
			TargetUserIpAddresses = other.Value.TargetUserIpAddresses;
		}
	}

	public void Dispose()
	{
		Helper.Dispose(ref m_LocalUserId);
		Helper.Dispose(ref m_RoomName);
		Helper.Dispose(ref m_TargetUserIds);
		Helper.Dispose(ref m_TargetUserIpAddresses);
	}
}


